-- @path CICD=/d.fe.up.pt.cicd.metamodel/model/CICD.ecore
-- @path CircleCI=/d.fe.up.pt.cicd.circleci.metamodel/model/CircleCI.ecore

module cicd2circleci;
create OUT : CircleCI from IN : CICD;

rule Pipeline2Pipeline {
	from
		input : CICD!Pipeline
	to
		output : CircleCI!Pipeline(
			jobs <- thisModule.getAllJobs(input.jobStreams)->collect(job | job.job2JobHelper()),
			orbs <- 
				thisModule.getAllJobs(input.jobStreams)
					->collect(job | job.steps)
					->flatten()
					->collect(step | step.getChildren())
					->flatten()
					->select(step | step.oclIsTypeOf(CICD!Plugin))
					->select(step | step.checkIfOrb())
					->collect(step | thisModule.Plugin2OrbReference(step.getReference(), step)),
			parameters <- input.inputs,
			workflows <- Sequence{thisModule.Pipeline2Workflow(input)}
		)
}

helper context CICD!Step def : getChildren() : Sequence(CICD!Step) =
	Sequence{};
	
helper context CICD!NonConditionalStep def : getChildren() : Sequence(CICD!Step) =
	Sequence{self};
	
helper context CICD!ConditionalStep def : getChildren() : Sequence(CICD!Step) =
	Sequence{self}->union(self.thenRun->collect(step | step.getChildren())->flatten())->union(self.elseRun->collect(step | step.getChildren())->flatten());

lazy rule Pipeline2Workflow {
	from
		input : CICD!Pipeline
	using {
		conditions : Sequence(CICD!Expression) = input.jobStreams->collect(jobStream | jobStream.ifCondition)->select(ifCondition | not ifCondition.oclIsUndefined());
	}
	to
		output : CircleCI!Workflow(
			condition <-
				if conditions->size() = 1 then
					conditions->first().expression2LogicHelper()
				else if conditions->size() > 1 then
					thisModule.ConjunctExpressions(conditions)
				else
					OclUndefined
				endif
				endif,
			isWhen <-
				if conditions->notEmpty() then
					true
				else
					OclUndefined
				endif,
			jobs <- thisModule.getAllJobs(input.jobStreams)->collect(job | thisModule.Job2WorkflowDefinedJobConfiguration(job)),
			name <- input.name,
			triggers <- input.triggers->select(trigger | trigger.oclIsTypeOf(CICD!ScheduledTrigger))
		)
}

unique lazy rule Job2WorkflowDefinedJobConfiguration {
	from
		input : CICD!Job
	using {
		job : CircleCI!Job = input.job2JobHelper();
	}
	to
		output : CircleCI!WorkflowDefinedJobConfiguration(
			job <- job,
			matrix <- input.matrix,
			name <-
				if not job.oclIsUndefined() then
					job.name
				else
					OclUndefined
				endif,
			requires <- input.previous->collect(j | thisModule.Job2WorkflowDefinedJobConfiguration(j))
		)
}

abstract rule Trigger2Trigger {
	from
		input : CICD!Trigger
	to
		output : CircleCI!Trigger(
			branches <- input.branchGlobs->collect(glob | thisModule.String2StringLiteral(glob))
		)
}

rule ScheduledTrigger2ScheduleTrigger extends Trigger2Trigger {
	from
		input : CICD!ScheduledTrigger
	to
		output : CircleCI!ScheduleTrigger(
			cron <- thisModule.joinStrings(input.crons, '\n')
		)
}

rule Matrix2Matrix {
	from
		input : CICD!Matrix
	to
		output : CircleCI!Matrix(
			parameters <- input.axes,
			excludes <- input.excludes
		)
}

rule MatrixAxis2MatrixParameter {
	from
		input : CICD!MatrixAxis
	to
		output : CircleCI!MatrixParameter(
			cells <- input.cells->collect(cell | cell.expression2ExpressionHelper()),
			name <- input.name
		)
}

rule MatrixCombination2MatrixCombination {
	from
		input : CICD!MatrixCombination
	to
		output : CircleCI!MatrixCombination(
			entries <- input.combinationEntries
		)
}

unique lazy rule ScriptJob2Job {
	from
		input : CICD!ScriptJob
	to
		output : CircleCI!Job(
			environmentVariables <- input.environmentVariables,
			executor <- input.job2ExecutorHelper(),
			name <- input.id,
			parameters <- input.inputs,
			steps <- input.steps->collect(step | thisModule.step2StepHelper(step))->flatten()
		)
}

lazy rule ConditionalStep2WhenStep {
	from
		input : CICD!ConditionalStep
	to
		output : CircleCI!WhenStep(
			condition <-
				if not input.ifCondition.oclIsUndefined() then
					input.ifCondition.expression2LogicHelper()
				else
					OclUndefined
				endif,
			steps <- input.thenRun->collect(step | thisModule.step2StepHelper(step))->flatten()
		)
}

lazy rule ConditionalStep2UnlessStep {
	from
		input : CICD!ConditionalStep
	to
		output : CircleCI!UnlessStep(
			condition <-
				if not input.ifCondition.oclIsUndefined() then
					input.ifCondition.expression2LogicHelper()
				else
					OclUndefined
				endif,
			steps <- input.elseRun->collect(step | thisModule.step2StepHelper(step))->flatten()
		)
}

lazy rule Command2RunStep {
	from
		input : CICD!Command
	to
		output : CircleCI!RunStep(
			command <-
				if not input.program.oclIsUndefined() then
					input.program.expression2ExpressionHelper()
				else
					OclUndefined
				endif,
			environmentVariables <- input.environmentVariables,
			name <-
				if not input.name.oclIsUndefined() then
					thisModule.String2StringLiteral(input.name)
				else
					OclUndefined
				endif,
			workingDirectory <-
				if not input.workingDirectory.oclIsUndefined() then
					input.workingDirectory.expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

lazy rule Plugin2OrbReferenceStep {
	from
		input : CICD!Plugin
	using {
		reference : String = input.getReference();
	}
	to
		output : CircleCI!OrbReferenceStep(
			arguments <- input.kwargs,
			jobName <- input.pluginName.split('/')->last(),
			orb <- thisModule.Plugin2OrbReference(reference, input)
		)
}

lazy rule Checkout2CheckoutStep {
	from
		input : CICD!Checkout
	to
		output : CircleCI!CheckoutStep(
			path <- 
				if not input.path.oclIsUndefined() then 
					input.path.expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

lazy rule Cache2SaveCacheStep {
	from
		input : CICD!Cache
	to
		output : CircleCI!SaveCacheStep(
			key <-
				if input.keys->notEmpty() then
					input.keys->first().expression2ExpressionHelper()
				else
					OclUndefined
				endif,
			name <-
				if not input.cacheName.oclIsUndefined() then
					input.cacheName.expression2ExpressionHelper()
				else
					OclUndefined
				endif,
			paths <- input.paths->collect(path | path.expression2ExpressionHelper())
		)
}

lazy rule Cache2RestoreCacheStep {
	from
		input : CICD!Cache
	to
		output : CircleCI!RestoreCacheStep(
			keys <- input.keys->collect(key | key.expression2ExpressionHelper()),
			name <-
				if not input.cacheName.oclIsUndefined() then
					input.cacheName.expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

lazy rule Artifact2StoreArtifactsStep {
	from
		input : CICD!Artifact
	to
		output : CircleCI!StoreArtifactsStep(
			path <-
				if input.includePaths->notEmpty() then
					input.includePaths->first().expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

lazy rule Plugin2SetupRemoteDockerStep {
	from
		input : CICD!Plugin
	using {
		dockerLayerCaching : CICD!Expression = thisModule.getVariable(input.kwargs, 'docker_layer_caching');
	}
	to
		output : CircleCI!SetupRemoteDockerStep(
			dockerLayerCaching <-
				if not dockerLayerCaching.oclIsUndefined() then
					dockerLayerCaching.expression2ExpressionHelper()
				else
					OclUndefined
				endif,
			version <- input.version
		)
}

lazy rule Plugin2StoreTestResultsStep {
	from
		input : CICD!Plugin
	using {
		path : CICD!Expression = thisModule.getVariable(input.kwargs, 'path');
	}
	to
		output : CircleCI!StoreTestResultsStep(
			path <-
				if not path.oclIsUndefined() then
					path.expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

lazy rule Plugin2PersistToWorkspaceStep {
	from
		input : CICD!Plugin
	using {
		paths : CICD!Expression = thisModule.getVariable(input.kwargs, 'paths');
		root : CICD!Expression = thisModule.getVariable(input.kwargs, 'root');
	}
	to
		output : CircleCI!PersistToWorkspaceStep(
			paths <-
				if not paths.oclIsUndefined() then
					paths.expression2ExpressionHelper()
				else
					OclUndefined
				endif,
			root <-
				if not root.oclIsUndefined() then
					root.expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

lazy rule Plugin2AttachToWorkspaceStep {
	from
		input : CICD!Plugin
	using {
		at : CICD!Expression = thisModule.getVariable(input.kwargs, 'at');
	}
	to
		output : CircleCI!AttachWorkspaceStep(
			at <-
				if not at.oclIsUndefined() then
					at.expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

lazy rule Plugin2AddSSHKeysStep {
	from
		input : CICD!Plugin
	using {
		fingerprints : CICD!Expression = thisModule.getVariable(input.kwargs, 'fingerprints');
	}
	to
		output : CircleCI!AddSSHKeysStep(
			fingerprints <-
				if fingerprints.oclIsTypeOf(CICD!Concat) then
					fingerprints.expressions->collect(expression | expression.expression2ExpressionHelper())
				else if not fingerprints.oclIsUndefined() then
					fingerprints.expression2ExpressionHelper()
				else
					OclUndefined
				endif
				endif
		)
}

unique lazy rule Plugin2OrbReference {
	from
		reference : String,
		input : CICD!Plugin
	to
		output : CircleCI!OrbReference(
			name <- CircleCI!OrbReference.allInstances()->indexOf(output).toString(),
			reference <- reference
		)
}

rule Input2Parameter {
	from
		input : CICD!Input
	to
		output : CircleCI!Parameter(
			default <- 
				if not input.defaultValue.oclIsUndefined() then 
					input.defaultValue.expression2ExpressionHelper() 
				else 
					OclUndefined 
				endif,
			description <-
				if not input.description.oclIsUndefined() then
					input.description.expression2String()
				else
					OclUndefined
				endif,
			enumValues <- input.choices,
			name <- input.id,
			type <-
				if input.type = #STRING then
					#string
				else if input.type = #NUMBER then
					#integer
				else if input.type = #BOOLEAN then
					#boolean
				else if input.type = #CHOICE then
					#enum
				else
					#string
				endif
				endif
				endif
				endif
		)
}

unique lazy rule Job2DockerExecutor {
	from
		input : CICD!Job
	to
		output : CircleCI!DockerExecutor(
			containers <- Sequence{
					if input.agent.oclIsTypeOf(CICD!LinuxAgent) then
						if not input.agent.container.oclIsUndefined() then
							input.agent.container
						else
							thisModule.CreateNullDockerContainer(input.agent)
						endif
					else
						thisModule.CreateNullDockerContainer(input.agent)
					endif
				}->union(input.services)->collect(container | 
				if not container.oclIsTypeOf(CircleCI!NullDockerContainer) then
					thisModule.DockerContainer2DockerContainer(container)
				else
					container
				endif
			),
			environmentVariables <- input.environmentVariables,
			shell <- 
				if input.shell = #NULL then
					OclUndefined
				else
					thisModule.String2StringLiteral(input.shell.toString())
				endif,
			workingDirectory <- 
				if not input.workingDirectory.oclIsUndefined() then
					thisModule.String2StringLiteral(input.workingDirectory)
				else
					OclUndefined
				endif
		)
}

lazy rule CreateNullDockerContainer {
	from
		input : CICD!Agent
	to
		output : CircleCI!NullDockerContainer (
			agent <-
				if input.oclIsTypeOf(CICD!WindowsAgent) then
					#WINDOWS
				else if input.oclIsTypeOf(CICD!MacOSAgent) then
					#MACOS
				else if input.oclIsTypeOf(CICD!LinuxAgent) then
					#LINUX
				else
					#CUSTOM
				endif
				endif
				endif,
			image <-
				if input.oclIsKindOf(CICD!PresetAgent) then
					input.image.expression2ExpressionHelper()
				else if input.oclIsTypeOf(CICD!CustomAgent) then
					thisModule.getCICDProperty(input.agent.labels, 'MACHINE_IMAGE')
				else
					OclUndefined
				endif
				endif
		)
}

unique lazy rule Job2MacOSExecutor {
	from
		input : CICD!Job
	to
		output : CircleCI!MacOSExecutor (
			xcode <- 
				if not input.agent.xcode.oclIsUndefined() then
					input.agent.xcode.expression2ExpressionHelper()
				else
					thisModule.String2StringLiteral('latest')
				endif,
			environmentVariables <- input.environmentVariables,
			shell <- 
				if input.shell = #NULL then
					OclUndefined
				else
					thisModule.String2StringLiteral(input.shell.toString())
				endif,
			workingDirectory <- 
				if not input.workingDirectory.oclIsUndefined() then
					thisModule.String2StringLiteral(input.workingDirectory)
				else
					OclUndefined
				endif
			
		)
}

unique lazy rule Job2MachineExecutor {
	from
		input : CICD!Job
	to
		output : CircleCI!MachineExecutor(
			image <- 
				if input.agent.oclIsKindOf(CICD!PresetAgent) then
					input.agent.image.expression2ExpressionHelper()
				else
					thisModule.getCICDProperty(input.agent.labels, 'MACHINE_IMAGE')
				endif,
			environmentVariables <- input.environmentVariables,
			shell <- 
				if input.shell = #NULL then
					OclUndefined
				else
					thisModule.String2StringLiteral(input.shell.toString())
				endif,
			workingDirectory <- 
				if not input.workingDirectory.oclIsUndefined() then
					thisModule.String2StringLiteral(input.workingDirectory)
				else
					OclUndefined
				endif
		)
}

helper def : getCICDProperty(labels : Sequence(CICD!Expression), name : String) : CircleCI!Expression =
	if labels.oclIsUndefined() or labels->isEmpty() then
		OclUndefined
	else if labels->first().expression2String().startsWith('%%__CICD__' + name + '#%!!__#%!!') then 
		if labels->first().oclIsTypeOf(CICD!Concat) then
			let concat : CICD!Concat = labels->first()
			in
			if concat.expressions->size() = 2 then
				concat.expressions->last()
			else
				thisModule.CreateConcat(concat.expressions->excluding(concat.expressions->first()))
			endif
		else if labels->first().oclIsTypeOf(CICD!StringLiteral) then
			thisModule.String2StringLiteral(labels->first().expression2String().split('#%!!__#%!!')->last())
		else
			OclUndefined
		endif
		endif
	else 
		thisModule.getCICDProperty(labels->excluding(labels->first()), name)
	endif
	endif;

lazy rule DockerContainer2DockerContainer {
	from
		input : CICD!DockerContainer
	to
		output : CircleCI!DockerContainer(
			environmentVariables <- input.environmentVariables,
			image <-
				if not input.image.oclIsUndefined() then
					input.image.expression2ExpressionHelper()
				else
					OclUndefined
				endif,
			name <-
				if not input.label.oclIsUndefined() then
					thisModule.String2StringLiteral(input.label)
				else
					OclUndefined
				endif,
			password <- input.registryPassword,
			username <- input.registryUsername
		)
}

rule Assignment2VariableAssignment {
	from
		input : CICD!Assignment
	to
		output : CircleCI!VariableAssignment(
			key <- input.key,
			value <-
				if not input.value.oclIsUndefined() then
					input.value.expression2ExpressionHelper()
				else
					OclUndefined
				endif
		)
}

rule VariableDeclaration2VariableDeclaration {
	from
		input : CICD!VariableDeclaration
	to
		output : CircleCI!VariableDeclaration(
			name <- input.name
		)
}

lazy rule ConjunctExpressions {
	from
		input : Sequence(CICD!Expression)
	to
		output : CircleCI!And(
			operands <- input->collect(expression | expression.expression2LogicHelper())
		)
}

lazy rule And2And {
	from
		input : CICD!And
	to
		output : CircleCI!And(
			operands <- Sequence{input.lhs, input.rhs}->collect(expression | expression.expression2LogicHelper())
		)
}

lazy rule Or2Or {
	from
		input : CICD!Or
	to
		output : CircleCI!Or(
			operands <- Sequence{input.lhs, input.rhs}->collect(expression | expression.expression2LogicHelper())
		)
}

lazy rule EqualsEqualityOp2Equals {
	from
		input : CICD!EqualityOp
	to
		output : CircleCI!Equals(
			operands <- Sequence{input.lhs, input.rhs}->collect(expression | expression.expression2LogicHelper())
		)
}

lazy rule NotEqualsEqualityOp2Not {
	from
		input : CICD!EqualityOp
	to
		output : CircleCI!Not(
			operand <- thisModule.EqualsEqualityOp2Equals(input)
		)
}

lazy rule Concat2Concat {
	from
		input : CICD!Concat
	to
		output : CircleCI!Concat(
			expressions <- input.expressions->collect(expression | expression.expression2ExpressionHelper())
		)
}

lazy rule StringLiteral2StringLiteral {
	from
		input : CICD!StringLiteral
	to
		output : CircleCI!StringLiteral(
			value <- input.value
		)
}

lazy rule IntegerLiteral2IntegerLiteral {
	from
		input : CICD!IntegerLiteral
	to
		output : CircleCI!IntegerLiteral(
			value <- input.value
		)
}

lazy rule DoubleLiteral2DoubleLiteral {
	from
		input : CICD!DoubleLiteral
	to
		output : CircleCI!DoubleLiteral(
			value <- input.value
		)
}

lazy rule BooleanLiteral2BooleanLiteral {
	from
		input : CICD!BooleanLiteral
	to
		output : CircleCI!BooleanLiteral(
			value <- input.value
		)
}

lazy rule VariableReference2VariableReference {
	from
		input : CICD!VariableReference
	to
		output : CircleCI!VariableReference(
			reference <- input.reference
		)
}

lazy rule DotOp2DotOperator {
	from
		input : CICD!DotOp
	to
		output : CircleCI!DotOperator(
			lhs <-
				if not input.lhs.oclIsUndefined() then
					input.lhs.expression2ValueHelper()
				else
					OclUndefined
				endif,
			rhs <-
				if not input.rhs.oclIsUndefined() then
					input.rhs.expression2ValueHelper()
				else
					OclUndefined
				endif	
		)
}


lazy rule String2StringLiteral {
	from
		input : String
	to
		output : CircleCI!StringLiteral(
			value <- input
		)
}

helper context CICD!Expression def : expression2ExpressionHelper() : CircleCI!Expression =
	if self.oclIsTypeOf(CICD!Concat) then
		thisModule.Concat2Concat(self)
	else
		self.expression2ValueHelper()
	endif;

helper context CICD!Expression def : expression2LogicHelper() : CircleCI!Logic =
	if self.oclIsTypeOf(CICD!And) then
		thisModule.And2And(self)
	else if self.oclIsTypeOf(CICD!Or) then
		thisModule.Or2Or(self)
	else if self.oclIsTypeOf(CICD!EqualityOp) then
		if self.op = #"==" then
			thisModule.EqualsEqualityOp2Equals(self)
		else
			thisModule.NotEqualsEqualityOp2Not(self)
		endif
	else
		self.expression2ValueHelper()
	endif
	endif
	endif;
	
helper context CICD!Expression def : expression2ValueHelper() : CircleCI!Value =
	if self.oclIsTypeOf(CICD!VariableReference) then
		thisModule.VariableReference2VariableReference(self)
	else if self.oclIsTypeOf(CICD!VariableReference) then
		thisModule.DotOp2DotOperator(self)
	else if self.oclIsTypeOf(CICD!StringLiteral) then
		thisModule.StringLiteral2StringLiteral(self)
	else if self.oclIsTypeOf(CICD!IntegerLiteral) then
		thisModule.IntegerLiteral2IntegerLiteral(self)
	else if self.oclIsTypeOf(CICD!DoubleLiteral) then
		thisModule.DoubleLiteral2DoubleLiteral(self)
	else if self.oclIsTypeOf(CICD!BooleanLiteral) then
		thisModule.BooleanLiteral2BooleanLiteral(self)
	else
		OclUndefined
	endif
	endif
	endif
	endif
	endif
	endif;

helper context CICD!Expression def : expression2String() : String = 'EXPRESSION';

helper context CICD!StringLiteral def : expression2String() : String = self.value;

helper context CICD!IntegerLiteral def : expression2String() : String = self.value.toString();

helper context CICD!DoubleLiteral def : expression2String() : String = self.value.toString();

helper context CICD!BooleanLiteral def : expression2String() : String = self.value.toString();

helper context CICD!Concat def : expression2String() : String =
	let exprStrings : Sequence(String) =
		self.expressions->collect(expr | if expr.oclIsTypeOf(CICD!VariableReference) then '<<' + expr.expression2String() + '>>' else expr.expression2String() endif) in
		exprStrings->iterate(exprString; joinedString: String = '' |
			joinedString.concat(exprString)
		);

helper context CICD!VariableReference def : expression2String() : String =
	self.reference.name;

helper context CICD!Job def : job2JobHelper() : CircleCI!Job =
	if self.oclIsTypeOf(CICD!ScriptJob) then
		thisModule.ScriptJob2Job(self)
	else
		OclUndefined
	endif;

helper context CICD!Job def : job2ExecutorHelper() : CircleCI!Executor =
	if self.checkIfTransform2DockerExecutor() then
		thisModule.Job2DockerExecutor(self)
	else if self.agent.oclIsTypeOf(CICD!MacOSAgent) then
		thisModule.Job2MacOSExecutor(self)
	else if self.agent.oclIsTypeOf(CICD!WindowsAgent) or self.agent.oclIsTypeOf(CICD!LinuxAgent) or self.agent.oclIsTypeOf(CICD!CustomAgent) then
		thisModule.Job2MachineExecutor(self)
	else
		OclUndefined
	endif
	endif
	endif;
		
helper context CICD!Job def : checkIfTransform2DockerExecutor() : Boolean =
	if self.services->notEmpty() then
		true
	else if self.agent.oclIsTypeOf(CICD!LinuxAgent) then
		if not self.agent.container.oclIsUndefined() then
			true
		else
			false
		endif
	else
		false
	endif
	endif;
	
helper def : getAllJobs(jobStreams : Sequence(CICD!Job)) : Sequence(CICD!Job) =
	let next : Sequence(CICD!Job) = 
		jobStreams->iterate(jobStream; acc : Sequence(Sequence(CICD!Job)) = Sequence{} | 
			acc.append(jobStream.next)
		)->flatten()->asSet()->asSequence()
	in 
	if next.isEmpty() then
		jobStreams
	else 
		thisModule.getAllJobs(next)->prepend(jobStreams)->flatten()
	endif;

helper def : step2StepHelper(step : CICD!Step) : Sequence(CircleCI!Step) =
	if step.oclIsTypeOf(CICD!ConditionalStep) then
		Sequence{thisModule.ConditionalStep2WhenStep(step)}->union(
			if step.elseRun->notEmpty() then
				Sequence{thisModule.ConditionalStep2UnlessStep(step)} 
			else 
				Sequence{} 
			endif
		)
	else if step.oclIsTypeOf(CICD!Command) then
		Sequence{thisModule.Command2RunStep(step)}
	else if step.oclIsTypeOf(CICD!Plugin) then
		if step.pluginName = 'setup_remote_docker' then
			Sequence{thisModule.Plugin2SetupRemoteDockerStep(step)}
		else if step.pluginName = 'store_test_results' then
			Sequence{thisModule.Plugin2StoreTestResultsStep(step)}
		else if step.pluginName = 'persist_to_workspace' then
			Sequence{thisModule.Plugin2PersistToWorkspaceStep(step)}
		else if step.pluginName = 'attach_to_workspace' then
			Sequence{thisModule.Plugin2AttachToWorkspaceStep(step)}
		else if step.pluginName = 'add_ssh_keys' then
			Sequence{thisModule.Plugin2AddSSHKeysStep(step)}
		else
			Sequence{thisModule.Plugin2OrbReferenceStep(step)}
		endif
		endif
		endif
		endif
		endif
	else if step.oclIsTypeOf(CICD!Checkout) then
		Sequence{thisModule.Checkout2CheckoutStep(step)}
	else if step.oclIsTypeOf(CICD!Cache) then
		if step.store = #STORE then
			Sequence{thisModule.Cache2SaveCacheStep(step)}
		else if step.store = #LOAD then
			Sequence{thisModule.Cache2RestoreCacheStep(step)}
		else
			Sequence{}
		endif
		endif
	else if step.oclIsTypeOf(CICD!Artifact) then
		if step.store then
			Sequence{thisModule.Artifact2StoreArtifactsStep(step)}
		else
			Sequence{}
		endif
	else
		OclUndefined
	endif
	endif
	endif
	endif
	endif
	endif;

helper def : getVariable(variableAssignments : Sequence(CICD!Assignment), name : String) : CICD!Expression =
	let matchingVariables : Sequence(CICD!Assignment) = variableAssignments->select(ass | ass.key.name = name) in
	if matchingVariables->notEmpty() then
		matchingVariables->first().value
	else
		OclUndefined
	endif;

helper context CICD!Plugin def : checkIfOrb() : Boolean =
	if self.pluginName = 'setup_remote_docker' then
		false
	else if self.pluginName = 'store_test_results' then
		false
	else if self.pluginName = 'persist_to_workspace' then
		false
	else if self.pluginName = 'attach_to_workspace' then
		false
	else if self.pluginName = 'add_ssh_keys' then
		false
	else
		true
	endif
	endif
	endif
	endif
	endif;

helper def : joinStrings(stringSequence : Sequence(String), sep : String) : String =
	stringSequence->iterate(string; joinedString : String = '' |
		if stringSequence->indexOf(string) = stringSequence->size() then
			joinedString.concat(string)
		else
			joinedString.concat(string).concat(sep)
		endif
	);

helper context CICD!Plugin def : getReference() : String =
	let pluginNameParts : Sequence(String) = self.pluginName.split('/') in
	thisModule.joinStrings(
		if pluginNameParts->size() = 1 then 
			pluginNameParts 
		else 
			pluginNameParts->subSequence(1, pluginNameParts->size() - 1) 
		endif, 
		'/'
	) + if self.version.oclIsUndefined() then '' else '@' + self.version endif;