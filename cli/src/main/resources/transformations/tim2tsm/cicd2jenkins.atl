-- @path Jenkins=/d.fe.up.pt.cicd.jenkins.metamodel/model/Jenkins.ecore
-- @path CICD=/d.fe.up.pt.cicd.metamodel/model/CICD.ecore

module cicd2jenkins;

create OUT : Jenkins from IN : CICD;

rule Pipeline2Pipeline {
	from
		cicdPipeline : CICD!Pipeline
	to
		jenkinsPipeline : Jenkins!Pipeline(
			stages <- thisModule.groupJobs(cicdPipeline.jobStreams, Set{})->collect(
						jobGroup | if jobGroup->size() = 1 then 
							thisModule.Job2Stage(jobGroup->first())
						else
							thisModule.JobSequence2Parallel(jobGroup)
						endif
						),
			agent <- cicdPipeline.agent,
			environmentVariables <- cicdPipeline.environmentVariables,
			triggers <- cicdPipeline.triggers->collect(trigger |
				if trigger.oclIsKindOf(CICD!ScheduledTrigger) then
					trigger.crons->collect(cron | thisModule.Cron2ScheduledTrigger(cron))
				else
					trigger
				endif
			)->flatten()
		)
}

lazy rule Job2Stage {
	from
		job : CICD!Job
	using {
		nextJobs : Sequence(CICD!Job) = job.next;
	}
	to
		abstractStage : Jenkins!Stage(
			name <- job.id,
			agent <- job.agent,
			steps <- job.steps,
			environmentVariables <- job.environmentVariables
		)
}

lazy rule JobSequence2Parallel {
	from
		jobSequence : Sequence(CICD!Job)
	using {
		nextJobs : Sequence(CICD!Job) = jobSequence->collect(job | job.next)->flatten()->asSet()->asSequence();
	}
	to
		abstractStage : Jenkins!Parallel(
			stages <- jobSequence->collect(job | thisModule.Job2Stage(job))		
		)
}

abstract rule Step2AsbtractStep {
	from
		cicdStep : CICD!Step
	to
		jenkinsStep : Jenkins!AbstractStep
}

rule ConditionalStep2ConditionalStep extends Step2AsbtractStep {
	from
		cicdStep : CICD!ConditionalStep
	to
		jenkinsStep : Jenkins!ConditionalStep(
			ifCondition <- cicdStep.ifCondition,
			thenRun <- cicdStep.thenRun,
			elseRun <- cicdStep.elseRun
		)
}

abstract rule NonConditionalStep2Step extends Step2AsbtractStep {
	from
		cicdStep : CICD!NonConditionalStep
	to
		jenkinsStep : Jenkins!Step
}

rule Command2Step extends NonConditionalStep2Step {
	from
		cicdStep : CICD!Command
	using {
		commandAndArguments : Sequence(String) = thisModule.splitCommandAndArguments(cicdStep.program.expression2String());
	}
	to
		jenkinsStep : Jenkins!Step(
			command <- commandAndArguments->first(),
			arguments <- commandAndArguments->last()
		)
}

abstract rule Expression2Expression {
	from
		cicdExpression : CICD!Expression
	to
		jenkinsExpression : Jenkins!Expression
}

rule Concat2Concat extends Expression2Expression {
	from
		cicdExpression : CICD!Concat
	to
		jenkinsExpression : Jenkins!Concat(
			expressions <- cicdExpression.expressions
		)
}

abstract rule BinaryOp2BinaryOp extends Expression2Expression {
	from
		cicdExpression : CICD!BinaryOp
	to
		jenkinsExpression : Jenkins!BinaryOp(
			lhs <- cicdExpression.lhs,
			rhs <- cicdExpression.rhs
		)
}

abstract rule UnaryOp2UnaryOp extends Expression2Expression {
	from
		cicdExpression : CICD!UnaryOp
	to
		jenkinsExpression : Jenkins!UnaryOp(
			childExpr <- cicdExpression.rhs
		)
}

rule Negation2Negation extends UnaryOp2UnaryOp {
	from
		cicdExpression : CICD!Negation
	to
		jenkinsExpression : Jenkins!Negation
}

rule ComparisonOp2ComparisonOp extends BinaryOp2BinaryOp {
	from
		cicdExpression : CICD!ComparisonOp
	to
		jenkinsExpression : Jenkins!ComparisonOp(
			op <- 
				if cicdExpression.op = #">" then
					#">"
				else if cicdExpression.op = #">=" then
					#">="
				else if cicdExpression.op = #"<" then
					#"<"
				else
					#"<="
				endif
				endif
				endif
		)
}

rule EqualityOp2EqualityOp extends BinaryOp2BinaryOp {
	from
		cicdExpression : CICD!EqualityOp
	to
		jenkinsExpression : Jenkins!EqualityOp(
			op <- 
				if cicdExpression.op = #"==" then
					#"=="
				else
					#"!="
				endif
		)
}

abstract rule LogicalOp2LogicalOp extends BinaryOp2BinaryOp {
	from
		cicdExpression : CICD!LogicalOp
	to
		jenkinsExpression : Jenkins!LogicalOp
}

rule And2And extends LogicalOp2LogicalOp {
	from
		cicdExpression : CICD!And
	to
		jenkinsExpression : Jenkins!And
}

rule Or2Or extends LogicalOp2LogicalOp {
	from
		cicdExpression : CICD!Or
	to
		jenkinsExpression : Jenkins!Or
}

rule EnvironmentVariable2Variable extends Expression2Expression {
	from
		cicdExpression : CICD!EnvironmentVariable
	to
		jenkinsExpression : Jenkins!Variable(
			name <- cicdExpression.name
		)
}

abstract rule Literal2Literal extends Expression2Expression {
	from
		cicdExpression : CICD!Literal
	to
		jenkinsExpression : Jenkins!Literal		
}

rule StringLiteral2StringLiteral extends Literal2Literal {
	from
		cicdExpression : CICD!StringLiteral
	to
		jenkinsExpression : Jenkins!StringLiteral(
			value <- cicdExpression.value
		)	
}

rule IntegerLiteral2IntegerLiteral extends Literal2Literal {
	from
		cicdExpression : CICD!IntegerLiteral
	to
		jenkinsExpression : Jenkins!IntegerLiteral(
			value <- cicdExpression.value
		)	
}

rule DoubleLiteral2DoubleLiteral extends Literal2Literal {
	from
		cicdExpression : CICD!DoubleLiteral
	to
		jenkinsExpression : Jenkins!DoubleLiteral(
			value <- cicdExpression.value
		)	
}

rule BooleanLiteral2BooleanLiteral extends Literal2Literal {
	from
		cicdExpression : CICD!BooleanLiteral
	to
		jenkinsExpression : Jenkins!BooleanLiteral(
			value <- cicdExpression.value
		)	
}

rule Agent2Agent {
	from
		cicdAgent : CICD!Agent
	to
		jenkinsAgent : Jenkins!OptionedAgent(
			labels <- cicdAgent.labels->first(),
			docker <- cicdAgent.container
		)
}

rule DockerContainer2DockerContainer {
	from
		cicdDockerContainer : CICD!DockerContainer
	to
		jenkinsDockerContainer : Jenkins!DockerContainer(
			image <- cicdDockerContainer.image.expression2String(),
			label <- cicdDockerContainer.label
		)
}

rule Assignment2Assignment {
	from
		cicdAssignment : CICD!Assignment
	to
		jenkinsAssignment : Jenkins!Assignment(
			key <- cicdAssignment.key,
			value <- cicdAssignment.value
		)
}

lazy rule Cron2ScheduledTrigger {
	from
		cron : String
	to
		scheduledTrigger : Jenkins!ScheduledTrigger(
			cron <- cron
		)
}

-- Helper

helper def : splitCommandAndArguments(commandString : String) : Sequence(String) =
	let splitString : Sequence(String) = commandString.split('\\s+')
	in 
	if splitString->size() > 1 then
		Sequence{splitString->first(), thisModule.joinStrings(splitString->subSequence(2, splitString->size()), ' ')}
	else if splitString->size() = 1 then
		Sequence{splitString, ''}
	else
		Sequence{'', ''}
	endif
	endif;
	
helper def : joinStrings(stringSequence : Sequence(String), sep : String) : String =
	stringSequence->iterate(string; joinedString : String = '' |
		if stringSequence->indexOf(string) = stringSequence->size() then
			joinedString.concat(string)
		else
			joinedString.concat(string).concat(sep)
		endif
	);

helper context CICD!Expression def : expression2String() : String = 'EXPRESSION';

helper context CICD!StringLiteral def : expression2String() : String = self.value;

helper context CICD!IntegerLiteral def : expression2String() : String = self.value.toString();

helper context CICD!DoubleLiteral def : expression2String() : String = self.value.toString();

helper context CICD!BooleanLiteral def : expression2String() : String = self.value.toString();

helper context CICD!Concat def : expression2String() : String =
	let exprStrings : Sequence(String) =
		self.expressions->collect(expr | expr.expression2String()) in
		exprStrings->iterate(exprString; joinedString: String = '' |
			joinedString.concat(exprString)
		);

helper context CICD!EnvironmentVariable def : expression2String() : String =
	'$'.concat(self.name);

helper def : groupJobs(jobStreams : Sequence(CICD!Job), previous : Set(CICD!Job)) : Sequence(Sequence(CICD!Job)) =
	let next : Sequence(CICD!Job) = 
		jobStreams->iterate(jobStream; acc : Sequence(Sequence(CICD!Job)) = Sequence{} | 
			acc.append(jobStream.next->select(nextJob | previous.union(jobStreams).includesAll(nextJob.previous)))
		).flatten()->asSet()->asSequence()
	in 
	if next.isEmpty() then
		Sequence{jobStreams}
	else 
		thisModule.groupJobs(next, previous.union(jobStreams)).prepend(jobStreams)
	endif;

helper def : getAllPreviousJobs(jobs : Set(CICD!Job)) : Set(CICD!Job) =
	let previous : Set(CICD!Job) = jobs->iterate(job; acc: Set(CICD!Job) = Set{} |
		acc.union(job.previous)
	) in
	if previous.isEmpty() then
		jobs
	else
		thisModule.getAllPreviousJobs(previous).union(jobs)
	endif;
