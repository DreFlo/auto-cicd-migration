-- @path GHA=/d.fe.up.pt.cicd.gha.metamodel/model/GHA.ecore
-- @path CICD=/d.fe.up.pt.cicd.metamodel/model/CICD.ecore

module gha2cicd;
create OUT : CICD from IN : GHA;

rule Workflow2Pipeline {
	from
		workflow : GHA!Workflow
	to
		pipeline : CICD!Pipeline(			
			environmentVariables <- workflow.environmentVariables,
			inputs <- 
				workflow.triggers->select(trigger | trigger.oclIsKindOf(GHA!InputTrigger))
				->collect(trigger | trigger.inputs)->flatten(),
			jobStreams <- thisModule.getJobStreamOrigins(workflow.jobs),
			name <-				
				if not workflow.name.oclIsUndefined() then
					workflow.name.expression2String()
				else
					OclUndefined
				endif,
			outputs <- 
				workflow.triggers->select(trigger | trigger.oclIsKindOf(GHA!WorkflowCallTrigger))
				->collect(trigger | trigger.outputs)->flatten(),
			shell <-
				if not workflow.defaults.oclIsUndefined() then
					workflow.defaults.shell
				else
					OclUndefined
				endif,
			triggers <- 
				workflow.triggers
				->select(
					trigger | 
					not trigger.oclIsKindOf(GHA!InputTrigger) and not trigger.oclIsKindOf(GHA!StandardEventTrigger) and not trigger.oclIsTypeOf(GHA!WorkflowRunTrigger)
				),
			workingDirectory <-
				if not workflow.defaults.oclIsUndefined() then
					workflow.defaults.workingDirectory
				else
					OclUndefined
				endif
		)
}

abstract rule Parameter2Parameter {
	from
		input : GHA!Parameter
	to
		output : CICD!Parameter(
			description <- input.description,
			id <- input.id
		)
}

rule Input2Input extends Parameter2Parameter {
	from
		input : GHA!Input
	to
		output : CICD!Input(
			choices <- input.options,
			defaultValue <- input.default,
			required <- input.isRequired,
			type <-
				if input.type = #STRING then
					#STRING
				else if input.type = #NUMBER then
					#NUMBER
				else if input.type = #BOOLEAN then
					#BOOLEAN
				else if input.type = #CHOICE then
					#CHOICE
				else
					#STRING
				endif
				endif
				endif
				endif
		)
}

rule Output2Output extends Parameter2Parameter {
	from
		input : GHA!Output
	to
		output : CICD!Output(
			value <- input.value
		)
}


abstract rule Trigger2Trigger {
	from
		ghaTrigger : GHA!Trigger
	to
		cicdTrigger : CICD!Trigger
}

rule ScheduledTrigger2ScheduledTrigger extends Trigger2Trigger {
	from
		ghaTrigger : GHA!ScheduleTrigger
	to
		cicdTrigger : CICD!ScheduledTrigger(
			crons <- ghaTrigger.crons->collect(cron | cron.expression2String())
		)
}

rule PushTrigger2PushTrigger extends Trigger2Trigger {
	from
		ghaTrigger : GHA!PushTrigger
	to
		cicdTrigger : CICD!PushTrigger(
			tagGlobs <- 
				if not ghaTrigger.ignoreSpecifiedTags then
					ghaTrigger.tags->collect(tag | tag.expression2String())
				else
					Sequence{'*'}->union(ghaTrigger.tags->collect(tag | tag.negationString()))
				endif,
			branchGlobs <- 
				if not ghaTrigger.ignoreSpecifiedBranches then
					ghaTrigger.branches->collect(branch | branch.expression2String())
				else
					Sequence{'*'}->union(ghaTrigger.branches->collect(branch | branch.negationString()))
				endif
		)		
}

rule PullRequestTrigger2PullRequestTrigger extends Trigger2Trigger {
	from
		ghaTrigger : GHA!PullRequestTrigger
	to
		cicdTrigger : CICD!PullRequestTrigger(
			branchGlobs <- 
				if not ghaTrigger.ignoreSpecifiedBranches then
					ghaTrigger.branches->collect(branch | branch.expression2String())
				else
					Sequence{'*'}->union(ghaTrigger.branches->collect(branch | branch.negationString()))
				endif
		)	
}

abstract rule Job2Job {
	from
		ghaJob : GHA!Job
	to
		cicdJob : CICD!Job(
			agent <- ghaJob.getAgent(),
			allowFailure <- 
				if not ghaJob.continueOnError.oclIsUndefined() then
					ghaJob.continueOnError.expression2Boolean()
				else
					OclUndefined
				endif,
			environmentVariables <- ghaJob.environmentVariables,
			id <- ghaJob.name,
			ifCondition <- ghaJob.ifCondition,
			matrix <- ghaJob.strategy,
			name <- 
				if not ghaJob.jobName.oclIsUndefined() then
					ghaJob.jobName.expression2String()
				else
					OclUndefined
				endif,
			next <- ghaJob.necessaryFor,
			outputs <- ghaJob.outputs,
			shell <-
				if not ghaJob.defaults.oclIsUndefined() then
					ghaJob.defaults.shell
				else
					OclUndefined
				endif,
			services <- ghaJob.services,
			workingDirectory <-
				if not ghaJob.defaults.oclIsUndefined() then
					ghaJob.defaults.workingDirectory
				else
					OclUndefined
				endif
		)
}

rule ScriptJob2ScriptJob extends Job2Job {
	from
		ghaJob : GHA!ScriptJob
	to
		cicdJob : CICD!ScriptJob(
			steps <- ghaJob.steps
		)
}

rule WorkflowCallJob2PipelineCallJob extends Job2Job {
	from
		ghaJob : GHA!WorkflowCallJob
	to
		cicdJob : CICD!PipelineCallJob(
			pipelinePath <- ghaJob.uses,
			args <- ghaJob.args
		)
}

abstract rule AbstractStep2Step {
	from
		ghaStep : GHA!AbstractStep
	to
		cicdStep : CICD!Step
}

rule IfStep2ConditionalStep extends AbstractStep2Step {
	from
		ghaStep : GHA!IfStep
	to
		cicdStep : CICD!ConditionalStep(
			ifCondition <- ghaStep.ifCondition,
			thenRun <- ghaStep.thenRun
		)
}

abstract rule Step2NonConditionalStep extends AbstractStep2Step {
	from
		ghaStep : GHA!Step
	to
		cicdStep : CICD!NonConditionalStep(
			id <- ghaStep.id,
			timeoutMinutes <- ghaStep.timeoutMinutes,
			environmentVariables <- ghaStep.environmentVariables,
			allowFailure <-
				if not ghaStep.continueOnError.oclIsUndefined() then
					ghaStep.continueOnError.expression2Boolean()
				else
					OclUndefined
				endif,
			name <-
				if not ghaStep.name.oclIsUndefined() then
					ghaStep.name.expression2String()
				else
					OclUndefined
				endif,
			workingDirectory <- ghaStep.workingDirectory
		)
}

rule Command2Command extends Step2NonConditionalStep {
	from
		ghaStep : GHA!Command
	to
		cicdStep : CICD!Command(
			program <- ghaStep.command,
			shell <- ghaStep.shell
		)
}

rule Package2Plugin extends Step2NonConditionalStep {
	from
		ghaStep : GHA!Package(
			not ghaStep.uses.expression2String().startsWith('actions/cache') and
			not ghaStep.uses.expression2String().startsWith('actions/upload-artifact') and
			not ghaStep.uses.expression2String().startsWith('actions/download-artifact') and
			not ghaStep.uses.expression2String().startsWith('actions/checkout')
		)
	using {
		plugin : String = ghaStep.uses.expression2String().split('@')->first();
		version : String = ghaStep.uses.expression2String().split('@')->last();
	}
	to
		cicdStep : CICD!Plugin(
			pluginName <- plugin,
			version <- if version <> plugin then version else OclUndefined endif,
			kwargs <- ghaStep.args
		)
}

rule Package2Cache extends Step2NonConditionalStep {
	from
		ghaStep : GHA!Package(
			ghaStep.uses.expression2String().startsWith('actions/cache')
		)
	to
		cicdStep : CICD!Cache(
			keys <- thisModule.getVariable(ghaStep.args, 'key'),
			paths <- thisModule.getVariable(ghaStep.args, 'path'),
			store <-
				if ghaStep.uses.expression2String().startsWith('actions/cache/restore') then
					#LOAD
				else if ghaStep.uses.expression2String().startsWith('actions/cache/save') then
					#STORE
				else
					#BOTH
				endif
				endif
		)
}

rule Package2Artifact extends Step2NonConditionalStep {
	from
		ghaStep : GHA!Package(
			ghaStep.uses.expression2String().startsWith('actions/upload-artifact') or
			ghaStep.uses.expression2String().startsWith('actions/download-artifact')
		)
	to
		cicdStep : CICD!Artifact(
			artifactName <- thisModule.getVariable(ghaStep.args, 'name'),
			includePaths <- thisModule.getVariable(ghaStep.args, 'path'),
			retentionTime <- thisModule.getVariable(ghaStep.args, 'retention-days'),
			store <- ghaStep.uses.expression2String().startsWith('actions/upload-artifact')
		)
}

rule Package2Checkout extends Step2NonConditionalStep {
	from
		ghaStep : GHA!Package(
			ghaStep.uses.expression2String().startsWith('actions/checkout')
		)
	to
		cicdStep : CICD!Checkout(
			path <- thisModule.getVariable(ghaStep.args, 'path')
		)
}

rule Container2DockerContainer {
	from
		container : GHA!Container
	to
		dockerContainer : CICD!DockerContainer(
			image <- container.image,
			environmentVariables <- container.environmentVariables,
			ports <- container.ports,
			volumes <- container.volumes,
			registryUsername <- container.username,
			registryPassword <- container.password,
			options <- 
				if not container.options.oclIsUndefined() then
					container.options.expression2String()
				else
					OclUndefined
				endif
		)
}

rule Service2DockerContainer {
	from
		service : GHA!Service
	using {
		container : GHA!Container = service.value;
	}
	to
		dockerContainer : CICD!DockerContainer(
			label <- service.key,
			image <- container.image,
			environmentVariables <- container.environmentVariables,
			ports <- container.ports,
			volumes <- container.volumes,
			registryUsername <- container.username,
			registryPassword <- container.password,
			options <-  
				if not container.options.oclIsUndefined() then
					container.options.expression2String()
				else
					OclUndefined
				endif
		)
}

rule Matrix2Matrix {
	from
		ghaMatrix : GHA!Matrix
	to
		cicdMatrix : CICD!Matrix(
			axes <- ghaMatrix.axes,
			includes <- ghaMatrix.includes,
			excludes <- ghaMatrix.excludes,
			failFast <- 
				if not ghaMatrix.failFast.oclIsUndefined() then
					ghaMatrix.failFast.expression2Boolean()
				else
					OclUndefined
				endif
		)
}

rule MatrixAxis2MatrixAxis {
	from
		ghaAxis : GHA!MatrixAxis
	to
		cicdAxis : CICD!MatrixAxis(
			name <- ghaAxis.name,
			cells <- ghaAxis.cells
		)
}

rule MatrixCombination2MatrixCombination {
	from
		ghaCombination : GHA!MatrixCombination
	to
		cicdCombination : CICD!MatrixCombination(
			combinationEntries <- ghaCombination.entries
		)
}

rule VariableDeclaration2VariableDeclaration {
	from
		input : GHA!VariableDeclaration
	to
		output : CICD!VariableDeclaration(
			name <- input.name
		)
}

rule VariableAssignment2Assigment {
	from
		variableAssignment : GHA!VariableAssignment(
			not thisModule.isSpecificPackageArg(variableAssignment)
		)
	to
		assignment : CICD!Assignment (
			key <- variableAssignment.key,
			value <- variableAssignment.value
		)
}

abstract rule Expression2Expression {
	from
		ghaExpression : GHA!Expression
	to
		cicdExpression : CICD!Expression
}

rule Concat2Concat extends Expression2Expression {
	from
		ghaExpression : GHA!Concat
	to
		cicdExpression : CICD!Concat(
			expressions <- ghaExpression.expressions	
		)
}

abstract rule BinaryOp2BinaryOp extends Expression2Expression {
	from
		ghaExpression : GHA!BinaryOp
	to
		cicdExpression : CICD!BinaryOp(
			lhs <- ghaExpression.lhs,
			rhs <- ghaExpression.rhs
		)
}

rule DotOp2DotOp extends BinaryOp2BinaryOp {
	from
		ghaExpression : GHA!DotOp
	to
		cicdExpression : CICD!DotOp
}

abstract rule LogicalOp2LogicalOp extends BinaryOp2BinaryOp {
	from
		ghaExpression : GHA!LogicalOp
	to
		cicdExpression : CICD!LogicalOp
}

rule And2And extends LogicalOp2LogicalOp {
	from
		ghaExpression : GHA!And
	to
		cicdExpression : CICD!And
}

rule Or2Or extends LogicalOp2LogicalOp {
	from
		ghaExpression : GHA!Or
	to
		cicdExpression : CICD!Or
}

rule Equality2EqualityOp extends BinaryOp2BinaryOp {
	from
		ghaExpression : GHA!Equality
	to
		cicdExpression : CICD!EqualityOp(
			op <-
				if ghaExpression.op = #"==" then
					#"=="
				else
					#"!="
				endif
		)
}

rule Comparison2ComparisonOp extends BinaryOp2BinaryOp {
	from
		ghaExpression : GHA!Comparison
	to
		cicdExpression : CICD!ComparisonOp(
			op <-
				if ghaExpression.op = #">" then
					#">"
				else if ghaExpression.op = #">=" then
					#">="
				else if ghaExpression.op = #"<" then
					#"<"
				else
					#"<="
				endif
				endif
				endif
		)
}

abstract rule Value2Value extends Expression2Expression {
	from
		ghaExpression : GHA!Value
	to
		cicdExpression : CICD!Value
}

abstract rule Literal2Literal extends Value2Value {
	from
		ghaExpression : GHA!Literal
	to
		cicdExpression : CICD!Literal
}

rule StringLiteral2StringLiteral extends Literal2Literal {
	from
		ghaExpression : GHA!StringLiteral
	to
		cicdExpression : CICD!StringLiteral(
			value <- ghaExpression.value	
		)
}

rule IntegerLiteral2IntegerLiteral extends Literal2Literal {
	from
		ghaExpression : GHA!IntegerLiteral
	to
		cicdExpression : CICD!IntegerLiteral(
			value <- ghaExpression.value	
		)
}

rule DoubleLiteral2DoubleLiteral extends Literal2Literal {
	from
		ghaExpression : GHA!DoubleLiteral
	to
		cicdExpression : CICD!DoubleLiteral(
			value <- ghaExpression.value	
		)
}

rule BooleanLiteral2BooleanLiteral extends Literal2Literal {
	from
		ghaExpression : GHA!BooleanLiteral
	to
		cicdExpression : CICD!BooleanLiteral(
			value <- ghaExpression.value	
		)
}

abstract rule UnaryOp2UnaryOp extends Expression2Expression {
	from
		ghaExpression : GHA!UnaryOp
	to
		cicdExpression : CICD!UnaryOp(
			rhs <- ghaExpression.childExpr
		)
}

rule Not2Negation extends UnaryOp2UnaryOp {
	from
		ghaExpression : GHA!Not
	to
		cicdExpression : CICD!Negation
}

rule VariableReference2VariableReference extends Value2Value {
	from
		ghaExpression : GHA!VariableReference
	to
		cicdExpression : CICD!VariableReference(
			reference <- ghaExpression.reference
		)
}

helper context GHA!Job def : getAgent() : CICD!Agent =
	if self.agent.oclIsUndefined() then
		OclUndefined
	else if not thisModule.checkForLabel(self.agent.labels, 'ubuntu').oclIsUndefined() or not thisModule.checkForLabel(self.agent.labels, 'linux').oclIsUndefined() then
		thisModule.Job2LinuxAgent(self)
	else if not thisModule.checkForLabel(self.agent.labels, 'windows').oclIsUndefined() then 
		thisModule.Job2WindowsAgent(self)
	else if not thisModule.checkForLabel(self.agent.labels, 'macos').oclIsUndefined() then 
		thisModule.Job2MacOSAgent(self)
	else
		thisModule.Job2CustomAgent(self)
	endif
	endif
	endif
	endif;

helper def : checkForLabel(labels : Sequence(GHA!Expression), string : String) : CICD!Expression =
	if labels.oclIsUndefined() or labels->isEmpty() then
		OclUndefined
	else
		if labels->first().oclIsTypeOf(GHA!StringLiteral) then 
			if labels->first().expression2String().startsWith(string) then 
				labels->first()
			else
				thisModule.checkForLabel(labels->excluding(labels->first()), string) 
			endif 
		else 
			thisModule.checkForLabel(labels->excluding(labels->first()), string) 
		endif
	endif;
	
lazy rule Job2LinuxAgent {
	from
		job : GHA!Job
	to
		agent : CICD!LinuxAgent (
			container <- job.container,
			image <- 
				if not thisModule.checkForLabel(job.agent.labels, 'ubuntu').oclIsUndefined() then
					thisModule.checkForLabel(job.agent.labels, 'ubuntu')
				else
					thisModule.checkForLabel(job.agent.labels, 'linux')
				endif
		)
}

lazy rule Job2CustomAgent {
	from
		job : GHA!Job
	to
		agent : CICD!CustomAgent(
			labels <- 
				if not job.agent.oclIsUndefined() then
					job.agent.labels
				else
					Sequence{}
				endif
		)
}

lazy rule Job2WindowsAgent {
	from
		job : GHA!Job
	to
		agent : CICD!WindowsAgent (
			image <- thisModule.checkForLabel(job.agent.labels, 'windows')
		)
}

lazy rule Job2MacOSAgent {
	from
		job : GHA!Job
	to
		agent : CICD!MacOSAgent (
			image <- thisModule.checkForLabel(job.agent.labels, 'macos'),
			xcode <- thisModule.getCICDProperty(job.agent.labels, 'XCODE')
		)
}

helper def : getCICDProperty(labels : Sequence(GHA!Expression), name : String) : CICD!Expression =
	if labels.oclIsUndefined() or labels->isEmpty() then
		OclUndefined
	else if labels->first().expression2String().startsWith('%%__CICD__' + name + '#%!!__#%!!') then 
		if labels->first().oclIsTypeOf(GHA!Concat) then
			let concat : GHA!Concat = labels->first()
			in
			if concat.expressions->size() = 2 then
				concat.expressions->last()
			else
				thisModule.CreateConcat(concat.expressions->excluding(concat.expressions->first()))
			endif
		else if labels->first().oclIsTypeOf(GHA!StringLiteral) then
			thisModule.String2StringLiteral(labels->first().expression2String().split('#%!!__#%!!')->last())
		else
			OclUndefined
		endif
		endif
	else 
		thisModule.getCICDProperty(labels->excluding(labels->first()), name)
	endif
	endif;

lazy rule CreateConcat {
	from
		input : Sequence(GHA!Expression)
	to
		output : CICD!Concat (
			expressions <- input
		)
}

lazy rule NegateExpression {
	from
		expression : GHA!Expression
	to
		negatedExpression : CICD!Negation(
			rhs <- expression
		)
}

lazy rule String2StringLiteral {
	from
		string : String
	to
		stringLiteral : CICD!StringLiteral(
			value <- string
		)
}

helper def : getJobStreamOrigins(jobs : Sequence(GHA!Job)) : Sequence(GHA!Job) = 
	jobs->select(job | job.dependsOn->isEmpty());

helper context GHA!Expression def : expression2String() : String = 'EXPRESSION';

helper context GHA!Literal def : expression2String() : String = 'LITERAL';

helper context GHA!StringLiteral def : expression2String() : String = self.value;

helper context GHA!IntegerLiteral def : expression2String() : String = self.value.toString();

helper context GHA!DoubleLiteral def : expression2String() : String = self.value.toString();

helper context GHA!BooleanLiteral def : expression2String() : String = self.value.toString();

helper context GHA!VariableReference def : expression2String() : String = self.reference.name;

helper context OclAny def : expression2String() : String = OclUndefined;

helper context GHA!Expression def : expression2Boolean() : Boolean = false;

helper context GHA!BooleanLiteral def : expression2Boolean() : Boolean = self.value;

helper context GHA!IntegerLiteral def : expression2Boolean() : Boolean =
	if self.value = 0 then
		false
	else
		true
	endif;

helper context GHA!DoubleLiteral def : expression2Boolean() : Boolean =
	if self.value = 0.0 then
		false
	else
		true
	endif;

helper context GHA!StringLiteral def : expression2Boolean() : Boolean =
	if self.value = 'false' then
		false
	else
		true
	endif;

helper context OclAny def : expression2Boolean() : String = OclUndefined;

helper context GHA!Concat def : expression2String() : String =
	let exprStrings : Sequence(String) =
		self.expressions->collect(expr | expr.expression2String()) in
		exprStrings->iterate(exprString; joinedString: String = '' |
			joinedString.concat(exprString)
		);

helper context GHA!Not def : expression2String() : String = 
	if self.childExpr.oclIsKindOf(GHA!Value) then
		'!' + self.childExpr.expression2String()
	else
		'!(' + self.childExpr.expression2String() + ')'
	endif;

helper context String def : getShell() : CICD!SHELL_TYPE = #BASH;

helper context String def : stringToInt() : Integer = Integer.parseInt(self);

helper def : getVariable(map : Sequence(GHA!VariableAssignment), key : String) : GHA!Expression =
	let matching : Sequence(GHA!VariableAssignment) = 
		map->select(assignment | assignment.key.name = key)
	in
	if matching->size() >= 1 then
		matching->first().value
	else
		OclUndefined
	endif;

helper def : isSpecificPackageArg(assignment : GHA!VariableAssignment) : Boolean =
	let container : OclAny = assignment.refImmediateComposite() in
   	if (container.oclIsTypeOf(GHA!Package)) then
		if 
			not container.uses.expression2String().startsWith('actions/cache') and
			not container.uses.expression2String().startsWith('actions/upload-artifact') and
			not container.uses.expression2String().startsWith('actions/download-artifact') and
			not container.uses.expression2String().startsWith('actions/checkout') 
		then 
			false 
		else 
			container.args->includes(assignment)
		endif
	else
		false
	endif;

helper context GHA!Expression def : negationString() : String =
	if self.oclIsKindOf(GHA!Value) then
		'!' + self.expression2String()
	else
		'!(' + self.expression2String() + ')'
	endif;
