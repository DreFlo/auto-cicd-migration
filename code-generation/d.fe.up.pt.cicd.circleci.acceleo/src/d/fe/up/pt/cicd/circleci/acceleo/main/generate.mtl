[comment encoding = UTF-8 /]
[module generate('http://d.fe.up.pt/CircleCI')]

[query public splitString(string : String, regex : String) : Sequence(String) = 
	invoke('d.fe.up.pt.cicd.circleci.acceleo.services.CICD2CircleCI', 'splitString(java.lang.String, java.lang.String)', Sequence{string, regex})
/]

[query public log(string : String) : String = 
	invoke('d.fe.up.pt.cicd.circleci.acceleo.services.CICD2CircleCI', 'logString(java.lang.String)', Sequence{string})
/]

[query public _generateVariableReference(variableDeclaration : VariableDeclaration) : String =
	invoke('d.fe.up.pt.cicd.circleci.acceleo.services.CICD2CircleCI', 'generateVariableReference(d.fe.up.pt.cicd.circleci.metamodel.CircleCI.VariableDeclaration, boolean)', Sequence{variableDeclaration, true})
/]

[query public generateVariableReferenceInDotOp(variableDeclaration : VariableDeclaration) : String =
	invoke('d.fe.up.pt.cicd.circleci.acceleo.services.CICD2CircleCI', 'generateVariableReference(d.fe.up.pt.cicd.circleci.metamodel.CircleCI.VariableDeclaration, boolean)', Sequence{variableDeclaration, false})
/]

[query public quoteString(string : String) : String =
  invoke('d.fe.up.pt.cicd.circleci.acceleo.services.CICD2CircleCI', 'quoteString(java.lang.String)', Sequence{string})
/]

[template public listItem(item : String) post(trim())]
[if (item.contains('\n'))]
- 
  [item/]
[else]
- [item/]
[/if]
[/template]

[template public generatePipeline(pipeline : Pipeline)]
[comment @main/]
[file ('config.yml', false, 'UTF-8')]
version: [version/]

[if (not setup.oclIsUndefined())]
setup: [setup/] 

[/if]
[if (orbs->notEmpty())]
orbs:
[for (orb : Orb | orbs)]
  [generateOrb(orb)/]
[/for]

[/if]
[if (parameters->notEmpty())]
parameters: 
[for (parameter : Parameter | parameters)]
  [generateParameter(parameter)/]
[/for]

[/if]
[if (commands->notEmpty())]
commands:
[for (command : Command | commands)]
  [generateCommand(command)/]
[/for]

[/if]
[if (executors->notEmpty())]
executors:
[for (executor : Executor | executors)]
  [generateNamedExecutor(executor)/]
[/for]

[/if]
[if (jobs->notEmpty())]
jobs:
[for (jobs : Job | jobs)]
  [generateJob(jobs)/]
[/for]

[/if]
[if (workflows->notEmpty())]
workflows:
  version: [version/]
[for (workflow : Workflow | workflows)]
  [generateWorkflow(workflow)/]
[/for]

[/if]
[/file]
[/template]


[template public generateOrb(orb : Orb) post (trim())]
[if (orb.oclIsTypeOf(OrbReference))]
[let orbReference : OrbReference = orb.oclAsType(OrbReference)]
[name/]: [orbReference.reference/]
[/let]
[elseif (orb.oclIsTypeOf(OrbDefinition))]
[let orbDefinition : OrbDefinition = orb.oclAsType(OrbDefinition)]
[name/]:
[if (orbDefinition.commands->notEmpty())]
  commands:
  [for (command : Command | orbDefinition.commands)]
    [generateCommand(command)/]
  [/for]
[/if]
[if (orbDefinition.executors->notEmpty())]
  executors:
  [for (executor : Executor | orbDefinition.executors)]
    [generateNamedExecutor(executor)/]
  [/for]
[/if]
[if (orbDefinition.jobs->notEmpty())]
  jobs:
  [for (jobs : Job | orbDefinition.jobs)]
    [generateJob(jobs)/]
  [/for]
[/if]
[/let]
[/if]
[/template]

[template public generateCommand(command : Command) post (trim())]
[name/]:
[if (not description.oclIsUndefined())]
  description: [description/]
[/if]
[if (parameters->notEmpty())]
  parameters: 
  [for (parameter : Parameter | parameters)]
    [generateParameter(parameter)/]
  [/for]
[/if]
  steps:
  [for (step : Step | steps)]
    [listItem(generateStep(step))/]
  [/for]
[/template]

[template public generateNamedExecutor(executor : Executor) post (trim())]
[name/]:
  [generateExecutor(executor)/]
[/template]

[template public generateExecutor(executor : Executor) post (trim())]
[if (executor.oclIsUndefined())]
executor:
[else]
[if (not resourceClass.oclIsUndefined())]
resource_class: [generateExpression(resourceClass)/]
[/if]
[if (not shell.oclIsUndefined())]
shell: [generateExpression(shell)/]
[/if]
[if (not workingDirectory.oclIsUndefined())]
working_directory: [generateExpression(workingDirectory)/]
[/if]
[if (environmentVariables->notEmpty())]
environment:
[for (variableAssignment : VariableAssignment | environmentVariables)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[/if]
[if (executor.oclIsKindOf(DockerExecutor))]
[generateDockerExecutor(executor.oclAsType(DockerExecutor))/]
[elseif (executor.oclIsKindOf(MachineExecutor))]
[generateMachineExecutor(executor.oclAsType(MachineExecutor))/] 
[elseif (executor.oclIsKindOf(MacOSExecutor))]
[generateMacOSExecutor(executor.oclAsType(MacOSExecutor))/]
[elseif (executor.oclIsKindOf(OrbReferenceExecutor))]
[generateOrbReferenceExecutor(executor.oclAsType(OrbReferenceExecutor))/] 
[elseif (executor.oclIsKindOf(ExecutorReferenceExecutor))]
[generateExecutorReferenceExecutor(executor.oclAsType(ExecutorReferenceExecutor))/]
[/if]
[/if]
[/template]

[template public generateDockerExecutor(executor : DockerExecutor) post (trim())]
docker:
[for (dockerContainer : AbstractDockerContainer | containers)]
  [generateAbstractDockerContainer(dockerContainer)/]
[/for]
[/template]


[template public generateMachineExecutor(executor : MachineExecutor) post (trim())]
machine:
  image: [generateExpression(image)/]
[if (not dockerLayerCaching.oclIsUndefined())]
  docker_layer_caching: [generateExpression(dockerLayerCaching)/]
[/if]
[/template]


[template public generateMacOSExecutor(executor : MacOSExecutor) post (trim())]
macos:
  xcode: [generateExpression(xcode)/]
[/template]

[template public generateOrbReferenceExecutor(executor : OrbReferenceExecutor)]
executor: [orb.name/]/[orbExecutorName/]
[/template]

[template public generateExecutorReferenceExecutor(executor : ExecutorReferenceExecutor)]
executor: [executor.name/]
[/template]

[template public generateJob(job : Job) post (trim())]
[name/]:
  [generateExecutor(executor)/]
[if (parameters->notEmpty())]
  parameters: 
  [for (parameter : Parameter | parameters)]
    [generateParameter(parameter)/]
  [/for]
[/if]
[if (environmentVariables->notEmpty())]
  environment:
  [for (variableAssignment : VariableAssignment | environmentVariables)]
    [generateVariableAssignment(variableAssignment)/]
  [/for]
[/if]
[if (not parallelism.oclIsUndefined())]
  parallelism: [generateExpression(parallelism)/]
[/if]
[if (not circleCIIPRanges.oclIsUndefined())]
  circleci_ip_ranges: [generateExpression(circleCIIPRanges)/]
[/if]
  steps:
  [for (step : Step | steps)]
    [listItem(generateStep(step))/]
  [/for]
[/template]

[template public generateAbstractDockerContainer(dockerContainer : AbstractDockerContainer) post (trim())]
[if (dockerContainer.oclIsTypeOf(NullDockerContainer))]
- 
  image: [generateExpression(image)/]
  NULL_DOCKER_CONTAINER: [generateExpression(dockerContainer.image)/]
[elseif (dockerContainer.oclIsTypeOf(DockerContainer))]
[generateDockerContainer(dockerContainer.oclAsType(DockerContainer))/]
[/if]
[/template]

[template public generateDockerContainer(dockerContainer : DockerContainer)]
- 
  image: [generateExpression(image)/]
  [if (not name.oclIsUndefined())]
  name: [generateExpression(name)/]
  [/if]
  [if (environmentVariables->notEmpty())]
  environment:
  [for (variableAssignment : VariableAssignment | environmentVariables)]
    [generateVariableAssignment(variableAssignment)/]
  [/for]
  [/if]
  [if (not user.oclIsUndefined())]
  user: [generateExpression(user)/]
  [/if]
  [if (entrypoint->notEmpty())]
  entrypoint: [for (_entrypoint : Expression | entrypoint) before ('[') separator (', ') after (']')][generateExpression(_entrypoint)/][/for]
  [/if]
  [if (command->notEmpty())]
  command: [for (_command : Expression | command) before ('[') separator (', ') after (']')][generateExpression(_command)/][/for]
  [/if]
  [if (not username.oclIsUndefined() or not password.oclIsUndefined())]
  auth:
  [if (not username.oclIsUndefined())]
    username: [generateExpression(username)/]
  [/if]
  [if (not password.oclIsUndefined())]
    password: [generateExpression(password)/]
  [/if]
  [/if]
  [if (not awsAccessKeyID.oclIsUndefined() or not awsSecretAccessKey.oclIsUndefined() or not oidc.oclIsUndefined())]
  aws_auth:
  [if (not awsAccessKeyID.oclIsUndefined())]
    aws_access_key_id: [generateExpression(awsAccessKeyID)/]
  [/if]
  [if (not awsSecretAccessKey.oclIsUndefined())]
    aws_secret_access_key: [generateExpression(awsSecretAccessKey)/]
  [/if]
  [if (not oidc.oclIsUndefined())]
    oidc_role_arn: [generateExpression(oidc)/]
  [/if]
[/if]
[/template]

[template public generateVariableAssignment(variableAssignment : VariableAssignment) post (trim())]
[generateVariableDeclaration(key)/]: [generateExpression(value)/]
[/template]

[template public generateStep(step : Step) post (trim())]
[if (step.oclIsTypeOf(RunStep))]
[generateRunStep(step.oclAsType(RunStep))/]
[elseif (step.oclIsKindOf(ConditionalStep))]
[generateConditionalStep(step)/]
[elseif (step.oclIsKindOf(CheckoutStep))]
[generateCheckoutStep(step.oclAsType(CheckoutStep))/]
[elseif (step.oclIsKindOf(SetupRemoteDockerStep))]
[generateSetupRemoteDockerStep(step.oclAsType(SetupRemoteDockerStep))/]
[elseif (step.oclIsKindOf(SaveCacheStep))]
[generateSaveCacheStep(step.oclAsType(SaveCacheStep))/]
[elseif (step.oclIsKindOf(RestoreCacheStep))]
[generateRestoreCacheStep(step.oclAsType(RestoreCacheStep))/]
[elseif (step.oclIsKindOf(StoreArtifactsStep))]
[generateStoreArtifactsStep(step.oclAsType(StoreArtifactsStep))/]
[elseif (step.oclIsKindOf(StoreTestResultsStep))]
[generateStoreTestResultsStep(step.oclAsType(StoreTestResultsStep))/]
[elseif (step.oclIsKindOf(PersistToWorkspaceStep))]
[generatePersistToWorkspaceStep(step.oclAsType(PersistToWorkspaceStep))/]
[elseif (step.oclIsKindOf(AttachWorkspaceStep))]
[generateAttachWorkspaceStep(step.oclAsType(AttachWorkspaceStep))/]
[elseif (step.oclIsKindOf(OrbReferenceStep))]
[generateOrbReferenceStep(step.oclAsType(OrbReferenceStep))/]
[elseif (step.oclIsKindOf(CommandReferenceStep))]
[generateCommandReferenceStep(step.oclAsType(CommandReferenceStep))/]
[elseif (step.oclIsKindOf(AddSSHKeysStep))]
[generateAddSSHKeysStep(step.oclAsType(AddSSHKeysStep))/]
[/if]
[/template]

[template public generateRunStep(step : RunStep) post (trim())]
run:
[if (not name.oclIsUndefined())]
  name: [generateExpression(name)/]
[/if]
  command: [generateExpression(command)/]
[if (not background.oclIsUndefined())]
  background: [generateExpression(background)/]
[/if]
[if (not shell.oclIsUndefined())]
  shell: [generateExpression(shell)/]
[/if]
[if (not workingDirectory.oclIsUndefined())]
  working_directory: [generateExpression(workingDirectory)/]
[/if]
[if (not noOutputTimeout.oclIsUndefined())]
  no_output_timeout: [generateExpression(noOutputTimeout)/]
[/if]
[if (not when.oclIsUndefined())]
  when: [when/]
[/if]
[if (environmentVariables->notEmpty())]
  environment:
  [for (variableAssignment : VariableAssignment | environmentVariables)]
    [generateVariableAssignment(variableAssignment)/]
  [/for]
[/if]
[/template]

[template public generateConditionalStep(step : Step) post (trim())]
[if (step.oclIsKindOf(ConditionalStep))]
[if (step.oclIsTypeOf(WhenStep))]
when:
[elseif (step.oclIsTypeOf(UnlessStep))]
unless:
[/if]
[let conditionalStep : ConditionalStep = step.oclAsType(ConditionalStep)]
[if (conditionalStep.condition.oclIsKindOf(Literal) or conditionalStep.condition.oclIsKindOf(VariableReference))]
  condition: [generateLogic(conditionalStep.condition)/]
[else]
  condition: 
    [generateLogic(conditionalStep.condition)/]
[/if] 
  steps:
  [for (step : Step | conditionalStep.steps)]
    [listItem(generateStep(step))/]
  [/for]
[/let]
[/if]
[/template]

[template public generateCheckoutStep(step : CheckoutStep) post (trim())]
checkout:
[if (not path.oclIsUndefined())]
  path: [generateExpression(path)/]
[/if]
[/template]

[template public generateSetupRemoteDockerStep(step : SetupRemoteDockerStep) post (trim())]
setup_remote_docker:
[if (not dockerLayerCaching.oclIsUndefined())]
  docker_layer_caching: [generateExpression(dockerLayerCaching)/]
[/if]
[if (not version.oclIsUndefined())]
  version: [generateExpression(version)/]
[/if]
[/template]

[template public generateSaveCacheStep(step : SaveCacheStep) post (trim())]
save_cache:
  key: [generateExpression(key)/]
  paths:
  [for (path : Expression | paths)]
    [listItem(generateExpression(path))/]
  [/for]
[if (not name.oclIsUndefined())]
  name: [generateExpression(name)/]
[/if]
[if (not when.oclIsUndefined())]
  when: [when/]
[/if]
[/template]

[template public generateRestoreCacheStep(step : RestoreCacheStep) post (trim())]
restore_cache:
  keys:
  [for (key : Expression | keys)]
    [listItem(generateExpression(key))/]
  [/for]
[if (not name.oclIsUndefined())]
  name: [generateExpression(name)/]
[/if]
[/template]

[template public generateStoreArtifactsStep(step : StoreArtifactsStep) post (trim())]
store_artifacts:
  path: [generateExpression(path)/]
[if (not destination.oclIsUndefined())]
  destination: [generateExpression(destination)/]
[/if]
[/template]

[template public generateStoreTestResultsStep(step : StoreTestResultsStep) post (trim())]
store_test_results:
  path: [generateExpression(path)/]
[/template]

[template public generatePersistToWorkspaceStep(step : PersistToWorkspaceStep) post (trim())]
persist_to_workspace:
  root: [generateExpression(root)/]
  paths:
  [for (path : Expression | paths)]
    [listItem(generateExpression(path))/]
  [/for]
[/template]

[template public generateAttachWorkspaceStep(step : AttachWorkspaceStep) post (trim())]
attach_workspace:
  at: [generateExpression(at)/]
[/template]

[template public generateAddSSHKeysStep(step : AddSSHKeysStep) post (trim())]
[if (fingerprints->notEmpty())]
add_ssh_keys:
  fingerprints:
  [for (fingerprint : Expression | fingerprints)]
    [listItem(generateExpression(fingerprint))/]
  [/for]
[/if]
[/template]

[template public generateOrbReferenceStep(step : OrbReferenceStep) post(trim())]
[orb.name/]/[jobName/]:
[for (variableAssignment : VariableAssignment | arguments)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[/template]

[template public generateCommandReferenceStep(step : CommandReferenceStep)]
[command.name/]:
[for (variableAssignment : VariableAssignment | arguments)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[/template]

[template public generateParameter(parameter: Parameter) post (trim())]
[generateVariableDeclaration(name)/]:
  type: [type/]
[if (type = PARAMETER_TYPES::ENUM and enumValues->notEmpty())]
  enum:
  [for (enumValue : String | enumValues)]
    [listItem(enumValue)/]
  [/for]
[/if]
[if (not description.oclIsUndefined())]
  description: [description/]
[/if]
[if (not default.oclIsUndefined())]
  default: [generateLiteral(default.oclAsType(Literal))/]
[/if]
[/template]

[template public generateWorkflow(workflow : Workflow) post (trim())]
[name/]:
[if (not condition.oclIsUndefined())]
[if (condition.oclIsKindOf(Literal) or condition.oclIsKindOf(VariableReference))]
  [if (isWhen)]when:[else]unless:[/if] [generateLogic(condition)/]
[else]
  [if (isWhen)]when:[else]unless:[/if]
    [generateLogic(condition)/]
[/if] 
[/if]
[if (triggers->notEmpty())]
  triggers:
  [for (trigger : Trigger | triggers)]
    [generateTrigger(trigger)/]
  [/for]
[/if]
[if (jobs->notEmpty())]
  jobs:
  [for (job : WorkflowJobConfiguration | jobs)]
    [generateWorkflowJobConfiguration(job)/]
  [/for]
[/if]
[/template]


[template public generateTrigger(trigger : Trigger) post (trim())]
[if (trigger.oclIsTypeOf(ScheduleTrigger))]
[generateScheduleTrigger(trigger.oclAsType(ScheduleTrigger))/]
[/if]
[/template]

[template public generateScheduleTrigger(trigger : ScheduleTrigger) post (trim())]
- 
  schedule:
    cron: [cron/]
[if (branches->notEmpty())]
    branches:
    [if (ignoreSpecifiedBranches)]
      ignore:
    [else]
      only:
    [/if]
    [for (branch : Expression | branches)]
      - 
        [generateExpression(branch)/]
    [/for]
[/if]
[/template]

[template public generateWorkflowJobConfiguration(job : WorkflowJobConfiguration) post(trim())]
[if (job.oclIsTypeOf(WorkflowDefinedJobConfiguration))]
- 
  [job.oclAsType(WorkflowDefinedJobConfiguration).job.name/]:
[elseif (job.oclIsTypeOf(WorkflowApprovalJobConfiguration))]
- 
  [job.oclAsType(WorkflowApprovalJobConfiguration).name/]:
    type: approval
[elseif (job.oclIsTypeOf(WorkflowOrbJobConfiguration))]
[let orbConfiguration : WorkflowOrbJobConfiguration = job.oclAsType(WorkflowOrbJobConfiguration)]
- 
  [orbConfiguration.orb.name/]/[orbConfiguration.jobName/]:
  [for (arg : VariableAssignment | orbConfiguration.arguments)]
    [generateVariableAssignment(arg)/]
  [/for]
[/let]
[/if]
[if (requires->notEmpty())]
    requires:
    [for (job : WorkflowJobConfiguration | requires)]
      [listItem(job.name)/]
    [/for]
[/if]
[if (branches->notEmpty() or tags->notEmpty())]
    filters:
    [if (branches->notEmpty())]
      branches:
      [if (ignoreSpecifiedBranches)]
        ignore:
      [else]
        only:
      [/if]
      [for (branch : Expression | branches)]
        - 
          [generateExpression(branch)/]
      [/for]
    [/if]
    [if (tags->notEmpty())]
      tags:
      [if (ignoreSpecifiedTags)]
        ignore:
      [else]
        only:
      [/if]
      [for (tag : Expression | tags)]
          [listItem(generateExpression(tag))/]
      [/for]
    [/if]
[/if]
[if (not matrix.oclIsUndefined())]
    matrix:
      parameters:
      [for (parameter : MatrixParameter | matrix.parameters)]
        [generateMatrixParameter(parameter)/]
      [/for]
    [if (matrix.excludes->notEmpty())]
      exclude:
      [for (combination : MatrixCombination | matrix.excludes)]
        [listItem(generateMatrixCombination(combination))/]
      [/for]
    [/if]
    [if (not matrix.alias.oclIsUndefined())]
      alias: [generateExpression(matrix.alias)/]
    [/if]
[/if]
[if (preSteps->notEmpty())]
    pre-steps:
    [for (step : Step | preSteps)]
      [listItem(generateStep(step))/]
    [/for]
[/if]
[if (postSteps->notEmpty())]
    post-steps:
    [for (step : Step | postSteps)]
      [listItem(generateStep(step))/]
    [/for]
[/if]
[/template]

[template public generateMatrixParameter(parameter : MatrixParameter)]
[generateVariableDeclaration(name)/]: [for (cell : Expression | cells) before ('[') separator (', ') after (']')][generateExpression(cell)/][/for]
[/template]

[template public generateMatrixCombination(combination : MatrixCombination)]
[for (variableAssignment : VariableAssignment | entries)]
[generateVariableAssignment(variableAssignment)/]
[/for]
[/template]

[template public generateExpression(expression : Expression) post (trim())]
[let expressionString : String = _generateExpression(expression).trim()]
[if (expressionString.contains('\n'))]|
[for (expressionPart : String | splitString(expressionString, '\n'))]
  [expressionPart.replaceAll('\n', '')/][/for]
[else]
[expressionString/]
[/if]
[/let]
[/template]

[template public _generateExpression(expression : Expression)]
[if (expression.oclIsUndefined())]null[elseif (expression.oclIsKindOf(Literal))][generateLiteral(expression.oclAsType(Literal))/][elseif (expression.oclIsTypeOf(Concat))][generateConcat(expression.oclAsType(Concat))/][elseif (expression.oclIsTypeOf(VariableReference))][generateVariableReference(expression.oclAsType(VariableReference))/][/if]
[/template]

[template public generateConcat(concat : Concat) post (trim())]
[let string : String = _generateConcat(concat)]
[if (string.contains('\n'))]
[string/]
[else]
[quoteString(string)/]
[/if]
[/let]
[/template]

[template public _generateConcat(concat : Concat) post (trim())]
[for (expression : Expression | expressions) separator ('')][_generateExpression(expression)/][/for]
[/template]

[template public generateLogic(logic : Logic) post (trim())]
[if (logic.oclIsKindOf(Literal))]
[generateLiteral(logic.oclAsType(Literal))/]
[elseif (logic.oclIsTypeOf(VariableReference))]
[generateVariableReference(logic.oclAsType(VariableReference))/]
[elseif (logic.oclIsKindOf(InfinitaryOperator))]
[generateInfinitaryOperator(logic)/]
[elseif (logic.oclIsTypeOf(Matches))]
[generateMatches(logic.oclAsType(Matches))/]	
[/if]
[/template]

[template public generateVariableReference(variableReference : VariableReference)]
[if (variableReference.eContainer().oclIsTypeOf(Concat))][_generateVariableReference(reference)/][else][quoteString(_generateVariableReference(reference))/][/if]
[/template]

[template public generateInfinitaryOperator(logic : Logic) post (trim())]
[if (logic.oclIsKindOf(InfinitaryOperator))]
[if (logic.oclIsTypeOf(And))]
and:
[elseif (logic.oclIsTypeOf(Or))]
or:
[elseif (logic.oclIsTypeOf(Equals))]
equals:
[/if]
[let infinitaryOperator : InfinitaryOperator = logic.oclAsType(InfinitaryOperator)]
[for (operand : Logic | infinitaryOperator.operands)]
  [listItem(generateLogic(operand))/]
[/for]
[/let]
[/if]
[/template]

[template public generateUnaryOperator(logic : Logic, addDash : Boolean) post (trim())]
[if (logic.oclIsKindOf(UnaryOperator))]
[if (logic.oclIsTypeOf(Not))]
not:
[/if]
[let unaryOperator : UnaryOperator = logic.oclAsType(UnaryOperator)]
  [generateLogic(unaryOperator.operand)/]
[/let]
[/if]
[/template]

[template public generateMatches(matches : Matches)]
matches:
  pattern: [generateExpression(pattern)/]
  value: [generateExpression(value)/]
[/template]

[template public generateLiteral(literal : Literal)]
[if (literal.oclIsTypeOf(StringLiteral))][if (not literal.eContainer().oclIsTypeOf(Concat) and not literal.oclAsType(StringLiteral).value.contains('\n') and not literal.eContainer().oclIsTypeOf(DotOperator))][quoteString(literal.oclAsType(StringLiteral).value)/][else][literal.oclAsType(StringLiteral).value/][/if][elseif (literal.oclIsTypeOf(IntegerLiteral))][literal.oclAsType(IntegerLiteral).value.toString()/][elseif (literal.oclIsTypeOf(DoubleLiteral))][literal.oclAsType(DoubleLiteral).value.toString()/][elseif (literal.oclIsTypeOf(BooleanLiteral))][if literal.oclAsType(BooleanLiteral).value]true[else]false[/if][/if]
[/template]

[template public generateVariableDeclaration(variableDeclaration : VariableDeclaration) post (trim())]
[name/]
[/template]
