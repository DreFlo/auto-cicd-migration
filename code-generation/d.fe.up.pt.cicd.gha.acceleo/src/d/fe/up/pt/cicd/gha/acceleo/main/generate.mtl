[comment encoding = UTF-8 /]
[module generate('http://d.fe.up.pt/GHA')]

[query public splitString(string : String, regex : String) : Sequence(String) = 
	invoke('d.fe.up.pt.cicd.gha.acceleo.services.CICD2GHA', 'splitString(java.lang.String, java.lang.String)', Sequence{string, regex})
/]

[query public getBinaryOperator(binaryOp : BinaryOp) : String =
  invoke('d.fe.up.pt.cicd.gha.acceleo.services.CICD2GHA', 'getBinaryOperator(d.fe.up.pt.cicd.gha.metamodel.GHA.BinaryOp)', Sequence{binaryOp})
/]

[query public getUnaryOperator(unaryOp : UnaryOp) : String =
  invoke('d.fe.up.pt.cicd.gha.acceleo.services.CICD2GHA', 'getUnaryOperator(d.fe.up.pt.cicd.gha.metamodel.GHA.UnaryOp)', Sequence{unaryOp})
/]

[query public quoteString(string : String) : String =
  invoke('d.fe.up.pt.cicd.gha.acceleo.services.CICD2GHA', 'quoteString(java.lang.String)', Sequence{string})
/]

[query public generateVariableReference(variableDeclaration : VariableDeclaration) : String =
  invoke('d.fe.up.pt.cicd.gha.acceleo.services.CICD2GHA', 'generateVariableReference(d.fe.up.pt.cicd.gha.metamodel.GHA.VariableDeclaration)', Sequence{variableDeclaration})
/]

[query public repeatString(string : String, n : Integer) : String =
  invoke('d.fe.up.pt.cicd.gha.acceleo.services.CICD2GHA', 'repeatString(java.lang.String, java.lang.Integer)', Sequence{string, n})
/]

[query public getEventTypeString(eventType : WEBHOOK_ACTIVITY_TYPES) : String =
  invoke('d.fe.up.pt.cicd.gha.acceleo.services.CICD2GHA', 'getEventTypeLiteral(d.fe.up.pt.cicd.gha.metamodel.GHA.WEBHOOK_ACTIVITY_TYPES)', Sequence{eventType})
/]


[template public listItem(item : String)]
- 
  [item/]
[/template]

[template public generateVariableDeclaration(variableDeclaration : VariableDeclaration) post (trim())]
[name/]
[/template]

[template public generateExpression(expression : Expression) post(trim())]
[let expressionString : String = _generateExpression(expression).trim()]
[if (expressionString.contains('\n'))]|
[for (expressionPart : String | splitString(expressionString, '\n'))]
  [expressionPart.replaceAll('\n', '')/]
[/for]
[else]
[expressionString/]
[/if]
[/let]
[/template]

[template public _generateExpression(expression : Expression)]
[if (expression.oclIsUndefined())]null[elseif (expression.oclIsKindOf(Literal) or expression.oclIsTypeOf(Concat))][__generateExpression(expression)/][elseif (expression.eContainer().oclIsKindOf(BinaryOp) or expression.eContainer().oclIsKindOf(UnaryOp) or expression.eContainer().oclIsKindOf(DotOp) or expression.eContainer().oclIsKindOf(BuiltInFunctionCall))][__generateExpression(expression)/][else]${{ [__generateExpression(expression)/] }}[/if]
[/template]

[template public __generateExpression(expression : Expression)]
[if (expression.oclIsKindOf(Literal))][generateLiteral(expression.oclAsType(Literal))/][elseif (expression.oclIsTypeOf(VariableReference))][generateVariableReference(expression.oclAsType(VariableReference).reference)/][elseif (expression.oclIsTypeOf(DotOp))][generateDotOp(expression.oclAsType(DotOp))/][elseif (expression.oclIsKindOf(BinaryOp))][generateBinaryOp(expression.oclAsType(BinaryOp))/][elseif (expression.oclIsKindOf(UnaryOp))][generateUnaryOp(expression.oclAsType(UnaryOp))/][elseif (expression.oclIsKindOf(Concat))][generateConcat(expression.oclAsType(Concat))/][/if]
[/template]

[template public generateConcat(concat : Concat) post (trim())]
[let string : String = _generateConcat(concat)]
[if (string.contains('\n'))]
[string/]
[else]
[quoteString(string)/]
[/if]
[/let]
[/template]

[template public _generateConcat(concat : Concat) post (trim())]
[for (expression : Expression | expressions) separator ('')][_generateExpression(expression)/][/for]
[/template]

[template public generateLiteral(literal : Literal)]
[if (literal.oclIsKindOf(StringLiteral))][generateStringLiteral(literal.oclAsType(StringLiteral))/][elseif (literal.oclIsKindOf(IntegerLiteral))][literal.oclAsType(IntegerLiteral).value/][elseif (literal.oclIsKindOf(DoubleLiteral))][literal.oclAsType(DoubleLiteral).value/][elseif (literal.oclIsKindOf(BooleanLiteral))][literal.oclAsType(BooleanLiteral).value/][/if]
[/template]

[template public generateStringLiteral(literal : StringLiteral)]
[if (not literal.eContainer().oclIsTypeOf(Concat) and not literal.value.contains('\n'))][quoteString(literal.value)/][else][literal.value/][/if]
[/template]

[template public generateDotOp(dotOp : DotOp) post (trim())]
[_generateExpression(lhs)/].[_generateExpression(rhs)/]
[/template]

[template public generateBinaryOp(binaryOp : BinaryOp) post (trim())]
[_generateExpression(lhs)/][getBinaryOperator(binaryOp)/][_generateExpression(rhs)/]
[/template]

[template public generateUnaryOp(unaryOp : UnaryOp) post (trim())]
[getUnaryOperator(unaryOp)/][_generateExpression(childExpr)/]
[/template]

[template public generateDefaults(defaults : Defaults) post (trim())]
run:
[if (not shell.oclIsUndefined())]
  shell: [generateExpression(shell)/]
[/if]
[if (not workingDirectory.oclIsUndefined())]
  working-directory: [generateExpression(workingDirectory)/]
[/if]
[/template]

[template public generateTrigger(trigger : Trigger) post (trim())]
[if (trigger.oclIsTypeOf(StandardEventTrigger))]
[generateStandardEventTrigger(trigger.oclAsType(StandardEventTrigger))/]
[elseif (trigger.oclIsTypeOf(WorkflowRunTrigger))]
[generateWorkflowRunTrigger(trigger.oclAsType(WorkflowRunTrigger))/]
[elseif (trigger.oclIsTypeOf(PullRequestTrigger))]
[generatePullRequestTrigger(trigger.oclAsType(PullRequestTrigger))/]
[elseif (trigger.oclIsTypeOf(PullRequestTargetTrigger))]
[generatePullRequestTargetTrigger(trigger.oclAsType(PullRequestTargetTrigger))/]
[elseif (trigger.oclIsTypeOf(PushTrigger))]
[generatePushTrigger(trigger.oclAsType(PushTrigger))/]
[elseif (trigger.oclIsTypeOf(ScheduleTrigger))]
[generateScheduleTrigger(trigger.oclAsType(ScheduleTrigger))/]
[elseif (trigger.oclIsTypeOf(WorkflowCallTrigger))]
[generateWorkflowCallTrigger(trigger.oclAsType(WorkflowCallTrigger))/]
[elseif (trigger.oclIsTypeOf(WorkflowDispatchTrigger))]
[generateWorkflowDispatchTrigger(trigger.oclAsType(WorkflowDispatchTrigger))/]
[/if]
[/template]

[template public generateStandardEventTrigger(trigger : StandardEventTrigger)]
[event/]:
  [generateEventTypesList(eventTypes)/]
[/template]

[template public generateWorkflowRunTrigger(trigger : WorkflowRunTrigger)]
workflow_run:
  [generateExpressionList(branches, 'branches-ignore', 'branches', ignoreSpecifiedBranches)/]
[/template]

[template public generatePullRequestTrigger(trigger : PullRequestTrigger)]
pull_request:
[if (eventTypes->notEmpty())]
  [generateEventTypesList(eventTypes)/]
[/if]
[if (branches->notEmpty())]
  [generateExpressionList(branches, 'branches-ignore', 'branches', ignoreSpecifiedBranches)/]
[/if]
[if (paths->notEmpty())]
  [generateExpressionList(paths, 'paths-ignore', 'paths', ignoreSpecifiedPaths)/]
[/if]
[/template]

[template public generatePullRequestTargetTrigger(trigger : PullRequestTargetTrigger)]
pull_request_target:
[if (eventTypes->notEmpty())]
  [generateEventTypesList(eventTypes)/]
[/if]
[if (branches->notEmpty())]
  [generateExpressionList(branches, 'branches-ignore', 'branches', ignoreSpecifiedBranches)/]
[/if]
[if (paths->notEmpty())]
  [generateExpressionList(paths, 'paths-ignore', 'paths', ignoreSpecifiedPaths)/]
[/if]
[/template]

[template public generatePushTrigger(trigger : PushTrigger)]
push:
[if (branches->notEmpty())]
  [generateExpressionList(branches, 'branches-ignore', 'branches', ignoreSpecifiedBranches)/]
[/if]
[if (paths->notEmpty())]
  [generateExpressionList(paths, 'paths-ignore', 'paths', ignoreSpecifiedPaths)/]
[/if]
[if (tags->notEmpty())]
  [generateExpressionList(tags, 'tags-ignore', 'tags', ignoreSpecifiedTags)/]
[/if]
[/template]

[template public generateScheduleTrigger(trigger : ScheduleTrigger)]
schedule:
[for (cron : Expression | crons)]
[listItem('cron: ' + quoteString(generateExpression(cron)))/]
[/for]
[/template]

[template public generateWorkflowCallTrigger(trigger : WorkflowCallTrigger)]
workflow_call:
[if (inputs->notEmpty())]
  inputs:
  [for (input : Input | inputs)]
    [generateInput(input)/]
  [/for]
[/if]
[if (outputs->notEmpty())]
  outputs:
  [for (output : Output | outputs)]
    [generateOutput(output)/]
  [/for]
[/if]
[if (secrets->notEmpty())]
  secrets:
  [for (secret : Secret | secrets)]
    [generateSecret(secret)/]
  [/for]
[/if]
[/template]

[template public generateWorkflowDispatchTrigger(trigger : WorkflowDispatchTrigger)]
workflow_dispatch:
[if (inputs->notEmpty())]
  inputs:
  [for (input : Input | inputs)]
    [generateInput(input)/]
  [/for]
[/if]
[/template]

[template public generateEventTypesList(eventTypes : OrderedSet(WEBHOOK_ACTIVITY_TYPES))]
types:
[for (eventType : WEBHOOK_ACTIVITY_TYPES | eventTypes)]
[listItem(getEventTypeString(eventType))/]
[/for]
[/template]

[template public generateExpressionList(expressions : OrderedSet(Expression), name1 : String, name2 : String, useName1 : Boolean) post (trim())]
[if (useName1)]
[name1/]:
[else]
[name2/]:
[/if]
[for (expression : Expression | expressions)]
[let expressionString : String = generateExpression(expression)]
[listItem(if expressionString.equalsIgnoreCase('') then '""' else expressionString endif)/]
[/let]
[/for]
[/template]

[template public generateInput(input : Input) post (trim())]
[generateVariableDeclaration(id)/]:
  type: [type/]
[if (not description.oclIsUndefined())]
  description: [generateExpression(description)/]
[/if]
[if (not isRequired.oclIsUndefined())]
  required: [isRequired/]
[/if]
[if (not default.oclIsUndefined())]
  default: [generateExpression(default)/]
[/if]
[if (options->notEmpty())]
  options:
  [for (option : String | options)]
  [listItem(option)/]
  [/for]
[/if]
[/template]

[template public generateOutput(output : Output) post (trim())]
[generateVariableDeclaration(id)/]:
[if (not description.oclIsUndefined())]
  description: [generateExpression(description)/]
[/if]
  value: [generateExpression(value)/]
[/template]

[template public generateSecret(secret : Secret) post (trim())]
[id/]:
[if (not description.oclIsUndefined())]
  description: [generateExpression(description)/]
[/if]
[if (not isRequired.oclIsUndefined())]
  required: [isRequired/]
[/if]
[/template]

[template public generatePermission(permission : Permission) post (trim())]
[key/]: [value/]
[/template]

[template public generateVariableAssignment(variableAssignment : VariableAssignment) post (trim())]
[generateVariableDeclaration(key)/]: [generateExpression(value)/]
[/template]

[template public generateConcurrencyGroup(concurrencyGroup : ConcurrencyGroup) post (trim())]
group: [generateExpression(name)/]
[if (not cancelInProgress.oclIsUndefined())]
cancel-in-progress: [generateExpression(cancelInProgress)/]
[/if]
[/template]

[template public generateJob(job : Job) post (trim())]
[name/]:
[if (not jobName.oclIsUndefined())]
  name: [generateExpression(jobName)/]
[/if]
[if (permissions->notEmpty())]
  permissions:
  [for (permission : Permission | permissions)]
    [generatePermission(permission)/]
  [/for]
[/if]
[if (dependsOn->notEmpty())]
  needs:
  [for (job : Job | dependsOn)]
  [listItem(job.name)/]
  [/for]
[/if]
[if (not ifCondition.oclIsUndefined())]
  if: [generateExpression(ifCondition)/]
[/if]
  [generateAgent(agent)/]
[if (not stagingEnvironment.oclIsUndefined())]
  [generateStagingEnvironment(stagingEnvironment)/]
[/if]
[if (not concurrencyGroup.oclIsUndefined())]
  concurency:
    [generateConcurrencyGroup(concurrencyGroup)/]
[/if]
[if (outputs->notEmpty())]
  outputs:
  [for (output : Output | outputs)]
    [generateOutput(output)/]
  [/for]
[/if]
[if (environmentVariables->notEmpty())]
  env:
  [for (variableAssignment : VariableAssignment | environmentVariables)]
    [generateVariableAssignment(variableAssignment)/]
  [/for]
[/if]
[if (not defaults.oclIsUndefined())]
  defaults:
    [generateDefaults(defaults)/]
[/if]
[if (not strategy.oclIsUndefined())]
  strategy:
    matrix:
    [for (axis : MatrixAxis | strategy.axes)]
      [generateExpressionList(axis.cells, axis.name.name, '', true)/]
    [/for]
    [if (strategy.includes->notEmpty())]
      include:
      [for (combination : MatrixCombination | strategy.includes)]
      [listItem(generateMatrixCombination(combination))/]
      [/for]
    [/if]
    [if (strategy.excludes->notEmpty())]
      exclude:
      [for (combination : MatrixCombination | strategy.excludes)]
      [listItem(generateMatrixCombination(combination))/]
      [/for]
    [/if]
  [if (not strategy.failFast.oclIsUndefined())]
    fail-fast: [generateExpression(strategy.failFast)/]
  [/if]
  [if (not strategy.maxParallel.oclIsUndefined())]
    max-parallel: [generateExpression(strategy.maxParallel)/]
  [/if]
[/if]
[if (not continueOnError.oclIsUndefined())]
  continue-on-error: [generateExpression(continueOnError)/]
[/if]
[if (not container.oclIsUndefined())]
  container:
    [generateContainer(container)/]
[/if]
[if (services->notEmpty())]
  services:
  [for (service : Service | services)]
    [service.key/]:
      [generateContainer(service.value)/]
  [/for]
[/if]
[if (job.oclIsTypeOf(ScriptJob))]
  steps:
  [for (abstractStep : AbstractStep | job.oclAsType(ScriptJob).steps)]
  [listItem(generateAbstractStep(abstractStep))/]
  [/for]
[elseif (job.oclIsTypeOf(WorkflowCallJob))]
  [generateWorkflowCallJob(job.oclAsType(WorkflowCallJob))/]
[/if]
[/template]

[template public generateAbstractStep(abstractStep : AbstractStep) post (trim())]
[if (abstractStep.oclIsTypeOf(IfStep))]
[generateIfStep(abstractStep.oclAsType(IfStep))/]
[else]
[generateStep(abstractStep.oclAsType(Step))/]
[/if]
[/template]

[template public generateIfStep(step : IfStep)]
if: [generateExpression(ifCondition)/]
[generateStep(thenRun)/]
[/template]

[template public generateStep(step : Step)]
[if (step.oclIsTypeOf(Command))]
[let command : Command = step.oclAsType(Command)]
run: [generateExpression(command.command)/]
[/let]
[elseif (step.oclIsTypeOf(Package))]
[let _package : Package = step.oclAsType(Package)]
uses: [generateExpression(_package.uses)/]
[if (_package.args->notEmpty() or not _package.entrypoint.oclIsUndefined() or not _package.containerArgs.oclIsUndefined())]
with:
[for (variableAssignment : VariableAssignment | _package.args)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[if (not _package.entrypoint.oclIsUndefined())]
  entrypoint: [generateExpression(_package.entrypoint)/]
[/if]
[if (not _package.containerArgs.oclIsUndefined())]
  args: [generateExpression(_package.containerArgs)/]
[/if]
[/if]
[/let]
[/if]
[if (not id.oclIsUndefined())]
id: [quoteString(id)/]
[/if]
[if (not name.oclIsUndefined())]
name: [generateExpression(name)/]
[/if]
[if (not timeoutMinutes.oclIsUndefined())]
timeout-minutes: [generateExpression(timeoutMinutes)/]
[/if]
[if (not continueOnError.oclIsUndefined())]
continue-on-error: [generateExpression(continueOnError)/]
[/if]
[if (not shell.oclIsUndefined())]
shell: [generateExpression(shell)/]
[/if]
[if (not workingDirectory.oclIsUndefined())]
working-directory: [generateExpression(workingDirectory)/]
[/if]
[if (environmentVariables->notEmpty())]
env:
[for (variableAssignment : VariableAssignment | environmentVariables)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[/if]
[/template]

[template public generateWorkflowCallJob(workflowCallJob : WorkflowCallJob)]
uses: [generateExpression(uses)/]
[if (args->notEmpty())]
with:
[for (variableAssignment : VariableAssignment | args)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[if (inheritSecrets)]
secrets: inherit
[elseif (secrets->notEmpty())]
secrets:
[for (variableAssignment : VariableAssignment | secrets)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[/if]
[/if]
[/template]

[template public generateAgent(agent : Agent) post (trim())]
[if (group.oclIsUndefined())]
[generateExpressionList(labels, 'runs-on', '', true)/]
[else]
runs-on:
  group: [generateExpression(group)/]
[if (labels->notEmpty())]
  [generateExpressionList(labels, 'labels', '', true)/]
[/if]
[/if]
[/template]

[template public generateStagingEnvironment(stagingEnvironment : StagingEnvironment) post (trim())]
[if (url.oclIsUndefined())]
environment: [generateExpression(name)/]
[else]
environment:
  name: [generateExpression(name)/]
  url: [generateExpression(url)/]
[/if]
[/template]

[template public generateMatrixCombination(combination : MatrixCombination) post (trim())]
[for (entry : VariableAssignment | entries) before ('{ ') separator (', ') after(' }')][generateVariableAssignment(entry).trim()/][/for]
[/template]

[template public generateContainer(container : Container) post (trim())]
image: [generateExpression(image)/]
[if (not username.oclIsUndefined() or not password.oclIsUndefined())]
credentials:
[if (not username.oclIsUndefined())]
  username: [generateExpression(username)/]
[/if]
[if (not password.oclIsUndefined())]
  password: [generateExpression(password)/]
[/if]
[/if]
[if (environmentVariables->notEmpty())]
env:
[for (variableAssignment : VariableAssignment | environmentVariables)]
  [generateVariableAssignment(variableAssignment)/]
[/for]
[/if]
[if (ports->notEmpty())]
ports:
[for (port : Expression | ports)]
[listItem(generateExpression(port))/]
[/for]
[/if]
[if (volumes->notEmpty())]
volumes:
[for (volume : Expression | volumes)]
[listItem(generateExpression(volume))/]
[/for]
[/if]
[if (not options.oclIsUndefined())]
options: [generateExpression(options)/]
[/if]
[/template]

[template public generateWorkflow(workflow : Workflow)]
[comment @main/]
[file ('workflow.yaml', false, 'UTF-8')]
[if (not name.oclIsUndefined())]
name: [generateExpression(name)/]

[/if]
[if (not runName.oclIsUndefined())]
run-name: [generateExpression(runName)/]

[/if]
[if (triggers->notEmpty())]
on:
[for (trigger : Trigger | triggers)]
  [generateTrigger(trigger)/]
[/for]

[/if]
[if (permissions->notEmpty())]
permissions:
[for (permission : Permission | permissions)]
  [generatePermission(permission)/]
[/for]

[/if]
[if (not defaults.oclIsUndefined())]
defaults:
  [generateDefaults(defaults)/]

[/if]
[if (not concurrencyGroup.oclIsUndefined())]
concurency:
  [generateConcurrencyGroup(concurrencyGroup)/]

[/if]
[if (environmentVariables->notEmpty())]
env:
[for (variableAssignment : VariableAssignment | environmentVariables)]
  [generateVariableAssignment(variableAssignment)/]
[/for]

[/if]
jobs:
[for (job : Job | jobs)]
  [generateJob(job)/]
[/for]
[/file]
[/template]
