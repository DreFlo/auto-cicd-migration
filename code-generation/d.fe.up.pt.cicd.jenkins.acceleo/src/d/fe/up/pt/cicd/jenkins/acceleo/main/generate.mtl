[comment encoding = UTF-8 /]
[module generate('http://d.fe.up.pt/Jenkins')]

[query public quoteString (string : String) : String =
	invoke('d.fe.up.pt.cicd.jenkins.acceleo.services.CICD2Jenkins', 'quoteString(java.lang.String)', Sequence{string})
/]

[query public getBinaryOperator(binaryOp : BinaryOp) : String =
	invoke('d.fe.up.pt.cicd.jenkins.acceleo.services.CICD2Jenkins', 'getBinaryOperator(d.fe.up.pt.cicd.jenkins.metamodel.Jenkins.BinaryOp)', Sequence{binaryOp})
/]

[query public getUnaryOperator(unaryOp : UnaryOp) : String =
	invoke('d.fe.up.pt.cicd.jenkins.acceleo.services.CICD2Jenkins', 'getUnaryOperator(d.fe.up.pt.cicd.jenkins.metamodel.Jenkins.UnaryOp)', Sequence{unaryOp})
/]


[template public generateAbstractStage(abstractStage : AbstractStage) post (trim())]
stage([quoteString(abstractStage.name)/]) {
[if (not abstractStage.agent.oclIsUndefined())]
	[generateAbstractAgent(abstractStage.agent)/]
[/if]
[if (not abstractStage.whens->isEmpty())]
	when {
	[for (when : When | abstractStage.whens)]
		[generateWhen(when)/]
	[/for]
	}
[/if]
[if (not abstractStage.environmentVariables->isEmpty())]
	[generateEnvironment(abstractStage.environmentVariables)/]
[/if]
[if (abstractStage.oclIsKindOf(StepStage))]
	[generateStepStage(abstractStage.oclAsType(StepStage))/]
[elseif (abstractStage.oclIsKindOf(MatrixStage))]
	[generateMatrixStage(abstractStage.oclAsType(MatrixStage))/]
[elseif (abstractStage.oclIsKindOf(ParallelNestedStage))]
	[generateParallel(abstractStage.oclAsType(ParallelNestedStage))/]
[/if]
}
[/template]

[template public generateMatrixStage(matrixStage : MatrixStage)]
matrix {
	axes {
	[for (axis : MatrixAxis | matrixStage.axes)]
		[generateMatrixAxis(axis)/]
	[/for]
	}
	[if (not matrixStage.excludes->isEmpty())]
	excludes {
	[for (exclude : MatrixCombination | matrixStage.excludes)]
		exclude {
			[generateMatrixCombination(exclude)/]
		}
	[/for]
	}
	[/if]
	stages {
	[for (abstractStage : AbstractStage | matrixStage.stages)]
		[generateAbstractStage(abstractStage)/]
	[/for]
	}
}
[/template]

[template public generateMatrixAxis(axis : MatrixAxis) post (trim())]
axis {
	name [quoteString(axis.name)/]
	values [for (cell : Expression | axis.cells)][generateExpression(cell)/][if (axis.cells->indexOf(cell) <> axis.cells->size())], [/if][/for]
}
[/template]

[template public generateMatrixCombination(combination : MatrixCombination) post (trim())]
[for (assignment : Assignment | entries)]
axis {
	name [quoteString(assignment.key.name)/]
	values [generateExpression(assignment.value)/]
}
[/for]
[/template]

[template public generateStepStage(stepStage : StepStage)]
steps {
[for (abstractStep : AbstractStep | stepStage.steps)]
	[generateAbstractStep(abstractStep)/]
[/for]
}
[/template]

[template public generateParallel(parallelNestedStage : ParallelNestedStage)]
parallel {
[for (abstractStage : AbstractStage | parallelNestedStage.stages)]
	[generateAbstractStage(abstractStage)/]
[/for]
}
[/template]

[template public generateAbstractStep(abstractStep : AbstractStep) post (trim())]
[if (abstractStep.oclIsKindOf(Step))]
[generateStep(abstractStep.oclAsType(Step))/]
[elseif (abstractStep.oclIsKindOf(ConditionalStep))]
[generateConditionalStep(abstractStep.oclAsType(ConditionalStep))/]
[elseif (abstractStep.oclIsKindOf(ScriptedBlock))]
[generateScriptedBlock(abstractStep.oclAsType(ScriptedBlock))/]
[/if]
[/template]

[template public generateStep(step : Step)]
[step.command/] [for (argument : Assignment | arguments) separator (', ')][generateAssignment(argument, ':')/][/for]
[/template]

[template public generateConditionalStep(conditionalStep : ConditionalStep)]
if ([generateExpression(conditionalStep.ifCondition)/]) {
[for (abstractStep : AbstractStep | conditionalStep.thenRun)]
	[generateAbstractStep(abstractStep)/]
[/for]
}
[if (conditionalStep.elseRun->notEmpty())]
else {
[for (abstractStep : AbstractStep | conditionalStep.elseRun)]
	[generateAbstractStep(abstractStep)/]
[/for]
}
[/if]
[/template]

[template public generateScriptedBlock(scriptedBlock : ScriptedBlock)]
script {
[for (abstractStep : AbstractStep | scriptedBlock.steps)]
	[generateAbstractStep(abstractStep)/]
[/for]
}
[/template]

[template public generateExpression(expression : Expression) post (trim())]
[if (expression.oclIsUndefined())]
OclUndefined
[elseif (expression.oclIsKindOf(Variable))]
[generateVariable(expression.oclAsType(Variable))/]
[elseif (expression.oclIsKindOf(JenkinsContext))]
[generateJekinsContext(expression.oclAsType(JenkinsContext))/]
[elseif (expression.oclIsKindOf(VariableDereference))]
[generateVariableDereference(expression.oclAsType(VariableDereference))/]
[elseif (expression.oclIsKindOf(Literal))]
[generateLiteral(expression.oclAsType(Literal))/]
[elseif (expression.oclIsKindOf(BinaryOp))]
[generateBinaryOp(expression.oclAsType(BinaryOp))/]
[elseif (expression.oclIsKindOf(UnaryOp))]
[generateUnaryOp(expression.oclAsType(UnaryOp))/]
[elseif (expression.oclIsKindOf(Function))]
[generateFuntion(expression.oclAsType(Function))/]
[elseif (expression.oclIsTypeOf(Assignment))]
[generateAssignment(expression.oclAsType(Assignment), ':')/]
[elseif (expression.oclIsTypeOf(Array))]
[generateArray(expression.oclAsType(Array))/]
[/if]
[/template]

[template public generateVariable(variable : Variable)]
[variable.name/]
[/template]

[template public generateJekinsContext(jenkinsContext : JenkinsContext)]
[jenkinsContext.name/]
[/template]

[template public generateVariableDereference(variableDereference : VariableDereference)]
[generateExpression(variableDereference.variable)/].[variableDereference.property/]
[/template]

[template public generateLiteral(literal : Literal)]
[if (literal.oclIsKindOf(StringLiteral))]
[quoteString(oclAsType(StringLiteral).value)/]
[elseif (literal.oclIsKindOf(IntegerLiteral))]
[oclAsType(IntegerLiteral).value/]
[elseif (literal.oclIsKindOf(DoubleLiteral))]
[oclAsType(DoubleLiteral).value/]
[elseif (literal.oclIsKindOf(BooleanLiteral))]
[oclAsType(BooleanLiteral).value/]
[/if]
[/template]

[template public generateBinaryOp(binaryOp : BinaryOp)]
[generateExpression(binaryOp.lhs)/] [getBinaryOperator(binaryOp)/] [generateExpression(binaryOp.rhs)/]
[/template]

[template public generateUnaryOp(unaryOp : UnaryOp)]
[getUnaryOperator(unaryOp)/] [generateExpression(unaryOp.childExpr)/]
[/template]

[template public generateFuntion(function : Function)]
[name/][for (expression : Expression | arguments) before ('(') separator (', ') after (')')][generateExpression(expression)/][/for])
[/template]

[template public generateArray(array : Array)]
[for (expression : Expression | values) before ('[') separator (', ') after(']')][generateExpression(expression)/][/for]
[/template]

[template public generateAbstractAgent(abstractAgent : AbstractAgent) post (trim())]
[if (abstractAgent.oclIsKindOf(AnyAgent))]
agent any
[elseif (abstractAgent.oclIsTypeOf(LabelAgent))]
[generateLabelAgent(abstractAgent.oclAsType(LabelAgent))/]
[elseif (abstractAgent.oclIsTypeOf(NodeAgent))]
[generateNodeAgent(abstractAgent.oclAsType(NodeAgent))/]
[elseif (abstractAgent.oclIsTypeOf(DockerAgent))]
[generateDockerAgent(abstractAgent.oclAsType(DockerAgent))/]
[/if]
[/template]

[template public generateLabelAgent(labelAgent : LabelAgent)]
agent {
[if (not labelAgent.labels.oclIsUndefined())]
	// label names may not make sense
	label [generateExpression(labelAgent.labels)/]
[/if]
}
[/template]

[template public generateDockerAgent(dockerAgent : DockerAgent)]
agent {
[if (not dockerAgent.docker.oclIsUndefined())]
	docker {
	[if (not dockerAgent.labels.oclIsUndefined())]
		// label names may not make sense
		label [quoteString(generateExpression(dockerAgent.labels).replaceAll('\'', ''))/]
	[/if]
		image [quoteString(dockerAgent.docker.image)/]
	[if (not docker.args.oclIsUndefined() and docker.args <> '')]
		args [quoteString(docker.args.trim())/]
	[/if]
	}
[/if]
}
[/template]

[template public generateNodeAgent(nodeAgent : NodeAgent)]
agent {
	node {
	[if (not nodeAgent.labels.oclIsUndefined())]
		// label names may not make sense
		label [quoteString(generateExpression(nodeAgent.labels).replaceAll('\'', ''))/]
	[/if]
	[if (not nodeAgent.customWorkspace.oclIsUndefined())]
		customWorkspace [quoteString(nodeAgent.customWorkspace)/]
	[/if]
	}
}
[/template]

[template public generateAssignment(assignment : Assignment, sep : String)]
[key.name/] [sep/] [generateExpression(assignment.value)/]
[/template]

[template public generateEnvironment(environmentVariables : OrderedSet(Assignment))]
environment {
[for (environmentVariable : Assignment | environmentVariables)]
	[generateAssignment(environmentVariable, '=')/]
[/for]
}
[/template]

[template public generateTriggers(triggers : OrderedSet(Trigger))]
triggers {
[for (trigger : Trigger | triggers)]
	[generateTrigger(trigger)/]
[/for]
}
[/template]

[template public generateTrigger(trigger : Trigger) post (trim())]
[if (trigger.oclIsKindOf(ScheduledTrigger))]
[generateScheduledTrigger(trigger.oclAsType(ScheduledTrigger))/]
[/if]
[/template]

[template public generateScheduledTrigger(scheduledTrigger : ScheduledTrigger)]
cron([quoteString(scheduledTrigger.cron)/])
[/template]

[template public generateWhen(when : When) post (trim())]
[if (when.oclIsTypeOf(WhenExpression))]
[generateWhenExpression(when.oclAsType(WhenExpression))/]
[/if]
[/template]

[template public generateWhenExpression(when : WhenExpression)]
expression {
	[generateExpression(when.expression)/]
}
[/template]

[template public generatePipeline(pipeline : Pipeline)]
[comment @main/]
[file ('Jenkinsfile', false, 'UTF-8')]
pipeline {
	[generateAbstractAgent(pipeline.agent)/]
[if (not pipeline.environmentVariables->isEmpty())]
	[generateEnvironment(pipeline.environmentVariables)/]
[/if]
[if (not pipeline.triggers->isEmpty())]
	[generateTriggers(pipeline.triggers)/]
[/if]
	stages {
	[for (abstractStage : AbstractStage | pipeline.stages)]
		[generateAbstractStage(abstractStage)/]
	[/for]
	}
}
[/file]
[/template]
