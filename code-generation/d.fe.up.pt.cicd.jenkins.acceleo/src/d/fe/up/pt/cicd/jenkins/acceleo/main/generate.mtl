[comment encoding = UTF-8 /]
[module generate('http://d.fe.up.pt/Jenkins')]

[query public quoteString (string : String) : String =
	invoke('d.fe.up.pt.cicd.jenkins.acceleo.services.CICD2Jenkins', 'quoteString(java.lang.String)', Sequence{string})
/]

[query public getBinaryOperator(binaryOp : BinaryOp) : String =
	invoke('d.fe.up.pt.cicd.jenkins.acceleo.services.CICD2Jenkins', 'getBinaryOperator(d.fe.up.pt.cicd.jenkins.metamodel.Jenkins.BinaryOp)', Sequence{binaryOp})
/]

[query public getUnaryOperator(unaryOp : UnaryOp) : String =
	invoke('d.fe.up.pt.cicd.jenkins.acceleo.services.CICD2Jenkins', 'getUnaryOperator(d.fe.up.pt.cicd.jenkins.metamodel.Jenkins.UnaryOp)', Sequence{unaryOp})
/]

[template public generateAbstractStage(abstractStage : AbstractStage) post (trim())]
stage([quoteString(abstractStage.name)/]) {
[if (not abstractStage.agent.oclIsUndefined())]
	[generateAbstractAgent(abstractStage.agent)/]
[/if]
[if (not abstractStage.environmentVariables->isEmpty())]
	[generateEnvironment(abstractStage.environmentVariables)/]
[/if]
[if (abstractStage.oclIsKindOf(StepStage))]
	[generateStepStage(abstractStage.oclAsType(StepStage))/]
[elseif (abstractStage.oclIsKindOf(ParallelNestedStage))]
	[generateParallel(abstractStage.oclAsType(ParallelNestedStage))/]
[/if]
}
[/template]

[template public generateStepStage(stepStage : StepStage)]
steps {
[for (abstractStep : AbstractStep | stepStage.steps)]
	[generateAbstractStep(abstractStep)/]
[/for]
}
[/template]

[template public generateParallel(parallelNestedStage : ParallelNestedStage)]
parallel {
[for (abstractStage : AbstractStage | parallelNestedStage.stages)]
	[generateAbstractStage(abstractStage)/]
[/for]
}
[/template]

[template public generateAbstractStep(abstractStep : AbstractStep) post (trim())]
[if (abstractStep.oclIsKindOf(Step))]
[generateStep(abstractStep.oclAsType(Step))/]
[elseif (abstractStep.oclIsKindOf(ConditionalStep))]
[generateConditionalStep(abstractStep.oclAsType(ConditionalStep))/]
[/if]
[/template]

[template public generateStep(step : Step)]
[step.command/] [quoteString(step.arguments)/]
[/template]

[template public generateConditionalStep(conditionalStep : ConditionalStep)]
if ([generateExpression(conditionalStep.ifCondition)/]) {
[for (abstractStep : AbstractStep | conditionalStep.thenRun)]
	[generateAbstractStep(abstractStep)/]
[/for]
}
[if (conditionalStep.elseRun->notEmpty())]
else {
[for (abstractStep : AbstractStep | conditionalStep.elseRun)]
	[generateAbstractStep(abstractStep)/]
[/for]
}
[/if]
[/template]

[template public generateExpression(expression : Expression) post (trim())]
[if (expression.oclIsKindOf(Variable))]
[generateVariable(expression.oclAsType(Variable))/]
[elseif (expression.oclIsKindOf(Literal))]
[generateLiteral(expression.oclAsType(Literal))/]
[elseif (expression.oclIsKindOf(BinaryOp))]
[generateBinaryOp(expression.oclAsType(BinaryOp))/]
[elseif (expression.oclIsKindOf(UnaryOp))]
[generateUnaryOp(expression.oclAsType(UnaryOp))/]
[/if]
[/template]

[template public generateVariable(variable : Variable)]
env.[variable.name/]
[/template]

[template public generateLiteral(literal : Literal)]
[if (literal.oclIsKindOf(StringLiteral))]
[quoteString(oclAsType(StringLiteral).value)/]
[elseif (literal.oclIsKindOf(IntegerLiteral))]
[oclAsType(IntegerLiteral).value/]
[elseif (literal.oclIsKindOf(DoubleLiteral))]
[oclAsType(DoubleLiteral).value/]
[elseif (literal.oclIsKindOf(BooleanLiteral))]
[oclAsType(BooleanLiteral).value/]
[/if]
[/template]

[template public generateBinaryOp(binaryOp : BinaryOp)]
[generateExpression(binaryOp.lhs)/] [getBinaryOperator(binaryOp)/] [generateExpression(binaryOp.rhs)/]
[/template]

[template public generateUnaryOp(unaryOp : UnaryOp)]
[getUnaryOperator(unaryOp)/] [generateExpression(unaryOp.childExpr)/]
[/template]

[template public generateAbstractAgent(abstractAgent : AbstractAgent) post (trim())]
[if (abstractAgent.oclIsKindOf(OptionedAgent))]
[generateOptionedAgent(abstractAgent.oclAsType(OptionedAgent))/]
[/if]
[/template]

[template public generateOptionedAgent(optionedAgent : OptionedAgent)]
agent {
[if (not optionedAgent.labels.oclIsUndefined())]
	// label names may not make sense
	label [generateExpression(optionedAgent.labels)/]
[/if]
[if (not optionedAgent.docker.oclIsUndefined())]
	docker {
		image [quoteString(optionedAgent.docker.image)/]
	}
[/if]
}
[/template]

[template public generateAssignment(assignment : Assignment)]
[key.name/] = [generateExpression(assignment.value)/]
[/template]

[template public generateEnvironment(environmentVariables : OrderedSet(Assignment))]
environment {
[for (environmentVariable : Assignment | environmentVariables)]
	[generateAssignment(environmentVariable)/]
[/for]
}
[/template]

[template public generateTriggers(triggers : OrderedSet(Trigger))]
triggers {
[for (trigger : Trigger | triggers)]
	[generateTrigger(trigger)/]
[/for]
}
[/template]

[template public generateTrigger(trigger : Trigger) post (trim())]
[if (trigger.oclIsKindOf(ScheduledTrigger))]
[generateScheduledTrigger(trigger.oclAsType(ScheduledTrigger))/]
[/if]
[/template]

[template public generateScheduledTrigger(scheduledTrigger : ScheduledTrigger)]
cron([quoteString(scheduledTrigger.cron)/])
[/template]

[template public generatePipeline(pipeline : Pipeline)]
[comment @main/]
[file ('Jenkinsfile', false, 'UTF-8')]
pipeline {
[if (not pipeline.environmentVariables->isEmpty())]
	[generateEnvironment(pipeline.environmentVariables)/]
[/if]
[if (not pipeline.triggers->isEmpty())]
	[generateTriggers(pipeline.triggers)/]
[/if]
	stages {
	[for (abstractStage : AbstractStage | pipeline.stages)]
		[generateAbstractStage(abstractStage)/]
	[/for]
	}
}
[/file]
[/template]
