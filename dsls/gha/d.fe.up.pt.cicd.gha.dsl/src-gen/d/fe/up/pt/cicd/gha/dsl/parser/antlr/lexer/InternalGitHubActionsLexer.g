/*
 * generated by Xtext 2.33.0
 */
lexer grammar InternalGitHubActionsLexer;

@header {
package d.fe.up.pt.cicd.gha.dsl.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

Pull_request_review_comment : 'pull_request_review_comment';

Branch_protection_rule : 'branch_protection_rule';

Review_request_removed : 'review_request_removed';

Auto_merge_disabled : 'auto_merge_disabled';

Pull_request_review : 'pull_request_review';

Repository_dispatch : 'repository_dispatch';

Repository_projects : 'repository_projects';

Auto_merge_enabled : 'auto_merge_enabled';

Converted_to_draft : 'converted_to_draft';

Deployment_status : 'deployment_status';

Ready_for_review : 'ready_for_review';

Registry_package : 'registry_package';

Review_requested : 'review_requested';

Security_events : 'security_events';

Project_column : 'project_column';

Pull_requests : 'pull_requests';

Project_card : 'project_card';

Check_suite : 'check_suite';

Deployments : 'deployments';

Discussions : 'discussions';

Environment : 'environment';

Merge_group : 'merge_group';

Synchronize : 'synchronize';

Deployment : 'deployment';

Discussion : 'discussion';

Page_build : 'page_build';

StartsWith : 'startsWith';

Unassigned : 'unassigned';

Cancelled : 'cancelled';

Check_run : 'check_run';

HashFiles : 'hashFiles';

Milestone : 'milestone';

Unlabeled : 'unlabeled';

Assigned : 'assigned';

Contains : 'contains';

Contents : 'contents';

EndsWith : 'endsWith';

FromJSON : 'fromJSON';

IdToken : 'id-token';

Packages : 'packages';

Reopened : 'reopened';

RunName : 'run-name';

Statuses : 'statuses';

Strategy : 'strategy';

Unlocked : 'unlocked';

Actions : 'actions';

Boolean : 'boolean';

Created : 'created';

Deleted : 'deleted';

Failure : 'failure';

Labeled : 'labeled';

Project : 'project';

Release : 'release';

Secrets : 'secrets';

Success : 'success';

Always : 'always';

Checks : 'checks';

Choice : 'choice';

Closed : 'closed';

Create : 'create';

Delete : 'delete';

Edited : 'edited';

Format : 'format';

Github : 'github';

Gollum : 'gollum';

Inputs : 'inputs';

Issues : 'issues';

Locked : 'locked';

Matrix : 'matrix';

Number : 'number';

Opened : 'opened';

Public : 'public';

Runner : 'runner';

Status : 'status';

String : 'string';

ToJSON : 'toJSON';

Label : 'label';

Needs : 'needs';

Pages : 'pages';

Steps : 'steps';

Watch : 'watch';

Write : 'write';

Fork : 'fork';

Jobs : 'jobs';

Join : 'join';

Name : 'name';

None : 'none';

Read : 'read';

Vars : 'vars';

DollarSignLeftCurlyBracketLeftCurlyBracket : '${{';

Env : 'env';

Job : 'job';

ExclamationMarkEqualsSign : '!=';

AmpersandAmpersand : '&&';

LessThanSignEqualsSign : '<=';

EqualsSignEqualsSign : '==';

GreaterThanSignEqualsSign : '>=';

VerticalLineVerticalLine : '||';

RightCurlyBracketRightCurlyBracket : '}}';

ExclamationMark : '!';

QuotationMark : '"';

Apostrophe : '\'';

LeftParenthesis : '(';

RightParenthesis : ')';

Comma : ',';

FullStop : '.';

Colon : ':';

LessThanSign : '<';

GreaterThanSign : '>';

LeftSquareBracket : '[';

RightSquareBracket : ']';

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('true'|'false');

RULE_UNQUOTED_STRING : RULE_UNQUOTED_STRING_BEGIN_CHARS RULE_UNQUOTED_STRING_CHARS*;

fragment RULE_UNQUOTED_STRING_CHARS : ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'@'|'`'|'~');

fragment RULE_UNQUOTED_STRING_BEGIN_CHARS : ('a'..'z'|'A'..'Z'|'_'|'@'|'`'|'~');

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_NEWLINE : '\r'? '\n';

RULE_WS : (' '|'\t')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;
