/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.gha.dsl.serializer;

import com.google.inject.Inject;
import d.fe.up.pt.cicd.gha.dsl.services.GitHubActionsGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class GitHubActionsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GitHubActionsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_0_0_1_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_0_1_4_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_0_2_0_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_0_2_2_2_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_0_2_4_a;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_0_0_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_0_2_0_0_2_1_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_0_2_0_1_4_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_0_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_2_2_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_4_a;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_0_2_1_3_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_1_0_0_3_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_1_0_1_0_2_1_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_1_0_1_1_4_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_0_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_2_2_p;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_4_a;
	protected AbstractElementAlias match_Agent_NEWLINETerminalRuleCall_1_1_2_a;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_0_3_p;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_2_3_p;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_3_3_p;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_4_3_p;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_5_2_p;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_5_6_a;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_6_3_p;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_7_0_3_p;
	protected AbstractElementAlias match_Command_NEWLINETerminalRuleCall_7_1_3_p;
	protected AbstractElementAlias match_Command___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6_a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q;
	protected AbstractElementAlias match_ConcurrencyGroup_NEWLINETerminalRuleCall_0_3_p;
	protected AbstractElementAlias match_ConcurrencyGroup_NEWLINETerminalRuleCall_1_3_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_0_1_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_0_0_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_0_2_3_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_1_5_a;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_2_0_2_1_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_2_1_4_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_2_2_0_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_2_2_2_2_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_2_2_4_a;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_3_0_2_1_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_3_1_4_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_3_2_0_a;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_3_2_2_2_a;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_3_2_4_a;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_4_3_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_5_0_0_2_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_5_0_0_4_3_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_5_0_1_0_3_p;
	protected AbstractElementAlias match_Container_NEWLINETerminalRuleCall_1_5_0_1_2_a;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_1_4_NEWLINETerminalRuleCall_1_1_5_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_2_2_3_NEWLINETerminalRuleCall_1_2_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_2_2_0_p_BEGINTerminalRuleCall_1_2_2_1__q;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_3_2_3_NEWLINETerminalRuleCall_1_3_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_3_2_0_a_BEGINTerminalRuleCall_1_3_2_1__q;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__p;
	protected AbstractElementAlias match_Defaults_NEWLINETerminalRuleCall_2_p;
	protected AbstractElementAlias match_Defaults_NEWLINETerminalRuleCall_4_0_3_p;
	protected AbstractElementAlias match_Defaults_NEWLINETerminalRuleCall_4_1_3_p;
	protected AbstractElementAlias match_Defaults_NEWLINETerminalRuleCall_6_a;
	protected AbstractElementAlias match_IfStatement_NEWLINETerminalRuleCall_3_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_0_2_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_0_4_3_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_1_3_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_2_3_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_3_3_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_4_0_0_2_1_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_4_0_1_4_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_4_0_2_0_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_4_0_2_2_2_p;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_4_0_2_4_a;
	protected AbstractElementAlias match_Input_NEWLINETerminalRuleCall_4_2_a;
	protected AbstractElementAlias match_Input___ENDTerminalRuleCall_4_0_2_3_NEWLINETerminalRuleCall_4_0_2_4_a_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_2_a_NEWLINETerminalRuleCall_4_0_2_0_p_BEGINTerminalRuleCall_4_0_2_1__q;
	protected AbstractElementAlias match_MatrixAxis_NEWLINETerminalRuleCall_2_0_1_p;
	protected AbstractElementAlias match_MatrixAxis_NEWLINETerminalRuleCall_2_1_4_p;
	protected AbstractElementAlias match_MatrixAxis_NEWLINETerminalRuleCall_2_2_0_p;
	protected AbstractElementAlias match_MatrixAxis_NEWLINETerminalRuleCall_2_2_2_2_p;
	protected AbstractElementAlias match_MatrixAxis_NEWLINETerminalRuleCall_2_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_2_a;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a;
	protected AbstractElementAlias match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_2_a;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q;
	protected AbstractElementAlias match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_0_p;
	protected AbstractElementAlias match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_2_4_p;
	protected AbstractElementAlias match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_4_a;
	protected AbstractElementAlias match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_2_p;
	protected AbstractElementAlias match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_6_1_p;
	protected AbstractElementAlias match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_1_4_p;
	protected AbstractElementAlias match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_0_p;
	protected AbstractElementAlias match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_2_2_p;
	protected AbstractElementAlias match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_4_a;
	protected AbstractElementAlias match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_2_a;
	protected AbstractElementAlias match_OptionedTrigger_NEWLINETerminalRuleCall_0_p;
	protected AbstractElementAlias match_OptionedTrigger_NEWLINETerminalRuleCall_4_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_0_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_p;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_6_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_2_a;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_NEWLINETerminalRuleCall_3_0_2_0_0_6_a_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_p_BEGINTerminalRuleCall_3_0_2_0_0_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_NEWLINETerminalRuleCall_3_0_2_1_6_a_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_p_BEGINTerminalRuleCall_3_0_2_1_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_NEWLINETerminalRuleCall_3_1_0_0_6_a_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_p_BEGINTerminalRuleCall_3_1_0_0_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_NEWLINETerminalRuleCall_3_1_1_6_a_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_p_BEGINTerminalRuleCall_3_1_1_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_NEWLINETerminalRuleCall_3_2_0_0_0_6_a_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_p_BEGINTerminalRuleCall_3_2_0_0_0_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_NEWLINETerminalRuleCall_3_2_0_1_6_a_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_p_BEGINTerminalRuleCall_3_2_0_1_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q;
	protected AbstractElementAlias match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_3_p;
	protected AbstractElementAlias match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_2_p;
	protected AbstractElementAlias match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_6_a;
	protected AbstractElementAlias match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_7_a;
	protected AbstractElementAlias match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_2_p;
	protected AbstractElementAlias match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_6_1_p;
	protected AbstractElementAlias match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_1_4_p;
	protected AbstractElementAlias match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_0_p;
	protected AbstractElementAlias match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_2_2_p;
	protected AbstractElementAlias match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_4_a;
	protected AbstractElementAlias match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_2_a;
	protected AbstractElementAlias match_Output_NEWLINETerminalRuleCall_0_2_p;
	protected AbstractElementAlias match_Output_NEWLINETerminalRuleCall_0_4_3_p;
	protected AbstractElementAlias match_Output_NEWLINETerminalRuleCall_1_0_3_p;
	protected AbstractElementAlias match_Output_NEWLINETerminalRuleCall_1_2_a;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_0_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_2_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_3_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_4_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_5_2_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_6_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_7_0_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_7_1_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_8_0_4_0_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_8_0_4_1_3_p;
	protected AbstractElementAlias match_Package_NEWLINETerminalRuleCall_8_1_2_a;
	protected AbstractElementAlias match_Package___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q;
	protected AbstractElementAlias match_Package___ENDTerminalRuleCall_8_1_1_NEWLINETerminalRuleCall_8_1_2_a___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a__q;
	protected AbstractElementAlias match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a;
	protected AbstractElementAlias match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__p;
	protected AbstractElementAlias match_Permission_NEWLINETerminalRuleCall_3_p;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_4_3_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_6_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_12_3_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_6_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_0_1_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_0_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_4_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_15_3_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_16_0_3_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_6_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_0_2_1_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_1_4_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_0_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_2_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_4_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_6_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_6_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_6_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_2_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_6_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_ScriptJob_____ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p_or___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_NEWLINETerminalRuleCall_11_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_p_BEGINTerminalRuleCall_11_3__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_NEWLINETerminalRuleCall_13_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_p_BEGINTerminalRuleCall_13_3__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_NEWLINETerminalRuleCall_14_2_1_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_p_BEGINTerminalRuleCall_14_2_1_1__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_0_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_0_4_3_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_10_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_10_6_a;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_12_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_12_6_a;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_13_3_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_14_0_3_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_1_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_1_6_a;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_2_0_2_1_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_2_1_4_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_2_2_0_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_2_2_2_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_2_2_4_a;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_6_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_6_6_a;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_7_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_7_6_a;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_8_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_8_6_a;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_9_2_p;
	protected AbstractElementAlias match_ScriptJob_NEWLINETerminalRuleCall_9_6_a;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_12_5_NEWLINETerminalRuleCall_12_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_p_BEGINTerminalRuleCall_12_3__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_9_5_NEWLINETerminalRuleCall_9_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_p_BEGINTerminalRuleCall_9_3__q;
	protected AbstractElementAlias match_Secret_NEWLINETerminalRuleCall_0_2_p;
	protected AbstractElementAlias match_Secret_NEWLINETerminalRuleCall_0_4_0_3_p;
	protected AbstractElementAlias match_Secret_NEWLINETerminalRuleCall_0_4_1_3_p;
	protected AbstractElementAlias match_Secret_NEWLINETerminalRuleCall_1_0_0_3_p;
	protected AbstractElementAlias match_Secret_NEWLINETerminalRuleCall_1_0_1_3_p;
	protected AbstractElementAlias match_Secret_NEWLINETerminalRuleCall_1_2_a;
	protected AbstractElementAlias match_Service_NEWLINETerminalRuleCall_2_p;
	protected AbstractElementAlias match_Service_NEWLINETerminalRuleCall_6_a;
	protected AbstractElementAlias match_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1;
	protected AbstractElementAlias match_SimpleTrigger_NEWLINETerminalRuleCall_1_p;
	protected AbstractElementAlias match_StagingEnvironment_NEWLINETerminalRuleCall_0_1_p;
	protected AbstractElementAlias match_StagingEnvironment_NEWLINETerminalRuleCall_1_0_p;
	protected AbstractElementAlias match_StagingEnvironment_NEWLINETerminalRuleCall_1_2_3_p;
	protected AbstractElementAlias match_StagingEnvironment_NEWLINETerminalRuleCall_1_3_3_p;
	protected AbstractElementAlias match_StagingEnvironment_NEWLINETerminalRuleCall_1_5_a;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_0_0_4_2_p;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_0_0_4_6_a;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_0_1_2_p;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_0_1_6_a;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_0_2_0_3_a;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_0_2_2_a;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_1_3_p;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_2_3_p;
	protected AbstractElementAlias match_Strategy___ENDTerminalRuleCall_0_2_0_2_NEWLINETerminalRuleCall_0_2_0_3_a_ENDTerminalRuleCall_0_2_1_NEWLINETerminalRuleCall_0_2_2_a___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q;
	protected AbstractElementAlias match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a;
	protected AbstractElementAlias match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__p;
	protected AbstractElementAlias match_VariableAssignment_NEWLINETerminalRuleCall_3_p;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q;
	protected AbstractElementAlias match_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GitHubActionsGrammarAccess) access;
		init0();
		init1();
		init2();
		init3();
		init4();
		init5();
	}
	
	private void init0() {
		match_Agent_NEWLINETerminalRuleCall_0_0_1_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_0_1());
		match_Agent_NEWLINETerminalRuleCall_0_1_4_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_1_4());
		match_Agent_NEWLINETerminalRuleCall_0_2_0_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_2_0());
		match_Agent_NEWLINETerminalRuleCall_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_2_2_2());
		match_Agent_NEWLINETerminalRuleCall_0_2_4_a = new TokenAlias(true, true, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_2_4());
		match_Agent_NEWLINETerminalRuleCall_1_0_0_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_0());
		match_Agent_NEWLINETerminalRuleCall_1_0_2_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_0_2_1());
		match_Agent_NEWLINETerminalRuleCall_1_0_2_0_1_4_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_1_4());
		match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_0_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_2_0());
		match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_2_2_2());
		match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_4_a = new TokenAlias(true, true, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_2_4());
		match_Agent_NEWLINETerminalRuleCall_1_0_2_1_3_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_1_3());
		match_Agent_NEWLINETerminalRuleCall_1_1_0_0_3_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_0_3());
		match_Agent_NEWLINETerminalRuleCall_1_1_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_0_2_1());
		match_Agent_NEWLINETerminalRuleCall_1_1_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_1_4());
		match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_2_0());
		match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_2_2_2());
		match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_2_4());
		match_Agent_NEWLINETerminalRuleCall_1_1_2_a = new TokenAlias(true, true, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_2());
		match_Command_NEWLINETerminalRuleCall_0_3_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_0_3());
		match_Command_NEWLINETerminalRuleCall_2_3_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_2_3());
		match_Command_NEWLINETerminalRuleCall_3_3_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_3_3());
		match_Command_NEWLINETerminalRuleCall_4_3_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_4_3());
		match_Command_NEWLINETerminalRuleCall_5_2_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_5_2());
		match_Command_NEWLINETerminalRuleCall_5_6_a = new TokenAlias(true, true, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_5_6());
		match_Command_NEWLINETerminalRuleCall_6_3_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_6_3());
		match_Command_NEWLINETerminalRuleCall_7_0_3_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_7_0_3());
		match_Command_NEWLINETerminalRuleCall_7_1_3_p = new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_7_1_3());
		match_Command___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6_a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCommandAccess().getENDTerminalRuleCall_5_5()), new TokenAlias(true, true, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_5_6()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getEnvKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getColonKeyword_5_1()), new TokenAlias(true, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_5_2()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getBEGINTerminalRuleCall_5_3()));
		match_ConcurrencyGroup_NEWLINETerminalRuleCall_0_3_p = new TokenAlias(true, false, grammarAccess.getConcurrencyGroupAccess().getNEWLINETerminalRuleCall_0_3());
		match_ConcurrencyGroup_NEWLINETerminalRuleCall_1_3_p = new TokenAlias(true, false, grammarAccess.getConcurrencyGroupAccess().getNEWLINETerminalRuleCall_1_3());
		match_Container_NEWLINETerminalRuleCall_0_1_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_0_1());
		match_Container_NEWLINETerminalRuleCall_1_0_0_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_0_0());
		match_Container_NEWLINETerminalRuleCall_1_0_2_3_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_0_2_3());
		match_Container_NEWLINETerminalRuleCall_1_1_5_a = new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_1_5());
		match_Container_NEWLINETerminalRuleCall_1_2_0_2_1_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_0_2_1());
		match_Container_NEWLINETerminalRuleCall_1_2_1_4_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_1_4());
		match_Container_NEWLINETerminalRuleCall_1_2_2_0_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_2_0());
		match_Container_NEWLINETerminalRuleCall_1_2_2_2_2_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_2_2_2());
		match_Container_NEWLINETerminalRuleCall_1_2_2_4_a = new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_2_4());
		match_Container_NEWLINETerminalRuleCall_1_3_0_2_1_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_0_2_1());
		match_Container_NEWLINETerminalRuleCall_1_3_1_4_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_1_4());
		match_Container_NEWLINETerminalRuleCall_1_3_2_0_a = new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_2_0());
		match_Container_NEWLINETerminalRuleCall_1_3_2_2_2_a = new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_2_2_2());
		match_Container_NEWLINETerminalRuleCall_1_3_2_4_a = new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_2_4());
		match_Container_NEWLINETerminalRuleCall_1_4_3_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_4_3());
		match_Container_NEWLINETerminalRuleCall_1_5_0_0_2_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_0_0_2());
		match_Container_NEWLINETerminalRuleCall_1_5_0_0_4_3_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_0_0_4_3());
		match_Container_NEWLINETerminalRuleCall_1_5_0_1_0_3_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_0_1_0_3());
		match_Container_NEWLINETerminalRuleCall_1_5_0_1_2_a = new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_0_1_2());
		match_Container___ENDTerminalRuleCall_1_1_4_NEWLINETerminalRuleCall_1_1_5_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_1_4()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_1_5()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_2())), new TokenAlias(false, false, grammarAccess.getContainerAccess().getEnvKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getColonKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_1_2()));
		match_Container___ENDTerminalRuleCall_1_2_2_3_NEWLINETerminalRuleCall_1_2_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_2_2_0_p_BEGINTerminalRuleCall_1_2_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_2_2_3()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_2_4()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_2())), new TokenAlias(true, false, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_2_0()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_2_2_1()));
		match_Container___ENDTerminalRuleCall_1_3_2_3_NEWLINETerminalRuleCall_1_3_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_3_2_0_a_BEGINTerminalRuleCall_1_3_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_3_2_3()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_2_4()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_2())), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_2_0()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_3_2_1()));
		match_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_2()));
		match_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_2()));
		match_Defaults_NEWLINETerminalRuleCall_2_p = new TokenAlias(true, false, grammarAccess.getDefaultsAccess().getNEWLINETerminalRuleCall_2());
		match_Defaults_NEWLINETerminalRuleCall_4_0_3_p = new TokenAlias(true, false, grammarAccess.getDefaultsAccess().getNEWLINETerminalRuleCall_4_0_3());
		match_Defaults_NEWLINETerminalRuleCall_4_1_3_p = new TokenAlias(true, false, grammarAccess.getDefaultsAccess().getNEWLINETerminalRuleCall_4_1_3());
		match_Defaults_NEWLINETerminalRuleCall_6_a = new TokenAlias(true, true, grammarAccess.getDefaultsAccess().getNEWLINETerminalRuleCall_6());
		match_IfStatement_NEWLINETerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getIfStatementAccess().getNEWLINETerminalRuleCall_3());
	}
	
	private void init1() {
		match_Input_NEWLINETerminalRuleCall_0_2_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_0_2());
		match_Input_NEWLINETerminalRuleCall_0_4_3_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_0_4_3());
		match_Input_NEWLINETerminalRuleCall_1_3_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_1_3());
		match_Input_NEWLINETerminalRuleCall_2_3_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_2_3());
		match_Input_NEWLINETerminalRuleCall_3_3_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_3_3());
		match_Input_NEWLINETerminalRuleCall_4_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_0_2_1());
		match_Input_NEWLINETerminalRuleCall_4_0_1_4_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_1_4());
		match_Input_NEWLINETerminalRuleCall_4_0_2_0_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_0());
		match_Input_NEWLINETerminalRuleCall_4_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_2_2());
		match_Input_NEWLINETerminalRuleCall_4_0_2_4_a = new TokenAlias(true, true, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_4());
		match_Input_NEWLINETerminalRuleCall_4_2_a = new TokenAlias(true, true, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_2());
		match_Input___ENDTerminalRuleCall_4_0_2_3_NEWLINETerminalRuleCall_4_0_2_4_a_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_2_a_NEWLINETerminalRuleCall_4_0_2_0_p_BEGINTerminalRuleCall_4_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_0_2_3()), new TokenAlias(true, true, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_4()), new TokenAlias(false, false, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_1()), new TokenAlias(true, true, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_2()), new TokenAlias(true, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_0()), new TokenAlias(false, false, grammarAccess.getInputAccess().getBEGINTerminalRuleCall_4_0_2_1()));
		match_MatrixAxis_NEWLINETerminalRuleCall_2_0_1_p = new TokenAlias(true, false, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_0_1());
		match_MatrixAxis_NEWLINETerminalRuleCall_2_1_4_p = new TokenAlias(true, false, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_1_4());
		match_MatrixAxis_NEWLINETerminalRuleCall_2_2_0_p = new TokenAlias(true, false, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_2_0());
		match_MatrixAxis_NEWLINETerminalRuleCall_2_2_2_2_p = new TokenAlias(true, false, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_2_2_2());
		match_MatrixAxis_NEWLINETerminalRuleCall_2_2_4_a = new TokenAlias(true, true, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_1_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_0_2_1());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_1_4());
	}
	
	private void init2() {
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_2_2());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_4());
		match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_2_a = new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_2());
		match_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_requestKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_request_targetKeyword_1_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_2_1_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_0_0_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_1_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_1_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_1_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_2_1()));
		match_OptionedPullRequestTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_1()), new TokenAlias(true, true, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_2())), new GroupAlias(false, false, new TokenAlias(true, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_1())));
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_0_2_1());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_1_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_2_2());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_4());
		match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_2_a = new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_2());
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_2_1()));
	}
	
	private void init3() {
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_2_1_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_0_0_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_1_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_1_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_1_2_3()), new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_4()), new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_2_1()));
		match_OptionedPushTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_1()), new TokenAlias(true, true, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_2())), new GroupAlias(false, false, new TokenAlias(true, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_1())));
		match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_0_p = new TokenAlias(true, false, grammarAccess.getOptionedScheduleTriggerAccess().getNEWLINETerminalRuleCall_2_0());
		match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_2_4_p = new TokenAlias(true, false, grammarAccess.getOptionedScheduleTriggerAccess().getNEWLINETerminalRuleCall_2_2_4());
		match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_4_a = new TokenAlias(true, true, grammarAccess.getOptionedScheduleTriggerAccess().getNEWLINETerminalRuleCall_2_4());
		match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_2_p = new TokenAlias(true, false, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_0_2());
		match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_6_1_p = new TokenAlias(true, false, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_0_6_1());
		match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_1_4());
		match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_0_p = new TokenAlias(true, false, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_2_0_0());
		match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_2_0_2_2());
		match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_4_a = new TokenAlias(true, true, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_2_0_4());
		match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_2_a = new TokenAlias(true, true, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_2_2());
		match_OptionedTrigger_NEWLINETerminalRuleCall_0_p = new TokenAlias(true, false, grammarAccess.getOptionedTriggerAccess().getNEWLINETerminalRuleCall_0());
		match_OptionedTrigger_NEWLINETerminalRuleCall_4_a = new TokenAlias(true, true, grammarAccess.getOptionedTriggerAccess().getNEWLINETerminalRuleCall_4());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_0_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_0());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_6());
		match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_2_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_2());
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_NEWLINETerminalRuleCall_3_0_2_0_0_6_a_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_p_BEGINTerminalRuleCall_3_0_2_0_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_5()), new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_6()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsKeyword_3_0_2_0_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_2_0_0_1()), new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_NEWLINETerminalRuleCall_3_0_2_1_6_a_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_p_BEGINTerminalRuleCall_3_0_2_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_0_2_1_5()), new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_6()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_0_2_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_2_1_1()), new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_NEWLINETerminalRuleCall_3_1_0_0_6_a_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_p_BEGINTerminalRuleCall_3_1_0_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_1_0_0_5()), new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_6()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_0_0_1()), new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_NEWLINETerminalRuleCall_3_1_1_6_a_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_p_BEGINTerminalRuleCall_3_1_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_1_1_5()), new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_6()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_1_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_1_1()), new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_1_1_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_NEWLINETerminalRuleCall_3_2_0_0_0_6_a_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_p_BEGINTerminalRuleCall_3_2_0_0_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_5()), new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_6()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_2_0_0_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_0_0_1()), new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_NEWLINETerminalRuleCall_3_2_0_1_6_a_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_p_BEGINTerminalRuleCall_3_2_0_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_0_1_5()), new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_6()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_2_0_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_1_1()), new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_3()));
		match_OptionedWorkflowCallTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_1()), new TokenAlias(true, true, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_2())), new GroupAlias(false, false, new TokenAlias(true, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_1())));
		match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getNEWLINETerminalRuleCall_3());
		match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getNEWLINETerminalRuleCall_5_2());
		match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_6_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getNEWLINETerminalRuleCall_5_6());
		match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_7_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getNEWLINETerminalRuleCall_7());
		match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_0_2());
		match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_6_1_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_0_6_1());
		match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_1_4_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_1_4());
		match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_0_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_2_0_0());
		match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_2_2_p = new TokenAlias(true, false, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_2_0_2_2());
		match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_4_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_2_0_4());
		match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_2_a = new TokenAlias(true, true, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_2_2());
		match_Output_NEWLINETerminalRuleCall_0_2_p = new TokenAlias(true, false, grammarAccess.getOutputAccess().getNEWLINETerminalRuleCall_0_2());
		match_Output_NEWLINETerminalRuleCall_0_4_3_p = new TokenAlias(true, false, grammarAccess.getOutputAccess().getNEWLINETerminalRuleCall_0_4_3());
		match_Output_NEWLINETerminalRuleCall_1_0_3_p = new TokenAlias(true, false, grammarAccess.getOutputAccess().getNEWLINETerminalRuleCall_1_0_3());
		match_Output_NEWLINETerminalRuleCall_1_2_a = new TokenAlias(true, true, grammarAccess.getOutputAccess().getNEWLINETerminalRuleCall_1_2());
	}
	
	private void init4() {
		match_Package_NEWLINETerminalRuleCall_0_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_0_3());
		match_Package_NEWLINETerminalRuleCall_2_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_2_3());
		match_Package_NEWLINETerminalRuleCall_3_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_3_3());
		match_Package_NEWLINETerminalRuleCall_4_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_4_3());
		match_Package_NEWLINETerminalRuleCall_5_2_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_5_2());
		match_Package_NEWLINETerminalRuleCall_6_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_6_3());
		match_Package_NEWLINETerminalRuleCall_7_0_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_7_0_3());
		match_Package_NEWLINETerminalRuleCall_7_1_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_7_1_3());
		match_Package_NEWLINETerminalRuleCall_8_0_4_0_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_4_0_3());
		match_Package_NEWLINETerminalRuleCall_8_0_4_1_3_p = new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_4_1_3());
		match_Package_NEWLINETerminalRuleCall_8_1_2_a = new TokenAlias(true, true, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_1_2());
		match_Package___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getENDTerminalRuleCall_5_5()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_5_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3())), new TokenAlias(false, false, grammarAccess.getPackageAccess().getEnvKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_5_1()), new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_5_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_5_3()));
		match_Package___ENDTerminalRuleCall_8_1_1_NEWLINETerminalRuleCall_8_1_2_a___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getENDTerminalRuleCall_8_1_1()), new TokenAlias(true, true, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_1_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3())));
		match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3()));
		match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(true, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3()));
		match_Permission_NEWLINETerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getPermissionAccess().getNEWLINETerminalRuleCall_3());
		match_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_0_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_4_3_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_0_4_3());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_11_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_6_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_11_6());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_12_3_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_12_3());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_13_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_6_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_13_6());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_0_1_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_0_1());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_0_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_1_0());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_4_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_1_4());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_15_3_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_15_3());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_16_0_3_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_0_3());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_1_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_6_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_1_6());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_0_2_1_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_0_2_1());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_1_4_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_1_4());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_0_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_0());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_2_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_2_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_4_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_4());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_6_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_6_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_6_6());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_7_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_6_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_7_6());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_8_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_6_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_8_6());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_2_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_9_2());
		match_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_6_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_9_6());
		match_ReuseWorkflowJob_ScriptJob_____ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p_or___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p__q = new AlternativeAlias(false, true, new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2())), new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2())));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_NEWLINETerminalRuleCall_11_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_p_BEGINTerminalRuleCall_11_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_11_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_11_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2())), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getServicesKeyword_11_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_11_1()), new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_11_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_11_3()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_NEWLINETerminalRuleCall_13_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_p_BEGINTerminalRuleCall_13_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_13_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_13_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2())), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getWithKeyword_13_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_13_1()), new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_13_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_13_3()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_NEWLINETerminalRuleCall_14_2_1_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_p_BEGINTerminalRuleCall_14_2_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_14_2_1_3()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_1_4()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2())), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getSecretsKeyword_14_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_14_1()), new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_1_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_14_2_1_1()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_1_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_1_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2())), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getPermissionsKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_1_1()), new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_1_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_1_3()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_2_2_3()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_4()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2())), new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_2_2_1()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_7_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_7_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_2())), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getEnvKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_7_1()), new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_7_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_7_3()));
		match_ScriptJob_NEWLINETerminalRuleCall_0_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_0_2());
		match_ScriptJob_NEWLINETerminalRuleCall_0_4_3_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_0_4_3());
		match_ScriptJob_NEWLINETerminalRuleCall_10_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_10_2());
		match_ScriptJob_NEWLINETerminalRuleCall_10_6_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_10_6());
		match_ScriptJob_NEWLINETerminalRuleCall_12_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_12_2());
		match_ScriptJob_NEWLINETerminalRuleCall_12_6_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_12_6());
	}
	
	private void init5() {
		match_ScriptJob_NEWLINETerminalRuleCall_13_3_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_13_3());
		match_ScriptJob_NEWLINETerminalRuleCall_14_0_3_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_0_3());
		match_ScriptJob_NEWLINETerminalRuleCall_1_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_1_2());
		match_ScriptJob_NEWLINETerminalRuleCall_1_6_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_1_6());
		match_ScriptJob_NEWLINETerminalRuleCall_2_0_2_1_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_0_2_1());
		match_ScriptJob_NEWLINETerminalRuleCall_2_1_4_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_1_4());
		match_ScriptJob_NEWLINETerminalRuleCall_2_2_0_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_0());
		match_ScriptJob_NEWLINETerminalRuleCall_2_2_2_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_2_2());
		match_ScriptJob_NEWLINETerminalRuleCall_2_2_4_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_4());
		match_ScriptJob_NEWLINETerminalRuleCall_6_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_6_2());
		match_ScriptJob_NEWLINETerminalRuleCall_6_6_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_6_6());
		match_ScriptJob_NEWLINETerminalRuleCall_7_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_7_2());
		match_ScriptJob_NEWLINETerminalRuleCall_7_6_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_7_6());
		match_ScriptJob_NEWLINETerminalRuleCall_8_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_8_2());
		match_ScriptJob_NEWLINETerminalRuleCall_8_6_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_8_6());
		match_ScriptJob_NEWLINETerminalRuleCall_9_2_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_9_2());
		match_ScriptJob_NEWLINETerminalRuleCall_9_6_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_9_6());
		match_ScriptJob___ENDTerminalRuleCall_12_5_NEWLINETerminalRuleCall_12_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_p_BEGINTerminalRuleCall_12_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_12_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_12_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2())), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getServicesKeyword_12_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_12_1()), new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_12_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_12_3()));
		match_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2()));
		match_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2()));
		match_ScriptJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_1_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_1_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2())), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getPermissionsKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_1_1()), new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_1_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_1_3()));
		match_ScriptJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_2_2_3()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_4()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2())), new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_2_2_1()));
		match_ScriptJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_7_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_7_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2())), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getEnvKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_7_1()), new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_7_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_7_3()));
		match_ScriptJob___ENDTerminalRuleCall_9_5_NEWLINETerminalRuleCall_9_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_p_BEGINTerminalRuleCall_9_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_9_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_9_6()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_2())), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getStepsKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_9_1()), new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_9_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_9_3()));
		match_Secret_NEWLINETerminalRuleCall_0_2_p = new TokenAlias(true, false, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_0_2());
		match_Secret_NEWLINETerminalRuleCall_0_4_0_3_p = new TokenAlias(true, false, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_0_4_0_3());
		match_Secret_NEWLINETerminalRuleCall_0_4_1_3_p = new TokenAlias(true, false, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_0_4_1_3());
		match_Secret_NEWLINETerminalRuleCall_1_0_0_3_p = new TokenAlias(true, false, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_1_0_0_3());
		match_Secret_NEWLINETerminalRuleCall_1_0_1_3_p = new TokenAlias(true, false, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_1_0_1_3());
		match_Secret_NEWLINETerminalRuleCall_1_2_a = new TokenAlias(true, true, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_1_2());
		match_Service_NEWLINETerminalRuleCall_2_p = new TokenAlias(true, false, grammarAccess.getServiceAccess().getNEWLINETerminalRuleCall_2());
		match_Service_NEWLINETerminalRuleCall_6_a = new TokenAlias(true, true, grammarAccess.getServiceAccess().getNEWLINETerminalRuleCall_6());
		match_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSimplePullRequestTriggerAccess().getPull_requestKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSimplePullRequestTriggerAccess().getPull_request_targetKeyword_1_1()));
		match_SimpleTrigger_NEWLINETerminalRuleCall_1_p = new TokenAlias(true, false, grammarAccess.getSimpleTriggerAccess().getNEWLINETerminalRuleCall_1());
		match_StagingEnvironment_NEWLINETerminalRuleCall_0_1_p = new TokenAlias(true, false, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_0_1());
		match_StagingEnvironment_NEWLINETerminalRuleCall_1_0_p = new TokenAlias(true, false, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_1_0());
		match_StagingEnvironment_NEWLINETerminalRuleCall_1_2_3_p = new TokenAlias(true, false, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_1_2_3());
		match_StagingEnvironment_NEWLINETerminalRuleCall_1_3_3_p = new TokenAlias(true, false, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_1_3_3());
		match_StagingEnvironment_NEWLINETerminalRuleCall_1_5_a = new TokenAlias(true, true, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_1_5());
		match_Strategy_NEWLINETerminalRuleCall_0_0_4_2_p = new TokenAlias(true, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_4_2());
		match_Strategy_NEWLINETerminalRuleCall_0_0_4_6_a = new TokenAlias(true, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_4_6());
		match_Strategy_NEWLINETerminalRuleCall_0_1_2_p = new TokenAlias(true, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_1_2());
		match_Strategy_NEWLINETerminalRuleCall_0_1_6_a = new TokenAlias(true, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_1_6());
		match_Strategy_NEWLINETerminalRuleCall_0_2_0_3_a = new TokenAlias(true, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_2_0_3());
		match_Strategy_NEWLINETerminalRuleCall_0_2_2_a = new TokenAlias(true, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_2_2());
		match_Strategy_NEWLINETerminalRuleCall_1_3_p = new TokenAlias(true, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_1_3());
		match_Strategy_NEWLINETerminalRuleCall_2_3_p = new TokenAlias(true, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_2_3());
		match_Strategy___ENDTerminalRuleCall_0_2_0_2_NEWLINETerminalRuleCall_0_2_0_3_a_ENDTerminalRuleCall_0_2_1_NEWLINETerminalRuleCall_0_2_2_a___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_2_0_2()), new TokenAlias(true, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_2_0_3()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_2_1()), new TokenAlias(true, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_2_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getMatrixKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getColonKeyword_0_0_1()), new TokenAlias(true, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_2()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_3())), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_2_0_0()));
		match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getMatrixKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getColonKeyword_0_0_1()), new TokenAlias(true, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_2()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_3()));
		match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getMatrixKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getColonKeyword_0_0_1()), new TokenAlias(true, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_2()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_3()));
		match_VariableAssignment_NEWLINETerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getVariableAssignmentAccess().getNEWLINETerminalRuleCall_3());
		match_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_2_2_2_3()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getOnKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_2_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_2_2_2_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_2_2_2_1()));
		match_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_3_5()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getPermissionsKeyword_0_3_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_3_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_3_2()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_3_3()));
		match_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_4_5()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getEnvKeyword_0_4_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_4_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_4_2()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_4_3()));
		match_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_7_5()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getJobsKeyword_0_7_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_7_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_7_2()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_7_3()));
		match_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getOnKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBOOLEANRule())
			return getBOOLEANToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEND_OF_FILERule())
			return getEND_OF_FILEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal BOOLEAN returns ecore::EBooleanObject:
	 * 	'true' | 'false'
	 * ;
	 */
	protected String getBOOLEANToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal END_OF_FILE: EOF;
	 */
	protected String getEND_OF_FILEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal NEWLINE: '\r'? '\n';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Agent_NEWLINETerminalRuleCall_0_0_1_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_0_0_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_0_1_4_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_0_2_0_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_0_2_2_2_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_0_2_4_a.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_0_0_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_0_2_0_0_2_1_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_0_2_0_1_4_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_0_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_2_2_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_4_a.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_0_2_1_3_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_0_2_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_1_0_0_3_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_1_0_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_1_0_1_0_2_1_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_1_0_1_1_4_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_0_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_2_2_p.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_4_a.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Agent_NEWLINETerminalRuleCall_1_1_2_a.equals(syntax))
				emit_Agent_NEWLINETerminalRuleCall_1_1_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_0_3_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_2_3_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_2_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_3_3_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_3_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_4_3_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_5_2_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_5_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_5_6_a.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_5_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_6_3_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_6_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_7_0_3_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_7_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command_NEWLINETerminalRuleCall_7_1_3_p.equals(syntax))
				emit_Command_NEWLINETerminalRuleCall_7_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6_a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q.equals(syntax))
				emit_Command___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6_a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConcurrencyGroup_NEWLINETerminalRuleCall_0_3_p.equals(syntax))
				emit_ConcurrencyGroup_NEWLINETerminalRuleCall_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConcurrencyGroup_NEWLINETerminalRuleCall_1_3_p.equals(syntax))
				emit_ConcurrencyGroup_NEWLINETerminalRuleCall_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_0_1_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_0_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_0_0_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_0_2_3_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_0_2_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_1_5_a.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_1_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_2_0_2_1_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_2_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_2_1_4_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_2_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_2_2_0_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_2_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_2_2_2_2_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_2_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_2_2_4_a.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_2_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_3_0_2_1_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_3_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_3_1_4_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_3_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_3_2_0_a.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_3_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_3_2_2_2_a.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_3_2_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_3_2_4_a.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_3_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_4_3_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_5_0_0_2_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_5_0_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_5_0_0_4_3_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_5_0_0_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_5_0_1_0_3_p.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_5_0_1_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_NEWLINETerminalRuleCall_1_5_0_1_2_a.equals(syntax))
				emit_Container_NEWLINETerminalRuleCall_1_5_0_1_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_1_4_NEWLINETerminalRuleCall_1_1_5_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_1_4_NEWLINETerminalRuleCall_1_1_5_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_2_2_3_NEWLINETerminalRuleCall_1_2_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_2_2_0_p_BEGINTerminalRuleCall_1_2_2_1__q.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_2_2_3_NEWLINETerminalRuleCall_1_2_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_2_2_0_p_BEGINTerminalRuleCall_1_2_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_3_2_3_NEWLINETerminalRuleCall_1_3_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_3_2_0_a_BEGINTerminalRuleCall_1_3_2_1__q.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_3_2_3_NEWLINETerminalRuleCall_1_3_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_3_2_0_a_BEGINTerminalRuleCall_1_3_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__p.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Defaults_NEWLINETerminalRuleCall_2_p.equals(syntax))
				emit_Defaults_NEWLINETerminalRuleCall_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Defaults_NEWLINETerminalRuleCall_4_0_3_p.equals(syntax))
				emit_Defaults_NEWLINETerminalRuleCall_4_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Defaults_NEWLINETerminalRuleCall_4_1_3_p.equals(syntax))
				emit_Defaults_NEWLINETerminalRuleCall_4_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Defaults_NEWLINETerminalRuleCall_6_a.equals(syntax))
				emit_Defaults_NEWLINETerminalRuleCall_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfStatement_NEWLINETerminalRuleCall_3_p.equals(syntax))
				emit_IfStatement_NEWLINETerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_0_2_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_0_4_3_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_0_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_1_3_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_2_3_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_2_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_3_3_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_3_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_4_0_0_2_1_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_4_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_4_0_1_4_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_4_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_4_0_2_0_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_4_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_4_0_2_2_2_p.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_4_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_4_0_2_4_a.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_4_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input_NEWLINETerminalRuleCall_4_2_a.equals(syntax))
				emit_Input_NEWLINETerminalRuleCall_4_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input___ENDTerminalRuleCall_4_0_2_3_NEWLINETerminalRuleCall_4_0_2_4_a_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_2_a_NEWLINETerminalRuleCall_4_0_2_0_p_BEGINTerminalRuleCall_4_0_2_1__q.equals(syntax))
				emit_Input___ENDTerminalRuleCall_4_0_2_3_NEWLINETerminalRuleCall_4_0_2_4_a_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_2_a_NEWLINETerminalRuleCall_4_0_2_0_p_BEGINTerminalRuleCall_4_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MatrixAxis_NEWLINETerminalRuleCall_2_0_1_p.equals(syntax))
				emit_MatrixAxis_NEWLINETerminalRuleCall_2_0_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MatrixAxis_NEWLINETerminalRuleCall_2_1_4_p.equals(syntax))
				emit_MatrixAxis_NEWLINETerminalRuleCall_2_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MatrixAxis_NEWLINETerminalRuleCall_2_2_0_p.equals(syntax))
				emit_MatrixAxis_NEWLINETerminalRuleCall_2_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MatrixAxis_NEWLINETerminalRuleCall_2_2_2_2_p.equals(syntax))
				emit_MatrixAxis_NEWLINETerminalRuleCall_2_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MatrixAxis_NEWLINETerminalRuleCall_2_2_4_a.equals(syntax))
				emit_MatrixAxis_NEWLINETerminalRuleCall_2_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_2_a.equals(syntax))
				emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1.equals(syntax))
				emit_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q.equals(syntax))
				emit_OptionedPullRequestTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_2_a.equals(syntax))
				emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q.equals(syntax))
				emit_OptionedPushTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_0_p.equals(syntax))
				emit_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_2_4_p.equals(syntax))
				emit_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_2_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_4_a.equals(syntax))
				emit_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_2_p.equals(syntax))
				emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_6_1_p.equals(syntax))
				emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_6_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_1_4_p.equals(syntax))
				emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_0_p.equals(syntax))
				emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_2_2_p.equals(syntax))
				emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_4_a.equals(syntax))
				emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_2_a.equals(syntax))
				emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedTrigger_NEWLINETerminalRuleCall_0_p.equals(syntax))
				emit_OptionedTrigger_NEWLINETerminalRuleCall_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedTrigger_NEWLINETerminalRuleCall_4_a.equals(syntax))
				emit_OptionedTrigger_NEWLINETerminalRuleCall_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_0_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_p.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_6_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_2_a.equals(syntax))
				emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_NEWLINETerminalRuleCall_3_0_2_0_0_6_a_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_p_BEGINTerminalRuleCall_3_0_2_0_0_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_NEWLINETerminalRuleCall_3_0_2_0_0_6_a_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_p_BEGINTerminalRuleCall_3_0_2_0_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_NEWLINETerminalRuleCall_3_0_2_1_6_a_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_p_BEGINTerminalRuleCall_3_0_2_1_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_NEWLINETerminalRuleCall_3_0_2_1_6_a_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_p_BEGINTerminalRuleCall_3_0_2_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_NEWLINETerminalRuleCall_3_1_0_0_6_a_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_p_BEGINTerminalRuleCall_3_1_0_0_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_NEWLINETerminalRuleCall_3_1_0_0_6_a_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_p_BEGINTerminalRuleCall_3_1_0_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_NEWLINETerminalRuleCall_3_1_1_6_a_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_p_BEGINTerminalRuleCall_3_1_1_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_NEWLINETerminalRuleCall_3_1_1_6_a_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_p_BEGINTerminalRuleCall_3_1_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_NEWLINETerminalRuleCall_3_2_0_0_0_6_a_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_p_BEGINTerminalRuleCall_3_2_0_0_0_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_NEWLINETerminalRuleCall_3_2_0_0_0_6_a_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_p_BEGINTerminalRuleCall_3_2_0_0_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_NEWLINETerminalRuleCall_3_2_0_1_6_a_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_p_BEGINTerminalRuleCall_3_2_0_1_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_NEWLINETerminalRuleCall_3_2_0_1_6_a_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_p_BEGINTerminalRuleCall_3_2_0_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q.equals(syntax))
				emit_OptionedWorkflowCallTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_3_p.equals(syntax))
				emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_2_p.equals(syntax))
				emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_6_a.equals(syntax))
				emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_7_a.equals(syntax))
				emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_7_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_2_p.equals(syntax))
				emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_6_1_p.equals(syntax))
				emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_6_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_1_4_p.equals(syntax))
				emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_0_p.equals(syntax))
				emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_2_2_p.equals(syntax))
				emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_4_a.equals(syntax))
				emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_2_a.equals(syntax))
				emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Output_NEWLINETerminalRuleCall_0_2_p.equals(syntax))
				emit_Output_NEWLINETerminalRuleCall_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Output_NEWLINETerminalRuleCall_0_4_3_p.equals(syntax))
				emit_Output_NEWLINETerminalRuleCall_0_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Output_NEWLINETerminalRuleCall_1_0_3_p.equals(syntax))
				emit_Output_NEWLINETerminalRuleCall_1_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Output_NEWLINETerminalRuleCall_1_2_a.equals(syntax))
				emit_Output_NEWLINETerminalRuleCall_1_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_0_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_2_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_2_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_3_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_3_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_4_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_5_2_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_5_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_6_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_6_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_7_0_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_7_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_7_1_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_7_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_8_0_4_0_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_8_0_4_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_8_0_4_1_3_p.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_8_0_4_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_NEWLINETerminalRuleCall_8_1_2_a.equals(syntax))
				emit_Package_NEWLINETerminalRuleCall_8_1_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q.equals(syntax))
				emit_Package___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___ENDTerminalRuleCall_8_1_1_NEWLINETerminalRuleCall_8_1_2_a___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a__q.equals(syntax))
				emit_Package___ENDTerminalRuleCall_8_1_1_NEWLINETerminalRuleCall_8_1_2_a___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a.equals(syntax))
				emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__p.equals(syntax))
				emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Permission_NEWLINETerminalRuleCall_3_p.equals(syntax))
				emit_Permission_NEWLINETerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_4_3_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_6_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_12_3_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_12_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_6_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_0_1_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_0_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_0_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_4_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_15_3_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_15_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_16_0_3_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_16_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_6_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_0_2_1_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_1_4_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_0_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_2_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_4_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_6_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_6_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_6_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_2_p.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_6_a.equals(syntax))
				emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_ScriptJob_____ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p_or___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p__q.equals(syntax))
				emit_ReuseWorkflowJob_ScriptJob_____ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p_or___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_NEWLINETerminalRuleCall_11_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_p_BEGINTerminalRuleCall_11_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_NEWLINETerminalRuleCall_11_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_p_BEGINTerminalRuleCall_11_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_NEWLINETerminalRuleCall_13_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_p_BEGINTerminalRuleCall_13_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_NEWLINETerminalRuleCall_13_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_p_BEGINTerminalRuleCall_13_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_NEWLINETerminalRuleCall_14_2_1_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_p_BEGINTerminalRuleCall_14_2_1_1__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_NEWLINETerminalRuleCall_14_2_1_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_p_BEGINTerminalRuleCall_14_2_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_0_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_0_4_3_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_0_4_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_10_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_10_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_10_6_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_10_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_12_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_12_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_12_6_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_12_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_13_3_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_13_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_14_0_3_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_14_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_1_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_1_6_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_2_0_2_1_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_2_0_2_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_2_1_4_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_2_1_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_2_2_0_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_2_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_2_2_2_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_2_2_2_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_2_2_4_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_2_2_4_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_6_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_6_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_6_6_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_6_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_7_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_7_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_7_6_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_7_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_8_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_8_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_8_6_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_8_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_9_2_p.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_9_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_NEWLINETerminalRuleCall_9_6_a.equals(syntax))
				emit_ScriptJob_NEWLINETerminalRuleCall_9_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_12_5_NEWLINETerminalRuleCall_12_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_p_BEGINTerminalRuleCall_12_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_12_5_NEWLINETerminalRuleCall_12_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_p_BEGINTerminalRuleCall_12_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_9_5_NEWLINETerminalRuleCall_9_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_p_BEGINTerminalRuleCall_9_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_9_5_NEWLINETerminalRuleCall_9_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_p_BEGINTerminalRuleCall_9_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Secret_NEWLINETerminalRuleCall_0_2_p.equals(syntax))
				emit_Secret_NEWLINETerminalRuleCall_0_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Secret_NEWLINETerminalRuleCall_0_4_0_3_p.equals(syntax))
				emit_Secret_NEWLINETerminalRuleCall_0_4_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Secret_NEWLINETerminalRuleCall_0_4_1_3_p.equals(syntax))
				emit_Secret_NEWLINETerminalRuleCall_0_4_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Secret_NEWLINETerminalRuleCall_1_0_0_3_p.equals(syntax))
				emit_Secret_NEWLINETerminalRuleCall_1_0_0_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Secret_NEWLINETerminalRuleCall_1_0_1_3_p.equals(syntax))
				emit_Secret_NEWLINETerminalRuleCall_1_0_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Secret_NEWLINETerminalRuleCall_1_2_a.equals(syntax))
				emit_Secret_NEWLINETerminalRuleCall_1_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_NEWLINETerminalRuleCall_2_p.equals(syntax))
				emit_Service_NEWLINETerminalRuleCall_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Service_NEWLINETerminalRuleCall_6_a.equals(syntax))
				emit_Service_NEWLINETerminalRuleCall_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1.equals(syntax))
				emit_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimpleTrigger_NEWLINETerminalRuleCall_1_p.equals(syntax))
				emit_SimpleTrigger_NEWLINETerminalRuleCall_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StagingEnvironment_NEWLINETerminalRuleCall_0_1_p.equals(syntax))
				emit_StagingEnvironment_NEWLINETerminalRuleCall_0_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StagingEnvironment_NEWLINETerminalRuleCall_1_0_p.equals(syntax))
				emit_StagingEnvironment_NEWLINETerminalRuleCall_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StagingEnvironment_NEWLINETerminalRuleCall_1_2_3_p.equals(syntax))
				emit_StagingEnvironment_NEWLINETerminalRuleCall_1_2_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StagingEnvironment_NEWLINETerminalRuleCall_1_3_3_p.equals(syntax))
				emit_StagingEnvironment_NEWLINETerminalRuleCall_1_3_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StagingEnvironment_NEWLINETerminalRuleCall_1_5_a.equals(syntax))
				emit_StagingEnvironment_NEWLINETerminalRuleCall_1_5_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_0_0_4_2_p.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_0_0_4_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_0_0_4_6_a.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_0_0_4_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_0_1_2_p.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_0_1_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_0_1_6_a.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_0_1_6_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_0_2_0_3_a.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_0_2_0_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_0_2_2_a.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_0_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_1_3_p.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_1_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_2_3_p.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_2_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy___ENDTerminalRuleCall_0_2_0_2_NEWLINETerminalRuleCall_0_2_0_3_a_ENDTerminalRuleCall_0_2_1_NEWLINETerminalRuleCall_0_2_2_a___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q.equals(syntax))
				emit_Strategy___ENDTerminalRuleCall_0_2_0_2_NEWLINETerminalRuleCall_0_2_0_3_a_ENDTerminalRuleCall_0_2_1_NEWLINETerminalRuleCall_0_2_2_a___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a.equals(syntax))
				emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__p.equals(syntax))
				emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VariableAssignment_NEWLINETerminalRuleCall_3_p.equals(syntax))
				emit_VariableAssignment_NEWLINETerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q.equals(syntax))
				emit_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_0_0_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression ']' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN '-' labels+=Expression
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression (ambiguity) '-' labels+=Expression
	 *     labels+=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression NEWLINE+ END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN '[' labels+=Expression
	 *     (rule start) (ambiguity) BEGIN 'labels' ':' labels+=Expression
	 *     (rule start) (ambiguity) BEGIN NEWLINE+ BEGIN '-' labels+=Expression
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression (ambiguity) 'group' ':' group=Expression
	 *     labels+=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression ']' (ambiguity) 'group' ':' group=Expression
	 *     labels+=Expression ']' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) BEGIN '-' labels+=Expression
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression (ambiguity) '-' labels+=Expression
	 *     labels+=Expression (ambiguity) END NEWLINE* 'group' ':' group=Expression
	 *     labels+=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression NEWLINE+ END (ambiguity) 'group' ':' group=Expression
	 *     labels+=Expression NEWLINE+ END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_0_2_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     group=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_0_2_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     group=Expression (ambiguity) '[' labels+=Expression
	 *     group=Expression (ambiguity) 'labels' ':' labels+=Expression
	 *     group=Expression (ambiguity) END NEWLINE* (rule end)
	 *     group=Expression (ambiguity) NEWLINE+ BEGIN '-' labels+=Expression
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_1_0_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     group=Expression NEWLINE+ (ambiguity) BEGIN '-' labels+=Expression
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression (ambiguity) '-' labels+=Expression
	 *     labels+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     labels+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_1_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     group=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     labels+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     labels+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     labels+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Agent_NEWLINETerminalRuleCall_1_1_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     id=STRING (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     id=STRING (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     id=STRING (ambiguity) 'id' ':' id=STRING
	 *     id=STRING (ambiguity) 'name' ':' name=Expression
	 *     id=STRING (ambiguity) 'run' ':' command=Expression
	 *     id=STRING (ambiguity) 'shell' ':' shell=Expression
	 *     id=STRING (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     id=STRING (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     id=STRING (ambiguity) (rule end)
	 *     id=STRING (ambiguity) END (rule end)
	 *     id=STRING (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Expression (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     name=Expression (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     name=Expression (ambiguity) 'id' ':' id=STRING
	 *     name=Expression (ambiguity) 'name' ':' name=Expression
	 *     name=Expression (ambiguity) 'run' ':' command=Expression
	 *     name=Expression (ambiguity) 'shell' ':' shell=Expression
	 *     name=Expression (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=Expression (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     name=Expression (ambiguity) (rule end)
	 *     name=Expression (ambiguity) END (rule end)
	 *     name=Expression (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_2_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     shell=Expression (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     shell=Expression (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     shell=Expression (ambiguity) 'id' ':' id=STRING
	 *     shell=Expression (ambiguity) 'name' ':' name=Expression
	 *     shell=Expression (ambiguity) 'run' ':' command=Expression
	 *     shell=Expression (ambiguity) 'shell' ':' shell=Expression
	 *     shell=Expression (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     shell=Expression (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     shell=Expression (ambiguity) (rule end)
	 *     shell=Expression (ambiguity) END (rule end)
	 *     shell=Expression (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_3_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     workingDirectory=Expression (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     workingDirectory=Expression (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     workingDirectory=Expression (ambiguity) 'id' ':' id=STRING
	 *     workingDirectory=Expression (ambiguity) 'name' ':' name=Expression
	 *     workingDirectory=Expression (ambiguity) 'run' ':' command=Expression
	 *     workingDirectory=Expression (ambiguity) 'shell' ':' shell=Expression
	 *     workingDirectory=Expression (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     workingDirectory=Expression (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     workingDirectory=Expression (ambiguity) (rule end)
	 *     workingDirectory=Expression (ambiguity) END (rule end)
	 *     workingDirectory=Expression (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-' BEGIN 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     command=Expression NEWLINE+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     id=STRING NEWLINE+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     ifCondition=IfStatement 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     name=Expression NEWLINE+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     shell=Expression NEWLINE+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     workingDirectory=Expression NEWLINE+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_5_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'id' ':' id=STRING
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'name' ':' name=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'run' ':' command=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'shell' ':' shell=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) END (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_5_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     continueOnError=Expression (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression (ambiguity) 'id' ':' id=STRING
	 *     continueOnError=Expression (ambiguity) 'name' ':' name=Expression
	 *     continueOnError=Expression (ambiguity) 'run' ':' command=Expression
	 *     continueOnError=Expression (ambiguity) 'shell' ':' shell=Expression
	 *     continueOnError=Expression (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     continueOnError=Expression (ambiguity) (rule end)
	 *     continueOnError=Expression (ambiguity) END (rule end)
	 *     continueOnError=Expression (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_6_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     timeoutMinutes=Expression (ambiguity) 'run' ':' command=Expression
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_7_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     command=Expression (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     command=Expression (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     command=Expression (ambiguity) 'id' ':' id=STRING
	 *     command=Expression (ambiguity) 'name' ':' name=Expression
	 *     command=Expression (ambiguity) 'run' ':' command=Expression
	 *     command=Expression (ambiguity) 'shell' ':' shell=Expression
	 *     command=Expression (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     command=Expression (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     command=Expression (ambiguity) (rule end)
	 *     command=Expression (ambiguity) END (rule end)
	 *     command=Expression (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Command_NEWLINETerminalRuleCall_7_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         'env' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Command___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6_a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Expression (ambiguity) 'cancel-in-progress' ':' cancelInProgress=Expression
	 *     name=Expression (ambiguity) 'group' ':' name=Expression
	 *     name=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ConcurrencyGroup_NEWLINETerminalRuleCall_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     cancelInProgress=Expression (ambiguity) 'cancel-in-progress' ':' cancelInProgress=Expression
	 *     cancelInProgress=Expression (ambiguity) 'group' ':' name=Expression
	 *     cancelInProgress=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ConcurrencyGroup_NEWLINETerminalRuleCall_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     image=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_0_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     image=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     options=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (END NEWLINE*)+ (ambiguity) BEGIN 'image' ':' image=Expression
	 *     ports+=Expression ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     ports+=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     username=Expression NEWLINE+ (END NEWLINE*)+ (ambiguity) BEGIN 'image' ':' image=Expression
	 *     volumes+=Expression ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 *     volumes+=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     image=Expression (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     image=Expression (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     image=Expression (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     image=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_0_2_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_1_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     ports+=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_2_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* (rule end)
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     ports+=Expression ']' (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_2_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     image=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     options=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (END NEWLINE*)+ (ambiguity) BEGIN '-' ports+=Expression
	 *     ports+=Expression ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     ports+=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     username=Expression NEWLINE+ (END NEWLINE*)+ (ambiguity) BEGIN '-' ports+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 *     volumes+=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' ports+=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_2_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Expression (ambiguity) (END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN)? '-' ports+=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* '[' ports+=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* '[' volumes+=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'options' ':' options=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'password' ':' password=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* (rule end)
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     ports+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_2_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* (rule end)
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     ports+=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_2_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     volumes+=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_3_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* (rule end)
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     volumes+=Expression ']' (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_3_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     image=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     options=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (END NEWLINE*)+ (ambiguity) BEGIN '-' volumes+=Expression
	 *     ports+=Expression ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     ports+=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     username=Expression NEWLINE+ (END NEWLINE*)+ (ambiguity) BEGIN '-' volumes+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 *     volumes+=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' volumes+=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_3_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Expression (ambiguity) (END NEWLINE* (END NEWLINE*)* NEWLINE* BEGIN)? '-' volumes+=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* '[' ports+=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* '[' volumes+=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'options' ':' options=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'password' ':' password=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* (rule end)
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     volumes+=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_3_2_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* (rule end)
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     volumes+=Expression NEWLINE* END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_3_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     options=Expression (ambiguity) (END NEWLINE*)* '[' ports+=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* '[' volumes+=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     options=Expression (ambiguity) (END NEWLINE*)* 'options' ':' options=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* 'ports' ':' ports+=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* 'volumes' ':' volumes+=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     options=Expression (ambiguity) (END NEWLINE*)* NEWLINE* BEGIN '-' volumes+=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' ports+=Expression
	 *     options=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     image=Expression NEWLINE+ (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     options=Expression NEWLINE+ (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     ports+=Expression ']' NEWLINE+ (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     ports+=Expression NEWLINE+ (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     username=Expression NEWLINE+ (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression ']' NEWLINE+ (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression NEWLINE+ (END NEWLINE*)* 'credentials' ':' (ambiguity) BEGIN 'username' ':' username=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_5_0_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     username=Expression (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ '[' ports+=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ '[' volumes+=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     username=Expression (ambiguity) (END NEWLINE*)+ 'options' ':' options=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ 'ports' ':' ports+=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ 'volumes' ':' volumes+=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ (rule end)
	 *     username=Expression (ambiguity) (END NEWLINE*)+ NEWLINE* BEGIN '-' volumes+=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ NEWLINE+ BEGIN '-' ports+=Expression
	 *     username=Expression (ambiguity) (END NEWLINE*)+ NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_5_0_0_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)* 'password' ':' password=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ '[' ports+=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ '[' volumes+=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ 'options' ':' options=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ 'ports' ':' ports+=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ 'volumes' ':' volumes+=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ (rule end)
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ NEWLINE* BEGIN '-' volumes+=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ NEWLINE+ BEGIN '-' ports+=Expression
	 *     password=Expression (ambiguity) END NEWLINE* (END NEWLINE*)+ NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_5_0_1_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)* 'password' ':' password=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ '[' ports+=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ '[' volumes+=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ 'options' ':' options=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ 'ports' ':' ports+=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ 'volumes' ':' volumes+=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ (rule end)
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ NEWLINE* BEGIN '-' volumes+=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ NEWLINE+ BEGIN '-' ports+=Expression
	 *     password=Expression NEWLINE+ END (ambiguity) (END NEWLINE*)+ NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_NEWLINETerminalRuleCall_1_5_0_1_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'env' 
	  *         ':' 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_1_4_NEWLINETerminalRuleCall_1_1_5_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Expression NEWLINE+ (ambiguity) '-' ports+=Expression
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_2_2_3_NEWLINETerminalRuleCall_1_2_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_2_2_0_p_BEGINTerminalRuleCall_1_2_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* (END NEWLINE*)* NEWLINE* BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Expression NEWLINE* (ambiguity) '-' volumes+=Expression
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_3_2_3_NEWLINETerminalRuleCall_1_3_2_4_a___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a_NEWLINETerminalRuleCall_1_3_2_0_a_BEGINTerminalRuleCall_1_3_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' ports+=Expression
	 *     (rule start) (ambiguity) '[' volumes+=Expression
	 *     (rule start) (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     (rule start) (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'options' ':' options=Expression
	 *     (rule start) (ambiguity) 'password' ':' password=Expression
	 *     (rule start) (ambiguity) 'ports' ':' ports+=Expression
	 *     (rule start) (ambiguity) 'volumes' ':' volumes+=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     (rule start) (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     (rule start) (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) '[' ports+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) '[' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'options' ':' options=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'password' ':' password=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'ports' ':' ports+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'volumes' ':' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     image=Expression NEWLINE+ (ambiguity) '[' ports+=Expression
	 *     image=Expression NEWLINE+ (ambiguity) '[' volumes+=Expression
	 *     image=Expression NEWLINE+ (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     image=Expression NEWLINE+ (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     image=Expression NEWLINE+ (ambiguity) 'options' ':' options=Expression
	 *     image=Expression NEWLINE+ (ambiguity) 'password' ':' password=Expression
	 *     image=Expression NEWLINE+ (ambiguity) 'ports' ':' ports+=Expression
	 *     image=Expression NEWLINE+ (ambiguity) 'volumes' ':' volumes+=Expression
	 *     image=Expression NEWLINE+ (ambiguity) (rule end)
	 *     image=Expression NEWLINE+ (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     image=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     image=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     options=Expression NEWLINE+ (ambiguity) '[' ports+=Expression
	 *     options=Expression NEWLINE+ (ambiguity) '[' volumes+=Expression
	 *     options=Expression NEWLINE+ (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     options=Expression NEWLINE+ (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     options=Expression NEWLINE+ (ambiguity) 'options' ':' options=Expression
	 *     options=Expression NEWLINE+ (ambiguity) 'password' ':' password=Expression
	 *     options=Expression NEWLINE+ (ambiguity) 'ports' ':' ports+=Expression
	 *     options=Expression NEWLINE+ (ambiguity) 'volumes' ':' volumes+=Expression
	 *     options=Expression NEWLINE+ (ambiguity) (rule end)
	 *     options=Expression NEWLINE+ (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     options=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     options=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) '[' ports+=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) '[' volumes+=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) 'options' ':' options=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) 'ports' ':' ports+=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) 'volumes' ':' volumes+=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) (rule end)
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     ports+=Expression ']' NEWLINE+ (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) '[' ports+=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) '[' volumes+=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression NEWLINE+ (ambiguity) 'options' ':' options=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) 'ports' ':' ports+=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) 'volumes' ':' volumes+=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) (rule end)
	 *     ports+=Expression NEWLINE+ (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     ports+=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) '[' ports+=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) '[' volumes+=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) 'options' ':' options=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) 'ports' ':' ports+=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) 'volumes' ':' volumes+=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) (rule end)
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     ports+=Expression NEWLINE+ END NEWLINE* (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     username=Expression NEWLINE+ (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     username=Expression NEWLINE+ (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) '[' ports+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) '[' volumes+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) 'options' ':' options=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) 'ports' ':' ports+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) (rule end)
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     volumes+=Expression ']' NEWLINE+ (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) '[' ports+=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) '[' volumes+=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) 'options' ':' options=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) 'ports' ':' ports+=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) (rule end)
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     volumes+=Expression NEWLINE* END NEWLINE* (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) '[' ports+=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) '[' volumes+=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) 'credentials' ':' NEWLINE+ BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression NEWLINE+ (ambiguity) 'options' ':' options=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) 'ports' ':' ports+=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) (rule end)
	 *     volumes+=Expression NEWLINE+ (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     volumes+=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) '[' ports+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) '[' volumes+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) 'options' ':' options=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) 'ports' ':' ports+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) 'volumes' ':' volumes+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) (rule end)
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     password=Expression NEWLINE+ END NEWLINE* (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 *     username=Expression NEWLINE+ (ambiguity) '[' ports+=Expression
	 *     username=Expression NEWLINE+ (ambiguity) '[' volumes+=Expression
	 *     username=Expression NEWLINE+ (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     username=Expression NEWLINE+ (ambiguity) 'options' ':' options=Expression
	 *     username=Expression NEWLINE+ (ambiguity) 'ports' ':' ports+=Expression
	 *     username=Expression NEWLINE+ (ambiguity) 'volumes' ':' volumes+=Expression
	 *     username=Expression NEWLINE+ (ambiguity) (rule end)
	 *     username=Expression NEWLINE+ (ambiguity) NEWLINE* BEGIN '-' volumes+=Expression
	 *     username=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' ports+=Expression
	 *     username=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_5_1_NEWLINETerminalRuleCall_1_5_2_a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'run' ':' (ambiguity) BEGIN 'shell' ':' shell=Expression
	 *     (rule start) 'run' ':' (ambiguity) BEGIN 'working-directory' ':' workingDirectory=Expression
	 *     (rule start) 'run' ':' (ambiguity) BEGIN END NEWLINE* (rule start)
	 
	 * </pre>
	 */
	protected void emit_Defaults_NEWLINETerminalRuleCall_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     shell=Expression (ambiguity) 'shell' ':' shell=Expression
	 *     shell=Expression (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     shell=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Defaults_NEWLINETerminalRuleCall_4_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     workingDirectory=Expression (ambiguity) 'shell' ':' shell=Expression
	 *     workingDirectory=Expression (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     workingDirectory=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Defaults_NEWLINETerminalRuleCall_4_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'run' ':' NEWLINE+ BEGIN END (ambiguity) (rule start)
	 *     shell=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     workingDirectory=Expression NEWLINE+ END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Defaults_NEWLINETerminalRuleCall_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' ':' '${{' '('* 'always' '(' ')' '}}' (ambiguity) (rule start)
	 *     (rule start) 'if' ':' '${{' '('* 'cancelled' '(' ')' '}}' (ambiguity) (rule start)
	 *     (rule start) 'if' ':' '${{' '('* 'failure' '(' ')' '}}' (ambiguity) (rule start)
	 *     (rule start) 'if' ':' '${{' '('* 'success' '(' ')' '}}' (ambiguity) (rule start)
	 *     array=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     childExpr=VariableDereference '}}' (ambiguity) (rule end)
	 *     context=CONTEXT '}}' (ambiguity) (rule end)
	 *     item=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     name=ID '}}' (ambiguity) (rule end)
	 *     path=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     property=ID '"' ']' '}}' (ambiguity) (rule end)
	 *     property=ID '"' '}}' (ambiguity) (rule end)
	 *     property=ID '}}' (ambiguity) (rule end)
	 *     replaceValues+=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     rhs=And '}}' (ambiguity) (rule end)
	 *     rhs=Comparison '}}' (ambiguity) (rule end)
	 *     rhs=ConcatExpression (ambiguity) (rule end)
	 *     rhs=Equality '}}' (ambiguity) (rule end)
	 *     rhs=UnaryOp '}}' (ambiguity) (rule end)
	 *     searchValue=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     sep=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     string=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     value=BOOLEAN '}}' (ambiguity) (rule end)
	 *     value=DOUBLE '}}' (ambiguity) (rule end)
	 *     value=DOUBLE (ambiguity) (rule end)
	 *     value=INT '}}' (ambiguity) (rule end)
	 *     value=INT (ambiguity) (rule end)
	 *     value=InsideBracketsExpression ')' '}}' (ambiguity) (rule end)
	 *     value=STRING '}}' (ambiguity) (rule end)
	 *     value=YAMLString (ambiguity) (rule end)
	 *     value?=BOOLEAN (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_IfStatement_NEWLINETerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     id=YAMLID ':' (ambiguity) BEGIN '[' options+=STRING
	 *     id=YAMLID ':' (ambiguity) BEGIN 'default' ':' default=Expression
	 *     id=YAMLID ':' (ambiguity) BEGIN 'description' ':' description=Expression
	 *     id=YAMLID ':' (ambiguity) BEGIN 'options' ':' options+=STRING
	 *     id=YAMLID ':' (ambiguity) BEGIN 'required' ':' isRequired=Expression
	 *     id=YAMLID ':' (ambiguity) BEGIN 'type' ':' type=TYPE
	 *     id=YAMLID ':' (ambiguity) BEGIN (rule end)
	 *     id=YAMLID ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' options+=STRING
	 *     id=YAMLID ':' (ambiguity) BEGIN id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     description=Expression (ambiguity) '[' options+=STRING
	 *     description=Expression (ambiguity) 'default' ':' default=Expression
	 *     description=Expression (ambiguity) 'options' ':' options+=STRING
	 *     description=Expression (ambiguity) 'required' ':' isRequired=Expression
	 *     description=Expression (ambiguity) 'type' ':' type=TYPE
	 *     description=Expression (ambiguity) (rule end)
	 *     description=Expression (ambiguity) NEWLINE+ BEGIN '-' options+=STRING
	 *     description=Expression (ambiguity) id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_0_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     default=Expression (ambiguity) '[' options+=STRING
	 *     default=Expression (ambiguity) 'default' ':' default=Expression
	 *     default=Expression (ambiguity) 'options' ':' options+=STRING
	 *     default=Expression (ambiguity) 'required' ':' isRequired=Expression
	 *     default=Expression (ambiguity) 'type' ':' type=TYPE
	 *     default=Expression (ambiguity) (rule end)
	 *     default=Expression (ambiguity) NEWLINE+ BEGIN '-' options+=STRING
	 *     default=Expression (ambiguity) id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     isRequired=Expression (ambiguity) '[' options+=STRING
	 *     isRequired=Expression (ambiguity) 'default' ':' default=Expression
	 *     isRequired=Expression (ambiguity) 'options' ':' options+=STRING
	 *     isRequired=Expression (ambiguity) 'required' ':' isRequired=Expression
	 *     isRequired=Expression (ambiguity) 'type' ':' type=TYPE
	 *     isRequired=Expression (ambiguity) (rule end)
	 *     isRequired=Expression (ambiguity) NEWLINE+ BEGIN '-' options+=STRING
	 *     isRequired=Expression (ambiguity) id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_2_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     type=TYPE (ambiguity) '[' options+=STRING
	 *     type=TYPE (ambiguity) 'default' ':' default=Expression
	 *     type=TYPE (ambiguity) 'options' ':' options+=STRING
	 *     type=TYPE (ambiguity) 'required' ':' isRequired=Expression
	 *     type=TYPE (ambiguity) 'type' ':' type=TYPE
	 *     type=TYPE (ambiguity) (rule end)
	 *     type=TYPE (ambiguity) NEWLINE+ BEGIN '-' options+=STRING
	 *     type=TYPE (ambiguity) id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_3_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=STRING (ambiguity) END NEWLINE* '[' options+=STRING
	 *     options+=STRING (ambiguity) END NEWLINE* 'default' ':' default=Expression
	 *     options+=STRING (ambiguity) END NEWLINE* 'options' ':' options+=STRING
	 *     options+=STRING (ambiguity) END NEWLINE* 'required' ':' isRequired=Expression
	 *     options+=STRING (ambiguity) END NEWLINE* 'type' ':' type=TYPE
	 *     options+=STRING (ambiguity) END NEWLINE* (rule end)
	 *     options+=STRING (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' options+=STRING
	 *     options+=STRING (ambiguity) END NEWLINE* id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_4_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=STRING ']' (ambiguity) END NEWLINE* '[' options+=STRING
	 *     options+=STRING ']' (ambiguity) END NEWLINE* 'default' ':' default=Expression
	 *     options+=STRING ']' (ambiguity) END NEWLINE* 'options' ':' options+=STRING
	 *     options+=STRING ']' (ambiguity) END NEWLINE* 'required' ':' isRequired=Expression
	 *     options+=STRING ']' (ambiguity) END NEWLINE* 'type' ':' type=TYPE
	 *     options+=STRING ']' (ambiguity) END NEWLINE* (rule end)
	 *     options+=STRING ']' (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' options+=STRING
	 *     options+=STRING ']' (ambiguity) END NEWLINE* id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_4_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN '-' options+=STRING
	 *     default=Expression NEWLINE+ (ambiguity) BEGIN '-' options+=STRING
	 *     description=Expression NEWLINE+ (ambiguity) BEGIN '-' options+=STRING
	 *     id=YAMLID ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' options+=STRING
	 *     isRequired=Expression NEWLINE+ (ambiguity) BEGIN '-' options+=STRING
	 *     options+=STRING ']' NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' options+=STRING
	 *     options+=STRING NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' options+=STRING
	 *     type=TYPE NEWLINE+ (ambiguity) BEGIN '-' options+=STRING
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_4_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=STRING (ambiguity) (END NEWLINE* END NEWLINE* NEWLINE+ BEGIN)? '-' options+=STRING
	 *     options+=STRING (ambiguity) END NEWLINE* END NEWLINE* '[' options+=STRING
	 *     options+=STRING (ambiguity) END NEWLINE* END NEWLINE* 'default' ':' default=Expression
	 *     options+=STRING (ambiguity) END NEWLINE* END NEWLINE* 'options' ':' options+=STRING
	 *     options+=STRING (ambiguity) END NEWLINE* END NEWLINE* 'required' ':' isRequired=Expression
	 *     options+=STRING (ambiguity) END NEWLINE* END NEWLINE* 'type' ':' type=TYPE
	 *     options+=STRING (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     options+=STRING (ambiguity) END NEWLINE* END NEWLINE* id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_4_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=STRING NEWLINE+ END (ambiguity) END NEWLINE* '[' options+=STRING
	 *     options+=STRING NEWLINE+ END (ambiguity) END NEWLINE* 'default' ':' default=Expression
	 *     options+=STRING NEWLINE+ END (ambiguity) END NEWLINE* 'options' ':' options+=STRING
	 *     options+=STRING NEWLINE+ END (ambiguity) END NEWLINE* 'required' ':' isRequired=Expression
	 *     options+=STRING NEWLINE+ END (ambiguity) END NEWLINE* 'type' ':' type=TYPE
	 *     options+=STRING NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     options+=STRING NEWLINE+ END (ambiguity) END NEWLINE* id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_4_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) '[' options+=STRING
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) 'default' ':' default=Expression
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) 'options' ':' options+=STRING
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) 'required' ':' isRequired=Expression
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) 'type' ':' type=TYPE
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) (rule end)
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' options+=STRING
	 *     options+=STRING ']' NEWLINE+ END (ambiguity) id=YAMLID
	 *     options+=STRING NEWLINE+ END (ambiguity) '[' options+=STRING
	 *     options+=STRING NEWLINE+ END (ambiguity) 'default' ':' default=Expression
	 *     options+=STRING NEWLINE+ END (ambiguity) 'options' ':' options+=STRING
	 *     options+=STRING NEWLINE+ END (ambiguity) 'required' ':' isRequired=Expression
	 *     options+=STRING NEWLINE+ END (ambiguity) 'type' ':' type=TYPE
	 *     options+=STRING NEWLINE+ END (ambiguity) (rule end)
	 *     options+=STRING NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' options+=STRING
	 *     options+=STRING NEWLINE+ END (ambiguity) id=YAMLID
	 *     options+=STRING NEWLINE+ END NEWLINE* END (ambiguity) '[' options+=STRING
	 *     options+=STRING NEWLINE+ END NEWLINE* END (ambiguity) 'default' ':' default=Expression
	 *     options+=STRING NEWLINE+ END NEWLINE* END (ambiguity) 'options' ':' options+=STRING
	 *     options+=STRING NEWLINE+ END NEWLINE* END (ambiguity) 'required' ':' isRequired=Expression
	 *     options+=STRING NEWLINE+ END NEWLINE* END (ambiguity) 'type' ':' type=TYPE
	 *     options+=STRING NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     options+=STRING NEWLINE+ END NEWLINE* END (ambiguity) id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Input_NEWLINETerminalRuleCall_4_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         END 
	  *         NEWLINE* 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=STRING NEWLINE+ (ambiguity) '-' options+=STRING
	 
	 * </pre>
	 */
	protected void emit_Input___ENDTerminalRuleCall_4_0_2_3_NEWLINETerminalRuleCall_4_0_2_4_a_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_2_a_NEWLINETerminalRuleCall_4_0_2_0_p_BEGINTerminalRuleCall_4_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     cells+=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MatrixAxis_NEWLINETerminalRuleCall_2_0_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     cells+=Expression ']' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MatrixAxis_NEWLINETerminalRuleCall_2_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=YAMLID ':' (ambiguity) BEGIN '-' cells+=Expression
	 
	 * </pre>
	 */
	protected void emit_MatrixAxis_NEWLINETerminalRuleCall_2_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     cells+=Expression (ambiguity) '-' cells+=Expression
	 *     cells+=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_MatrixAxis_NEWLINETerminalRuleCall_2_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     cells+=Expression NEWLINE+ END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_MatrixAxis_NEWLINETerminalRuleCall_2_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '[' paths+=Expression
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN 'paths' ':' paths+=Expression
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '[' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN 'paths' ':' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) '[' paths+=Expression
	 *     branches+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression ']' (ambiguity) (rule end)
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '-' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) '[' paths+=Expression
	 *     paths+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression ']' (ambiguity) (rule end)
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '[' branches+=Expression
	 *     branches+=Expression (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) '[' paths+=Expression
	 *     branches+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression ']' (ambiguity) (rule end)
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' branches+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) '[' branches+=Expression
	 *     paths+=Expression (ambiguity) '[' paths+=Expression
	 *     paths+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) (rule end)
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) '[' branches+=Expression
	 *     paths+=Expression (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) '[' paths+=Expression
	 *     paths+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '[' branches+=Expression
	 *     branches+=Expression (ambiguity) '[' paths+=Expression
	 *     branches+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) BEGIN '-' branches+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression ']' NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression ']' NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_NEWLINETerminalRuleCall_3_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'pull_request' | 'pull_request_target'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ':' '[' branches+=Expression
	 *     (rule start) (ambiguity) ':' '[' paths+=Expression
	 *     (rule start) (ambiguity) ':' 'branches' ':' branches+=Expression
	 *     (rule start) (ambiguity) ':' 'paths' ':' paths+=Expression
	 *     (rule start) (ambiguity) ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? (rule start)
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN '-' branches+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN '[' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN 'paths' ':' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE+ BEGIN ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) (ambiguity) ':' ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) (ambiguity) ':' ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' '[' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' '[' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' 'branches' ':' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' 'paths' ':' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? END NEWLINE* (rule start)
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN '-' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN '[' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN 'paths' ':' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' NEWLINE+ BEGIN ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) ':' ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ (ambiguity) '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ (ambiguity) '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ (ambiguity) '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((NEWLINE+ BEGIN) | (END NEWLINE*))?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) (rule start)
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) END NEWLINE* (rule start)
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' (ambiguity) BEGIN '[' branches+=Expression
	 *     (rule start) 'push' ':' (ambiguity) BEGIN '[' tags+=Expression
	 *     (rule start) 'push' ':' (ambiguity) BEGIN 'branches' ':' branches+=Expression
	 *     (rule start) 'push' ':' (ambiguity) BEGIN 'tags' ':' tags+=Expression
	 *     (rule start) 'push' ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' branches+=Expression
	 *     (rule start) 'push' ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' tags+=Expression
	 *     (rule start) 'push' ':' (ambiguity) BEGIN ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) 'push' ':' (ambiguity) BEGIN ignoreSpecifiedTags?='tags-ignore'
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN '[' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN '[' tags+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN 'branches' ':' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN 'tags' ':' tags+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN NEWLINE+ BEGIN '-' tags+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '[' branches+=Expression
	 *     branches+=Expression (ambiguity) '[' paths+=Expression
	 *     branches+=Expression (ambiguity) '[' tags+=Expression
	 *     branches+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression (ambiguity) (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) (rule end)
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' branches+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 *     tags+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     tags+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     tags+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) '[' branches+=Expression
	 *     paths+=Expression (ambiguity) '[' tags+=Expression
	 *     paths+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression (ambiguity) (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) (rule end)
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) '-' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression (ambiguity) '[' branches+=Expression
	 *     tags+=Expression (ambiguity) '[' tags+=Expression
	 *     tags+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     tags+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression (ambiguity) (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     tags+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     tags+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     tags+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) (rule end)
	 *     tags+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' tags+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' NEWLINE+ BEGIN (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' tags+=Expression
	 *     tags+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     tags+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) '[' branches+=Expression
	 *     paths+=Expression (ambiguity) '[' paths+=Expression
	 *     paths+=Expression (ambiguity) '[' tags+=Expression
	 *     paths+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression (ambiguity) (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) (rule end)
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     tags+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     tags+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     tags+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '[' paths+=Expression
	 *     branches+=Expression (ambiguity) '[' tags+=Expression
	 *     branches+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression (ambiguity) (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) (rule end)
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '-' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression (ambiguity) '[' paths+=Expression
	 *     tags+=Expression (ambiguity) '[' tags+=Expression
	 *     tags+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     tags+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression (ambiguity) (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     tags+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     tags+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     tags+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) (rule end)
	 *     tags+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' (ambiguity) BEGIN '-' tags+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' tags+=Expression
	 *     tags+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     tags+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_1_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression (ambiguity) '[' branches+=Expression
	 *     tags+=Expression (ambiguity) '[' paths+=Expression
	 *     tags+=Expression (ambiguity) '[' tags+=Expression
	 *     tags+=Expression (ambiguity) 'branches' ':' branches+=Expression
	 *     tags+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     tags+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     tags+=Expression (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression ']' (ambiguity) '[' branches+=Expression
	 *     tags+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     tags+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) 'branches' ':' branches+=Expression
	 *     tags+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     tags+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression ']' (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     tags+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     tags+=Expression ']' (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' (ambiguity) BEGIN '-' tags+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' tags+=Expression
	 *     tags+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 *     tags+=Expression NEWLINE+ (ambiguity) BEGIN '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* '[' branches+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* 'branches' ':' branches+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 *     tags+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE+ END (ambiguity) '[' branches+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) 'branches' ':' branches+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' branches+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     tags+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedBranches?='branches-ignore'
	 *     tags+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     tags+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '[' paths+=Expression
	 *     branches+=Expression (ambiguity) '[' tags+=Expression
	 *     branches+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     tags+=Expression NEWLINE+ (ambiguity) BEGIN '-' branches+=Expression
	 *     tags+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '-' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     branches+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) '[' paths+=Expression
	 *     paths+=Expression (ambiguity) '[' tags+=Expression
	 *     paths+=Expression (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression ']' (ambiguity) '[' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) '[' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression ']' (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     branches+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     paths+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     tags+=Expression ']' NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     tags+=Expression NEWLINE+ (ambiguity) BEGIN '-' paths+=Expression
	 *     tags+=Expression NEWLINE+ END NEWLINE* (ambiguity) BEGIN '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression (ambiguity) (END NEWLINE* NEWLINE+ BEGIN)? '-' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* '[' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'paths' ':' paths+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* 'tags' ':' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression (ambiguity) END NEWLINE* NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression (ambiguity) END NEWLINE* ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) '[' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'paths' ':' paths+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) 'tags' ':' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) NEWLINE+ BEGIN '-' tags+=Expression
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedPaths?='paths-ignore'
	 *     paths+=Expression NEWLINE+ END (ambiguity) ignoreSpecifiedTags?='tags-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression ']' NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression ']' NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     paths+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     tags+=Expression ']' NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     tags+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     tags+=Expression NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_NEWLINETerminalRuleCall_3_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ (ambiguity) '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_4_a_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_p_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE+ (ambiguity) '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_4_a_NEWLINETerminalRuleCall_3_0_2_1_2_0_p_BEGINTerminalRuleCall_3_0_2_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_4_a_NEWLINETerminalRuleCall_3_1_0_0_2_0_p_BEGINTerminalRuleCall_3_1_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE+ (ambiguity) '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_4_a_NEWLINETerminalRuleCall_3_1_1_2_0_p_BEGINTerminalRuleCall_3_1_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE+ (ambiguity) '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_4_a_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_p_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE+ (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_4_a_NEWLINETerminalRuleCall_3_2_0_1_2_0_p_BEGINTerminalRuleCall_3_2_0_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((NEWLINE+ BEGIN) | (END NEWLINE*))?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' (ambiguity) (rule start)
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' (ambiguity) END NEWLINE* (rule start)
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'schedule' ':' (ambiguity) BEGIN '-' 'cron' ':' crons+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'schedule' ':' (ambiguity) BEGIN '-' 'cron' ':' crons+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     crons+=Expression (ambiguity) '-' 'cron' ':' crons+=Expression
	 *     crons+=Expression (ambiguity) END NEWLINE* (rule end)
	 *     crons+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_2_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     crons+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     crons+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedScheduleTrigger_NEWLINETerminalRuleCall_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     event=EVENT ':' (ambiguity) BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 
	 * </pre>
	 */
	protected void emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_0_6_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 
	 * </pre>
	 */
	protected void emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_0_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedStandardEventTrigger_NEWLINETerminalRuleCall_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN '[' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) BEGIN 'push' ':' '[' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' '[' tags+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' 'paths' ':' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' 'tags' ':' tags+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? END NEWLINE* (rule start)
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN '-' tags+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN '[' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN '[' tags+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN 'branches' ':' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN 'tags' ':' tags+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' tags+=Expression
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) (ambiguity) BEGIN 'push' ':' NEWLINE+ BEGIN ignoreSpecifiedTags?='tags-ignore'
	 *     (rule start) (ambiguity) BEGIN 'push' ':' ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) (ambiguity) BEGIN 'push' ':' ignoreSpecifiedTags?='tags-ignore'
	 *     (rule start) (ambiguity) BEGIN 'schedule' ':' NEWLINE+ BEGIN '-' 'cron' ':' crons+=Expression
	 *     (rule start) (ambiguity) BEGIN 'workflow_call' ':' 'outputs' ':' NEWLINE+ BEGIN outputs+=Output
	 *     (rule start) (ambiguity) BEGIN 'workflow_call' ':' 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     (rule start) (ambiguity) BEGIN 'workflow_call' ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? END NEWLINE* (rule start)
	 *     (rule start) (ambiguity) BEGIN 'workflow_call' ':' NEWLINE+ BEGIN 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     (rule start) (ambiguity) BEGIN 'workflow_call' ':' NEWLINE+ BEGIN 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     (rule start) (ambiguity) BEGIN 'workflow_dispatch' ':' NEWLINE+ BEGIN 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     (rule start) (ambiguity) BEGIN 'workflow_run' ':' NEWLINE+ BEGIN 'branches' ':' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN 'workflow_run' ':' NEWLINE+ BEGIN ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' '[' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' '[' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' 'branches' ':' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' 'paths' ':' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? END NEWLINE* (rule start)
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN '-' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN '[' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN 'paths' ':' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN NEWLINE+ BEGIN '-' paths+=Expression
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' NEWLINE+ BEGIN ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) (ambiguity) BEGIN ('pull_request' | 'pull_request_target') ':' ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) (ambiguity) BEGIN NEWLINE+ BEGIN '-' branches+=Expression
	 *     (rule start) (ambiguity) BEGIN NEWLINE+ BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) BEGIN event=EVENT
	 
	 * </pre>
	 */
	protected void emit_OptionedTrigger_NEWLINETerminalRuleCall_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) NEWLINE+ BEGIN 'push' ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? END (ambiguity) (rule start)
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? END (ambiguity) (rule start)
	 *     (rule start) NEWLINE+ BEGIN ('pull_request' | 'pull_request_target') ':' ((NEWLINE+ BEGIN) | (END NEWLINE*))? END (ambiguity) (rule start)
	 *     branches+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression ']' NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END NEWLINE* END NEWLINE* END (ambiguity) (rule end)
	 *     crons+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE ']' NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+ END NEWLINE* END NEWLINE* END (ambiguity) (rule end)
	 *     inputs+=Input END NEWLINE* END (ambiguity) (rule end)
	 *     inputs+=Input END NEWLINE* END NEWLINE* END (ambiguity) (rule end)
	 *     outputs+=Output END NEWLINE* END (ambiguity) (rule end)
	 *     outputs+=Output END NEWLINE* END NEWLINE* END (ambiguity) (rule end)
	 *     paths+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression ']' NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     paths+=Expression NEWLINE+ END NEWLINE* END NEWLINE* END (ambiguity) (rule end)
	 *     secrets+=Secret END NEWLINE* END (ambiguity) (rule end)
	 *     secrets+=Secret END NEWLINE* END NEWLINE* END (ambiguity) (rule end)
	 *     tags+=Expression ']' NEWLINE+ END (ambiguity) (rule end)
	 *     tags+=Expression ']' NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     tags+=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     tags+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     tags+=Expression NEWLINE+ END NEWLINE* END NEWLINE* END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedTrigger_NEWLINETerminalRuleCall_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' (ambiguity) BEGIN 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     (rule start) 'workflow_call' ':' (ambiguity) BEGIN 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' (ambiguity) BEGIN 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' (ambiguity) BEGIN 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' NEWLINE+ BEGIN 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' NEWLINE+ BEGIN 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 *     outputs+=Output END NEWLINE* 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 *     secrets+=Secret END NEWLINE* 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input END (ambiguity) 'outputs' ':' NEWLINE+ BEGIN outputs+=Output
	 *     inputs+=Input END (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     inputs+=Input END (ambiguity) (rule end)
	 *     inputs+=Input END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_0_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input END NEWLINE* 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output END (ambiguity) 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     outputs+=Output END (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     outputs+=Output END (ambiguity) (rule end)
	 *     outputs+=Output END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_0_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' NEWLINE+ BEGIN 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' NEWLINE+ BEGIN 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     inputs+=Input END NEWLINE* 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     outputs+=Output END NEWLINE* 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret END (ambiguity) 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     secrets+=Secret END (ambiguity) (rule end)
	 *     secrets+=Secret END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_0_2_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 *     inputs+=Input END NEWLINE* 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 *     secrets+=Secret END NEWLINE* 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output END (ambiguity) 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     outputs+=Output END (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     outputs+=Output END (ambiguity) (rule end)
	 *     outputs+=Output END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_0_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output END NEWLINE* 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input END (ambiguity) 'outputs' ':' NEWLINE+ BEGIN outputs+=Output
	 *     inputs+=Input END (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     inputs+=Input END (ambiguity) (rule end)
	 *     inputs+=Input END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_0_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     inputs+=Input END NEWLINE* 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     outputs+=Output END NEWLINE* 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret END (ambiguity) 'outputs' ':' NEWLINE+ BEGIN outputs+=Output
	 *     secrets+=Secret END (ambiguity) (rule end)
	 *     secrets+=Secret END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_1_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     inputs+=Input END NEWLINE* 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 *     outputs+=Output END NEWLINE* 'secrets' ':' (ambiguity) BEGIN secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret END (ambiguity) 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     secrets+=Secret END (ambiguity) 'outputs' ':' NEWLINE+ BEGIN outputs+=Output
	 *     secrets+=Secret END (ambiguity) END NEWLINE* (rule end)
	 *     secrets+=Secret END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_0_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret END NEWLINE* 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input END (ambiguity) 'outputs' ':' NEWLINE+ BEGIN outputs+=Output
	 *     inputs+=Input END (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     inputs+=Input END (ambiguity) END NEWLINE* (rule end)
	 *     inputs+=Input END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_0_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 *     inputs+=Input END NEWLINE* 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 *     secrets+=Secret END NEWLINE* 'outputs' ':' (ambiguity) BEGIN outputs+=Output
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output END (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=Secret
	 *     outputs+=Output END (ambiguity) END NEWLINE* (rule end)
	 *     outputs+=Output END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_0_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input END NEWLINE* END (ambiguity) (rule end)
	 *     inputs+=Input END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 *     outputs+=Output END NEWLINE* END (ambiguity) (rule end)
	 *     outputs+=Output END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 *     secrets+=Secret END NEWLINE* END (ambiguity) (rule end)
	 *     secrets+=Secret END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_NEWLINETerminalRuleCall_3_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         'inputs' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input (ambiguity) inputs+=Input
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_NEWLINETerminalRuleCall_3_0_2_0_0_6_a_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_p_BEGINTerminalRuleCall_3_0_2_0_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         'secrets' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_NEWLINETerminalRuleCall_3_0_2_1_6_a_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_p_BEGINTerminalRuleCall_3_0_2_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         'outputs' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output (ambiguity) outputs+=Output
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_NEWLINETerminalRuleCall_3_1_0_0_6_a_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_p_BEGINTerminalRuleCall_3_1_0_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         'secrets' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_NEWLINETerminalRuleCall_3_1_1_6_a_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_p_BEGINTerminalRuleCall_3_1_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         'secrets' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_NEWLINETerminalRuleCall_3_2_0_0_0_6_a_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_p_BEGINTerminalRuleCall_3_2_0_0_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         'outputs' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output (ambiguity) outputs+=Output
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_NEWLINETerminalRuleCall_3_2_0_1_6_a_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_p_BEGINTerminalRuleCall_3_2_0_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((NEWLINE+ BEGIN) | (END NEWLINE*))?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' (ambiguity) (rule start)
	 *     (rule start) NEWLINE+ BEGIN 'workflow_call' ':' (ambiguity) END NEWLINE* (rule start)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger_____ENDTerminalRuleCall_3_2_1_NEWLINETerminalRuleCall_3_2_2_a___or___NEWLINETerminalRuleCall_3_0_0_p_BEGINTerminalRuleCall_3_0_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_dispatch' ':' (ambiguity) BEGIN 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 *     (rule start) NEWLINE+ BEGIN 'workflow_dispatch' ':' (ambiguity) BEGIN 'inputs' ':' NEWLINE+ BEGIN inputs+=Input
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_dispatch' ':' NEWLINE+ BEGIN 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 *     (rule start) NEWLINE+ BEGIN 'workflow_dispatch' ':' NEWLINE+ BEGIN 'inputs' ':' (ambiguity) BEGIN inputs+=Input
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input END (ambiguity) END NEWLINE* (rule end)
	 *     inputs+=Input END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_5_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input END NEWLINE* END (ambiguity) (rule end)
	 *     inputs+=Input END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowDispatchTrigger_NEWLINETerminalRuleCall_7_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_run' ':' (ambiguity) BEGIN 'branches' ':' branches+=Expression
	 *     (rule start) 'workflow_run' ':' (ambiguity) BEGIN ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) NEWLINE+ BEGIN 'workflow_run' ':' (ambiguity) BEGIN 'branches' ':' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN 'workflow_run' ':' (ambiguity) BEGIN ignoreSpecifiedBranches?='branches-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_0_6_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression ']' (ambiguity) (rule end)
	 *     branches+=Expression ']' (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN '-' branches+=Expression
	 *     (rule start) NEWLINE+ BEGIN (ambiguity) BEGIN '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression (ambiguity) '-' branches+=Expression
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 *     branches+=Expression (ambiguity) END NEWLINE* END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* (rule end)
	 *     branches+=Expression NEWLINE+ END (ambiguity) END NEWLINE* END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_0_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE+ END NEWLINE* END (ambiguity) (rule end)
	 *     branches+=Expression NEWLINE+ END NEWLINE* END (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowRunTrigger_NEWLINETerminalRuleCall_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     id=YAMLID ':' (ambiguity) BEGIN 'description' ':' description=Expression
	 *     id=YAMLID ':' (ambiguity) BEGIN 'value' ':' value=Expression
	 *     id=YAMLID ':' (ambiguity) BEGIN (rule end)
	 *     id=YAMLID ':' (ambiguity) BEGIN id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Output_NEWLINETerminalRuleCall_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     description=Expression (ambiguity) 'value' ':' value=Expression
	 *     description=Expression (ambiguity) (rule end)
	 *     description=Expression (ambiguity) id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Output_NEWLINETerminalRuleCall_0_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     value=Expression (ambiguity) END NEWLINE* 'value' ':' value=Expression
	 *     value=Expression (ambiguity) END NEWLINE* (rule end)
	 *     value=Expression (ambiguity) END NEWLINE* id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Output_NEWLINETerminalRuleCall_1_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     value=Expression NEWLINE+ END (ambiguity) 'value' ':' value=Expression
	 *     value=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     value=Expression NEWLINE+ END (ambiguity) id=YAMLID
	 
	 * </pre>
	 */
	protected void emit_Output_NEWLINETerminalRuleCall_1_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'args' ':' containerArgs=Expression
	 *     id=STRING (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'args' ':' containerArgs=Expression
	 *     name=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_2_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'args' ':' containerArgs=Expression
	 *     shell=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_3_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'args' ':' containerArgs=Expression
	 *     workingDirectory=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-' BEGIN ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END NEWLINE* ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     containerArgs=Expression NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     entrypoint=Expression NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     id=STRING NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     ifCondition=IfStatement ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     name=Expression NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     shell=Expression NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     uses=Expression NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     workingDirectory=Expression NEWLINE+ ('with' ':' NEWLINE+ BEGIN)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_5_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'args' ':' containerArgs=Expression
	 *     continueOnError=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_6_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     timeoutMinutes=Expression (ambiguity) 'uses' ':' uses=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_7_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'args' ':' containerArgs=Expression
	 *     uses=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_7_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'args' ':' containerArgs=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'entrypoint' ':' entrypoint=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     entrypoint=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_8_0_4_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'args' ':' containerArgs=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'entrypoint' ':' entrypoint=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* args+=VariableAssignment
	 *     containerArgs=Expression (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_8_0_4_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'continue-on-error' ':' continueOnError=Expression
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'id' ':' id=STRING
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'name' ':' name=Expression
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'shell' ':' shell=Expression
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'uses' ':' uses=Expression
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* 'working-directory' ':' workingDirectory=Expression
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* (rule end)
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* END (rule end)
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)* ifCondition=IfStatement
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'args' ':' containerArgs=Expression
	 *     args+=VariableAssignment END (ambiguity) ('with' ':' NEWLINE+ BEGIN)+ 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package_NEWLINETerminalRuleCall_8_1_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE 
	  *         ('with' ':' NEWLINE+ BEGIN)* 
	  *         'env' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Package___ENDTerminalRuleCall_5_5_NEWLINETerminalRuleCall_5_6___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_p_BEGINTerminalRuleCall_5_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* ('with' ':' NEWLINE+ BEGIN)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=VariableAssignment (ambiguity) args+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Package___ENDTerminalRuleCall_8_1_1_NEWLINETerminalRuleCall_8_1_2_a___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('with' ':' NEWLINE+ BEGIN)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-' BEGIN (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) '-' BEGIN (ambiguity) 'id' ':' id=STRING
	 *     (rule start) '-' BEGIN (ambiguity) 'name' ':' name=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'shell' ':' shell=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'uses' ':' uses=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     (rule start) '-' BEGIN (ambiguity) END (rule start)
	 *     (rule start) '-' BEGIN (ambiguity) args+=VariableAssignment
	 *     (rule start) '-' BEGIN (ambiguity) ifCondition=IfStatement
	 *     (rule start) (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'id' ':' id=STRING
	 *     (rule start) (ambiguity) 'name' ':' name=Expression
	 *     (rule start) (ambiguity) 'shell' ':' shell=Expression
	 *     (rule start) (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) (ambiguity) 'uses' ':' uses=Expression
	 *     (rule start) (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) args+=VariableAssignment
	 *     (rule start) (ambiguity) ifCondition=IfStatement
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'id' ':' id=STRING
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'name' ':' name=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'shell' ':' shell=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'uses' ':' uses=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) (rule end)
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) END (rule end)
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     containerArgs=Expression NEWLINE+ (ambiguity) (rule end)
	 *     containerArgs=Expression NEWLINE+ (ambiguity) END (rule end)
	 *     containerArgs=Expression NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     containerArgs=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) (rule end)
	 *     continueOnError=Expression NEWLINE+ (ambiguity) END (rule end)
	 *     continueOnError=Expression NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     entrypoint=Expression NEWLINE+ (ambiguity) (rule end)
	 *     entrypoint=Expression NEWLINE+ (ambiguity) END (rule end)
	 *     entrypoint=Expression NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     entrypoint=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) END (rule end)
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) args+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) ifCondition=IfStatement
	 *     id=STRING NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     id=STRING NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     id=STRING NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     id=STRING NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     id=STRING NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     id=STRING NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     id=STRING NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     id=STRING NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     id=STRING NEWLINE+ (ambiguity) (rule end)
	 *     id=STRING NEWLINE+ (ambiguity) END (rule end)
	 *     id=STRING NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     id=STRING NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     ifCondition=IfStatement (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     ifCondition=IfStatement (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     ifCondition=IfStatement (ambiguity) 'id' ':' id=STRING
	 *     ifCondition=IfStatement (ambiguity) 'name' ':' name=Expression
	 *     ifCondition=IfStatement (ambiguity) 'shell' ':' shell=Expression
	 *     ifCondition=IfStatement (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     ifCondition=IfStatement (ambiguity) 'uses' ':' uses=Expression
	 *     ifCondition=IfStatement (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     ifCondition=IfStatement (ambiguity) (rule end)
	 *     ifCondition=IfStatement (ambiguity) END (rule end)
	 *     ifCondition=IfStatement (ambiguity) args+=VariableAssignment
	 *     ifCondition=IfStatement (ambiguity) ifCondition=IfStatement
	 *     name=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     name=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     name=Expression NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     name=Expression NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     name=Expression NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     name=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=Expression NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     name=Expression NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     name=Expression NEWLINE+ (ambiguity) (rule end)
	 *     name=Expression NEWLINE+ (ambiguity) END (rule end)
	 *     name=Expression NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     name=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     shell=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     shell=Expression NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     shell=Expression NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) (rule end)
	 *     shell=Expression NEWLINE+ (ambiguity) END (rule end)
	 *     shell=Expression NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     shell=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     uses=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     uses=Expression NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     uses=Expression NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) (rule end)
	 *     uses=Expression NEWLINE+ (ambiguity) END (rule end)
	 *     uses=Expression NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     uses=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'id' ':' id=STRING
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'name' ':' name=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'shell' ':' shell=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'uses' ':' uses=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) (rule end)
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) END (rule end)
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) args+=VariableAssignment
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('with' ':' NEWLINE+ BEGIN)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-' BEGIN (ambiguity) 'args' ':' containerArgs=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     (rule start) '-' BEGIN (ambiguity) END (rule start)
	 *     (rule start) (ambiguity) 'args' ':' containerArgs=Expression
	 *     (rule start) (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'args' ':' containerArgs=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     id=STRING NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     id=STRING NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     ifCondition=IfStatement (ambiguity) 'args' ':' containerArgs=Expression
	 *     ifCondition=IfStatement (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     name=Expression NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     name=Expression NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     shell=Expression NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     uses=Expression NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'args' ':' containerArgs=Expression
	 *     workingDirectory=Expression NEWLINE+ (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_p_BEGINTerminalRuleCall_8_0_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     value=PERMISSION_VALUE (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Permission_NEWLINETerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) '${{' (ambiguity) 'always' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'cancelled' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'contains' '(' search=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'endsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'failure' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'format' '(' string=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'fromJSON' '(' value=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'hashFiles' '(' path=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'join' '(' array=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'startsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'success' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'toJSON' '(' value=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) context=CONTEXT
	 *     (rule start) '${{' (ambiguity) name=ID
	 *     (rule start) '${{' (ambiguity) value=BOOLEAN
	 *     (rule start) '${{' (ambiguity) value=DOUBLE
	 *     (rule start) '${{' (ambiguity) value=INT
	 *     (rule start) '${{' (ambiguity) value=STRING
	 *     (rule start) '${{' (ambiguity) {And.lhs=}
	 *     (rule start) '${{' (ambiguity) {Comparison.lhs=}
	 *     (rule start) '${{' (ambiguity) {Equality.lhs=}
	 *     (rule start) '${{' (ambiguity) {Or.lhs=}
	 *     (rule start) '${{' (ambiguity) {VariableDereference.variable=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'always' '(' ')' '}}' NEWLINE+ (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'cancelled' '(' ')' '}}' NEWLINE+ (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'contains' '(' search=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'endsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'failure' '(' ')' '}}' NEWLINE+ (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'format' '(' string=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'fromJSON' '(' value=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'hashFiles' '(' path=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'join' '(' array=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'startsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'success' '(' ')' '}}' NEWLINE+ (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'toJSON' '(' value=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) context=CONTEXT
	 *     (rule start) 'if' ':' '${{' (ambiguity) name=ID
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=BOOLEAN
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=DOUBLE
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=INT
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=STRING
	 *     (rule start) 'if' ':' '${{' (ambiguity) {And.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {Comparison.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {Equality.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {Or.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {VariableDereference.variable=}
	 *     (rule start) (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) (ambiguity) 'always' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'cancelled' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'contains' '(' search=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'endsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'failure' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'format' '(' string=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'fromJSON' '(' value=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'hashFiles' '(' path=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'join' '(' array=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'startsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'success' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'toJSON' '(' value=InsideBracketsExpression
	 *     (rule start) (ambiguity) context=CONTEXT
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=DOUBLE
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Comparison.lhs=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 *     (rule start) (ambiguity) {VariableDereference.variable=}
	 
	 * </pre>
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Comparison.lhs=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 *     (rule start) (ambiguity) {VariableDereference.variable=}
	 
	 * </pre>
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=YAMLID ':' (ambiguity) BEGIN 'name' ':' jobName=Expression
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'container' ':' container=Container
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* (rule end)
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* ifCondition=IfStatement
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_0_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     agent=Agent (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     container=Container (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     ifCondition=IfStatement (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'services' ':' (ambiguity) BEGIN services+=Service
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     services+=Service END (ambiguity) (END NEWLINE*)* (rule end)
	 *     services+=Service END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     services+=Service END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_11_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     workflowPath=Expression (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_12_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     agent=Agent (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     container=Container (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     ifCondition=IfStatement (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'with' ':' (ambiguity) BEGIN args+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* (rule end)
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     args+=VariableAssignment END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_13_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* (rule end)
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     inheritSecrets?='inherit' (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_0_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     agent=Agent (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     container=Container (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     ifCondition=IfStatement (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'secrets' ':' (ambiguity) BEGIN secrets+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* (rule end)
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     secrets+=VariableAssignment END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_14_2_1_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_15_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ '[' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'container' ':' container=Container
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'continue-on-error' ':' continueOnError=Expression
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'needs' ':' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'runs-on' ':' agent=Agent
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'secrets' ':' inheritSecrets?='inherit'
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'uses' ':' workflowPath=Expression
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ (rule end)
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ ifCondition=IfStatement
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_16_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     agent=Agent (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     container=Container (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     ifCondition=IfStatement (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* (rule end)
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     agent=Agent (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     container=Container (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN)? '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_2_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     agent=Agent (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     container=Container (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     ifCondition=IfStatement (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* (rule end)
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_6_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     agent=Agent (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     container=Container (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     ifCondition=IfStatement (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_7_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     agent=Agent (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     container=Container (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     ifCondition=IfStatement (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* (rule end)
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_8_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     agent=Agent (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     args+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     container=Container (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     ifCondition=IfStatement (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     inheritSecrets?='inherit' NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     secrets+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     workflowPath=Expression NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'secrets' ':' inheritSecrets?='inherit'
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'uses' ':' workflowPath=Expression
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* (rule end)
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_NEWLINETerminalRuleCall_9_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((END NEWLINE*)+ | (END NEWLINE*)+)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_ScriptJob_____ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p_or___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'services' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service (ambiguity) services+=Service
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_NEWLINETerminalRuleCall_11_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_p_BEGINTerminalRuleCall_11_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'with' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=VariableAssignment (ambiguity) args+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_NEWLINETerminalRuleCall_13_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_p_BEGINTerminalRuleCall_13_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'secrets' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=VariableAssignment (ambiguity) secrets+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_NEWLINETerminalRuleCall_14_2_1_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_p_BEGINTerminalRuleCall_14_2_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     (rule start) (ambiguity) 'container' ':' container=Container
	 *     (rule start) (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     (rule start) (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     (rule start) (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     (rule start) (ambiguity) 'runs-on' ':' agent=Agent
	 *     (rule start) (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     (rule start) (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     (rule start) (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     (rule start) (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     (rule start) (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) (ambiguity) 'uses' ':' workflowPath=Expression
	 *     (rule start) (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) ifCondition=IfStatement
	 *     (rule start) (ambiguity) name=YAMLID
	 *     agent=Agent (ambiguity) '[' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     agent=Agent (ambiguity) 'container' ':' container=Container
	 *     agent=Agent (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     agent=Agent (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     agent=Agent (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     agent=Agent (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     agent=Agent (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     agent=Agent (ambiguity) 'runs-on' ':' agent=Agent
	 *     agent=Agent (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     agent=Agent (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     agent=Agent (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     agent=Agent (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     agent=Agent (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     agent=Agent (ambiguity) 'uses' ':' workflowPath=Expression
	 *     agent=Agent (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     agent=Agent (ambiguity) (rule end)
	 *     agent=Agent (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) ifCondition=IfStatement
	 *     agent=Agent (ambiguity) name=YAMLID
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) (rule end)
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     args+=VariableAssignment END NEWLINE* (ambiguity) name=YAMLID
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) (rule end)
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) name=YAMLID
	 *     container=Container (ambiguity) '[' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     container=Container (ambiguity) 'container' ':' container=Container
	 *     container=Container (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     container=Container (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     container=Container (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     container=Container (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     container=Container (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     container=Container (ambiguity) 'runs-on' ':' agent=Agent
	 *     container=Container (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     container=Container (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     container=Container (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     container=Container (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     container=Container (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     container=Container (ambiguity) 'uses' ':' workflowPath=Expression
	 *     container=Container (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     container=Container (ambiguity) (rule end)
	 *     container=Container (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) ifCondition=IfStatement
	 *     container=Container (ambiguity) name=YAMLID
	 *     continueOnError=Expression NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'uses' ':' workflowPath=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) (rule end)
	 *     continueOnError=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     continueOnError=Expression NEWLINE+ (ambiguity) name=YAMLID
	 *     defaults=Defaults END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (ambiguity) (rule end)
	 *     defaults=Defaults END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     defaults=Defaults END NEWLINE* (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) name=YAMLID
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) name=YAMLID
	 *     ifCondition=IfStatement (ambiguity) '[' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     ifCondition=IfStatement (ambiguity) 'container' ':' container=Container
	 *     ifCondition=IfStatement (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     ifCondition=IfStatement (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     ifCondition=IfStatement (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     ifCondition=IfStatement (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     ifCondition=IfStatement (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     ifCondition=IfStatement (ambiguity) 'runs-on' ':' agent=Agent
	 *     ifCondition=IfStatement (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     ifCondition=IfStatement (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     ifCondition=IfStatement (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     ifCondition=IfStatement (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     ifCondition=IfStatement (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     ifCondition=IfStatement (ambiguity) 'uses' ':' workflowPath=Expression
	 *     ifCondition=IfStatement (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     ifCondition=IfStatement (ambiguity) (rule end)
	 *     ifCondition=IfStatement (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (ambiguity) ifCondition=IfStatement
	 *     ifCondition=IfStatement (ambiguity) name=YAMLID
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'uses' ':' workflowPath=Expression
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) (rule end)
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     inheritSecrets?='inherit' NEWLINE+ (ambiguity) name=YAMLID
	 *     jobName=Expression NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     jobName=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     jobName=Expression NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     jobName=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     jobName=Expression NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     jobName=Expression NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     jobName=Expression NEWLINE+ (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     jobName=Expression NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     jobName=Expression NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     jobName=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     jobName=Expression NEWLINE+ (ambiguity) 'uses' ':' workflowPath=Expression
	 *     jobName=Expression NEWLINE+ (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (ambiguity) (rule end)
	 *     jobName=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     jobName=Expression NEWLINE+ (ambiguity) name=YAMLID
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) '[' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'container' ':' container=Container
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'runs-on' ':' agent=Agent
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'uses' ':' workflowPath=Expression
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) (rule end)
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) ifCondition=IfStatement
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) name=YAMLID
	 *     permissions+=Permission END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (ambiguity) (rule end)
	 *     permissions+=Permission END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     permissions+=Permission END NEWLINE* (ambiguity) name=YAMLID
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) (rule end)
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     secrets+=VariableAssignment END NEWLINE* (ambiguity) name=YAMLID
	 *     services+=Service END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     services+=Service END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     services+=Service END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     services+=Service END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     services+=Service END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     services+=Service END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     services+=Service END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     services+=Service END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     services+=Service END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     services+=Service END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     services+=Service END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     services+=Service END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     services+=Service END NEWLINE* (ambiguity) (rule end)
	 *     services+=Service END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     services+=Service END NEWLINE* (ambiguity) name=YAMLID
	 *     stagingEnvironment=StagingEnvironment (ambiguity) '[' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'container' ':' container=Container
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'runs-on' ':' agent=Agent
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'uses' ':' workflowPath=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) (rule end)
	 *     stagingEnvironment=StagingEnvironment (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) ifCondition=IfStatement
	 *     stagingEnvironment=StagingEnvironment (ambiguity) name=YAMLID
	 *     strategy=Strategy END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'uses' ':' workflowPath=Expression
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (ambiguity) (rule end)
	 *     strategy=Strategy END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     strategy=Strategy END NEWLINE* (ambiguity) name=YAMLID
	 *     workflowPath=Expression NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'uses' ':' workflowPath=Expression
	 *     workflowPath=Expression NEWLINE+ (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     workflowPath=Expression NEWLINE+ (ambiguity) (rule end)
	 *     workflowPath=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     workflowPath=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     workflowPath=Expression NEWLINE+ (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'secrets' ':' NEWLINE+ BEGIN secrets+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'uses' ':' workflowPath=Expression
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'with' ':' NEWLINE+ BEGIN args+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) (rule end)
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'permissions' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission (ambiguity) permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) '-' dependsOn+=[Job|ID]
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'env' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_16_1_NEWLINETerminalRuleCall_16_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=YAMLID ':' (ambiguity) BEGIN 'name' ':' jobName=Expression
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'container' ':' container=Container
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* (rule end)
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* ifCondition=IfStatement
	 *     name=YAMLID ':' (ambiguity) BEGIN (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     jobName=Expression (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_0_4_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     agent=Agent (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     container=Container (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     ifCondition=IfStatement (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     steps+=Step END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'strategy' ':' (ambiguity) BEGIN strategy=Strategy
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_10_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* (rule end)
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     strategy=Strategy END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_10_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     agent=Agent (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     container=Container (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     ifCondition=IfStatement (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     steps+=Step END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'services' ':' (ambiguity) BEGIN services+=Service
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'services' ':' (ambiguity) BEGIN services+=Service
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_12_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     services+=Service END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     services+=Service END (ambiguity) (END NEWLINE*)* (rule end)
	 *     services+=Service END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     services+=Service END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_12_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* (rule end)
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     continueOnError=Expression (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_13_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ '[' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'container' ':' container=Container
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'continue-on-error' ':' continueOnError=Expression
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'needs' ':' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'runs-on' ':' agent=Agent
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ (rule end)
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ ifCondition=IfStatement
	 *     timeoutMinutes=Expression (ambiguity) (END NEWLINE*)+ name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_14_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     agent=Agent (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     container=Container (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     ifCondition=IfStatement (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     steps+=Step END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'permissions' ':' (ambiguity) BEGIN permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* (rule end)
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     permissions+=Permission END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_2_0_2_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] ']' (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_2_1_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     agent=Agent (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     container=Container (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     steps+=Step END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ (ambiguity) BEGIN '-' dependsOn+=[Job|ID]
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_2_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] (ambiguity) (END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN)? '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] (ambiguity) END NEWLINE* (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_2_2_2_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE+ END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_2_2_4_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     agent=Agent (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     container=Container (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     ifCondition=IfStatement (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     steps+=Step END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'concurrency' ':' (ambiguity) BEGIN concurrencyGroup=ConcurrencyGroup
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_6_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* (rule end)
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_6_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     agent=Agent (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     container=Container (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     ifCondition=IfStatement (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     steps+=Step END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'env' ':' (ambiguity) BEGIN environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_7_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     environmentVariables+=VariableAssignment END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_7_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     agent=Agent (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     container=Container (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     ifCondition=IfStatement (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     steps+=Step END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'defaults' ':' (ambiguity) BEGIN defaults=Defaults
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_8_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* (rule end)
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     defaults=Defaults END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_8_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     agent=Agent (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     container=Container (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     continueOnError=Expression NEWLINE+ (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     defaults=Defaults END NEWLINE* (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] NEWLINE+ (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     environmentVariables+=VariableAssignment END NEWLINE* (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     ifCondition=IfStatement (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     jobName=Expression NEWLINE+ (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     name=YAMLID ':' NEWLINE+ BEGIN (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     permissions+=Permission END NEWLINE* (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     services+=Service END NEWLINE* (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     stagingEnvironment=StagingEnvironment (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     strategy=Strategy END NEWLINE* (END NEWLINE*)* 'steps' ':' (ambiguity) BEGIN steps+=Step
	 *     timeoutMinutes=Expression NEWLINE+ (END NEWLINE*)+ 'steps' ':' (ambiguity) BEGIN steps+=Step
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_9_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* '[' dependsOn+=[Job|ID]
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'container' ':' container=Container
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'continue-on-error' ':' continueOnError=Expression
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'needs' ':' dependsOn+=[Job|ID]
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'runs-on' ':' agent=Agent
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* (rule end)
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* ifCondition=IfStatement
	 *     steps+=Step END (ambiguity) (END NEWLINE*)* name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_NEWLINETerminalRuleCall_9_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'services' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service (ambiguity) services+=Service
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_12_5_NEWLINETerminalRuleCall_12_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_p_BEGINTerminalRuleCall_12_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE*)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     (rule start) (ambiguity) 'container' ':' container=Container
	 *     (rule start) (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     (rule start) (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     (rule start) (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     (rule start) (ambiguity) 'runs-on' ':' agent=Agent
	 *     (rule start) (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     (rule start) (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     (rule start) (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     (rule start) (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) ifCondition=IfStatement
	 *     (rule start) (ambiguity) name=YAMLID
	 *     agent=Agent (ambiguity) '[' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     agent=Agent (ambiguity) 'container' ':' container=Container
	 *     agent=Agent (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     agent=Agent (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     agent=Agent (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     agent=Agent (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     agent=Agent (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     agent=Agent (ambiguity) 'runs-on' ':' agent=Agent
	 *     agent=Agent (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     agent=Agent (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     agent=Agent (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     agent=Agent (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     agent=Agent (ambiguity) (rule end)
	 *     agent=Agent (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) ifCondition=IfStatement
	 *     agent=Agent (ambiguity) name=YAMLID
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) (rule end)
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     concurrencyGroup=ConcurrencyGroup END NEWLINE* (ambiguity) name=YAMLID
	 *     container=Container (ambiguity) '[' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     container=Container (ambiguity) 'container' ':' container=Container
	 *     container=Container (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     container=Container (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     container=Container (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     container=Container (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     container=Container (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     container=Container (ambiguity) 'runs-on' ':' agent=Agent
	 *     container=Container (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     container=Container (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     container=Container (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     container=Container (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     container=Container (ambiguity) (rule end)
	 *     container=Container (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) ifCondition=IfStatement
	 *     container=Container (ambiguity) name=YAMLID
	 *     continueOnError=Expression NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     continueOnError=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression NEWLINE+ (ambiguity) (rule end)
	 *     continueOnError=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     continueOnError=Expression NEWLINE+ (ambiguity) name=YAMLID
	 *     defaults=Defaults END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     defaults=Defaults END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     defaults=Defaults END NEWLINE* (ambiguity) (rule end)
	 *     defaults=Defaults END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     defaults=Defaults END NEWLINE* (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] ']' NEWLINE+ (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE+ END NEWLINE* (ambiguity) name=YAMLID
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     environmentVariables+=VariableAssignment END NEWLINE* (ambiguity) name=YAMLID
	 *     ifCondition=IfStatement (ambiguity) '[' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     ifCondition=IfStatement (ambiguity) 'container' ':' container=Container
	 *     ifCondition=IfStatement (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     ifCondition=IfStatement (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     ifCondition=IfStatement (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     ifCondition=IfStatement (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     ifCondition=IfStatement (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     ifCondition=IfStatement (ambiguity) 'runs-on' ':' agent=Agent
	 *     ifCondition=IfStatement (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     ifCondition=IfStatement (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     ifCondition=IfStatement (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     ifCondition=IfStatement (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     ifCondition=IfStatement (ambiguity) (rule end)
	 *     ifCondition=IfStatement (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     ifCondition=IfStatement (ambiguity) ifCondition=IfStatement
	 *     ifCondition=IfStatement (ambiguity) name=YAMLID
	 *     jobName=Expression NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     jobName=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     jobName=Expression NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     jobName=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     jobName=Expression NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     jobName=Expression NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     jobName=Expression NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     jobName=Expression NEWLINE+ (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     jobName=Expression NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     jobName=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     jobName=Expression NEWLINE+ (ambiguity) (rule end)
	 *     jobName=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     jobName=Expression NEWLINE+ (ambiguity) name=YAMLID
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) '[' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'container' ':' container=Container
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'runs-on' ':' agent=Agent
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) (rule end)
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) ifCondition=IfStatement
	 *     name=YAMLID ':' NEWLINE+ BEGIN (ambiguity) name=YAMLID
	 *     permissions+=Permission END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     permissions+=Permission END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     permissions+=Permission END NEWLINE* (ambiguity) (rule end)
	 *     permissions+=Permission END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     permissions+=Permission END NEWLINE* (ambiguity) name=YAMLID
	 *     services+=Service END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     services+=Service END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     services+=Service END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     services+=Service END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     services+=Service END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     services+=Service END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     services+=Service END NEWLINE* (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     services+=Service END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     services+=Service END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     services+=Service END NEWLINE* (ambiguity) (rule end)
	 *     services+=Service END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     services+=Service END NEWLINE* (ambiguity) name=YAMLID
	 *     stagingEnvironment=StagingEnvironment (ambiguity) '[' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'container' ':' container=Container
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'runs-on' ':' agent=Agent
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) (rule end)
	 *     stagingEnvironment=StagingEnvironment (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) ifCondition=IfStatement
	 *     stagingEnvironment=StagingEnvironment (ambiguity) name=YAMLID
	 *     steps+=Step END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     steps+=Step END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     steps+=Step END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     steps+=Step END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     steps+=Step END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     steps+=Step END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     steps+=Step END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     steps+=Step END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     steps+=Step END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     steps+=Step END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     steps+=Step END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     steps+=Step END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     steps+=Step END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     steps+=Step END NEWLINE* (ambiguity) (rule end)
	 *     steps+=Step END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     steps+=Step END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     steps+=Step END NEWLINE* (ambiguity) name=YAMLID
	 *     strategy=Strategy END NEWLINE* (ambiguity) '[' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'container' ':' container=Container
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'runs-on' ':' agent=Agent
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     strategy=Strategy END NEWLINE* (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     strategy=Strategy END NEWLINE* (ambiguity) (rule end)
	 *     strategy=Strategy END NEWLINE* (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END NEWLINE* (ambiguity) ifCondition=IfStatement
	 *     strategy=Strategy END NEWLINE* (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE*)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) '[' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'container' ':' container=Container
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'defaults' ':' NEWLINE+ BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'permissions' ':' NEWLINE+ BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'runs-on' ':' agent=Agent
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'services' ':' NEWLINE+ BEGIN services+=Service
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'steps' ':' NEWLINE+ BEGIN steps+=Step
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'strategy' ':' NEWLINE+ BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) (rule end)
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) NEWLINE+ BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) ifCondition=IfStatement
	 *     timeoutMinutes=Expression NEWLINE+ (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'permissions' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission (ambiguity) permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_1_5_NEWLINETerminalRuleCall_1_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_p_BEGINTerminalRuleCall_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE* (END NEWLINE*)* NEWLINE+ BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] NEWLINE+ (ambiguity) '-' dependsOn+=[Job|ID]
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_2_2_3_NEWLINETerminalRuleCall_2_2_4_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_NEWLINETerminalRuleCall_2_2_0_p_BEGINTerminalRuleCall_2_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'env' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_7_5_NEWLINETerminalRuleCall_7_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_p_BEGINTerminalRuleCall_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         (END NEWLINE*)* 
	  *         'steps' 
	  *         ':' 
	  *         NEWLINE+ 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     steps+=Step (ambiguity) steps+=Step
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_9_5_NEWLINETerminalRuleCall_9_6_a___ENDTerminalRuleCall_14_1_NEWLINETerminalRuleCall_14_2_a__a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_p_BEGINTerminalRuleCall_9_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     id=YAMLID ':' (ambiguity) BEGIN 'description' ':' description=Expression
	 *     id=YAMLID ':' (ambiguity) BEGIN 'required' ':' isRequired=Expression
	 *     id=YAMLID ':' (ambiguity) BEGIN (rule end)
	 
	 * </pre>
	 */
	protected void emit_Secret_NEWLINETerminalRuleCall_0_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     description=Expression (ambiguity) 'description' ':' description=Expression
	 *     description=Expression (ambiguity) 'required' ':' isRequired=Expression
	 *     description=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Secret_NEWLINETerminalRuleCall_0_4_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     isRequired=Expression (ambiguity) 'description' ':' description=Expression
	 *     isRequired=Expression (ambiguity) 'required' ':' isRequired=Expression
	 *     isRequired=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Secret_NEWLINETerminalRuleCall_0_4_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     isRequired=Expression (ambiguity) 'description' ':' description=Expression
	 *     isRequired=Expression (ambiguity) 'required' ':' isRequired=Expression
	 *     isRequired=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Secret_NEWLINETerminalRuleCall_1_0_0_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     description=Expression (ambiguity) 'description' ':' description=Expression
	 *     description=Expression (ambiguity) 'required' ':' isRequired=Expression
	 *     description=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_Secret_NEWLINETerminalRuleCall_1_0_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) END (ambiguity) (rule start)
	 *     description=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     isRequired=Expression NEWLINE+ END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Secret_NEWLINETerminalRuleCall_1_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     key=YAMLID ':' (ambiguity) BEGIN value=Container
	 
	 * </pre>
	 */
	protected void emit_Service_NEWLINETerminalRuleCall_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     value=Container END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Service_NEWLINETerminalRuleCall_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'pull_request' | 'pull_request_target'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) NEWLINE+ (rule start)
	 
	 * </pre>
	 */
	protected void emit_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' (ambiguity) (rule start)
	 *     (rule start) 'workflow_call' (ambiguity) (rule start)
	 *     (rule start) 'workflow_dispatch' (ambiguity) (rule start)
	 *     (rule start) ('pull_request' | 'pull_request_target') (ambiguity) (rule start)
	 *     event=EVENT (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_SimpleTrigger_NEWLINETerminalRuleCall_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_StagingEnvironment_NEWLINETerminalRuleCall_0_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN 'name' ':' name=Expression
	 
	 * </pre>
	 */
	protected void emit_StagingEnvironment_NEWLINETerminalRuleCall_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Expression (ambiguity) 'url' ':' url=Expression
	 *     name=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_StagingEnvironment_NEWLINETerminalRuleCall_1_2_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     url=Expression (ambiguity) END NEWLINE* (rule end)
	 
	 * </pre>
	 */
	protected void emit_StagingEnvironment_NEWLINETerminalRuleCall_1_3_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Expression NEWLINE+ END (ambiguity) (rule end)
	 *     url=Expression NEWLINE+ END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_StagingEnvironment_NEWLINETerminalRuleCall_1_5_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' (ambiguity) BEGIN includes+=MatrixCombination
	 *     axes+=MatrixAxis END NEWLINE* END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' (ambiguity) BEGIN includes+=MatrixCombination
	 *     excludes+=MatrixCombination END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' (ambiguity) BEGIN includes+=MatrixCombination
	 *     failFast=Expression NEWLINE+ ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' (ambiguity) BEGIN includes+=MatrixCombination
	 *     includes+=MatrixCombination END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' (ambiguity) BEGIN includes+=MatrixCombination
	 *     maxParallel=Expression NEWLINE+ ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' (ambiguity) BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_0_0_4_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     includes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     includes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'fail-fast' ':' failFast=Expression
	 *     includes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'max-paralell' ':' maxParallel=Expression
	 *     includes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* (rule end)
	 *     includes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* BEGIN axes+=MatrixAxis
	 *     includes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_0_0_4_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' (ambiguity) BEGIN excludes+=MatrixCombination
	 *     axes+=MatrixAxis END NEWLINE* END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' (ambiguity) BEGIN excludes+=MatrixCombination
	 *     excludes+=MatrixCombination END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' (ambiguity) BEGIN excludes+=MatrixCombination
	 *     failFast=Expression NEWLINE+ ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' (ambiguity) BEGIN excludes+=MatrixCombination
	 *     includes+=MatrixCombination END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' (ambiguity) BEGIN excludes+=MatrixCombination
	 *     maxParallel=Expression NEWLINE+ ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' (ambiguity) BEGIN excludes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_0_1_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     excludes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     excludes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'fail-fast' ':' failFast=Expression
	 *     excludes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'max-paralell' ':' maxParallel=Expression
	 *     excludes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* (rule end)
	 *     excludes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* BEGIN axes+=MatrixAxis
	 *     excludes+=MatrixCombination END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_0_1_6_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     axes+=MatrixAxis END (ambiguity) END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     axes+=MatrixAxis END (ambiguity) END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)* 'fail-fast' ':' failFast=Expression
	 *     axes+=MatrixAxis END (ambiguity) END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)* 'max-paralell' ':' maxParallel=Expression
	 *     axes+=MatrixAxis END (ambiguity) END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)* (rule end)
	 *     axes+=MatrixAxis END (ambiguity) END NEWLINE* ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_0_2_0_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE*
	 *
	 * This ambiguous syntax occurs at:
	 *     axes+=MatrixAxis END NEWLINE* END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     axes+=MatrixAxis END NEWLINE* END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'fail-fast' ':' failFast=Expression
	 *     axes+=MatrixAxis END NEWLINE* END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'max-paralell' ':' maxParallel=Expression
	 *     axes+=MatrixAxis END NEWLINE* END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* (rule end)
	 *     axes+=MatrixAxis END NEWLINE* END (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_0_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     failFast=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     failFast=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'fail-fast' ':' failFast=Expression
	 *     failFast=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'max-paralell' ':' maxParallel=Expression
	 *     failFast=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* (rule end)
	 *     failFast=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* BEGIN axes+=MatrixAxis
	 *     failFast=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_1_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     maxParallel=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     maxParallel=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'fail-fast' ':' failFast=Expression
	 *     maxParallel=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* 'max-paralell' ':' maxParallel=Expression
	 *     maxParallel=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* (rule end)
	 *     maxParallel=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)* BEGIN axes+=MatrixAxis
	 *     maxParallel=Expression (ambiguity) ('matrix' ':' NEWLINE+ BEGIN)+ 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_2_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         NEWLINE* 
	  *         END 
	  *         NEWLINE* 
	  *         ('matrix' ':' NEWLINE+ BEGIN)* 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     axes+=MatrixAxis (ambiguity) axes+=MatrixAxis
	 
	 * </pre>
	 */
	protected void emit_Strategy___ENDTerminalRuleCall_0_2_0_2_NEWLINETerminalRuleCall_0_2_0_3_a_ENDTerminalRuleCall_0_2_1_NEWLINETerminalRuleCall_0_2_2_a___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('matrix' ':' NEWLINE+ BEGIN)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     (rule start) (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     (rule start) (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) BEGIN axes+=MatrixAxis
	 *     axes+=MatrixAxis END NEWLINE* END NEWLINE* (ambiguity) 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     axes+=MatrixAxis END NEWLINE* END NEWLINE* (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     axes+=MatrixAxis END NEWLINE* END NEWLINE* (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     axes+=MatrixAxis END NEWLINE* END NEWLINE* (ambiguity) (rule end)
	 *     excludes+=MatrixCombination END NEWLINE* (ambiguity) 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     excludes+=MatrixCombination END NEWLINE* (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     excludes+=MatrixCombination END NEWLINE* (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     excludes+=MatrixCombination END NEWLINE* (ambiguity) (rule end)
	 *     excludes+=MatrixCombination END NEWLINE* (ambiguity) BEGIN axes+=MatrixAxis
	 *     failFast=Expression NEWLINE+ (ambiguity) 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     failFast=Expression NEWLINE+ (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     failFast=Expression NEWLINE+ (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     failFast=Expression NEWLINE+ (ambiguity) (rule end)
	 *     failFast=Expression NEWLINE+ (ambiguity) BEGIN axes+=MatrixAxis
	 *     includes+=MatrixCombination END NEWLINE* (ambiguity) 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     includes+=MatrixCombination END NEWLINE* (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     includes+=MatrixCombination END NEWLINE* (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     includes+=MatrixCombination END NEWLINE* (ambiguity) (rule end)
	 *     includes+=MatrixCombination END NEWLINE* (ambiguity) BEGIN axes+=MatrixAxis
	 *     maxParallel=Expression NEWLINE+ (ambiguity) 'exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination
	 *     maxParallel=Expression NEWLINE+ (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     maxParallel=Expression NEWLINE+ (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     maxParallel=Expression NEWLINE+ (ambiguity) (rule end)
	 *     maxParallel=Expression NEWLINE+ (ambiguity) BEGIN axes+=MatrixAxis
	 
	 * </pre>
	 */
	protected void emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('matrix' ':' NEWLINE+ BEGIN)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 *     (rule start) (ambiguity) (rule start)
	 *     axes+=MatrixAxis END NEWLINE* END NEWLINE* (ambiguity) 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 *     excludes+=MatrixCombination END NEWLINE* (ambiguity) 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 *     failFast=Expression NEWLINE+ (ambiguity) 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 *     includes+=MatrixCombination END NEWLINE* (ambiguity) 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 *     maxParallel=Expression NEWLINE+ (ambiguity) 'includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_p_BEGINTerminalRuleCall_0_0_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE+
	 *
	 * This ambiguous syntax occurs at:
	 *     value=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_VariableAssignment_NEWLINETerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'on' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     triggers+=SimpleTrigger NEWLINE (ambiguity) '-' triggers+=SimpleTrigger
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'permissions' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission (ambiguity) permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'env' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'jobs' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     jobs+=Job (ambiguity) jobs+=Job
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('on' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     triggers+=OptionedTrigger (ambiguity) triggers+=OptionedTrigger
	 
	 * </pre>
	 */
	protected void emit_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
