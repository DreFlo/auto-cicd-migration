/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.gha.dsl.serializer;

import com.google.inject.Inject;
import d.fe.up.pt.cicd.gha.dsl.services.GitHubActionsGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class GitHubActionsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GitHubActionsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Always_WSTerminalRuleCall_3_q;
	protected AbstractElementAlias match_And_WSTerminalRuleCall_1_1_q;
	protected AbstractElementAlias match_And_WSTerminalRuleCall_1_3_q;
	protected AbstractElementAlias match_BracketedExpression_WSTerminalRuleCall_1_q;
	protected AbstractElementAlias match_BracketedExpression_WSTerminalRuleCall_3_q;
	protected AbstractElementAlias match_Cancelled_WSTerminalRuleCall_3_q;
	protected AbstractElementAlias match_Comparison_WSTerminalRuleCall_1_1_q;
	protected AbstractElementAlias match_Comparison_WSTerminalRuleCall_1_3_q;
	protected AbstractElementAlias match_Contains_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_Contains_WSTerminalRuleCall_4_q;
	protected AbstractElementAlias match_Contains_WSTerminalRuleCall_6_q;
	protected AbstractElementAlias match_Contains_WSTerminalRuleCall_8_q;
	protected AbstractElementAlias match_EndsWith_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_EndsWith_WSTerminalRuleCall_4_q;
	protected AbstractElementAlias match_EndsWith_WSTerminalRuleCall_6_q;
	protected AbstractElementAlias match_EndsWith_WSTerminalRuleCall_8_q;
	protected AbstractElementAlias match_Equality_WSTerminalRuleCall_1_1_q;
	protected AbstractElementAlias match_Equality_WSTerminalRuleCall_1_3_q;
	protected AbstractElementAlias match_Failure_WSTerminalRuleCall_3_q;
	protected AbstractElementAlias match_Format_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_Format_WSTerminalRuleCall_4_0_q;
	protected AbstractElementAlias match_Format_WSTerminalRuleCall_4_2_q;
	protected AbstractElementAlias match_Format_WSTerminalRuleCall_5_q;
	protected AbstractElementAlias match_FromJSON_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_FromJSON_WSTerminalRuleCall_4_q;
	protected AbstractElementAlias match_HashFiles_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_HashFiles_WSTerminalRuleCall_4_q;
	protected AbstractElementAlias match_Join_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_Join_WSTerminalRuleCall_4_0_q;
	protected AbstractElementAlias match_Join_WSTerminalRuleCall_4_2_q;
	protected AbstractElementAlias match_Join_WSTerminalRuleCall_5_q;
	protected AbstractElementAlias match_Or_WSTerminalRuleCall_1_1_q;
	protected AbstractElementAlias match_Or_WSTerminalRuleCall_1_3_q;
	protected AbstractElementAlias match_Primary_WSTerminalRuleCall_0_3_q;
	protected AbstractElementAlias match_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__a;
	protected AbstractElementAlias match_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__p;
	protected AbstractElementAlias match_StartsWith_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_StartsWith_WSTerminalRuleCall_4_q;
	protected AbstractElementAlias match_StartsWith_WSTerminalRuleCall_6_q;
	protected AbstractElementAlias match_StartsWith_WSTerminalRuleCall_8_q;
	protected AbstractElementAlias match_Success_WSTerminalRuleCall_3_q;
	protected AbstractElementAlias match_ToJSON_WSTerminalRuleCall_2_q;
	protected AbstractElementAlias match_ToJSON_WSTerminalRuleCall_4_q;
	protected AbstractElementAlias match_VariableDereference_WSTerminalRuleCall_1_1_1_0_1_q;
	protected AbstractElementAlias match_VariableDereference_WSTerminalRuleCall_1_1_1_1_1_q;
	protected AbstractElementAlias match_Workflow_WSTerminalRuleCall_1_0_2_q;
	protected AbstractElementAlias match_Workflow_WSTerminalRuleCall_1_1_2_q;
	protected AbstractElementAlias match_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__a;
	protected AbstractElementAlias match_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__q;
	protected AbstractElementAlias match_Workflow___WSTerminalRuleCall_1_0_5_0_q_NEWLINETerminalRuleCall_1_0_5_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GitHubActionsGrammarAccess) access;
		match_Always_WSTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getAlwaysAccess().getWSTerminalRuleCall_3());
		match_And_WSTerminalRuleCall_1_1_q = new TokenAlias(false, true, grammarAccess.getAndAccess().getWSTerminalRuleCall_1_1());
		match_And_WSTerminalRuleCall_1_3_q = new TokenAlias(false, true, grammarAccess.getAndAccess().getWSTerminalRuleCall_1_3());
		match_BracketedExpression_WSTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getBracketedExpressionAccess().getWSTerminalRuleCall_1());
		match_BracketedExpression_WSTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getBracketedExpressionAccess().getWSTerminalRuleCall_3());
		match_Cancelled_WSTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getCancelledAccess().getWSTerminalRuleCall_3());
		match_Comparison_WSTerminalRuleCall_1_1_q = new TokenAlias(false, true, grammarAccess.getComparisonAccess().getWSTerminalRuleCall_1_1());
		match_Comparison_WSTerminalRuleCall_1_3_q = new TokenAlias(false, true, grammarAccess.getComparisonAccess().getWSTerminalRuleCall_1_3());
		match_Contains_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getContainsAccess().getWSTerminalRuleCall_2());
		match_Contains_WSTerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getContainsAccess().getWSTerminalRuleCall_4());
		match_Contains_WSTerminalRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getContainsAccess().getWSTerminalRuleCall_6());
		match_Contains_WSTerminalRuleCall_8_q = new TokenAlias(false, true, grammarAccess.getContainsAccess().getWSTerminalRuleCall_8());
		match_EndsWith_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getEndsWithAccess().getWSTerminalRuleCall_2());
		match_EndsWith_WSTerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getEndsWithAccess().getWSTerminalRuleCall_4());
		match_EndsWith_WSTerminalRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getEndsWithAccess().getWSTerminalRuleCall_6());
		match_EndsWith_WSTerminalRuleCall_8_q = new TokenAlias(false, true, grammarAccess.getEndsWithAccess().getWSTerminalRuleCall_8());
		match_Equality_WSTerminalRuleCall_1_1_q = new TokenAlias(false, true, grammarAccess.getEqualityAccess().getWSTerminalRuleCall_1_1());
		match_Equality_WSTerminalRuleCall_1_3_q = new TokenAlias(false, true, grammarAccess.getEqualityAccess().getWSTerminalRuleCall_1_3());
		match_Failure_WSTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getFailureAccess().getWSTerminalRuleCall_3());
		match_Format_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getFormatAccess().getWSTerminalRuleCall_2());
		match_Format_WSTerminalRuleCall_4_0_q = new TokenAlias(false, true, grammarAccess.getFormatAccess().getWSTerminalRuleCall_4_0());
		match_Format_WSTerminalRuleCall_4_2_q = new TokenAlias(false, true, grammarAccess.getFormatAccess().getWSTerminalRuleCall_4_2());
		match_Format_WSTerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getFormatAccess().getWSTerminalRuleCall_5());
		match_FromJSON_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getFromJSONAccess().getWSTerminalRuleCall_2());
		match_FromJSON_WSTerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getFromJSONAccess().getWSTerminalRuleCall_4());
		match_HashFiles_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getHashFilesAccess().getWSTerminalRuleCall_2());
		match_HashFiles_WSTerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getHashFilesAccess().getWSTerminalRuleCall_4());
		match_Join_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getJoinAccess().getWSTerminalRuleCall_2());
		match_Join_WSTerminalRuleCall_4_0_q = new TokenAlias(false, true, grammarAccess.getJoinAccess().getWSTerminalRuleCall_4_0());
		match_Join_WSTerminalRuleCall_4_2_q = new TokenAlias(false, true, grammarAccess.getJoinAccess().getWSTerminalRuleCall_4_2());
		match_Join_WSTerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getJoinAccess().getWSTerminalRuleCall_5());
		match_Or_WSTerminalRuleCall_1_1_q = new TokenAlias(false, true, grammarAccess.getOrAccess().getWSTerminalRuleCall_1_1());
		match_Or_WSTerminalRuleCall_1_3_q = new TokenAlias(false, true, grammarAccess.getOrAccess().getWSTerminalRuleCall_1_3());
		match_Primary_WSTerminalRuleCall_0_3_q = new TokenAlias(false, true, grammarAccess.getPrimaryAccess().getWSTerminalRuleCall_0_3());
		match_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, true, grammarAccess.getPrimaryAccess().getWSTerminalRuleCall_0_1()));
		match_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, true, grammarAccess.getPrimaryAccess().getWSTerminalRuleCall_0_1()));
		match_StartsWith_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getStartsWithAccess().getWSTerminalRuleCall_2());
		match_StartsWith_WSTerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getStartsWithAccess().getWSTerminalRuleCall_4());
		match_StartsWith_WSTerminalRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getStartsWithAccess().getWSTerminalRuleCall_6());
		match_StartsWith_WSTerminalRuleCall_8_q = new TokenAlias(false, true, grammarAccess.getStartsWithAccess().getWSTerminalRuleCall_8());
		match_Success_WSTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getSuccessAccess().getWSTerminalRuleCall_3());
		match_ToJSON_WSTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getToJSONAccess().getWSTerminalRuleCall_2());
		match_ToJSON_WSTerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getToJSONAccess().getWSTerminalRuleCall_4());
		match_VariableDereference_WSTerminalRuleCall_1_1_1_0_1_q = new TokenAlias(false, true, grammarAccess.getVariableDereferenceAccess().getWSTerminalRuleCall_1_1_1_0_1());
		match_VariableDereference_WSTerminalRuleCall_1_1_1_1_1_q = new TokenAlias(false, true, grammarAccess.getVariableDereferenceAccess().getWSTerminalRuleCall_1_1_1_1_1());
		match_Workflow_WSTerminalRuleCall_1_0_2_q = new TokenAlias(false, true, grammarAccess.getWorkflowAccess().getWSTerminalRuleCall_1_0_2());
		match_Workflow_WSTerminalRuleCall_1_1_2_q = new TokenAlias(false, true, grammarAccess.getWorkflowAccess().getWSTerminalRuleCall_1_1_2());
		match_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getWorkflowAccess().getWSTerminalRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_1()));
		match_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__q = new GroupAlias(false, true, new TokenAlias(false, true, grammarAccess.getWorkflowAccess().getWSTerminalRuleCall_0_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_1()));
		match_Workflow___WSTerminalRuleCall_1_0_5_0_q_NEWLINETerminalRuleCall_1_0_5_1__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getWorkflowAccess().getWSTerminalRuleCall_1_0_5_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_1_0_5_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBOOLEANRule())
			return getBOOLEANToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal BOOLEAN returns ecore::EBooleanObject:
	 * 	'true' | 'false'
	 * ;
	 */
	protected String getBOOLEANToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * terminal NEWLINE: '\r'? '\n';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * @Override 
	 * terminal WS: (' '|'\t')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Always_WSTerminalRuleCall_3_q.equals(syntax))
				emit_Always_WSTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_And_WSTerminalRuleCall_1_1_q.equals(syntax))
				emit_And_WSTerminalRuleCall_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_And_WSTerminalRuleCall_1_3_q.equals(syntax))
				emit_And_WSTerminalRuleCall_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BracketedExpression_WSTerminalRuleCall_1_q.equals(syntax))
				emit_BracketedExpression_WSTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BracketedExpression_WSTerminalRuleCall_3_q.equals(syntax))
				emit_BracketedExpression_WSTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Cancelled_WSTerminalRuleCall_3_q.equals(syntax))
				emit_Cancelled_WSTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Comparison_WSTerminalRuleCall_1_1_q.equals(syntax))
				emit_Comparison_WSTerminalRuleCall_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Comparison_WSTerminalRuleCall_1_3_q.equals(syntax))
				emit_Comparison_WSTerminalRuleCall_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Contains_WSTerminalRuleCall_2_q.equals(syntax))
				emit_Contains_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Contains_WSTerminalRuleCall_4_q.equals(syntax))
				emit_Contains_WSTerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Contains_WSTerminalRuleCall_6_q.equals(syntax))
				emit_Contains_WSTerminalRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Contains_WSTerminalRuleCall_8_q.equals(syntax))
				emit_Contains_WSTerminalRuleCall_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EndsWith_WSTerminalRuleCall_2_q.equals(syntax))
				emit_EndsWith_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EndsWith_WSTerminalRuleCall_4_q.equals(syntax))
				emit_EndsWith_WSTerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EndsWith_WSTerminalRuleCall_6_q.equals(syntax))
				emit_EndsWith_WSTerminalRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EndsWith_WSTerminalRuleCall_8_q.equals(syntax))
				emit_EndsWith_WSTerminalRuleCall_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Equality_WSTerminalRuleCall_1_1_q.equals(syntax))
				emit_Equality_WSTerminalRuleCall_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Equality_WSTerminalRuleCall_1_3_q.equals(syntax))
				emit_Equality_WSTerminalRuleCall_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Failure_WSTerminalRuleCall_3_q.equals(syntax))
				emit_Failure_WSTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Format_WSTerminalRuleCall_2_q.equals(syntax))
				emit_Format_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Format_WSTerminalRuleCall_4_0_q.equals(syntax))
				emit_Format_WSTerminalRuleCall_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Format_WSTerminalRuleCall_4_2_q.equals(syntax))
				emit_Format_WSTerminalRuleCall_4_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Format_WSTerminalRuleCall_5_q.equals(syntax))
				emit_Format_WSTerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FromJSON_WSTerminalRuleCall_2_q.equals(syntax))
				emit_FromJSON_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FromJSON_WSTerminalRuleCall_4_q.equals(syntax))
				emit_FromJSON_WSTerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HashFiles_WSTerminalRuleCall_2_q.equals(syntax))
				emit_HashFiles_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_HashFiles_WSTerminalRuleCall_4_q.equals(syntax))
				emit_HashFiles_WSTerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Join_WSTerminalRuleCall_2_q.equals(syntax))
				emit_Join_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Join_WSTerminalRuleCall_4_0_q.equals(syntax))
				emit_Join_WSTerminalRuleCall_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Join_WSTerminalRuleCall_4_2_q.equals(syntax))
				emit_Join_WSTerminalRuleCall_4_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Join_WSTerminalRuleCall_5_q.equals(syntax))
				emit_Join_WSTerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Or_WSTerminalRuleCall_1_1_q.equals(syntax))
				emit_Or_WSTerminalRuleCall_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Or_WSTerminalRuleCall_1_3_q.equals(syntax))
				emit_Or_WSTerminalRuleCall_1_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_WSTerminalRuleCall_0_3_q.equals(syntax))
				emit_Primary_WSTerminalRuleCall_0_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__a.equals(syntax))
				emit_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__p.equals(syntax))
				emit_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StartsWith_WSTerminalRuleCall_2_q.equals(syntax))
				emit_StartsWith_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StartsWith_WSTerminalRuleCall_4_q.equals(syntax))
				emit_StartsWith_WSTerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StartsWith_WSTerminalRuleCall_6_q.equals(syntax))
				emit_StartsWith_WSTerminalRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StartsWith_WSTerminalRuleCall_8_q.equals(syntax))
				emit_StartsWith_WSTerminalRuleCall_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Success_WSTerminalRuleCall_3_q.equals(syntax))
				emit_Success_WSTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ToJSON_WSTerminalRuleCall_2_q.equals(syntax))
				emit_ToJSON_WSTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ToJSON_WSTerminalRuleCall_4_q.equals(syntax))
				emit_ToJSON_WSTerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VariableDereference_WSTerminalRuleCall_1_1_1_0_1_q.equals(syntax))
				emit_VariableDereference_WSTerminalRuleCall_1_1_1_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VariableDereference_WSTerminalRuleCall_1_1_1_1_1_q.equals(syntax))
				emit_VariableDereference_WSTerminalRuleCall_1_1_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow_WSTerminalRuleCall_1_0_2_q.equals(syntax))
				emit_Workflow_WSTerminalRuleCall_1_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow_WSTerminalRuleCall_1_1_2_q.equals(syntax))
				emit_Workflow_WSTerminalRuleCall_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__a.equals(syntax))
				emit_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__q.equals(syntax))
				emit_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___WSTerminalRuleCall_1_0_5_0_q_NEWLINETerminalRuleCall_1_0_5_1__a.equals(syntax))
				emit_Workflow___WSTerminalRuleCall_1_0_5_0_q_NEWLINETerminalRuleCall_1_0_5_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'always' '(' (ambiguity) ')' WS? '}}' (rule start)
	 *     (rule start) 'always' '(' (ambiguity) ')' (rule start)
	 *     (rule start) ('(' WS?)* 'always' '(' (ambiguity) ')' (rule start)
	 
	 * </pre>
	 */
	protected void emit_Always_WSTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     {And.lhs=} (ambiguity) '&&' WS? rhs=Equality
	 
	 * </pre>
	 */
	protected void emit_And_WSTerminalRuleCall_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     {And.lhs=} WS? '&&' (ambiguity) rhs=Equality
	 
	 * </pre>
	 */
	protected void emit_And_WSTerminalRuleCall_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* '!' childExpr=VariableDereference
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'always' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'cancelled' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'contains' '(' WS? search=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'endsWith' '(' WS? searchString=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'failure' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'format' '(' WS? string=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'fromJSON' '(' WS? value=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'hashFiles' '(' WS? path=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'join' '(' WS? array=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'startsWith' '(' WS? searchString=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'success' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* 'toJSON' '(' WS? value=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* context=CONTEXT
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* name=ID
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* value=BOOLEAN
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* value=DOUBLE
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* value=INT
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* value=STRING
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* {And.lhs=}
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* {Comparison.lhs=}
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* {Equality.lhs=}
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* {Or.lhs=}
	 *     (rule start) '${{' (ambiguity) ('(' WS?)* {VariableDereference.variable=}
	 
	 * </pre>
	 */
	protected void emit_BracketedExpression_WSTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'always' '(' WS? ')' (ambiguity) '}}' (rule start)
	 *     (rule start) '${{' WS? ('(' WS?)* 'cancelled' '(' WS? ')' (ambiguity) '}}' (rule start)
	 *     (rule start) '${{' WS? ('(' WS?)* 'failure' '(' WS? ')' (ambiguity) '}}' (rule start)
	 *     (rule start) '${{' WS? ('(' WS?)* 'success' '(' WS? ')' (ambiguity) '}}' (rule start)
	 *     array=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     childExpr=VariableDereference (ambiguity) '}}' (rule end)
	 *     context=CONTEXT (ambiguity) '}}' (rule end)
	 *     item=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     name=ID (ambiguity) '}}' (rule end)
	 *     path=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     property=ID '"' (ambiguity) '}}' (rule end)
	 *     property=ID '"' WS? ']' (ambiguity) '}}' (rule end)
	 *     property=ID (ambiguity) '}}' (rule end)
	 *     replaceValues+=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     rhs=And (ambiguity) '}}' (rule end)
	 *     rhs=Comparison (ambiguity) '}}' (rule end)
	 *     rhs=Equality (ambiguity) '}}' (rule end)
	 *     rhs=UnaryOp (ambiguity) '}}' (rule end)
	 *     searchValue=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     sep=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     string=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     value=BOOLEAN (ambiguity) '}}' (rule end)
	 *     value=DOUBLE (ambiguity) '}}' (rule end)
	 *     value=INT (ambiguity) '}}' (rule end)
	 *     value=InsideBracketsExpression WS? ')' (ambiguity) '}}' (rule end)
	 *     value=STRING (ambiguity) '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_BracketedExpression_WSTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'cancelled' '(' (ambiguity) ')' WS? '}}' (rule start)
	 *     (rule start) 'cancelled' '(' (ambiguity) ')' (rule start)
	 *     (rule start) ('(' WS?)* 'cancelled' '(' (ambiguity) ')' (rule start)
	 
	 * </pre>
	 */
	protected void emit_Cancelled_WSTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     {Comparison.lhs=} (ambiguity) op=COMPARISON_OP
	 
	 * </pre>
	 */
	protected void emit_Comparison_WSTerminalRuleCall_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     op=COMPARISON_OP (ambiguity) rhs=UnaryOp
	 
	 * </pre>
	 */
	protected void emit_Comparison_WSTerminalRuleCall_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'contains' '(' (ambiguity) search=InsideBracketsExpression
	 *     (rule start) 'contains' '(' (ambiguity) search=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'contains' '(' (ambiguity) search=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Contains_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     search=InsideBracketsExpression (ambiguity) ',' WS? item=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Contains_WSTerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     search=InsideBracketsExpression WS? ',' (ambiguity) item=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Contains_WSTerminalRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     item=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     item=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Contains_WSTerminalRuleCall_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'endsWith' '(' (ambiguity) searchString=InsideBracketsExpression
	 *     (rule start) 'endsWith' '(' (ambiguity) searchString=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'endsWith' '(' (ambiguity) searchString=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_EndsWith_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     searchString=InsideBracketsExpression (ambiguity) ',' WS? searchValue=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_EndsWith_WSTerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     searchString=InsideBracketsExpression WS? ',' (ambiguity) searchValue=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_EndsWith_WSTerminalRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     searchValue=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     searchValue=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_EndsWith_WSTerminalRuleCall_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     {Equality.lhs=} (ambiguity) op=EQUALITY_OP
	 
	 * </pre>
	 */
	protected void emit_Equality_WSTerminalRuleCall_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     op=EQUALITY_OP (ambiguity) rhs=Comparison
	 
	 * </pre>
	 */
	protected void emit_Equality_WSTerminalRuleCall_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'failure' '(' (ambiguity) ')' WS? '}}' (rule start)
	 *     (rule start) 'failure' '(' (ambiguity) ')' (rule start)
	 *     (rule start) ('(' WS?)* 'failure' '(' (ambiguity) ')' (rule start)
	 
	 * </pre>
	 */
	protected void emit_Failure_WSTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'format' '(' (ambiguity) string=InsideBracketsExpression
	 *     (rule start) 'format' '(' (ambiguity) string=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'format' '(' (ambiguity) string=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Format_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     replaceValues+=InsideBracketsExpression (ambiguity) ',' WS? replaceValues+=InsideBracketsExpression
	 *     string=InsideBracketsExpression (ambiguity) ',' WS? replaceValues+=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Format_WSTerminalRuleCall_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     replaceValues+=InsideBracketsExpression WS? ',' (ambiguity) replaceValues+=InsideBracketsExpression
	 *     string=InsideBracketsExpression WS? ',' (ambiguity) replaceValues+=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Format_WSTerminalRuleCall_4_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     replaceValues+=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     replaceValues+=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 *     string=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     string=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Format_WSTerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'fromJSON' '(' (ambiguity) value=InsideBracketsExpression
	 *     (rule start) 'fromJSON' '(' (ambiguity) value=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'fromJSON' '(' (ambiguity) value=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_FromJSON_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     value=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_FromJSON_WSTerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'hashFiles' '(' (ambiguity) path=InsideBracketsExpression
	 *     (rule start) 'hashFiles' '(' (ambiguity) path=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'hashFiles' '(' (ambiguity) path=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_HashFiles_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     path=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     path=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_HashFiles_WSTerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'join' '(' (ambiguity) array=InsideBracketsExpression
	 *     (rule start) 'join' '(' (ambiguity) array=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'join' '(' (ambiguity) array=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Join_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     array=InsideBracketsExpression (ambiguity) ',' WS? sep=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Join_WSTerminalRuleCall_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     array=InsideBracketsExpression WS? ',' (ambiguity) sep=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_Join_WSTerminalRuleCall_4_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     array=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     array=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 *     sep=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     sep=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Join_WSTerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     {Or.lhs=} (ambiguity) '||' WS? rhs=And
	 
	 * </pre>
	 */
	protected void emit_Or_WSTerminalRuleCall_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     {Or.lhs=} WS? '||' (ambiguity) rhs=And
	 
	 * </pre>
	 */
	protected void emit_Or_WSTerminalRuleCall_1_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     childExpr=VariableDereference (ambiguity) ')' (rule end)
	 *     property=ID '"' (ambiguity) ')' (rule end)
	 *     property=ID '"' WS? ']' (ambiguity) ')' (rule end)
	 *     property=ID (ambiguity) ')' (rule end)
	 *     rhs=And (ambiguity) ')' (rule end)
	 *     rhs=Comparison (ambiguity) ')' (rule end)
	 *     rhs=Equality (ambiguity) ')' (rule end)
	 *     rhs=UnaryOp (ambiguity) ')' (rule end)
	 
	 * </pre>
	 */
	protected void emit_Primary_WSTerminalRuleCall_0_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' WS?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) '${{' WS? (ambiguity) 'always' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' WS? (ambiguity) 'cancelled' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' WS? (ambiguity) 'contains' '(' WS? search=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) 'endsWith' '(' WS? searchString=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) 'failure' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' WS? (ambiguity) 'format' '(' WS? string=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) 'fromJSON' '(' WS? value=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) 'hashFiles' '(' WS? path=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) 'join' '(' WS? array=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) 'startsWith' '(' WS? searchString=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) 'success' '(' WS? ')' WS? '}}' (rule start)
	 *     (rule start) '${{' WS? (ambiguity) 'toJSON' '(' WS? value=InsideBracketsExpression
	 *     (rule start) '${{' WS? (ambiguity) context=CONTEXT
	 *     (rule start) '${{' WS? (ambiguity) name=ID
	 *     (rule start) '${{' WS? (ambiguity) value=BOOLEAN
	 *     (rule start) '${{' WS? (ambiguity) value=DOUBLE
	 *     (rule start) '${{' WS? (ambiguity) value=INT
	 *     (rule start) '${{' WS? (ambiguity) value=STRING
	 *     (rule start) '${{' WS? (ambiguity) {And.lhs=}
	 *     (rule start) '${{' WS? (ambiguity) {Comparison.lhs=}
	 *     (rule start) '${{' WS? (ambiguity) {Equality.lhs=}
	 *     (rule start) '${{' WS? (ambiguity) {Or.lhs=}
	 *     (rule start) '${{' WS? (ambiguity) {VariableDereference.variable=}
	 *     (rule start) (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) (ambiguity) 'always' '(' WS? ')' (rule start)
	 *     (rule start) (ambiguity) 'cancelled' '(' WS? ')' (rule start)
	 *     (rule start) (ambiguity) 'contains' '(' WS? search=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'endsWith' '(' WS? searchString=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'failure' '(' WS? ')' (rule start)
	 *     (rule start) (ambiguity) 'format' '(' WS? string=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'fromJSON' '(' WS? value=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'hashFiles' '(' WS? path=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'join' '(' WS? array=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'startsWith' '(' WS? searchString=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'success' '(' WS? ')' (rule start)
	 *     (rule start) (ambiguity) 'toJSON' '(' WS? value=InsideBracketsExpression
	 *     (rule start) (ambiguity) context=CONTEXT
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=DOUBLE
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Comparison.lhs=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 *     (rule start) (ambiguity) {VariableDereference.variable=}
	 
	 * </pre>
	 */
	protected void emit_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' WS?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Comparison.lhs=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 *     (rule start) (ambiguity) {VariableDereference.variable=}
	 
	 * </pre>
	 */
	protected void emit_Primary___LeftParenthesisKeyword_0_0_WSTerminalRuleCall_0_1_q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'startsWith' '(' (ambiguity) searchString=InsideBracketsExpression
	 *     (rule start) 'startsWith' '(' (ambiguity) searchString=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'startsWith' '(' (ambiguity) searchString=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_StartsWith_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     searchString=InsideBracketsExpression (ambiguity) ',' WS? searchValue=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_StartsWith_WSTerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     searchString=InsideBracketsExpression WS? ',' (ambiguity) searchValue=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_StartsWith_WSTerminalRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     searchValue=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     searchValue=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_StartsWith_WSTerminalRuleCall_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'success' '(' (ambiguity) ')' WS? '}}' (rule start)
	 *     (rule start) 'success' '(' (ambiguity) ')' (rule start)
	 *     (rule start) ('(' WS?)* 'success' '(' (ambiguity) ')' (rule start)
	 
	 * </pre>
	 */
	protected void emit_Success_WSTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' WS? ('(' WS?)* 'toJSON' '(' (ambiguity) value=InsideBracketsExpression
	 *     (rule start) 'toJSON' '(' (ambiguity) value=InsideBracketsExpression
	 *     (rule start) ('(' WS?)* 'toJSON' '(' (ambiguity) value=InsideBracketsExpression
	 
	 * </pre>
	 */
	protected void emit_ToJSON_WSTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     value=InsideBracketsExpression (ambiguity) ')' (rule end)
	 *     value=InsideBracketsExpression (ambiguity) ')' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_ToJSON_WSTerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     {VariableDereference.variable=} '[' (ambiguity) '"' property=ID
	 
	 * </pre>
	 */
	protected void emit_VariableDereference_WSTerminalRuleCall_1_1_1_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     property=ID '"' (ambiguity) ']' (rule end)
	 *     property=ID '"' (ambiguity) ']' WS? ')' (rule end)
	 *     property=ID '"' (ambiguity) ']' WS? '}}' (rule end)
	 
	 * </pre>
	 */
	protected void emit_VariableDereference_WSTerminalRuleCall_1_1_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (WS? NEWLINE)? 'name' ':' (ambiguity) name=Expression
	 *     name=Expression NEWLINE (WS? NEWLINE)* 'name' ':' (ambiguity) name=Expression
	 *     runName=Expression 'name' ':' (ambiguity) name=Expression
	 
	 * </pre>
	 */
	protected void emit_Workflow_WSTerminalRuleCall_1_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     WS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (WS? NEWLINE)? 'run-name' ':' (ambiguity) runName=Expression
	 *     name=Expression NEWLINE (WS? NEWLINE)* 'run-name' ':' (ambiguity) runName=Expression
	 *     runName=Expression 'run-name' ':' (ambiguity) runName=Expression
	 
	 * </pre>
	 */
	protected void emit_Workflow_WSTerminalRuleCall_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WS? NEWLINE)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WS? NEWLINE)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'name' ':' WS? name=Expression
	 *     (rule start) (ambiguity) 'run-name' ':' WS? runName=Expression
	 
	 * </pre>
	 */
	protected void emit_Workflow___WSTerminalRuleCall_0_0_q_NEWLINETerminalRuleCall_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (WS? NEWLINE)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Expression NEWLINE (ambiguity) 'name' ':' WS? name=Expression
	 *     name=Expression NEWLINE (ambiguity) 'run-name' ':' WS? runName=Expression
	 *     name=Expression NEWLINE (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Workflow___WSTerminalRuleCall_1_0_5_0_q_NEWLINETerminalRuleCall_1_0_5_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
