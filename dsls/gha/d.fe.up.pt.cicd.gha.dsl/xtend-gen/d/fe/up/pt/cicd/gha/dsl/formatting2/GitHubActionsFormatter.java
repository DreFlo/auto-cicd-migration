/**
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.gha.dsl.formatting2;

import com.google.inject.Inject;
import d.fe.up.pt.cicd.gha.dsl.services.GitHubActionsGrammarAccess;
import d.fe.up.pt.cicd.gha.metamodel.GHA.ConcurrencyGroup;
import d.fe.up.pt.cicd.gha.metamodel.GHA.Defaults;
import d.fe.up.pt.cicd.gha.metamodel.GHA.Expression;
import d.fe.up.pt.cicd.gha.metamodel.GHA.Job;
import d.fe.up.pt.cicd.gha.metamodel.GHA.PERMISSIONS;
import d.fe.up.pt.cicd.gha.metamodel.GHA.PERMISSION_SCOPES;
import d.fe.up.pt.cicd.gha.metamodel.GHA.Trigger;
import d.fe.up.pt.cicd.gha.metamodel.GHA.Workflow;
import java.util.Arrays;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class GitHubActionsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GitHubActionsGrammarAccess _gitHubActionsGrammarAccess;

  protected void _format(final Workflow workflow, @Extension final IFormattableDocument document) {
    document.<Expression>format(workflow.getName());
    document.<Expression>format(workflow.getRunName());
    EList<Trigger> _triggers = workflow.getTriggers();
    for (final Trigger trigger : _triggers) {
      document.<Trigger>format(trigger);
    }
    EMap<PERMISSION_SCOPES, PERMISSIONS> _permissions = workflow.getPermissions();
    for (final Map.Entry<PERMISSION_SCOPES, PERMISSIONS> permission : _permissions) {
      document.<Map.Entry<PERMISSION_SCOPES, PERMISSIONS>>format(permission);
    }
    document.<Defaults>format(workflow.getDefaults());
    EMap<String, Expression> _environmentVariables = workflow.getEnvironmentVariables();
    for (final Map.Entry<String, Expression> variableAssignment : _environmentVariables) {
      document.<Map.Entry<String, Expression>>format(variableAssignment);
    }
    document.<ConcurrencyGroup>format(workflow.getConcurrencyGroup());
    EList<Job> _jobs = workflow.getJobs();
    for (final Job job : _jobs) {
      document.<Job>format(job);
    }
  }

  protected void _format(final Defaults defaults, @Extension final IFormattableDocument document) {
    document.<Expression>format(defaults.getShell());
    document.<Expression>format(defaults.getWorkingDirectory());
  }

  public void format(final Object defaults, final IFormattableDocument document) {
    if (defaults instanceof XtextResource) {
      _format((XtextResource)defaults, document);
      return;
    } else if (defaults instanceof Defaults) {
      _format((Defaults)defaults, document);
      return;
    } else if (defaults instanceof Workflow) {
      _format((Workflow)defaults, document);
      return;
    } else if (defaults instanceof EObject) {
      _format((EObject)defaults, document);
      return;
    } else if (defaults == null) {
      _format((Void)null, document);
      return;
    } else if (defaults != null) {
      _format(defaults, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(defaults, document).toString());
    }
  }
}
