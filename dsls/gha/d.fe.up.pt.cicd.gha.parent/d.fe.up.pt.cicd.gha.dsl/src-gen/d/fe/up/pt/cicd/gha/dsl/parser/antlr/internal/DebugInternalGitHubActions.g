/*
 * generated by Xtext 2.33.0
 */
grammar DebugInternalGitHubActions;

// Rule Expression
ruleExpression:
	ruleOr
;

// Rule Or
ruleOr:
	ruleAnd
	(
		'||'
		ruleAnd
	)*
;

// Rule And
ruleAnd:
	ruleEquality
	(
		'&&'
		ruleEquality
	)*
;

// Rule Equality
ruleEquality:
	ruleComparison
	(
		ruleEQUALITY_OP
		ruleComparison
	)*
;

// Rule Comparison
ruleComparison:
	ruleUnaryOp
	(
		ruleCOMPARISON_OP
		ruleUnaryOp
	)*
;

// Rule UnaryOp
ruleUnaryOp:
	(
		ruleNot
		    |
		ruleBlank
	)
;

// Rule Not
ruleNot:
	'!'
	ruleVariableDereference
;

// Rule Blank
ruleBlank:
	ruleVariableDereference
;

// Rule VariableDereference
ruleVariableDereference:
	rulePrimary
	(
		(
			'.'
			RULE_ID
			    |
			(
				'['
				'"'
				RULE_ID
				'"'
				    |
				'\''
				RULE_ID
				'"'
				']'
			)
		)
	)*
;

// Rule Primary
rulePrimary:
	(
		'('
		ruleExpression
		')'
		    |
		ruleCallExpression
		    |
		ruleAtomic
	)
;

// Rule Atomic
ruleAtomic:
	(
		ruleCONTEXT
		    |
		RULE_ID
		    |
		RULE_INT
		    |
		RULE_DOUBLE
		    |
		RULE_BOOLEAN
		    |
		RULE_STRING
	)
;

// Rule CallExpression
ruleCallExpression:
	(
		ruleContains
		    |
		ruleStartsWith
		    |
		ruleEndsWith
		    |
		ruleFormat
		    |
		ruleJoin
		    |
		ruleToJSON
		    |
		ruleFromJSON
		    |
		ruleHashFiles
		    |
		ruleSuccess
		    |
		ruleAlways
		    |
		ruleFailure
		    |
		ruleCancelled
	)
;

// Rule Contains
ruleContains:
	'contains'
	'('
	ruleExpression
	','
	ruleExpression
	')'
;

// Rule StartsWith
ruleStartsWith:
	'startsWith'
	'('
	ruleExpression
	','
	ruleExpression
	')'
;

// Rule EndsWith
ruleEndsWith:
	'endsWith'
	'('
	ruleExpression
	','
	ruleExpression
	')'
;

// Rule Format
ruleFormat:
	'format'
	'('
	ruleExpression
	(
		','
		ruleExpression
	)*
	')'
;

// Rule Join
ruleJoin:
	'join'
	'('
	ruleExpression
	(
		','
		ruleExpression
	)?
	')'
;

// Rule ToJSON
ruleToJSON:
	'toJSON'
	'('
	ruleExpression
	')'
;

// Rule FromJSON
ruleFromJSON:
	'fromJSON'
	'('
	ruleExpression
	')'
;

// Rule HashFiles
ruleHashFiles:
	'hashFiles'
	'('
	ruleExpression
	')'
;

// Rule Success
ruleSuccess:
	'success'
	'('
	')'
;

// Rule Always
ruleAlways:
	'always'
	'('
	')'
;

// Rule Cancelled
ruleCancelled:
	'cancelled'
	'('
	')'
;

// Rule Failure
ruleFailure:
	'failure'
	'('
	')'
;

// Rule COMPARISON_OP
ruleCOMPARISON_OP:
	(
		'>'
		    |
		'>='
		    |
		'<'
		    |
		'<='
	)
;

// Rule EQUALITY_OP
ruleEQUALITY_OP:
	(
		'=='
		    |
		'!='
	)
;

// Rule CONTEXT
ruleCONTEXT:
	(
		'github'
		    |
		'env'
		    |
		'vars'
		    |
		'job'
		    |
		'jobs'
		    |
		'steps'
		    |
		'runner'
		    |
		'secrets'
		    |
		'strategy'
		    |
		'matrix'
		    |
		'needs'
		    |
		'inputs'
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
