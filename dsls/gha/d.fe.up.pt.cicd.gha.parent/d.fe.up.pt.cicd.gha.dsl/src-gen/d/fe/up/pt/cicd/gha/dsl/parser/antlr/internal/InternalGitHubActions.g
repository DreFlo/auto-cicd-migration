/*
 * generated by Xtext 2.33.0
 */
grammar InternalGitHubActions;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package d.fe.up.pt.cicd.gha.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package d.fe.up.pt.cicd.gha.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import d.fe.up.pt.cicd.gha.dsl.services.GitHubActionsGrammarAccess;

}

@parser::members {

 	private GitHubActionsGrammarAccess grammarAccess;

    public InternalGitHubActionsParser(TokenStream input, GitHubActionsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Expression";
   	}

   	@Override
   	protected GitHubActionsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRhsAndParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRhsEqualityParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getOpEQUALITY_OPEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleEQUALITY_OP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.EQUALITY_OP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRhsComparisonParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getUnaryOpParserRuleCall_0());
		}
		this_UnaryOp_0=ruleUnaryOp
		{
			$current = $this_UnaryOp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getComparisonLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getOpCOMPARISON_OPEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleCOMPARISON_OP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.COMPARISON_OP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRhsUnaryOpParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleUnaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.UnaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryOp
entryRuleUnaryOp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOpRule()); }
	iv_ruleUnaryOp=ruleUnaryOp
	{ $current=$iv_ruleUnaryOp.current; }
	EOF;

// Rule UnaryOp
ruleUnaryOp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryOpAccess().getNotParserRuleCall_0());
		}
		this_Not_0=ruleNot
		{
			$current = $this_Not_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryOpAccess().getBlankParserRuleCall_1());
		}
		this_Blank_1=ruleBlank
		{
			$current = $this_Blank_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	iv_ruleNot=ruleNot
	{ $current=$iv_ruleNot.current; }
	EOF;

// Rule Not
ruleNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotAccess().getExclamationMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotAccess().getChildExprVariableDereferenceParserRuleCall_1_0());
				}
				lv_childExpr_1_0=ruleVariableDereference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotRule());
					}
					set(
						$current,
						"childExpr",
						lv_childExpr_1_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.VariableDereference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlank
entryRuleBlank returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlankRule()); }
	iv_ruleBlank=ruleBlank
	{ $current=$iv_ruleBlank.current; }
	EOF;

// Rule Blank
ruleBlank returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBlankAccess().getVariableDereferenceParserRuleCall());
	}
	this_VariableDereference_0=ruleVariableDereference
	{
		$current = $this_VariableDereference_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleVariableDereference
entryRuleVariableDereference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDereferenceRule()); }
	iv_ruleVariableDereference=ruleVariableDereference
	{ $current=$iv_ruleVariableDereference.current; }
	EOF;

// Rule VariableDereference
ruleVariableDereference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableDereferenceAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getVariableDereferenceAccess().getDotOpLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					otherlv_2='.'
					{
						newLeafNode(otherlv_2, grammarAccess.getVariableDereferenceAccess().getFullStopKeyword_1_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableDereferenceAccess().getRhsVariableDereferenceParserRuleCall_1_1_0_1_0());
							}
							lv_rhs_3_0=ruleVariableDereference
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableDereferenceRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_3_0,
									"d.fe.up.pt.cicd.gha.dsl.GitHubActions.VariableDereference");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_4='['
					{
						newLeafNode(otherlv_4, grammarAccess.getVariableDereferenceAccess().getLeftSquareBracketKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableDereferenceAccess().getRhsVariableDereferenceParserRuleCall_1_1_1_1_0());
							}
							lv_rhs_5_0=ruleVariableDereference
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableDereferenceRule());
								}
								set(
									$current,
									"rhs",
									lv_rhs_5_0,
									"d.fe.up.pt.cicd.gha.dsl.GitHubActions.VariableDereference");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_6=']'
					{
						newLeafNode(otherlv_6, grammarAccess.getVariableDereferenceAccess().getRightSquareBracketKeyword_1_1_1_2());
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getCallExpressionParserRuleCall_1());
		}
		this_CallExpression_3=ruleCallExpression
		{
			$current = $this_CallExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_4=ruleAtomic
		{
			$current = $this_Atomic_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getGitHubContextAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getContextCONTEXTEnumRuleCall_0_1_0());
					}
					lv_context_1_0=ruleCONTEXT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"context",
							lv_context_1_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.CONTEXT");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getIntegerLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_INT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getDoubleLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_DOUBLE
					{
						newLeafNode(lv_value_5_0, grammarAccess.getAtomicAccess().getValueDOUBLETerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.DOUBLE");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getBooleanLiteralAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_7_0=RULE_BOOLEAN
					{
						newLeafNode(lv_value_7_0, grammarAccess.getAtomicAccess().getValueBOOLEANTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.BOOLEAN");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getStringLiteralAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_value_9_0=RULE_STRING
					{
						newLeafNode(lv_value_9_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_9_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCallExpression
entryRuleCallExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallExpressionRule()); }
	iv_ruleCallExpression=ruleCallExpression
	{ $current=$iv_ruleCallExpression.current; }
	EOF;

// Rule CallExpression
ruleCallExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getContainsParserRuleCall_0());
		}
		this_Contains_0=ruleContains
		{
			$current = $this_Contains_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getStartsWithParserRuleCall_1());
		}
		this_StartsWith_1=ruleStartsWith
		{
			$current = $this_StartsWith_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getEndsWithParserRuleCall_2());
		}
		this_EndsWith_2=ruleEndsWith
		{
			$current = $this_EndsWith_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getFormatParserRuleCall_3());
		}
		this_Format_3=ruleFormat
		{
			$current = $this_Format_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getJoinParserRuleCall_4());
		}
		this_Join_4=ruleJoin
		{
			$current = $this_Join_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getToJSONParserRuleCall_5());
		}
		this_ToJSON_5=ruleToJSON
		{
			$current = $this_ToJSON_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getFromJSONParserRuleCall_6());
		}
		this_FromJSON_6=ruleFromJSON
		{
			$current = $this_FromJSON_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getHashFilesParserRuleCall_7());
		}
		this_HashFiles_7=ruleHashFiles
		{
			$current = $this_HashFiles_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getSuccessParserRuleCall_8());
		}
		this_Success_8=ruleSuccess
		{
			$current = $this_Success_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getAlwaysParserRuleCall_9());
		}
		this_Always_9=ruleAlways
		{
			$current = $this_Always_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getFailureParserRuleCall_10());
		}
		this_Failure_10=ruleFailure
		{
			$current = $this_Failure_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCallExpressionAccess().getCancelledParserRuleCall_11());
		}
		this_Cancelled_11=ruleCancelled
		{
			$current = $this_Cancelled_11.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleContains
entryRuleContains returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainsRule()); }
	iv_ruleContains=ruleContains
	{ $current=$iv_ruleContains.current; }
	EOF;

// Rule Contains
ruleContains returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='contains'
		{
			newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getContainsKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getContainsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getSearchExpressionParserRuleCall_2_0());
				}
				lv_search_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"search",
						lv_search_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getContainsAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getItemExpressionParserRuleCall_4_0());
				}
				lv_item_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"item",
						lv_item_4_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getContainsAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleStartsWith
entryRuleStartsWith returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartsWithRule()); }
	iv_ruleStartsWith=ruleStartsWith
	{ $current=$iv_ruleStartsWith.current; }
	EOF;

// Rule StartsWith
ruleStartsWith returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='startsWith'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartsWithAccess().getStartsWithKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getStartsWithAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartsWithAccess().getSearchStringExpressionParserRuleCall_2_0());
				}
				lv_searchString_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartsWithRule());
					}
					set(
						$current,
						"searchString",
						lv_searchString_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getStartsWithAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartsWithAccess().getSearchValueExpressionParserRuleCall_4_0());
				}
				lv_searchValue_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartsWithRule());
					}
					set(
						$current,
						"searchValue",
						lv_searchValue_4_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getStartsWithAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleEndsWith
entryRuleEndsWith returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndsWithRule()); }
	iv_ruleEndsWith=ruleEndsWith
	{ $current=$iv_ruleEndsWith.current; }
	EOF;

// Rule EndsWith
ruleEndsWith returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='endsWith'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndsWithAccess().getEndsWithKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEndsWithAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEndsWithAccess().getSearchStringExpressionParserRuleCall_2_0());
				}
				lv_searchString_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndsWithRule());
					}
					set(
						$current,
						"searchString",
						lv_searchString_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getEndsWithAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEndsWithAccess().getSearchValueExpressionParserRuleCall_4_0());
				}
				lv_searchValue_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndsWithRule());
					}
					set(
						$current,
						"searchValue",
						lv_searchValue_4_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getEndsWithAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleFormat
entryRuleFormat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormatRule()); }
	iv_ruleFormat=ruleFormat
	{ $current=$iv_ruleFormat.current; }
	EOF;

// Rule Format
ruleFormat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='format'
		{
			newLeafNode(otherlv_0, grammarAccess.getFormatAccess().getFormatKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFormatAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFormatAccess().getStringExpressionParserRuleCall_2_0());
				}
				lv_string_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormatRule());
					}
					set(
						$current,
						"string",
						lv_string_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getFormatAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFormatAccess().getReplaceValuesExpressionParserRuleCall_3_1_0());
					}
					lv_replaceValues_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFormatRule());
						}
						add(
							$current,
							"replaceValues",
							lv_replaceValues_4_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFormatAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleJoin
entryRuleJoin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinRule()); }
	iv_ruleJoin=ruleJoin
	{ $current=$iv_ruleJoin.current; }
	EOF;

// Rule Join
ruleJoin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='join'
		{
			newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJoinKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getJoinAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinAccess().getArrayExpressionParserRuleCall_2_0());
				}
				lv_array_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinRule());
					}
					set(
						$current,
						"array",
						lv_array_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getJoinAccess().getCommaKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinAccess().getSepExpressionParserRuleCall_3_1_0());
					}
					lv_sep_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinRule());
						}
						set(
							$current,
							"sep",
							lv_sep_4_0,
							"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getJoinAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleToJSON
entryRuleToJSON returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getToJSONRule()); }
	iv_ruleToJSON=ruleToJSON
	{ $current=$iv_ruleToJSON.current; }
	EOF;

// Rule ToJSON
ruleToJSON returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='toJSON'
		{
			newLeafNode(otherlv_0, grammarAccess.getToJSONAccess().getToJSONKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getToJSONAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getToJSONAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getToJSONRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getToJSONAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFromJSON
entryRuleFromJSON returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFromJSONRule()); }
	iv_ruleFromJSON=ruleFromJSON
	{ $current=$iv_ruleFromJSON.current; }
	EOF;

// Rule FromJSON
ruleFromJSON returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='fromJSON'
		{
			newLeafNode(otherlv_0, grammarAccess.getFromJSONAccess().getFromJSONKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFromJSONAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFromJSONAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFromJSONRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFromJSONAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleHashFiles
entryRuleHashFiles returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHashFilesRule()); }
	iv_ruleHashFiles=ruleHashFiles
	{ $current=$iv_ruleHashFiles.current; }
	EOF;

// Rule HashFiles
ruleHashFiles returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='hashFiles'
		{
			newLeafNode(otherlv_0, grammarAccess.getHashFilesAccess().getHashFilesKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getHashFilesAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHashFilesAccess().getPathExpressionParserRuleCall_2_0());
				}
				lv_path_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHashFilesRule());
					}
					set(
						$current,
						"path",
						lv_path_2_0,
						"d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getHashFilesAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSuccess
entryRuleSuccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuccessRule()); }
	iv_ruleSuccess=ruleSuccess
	{ $current=$iv_ruleSuccess.current; }
	EOF;

// Rule Success
ruleSuccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSuccessAccess().getSuccessAction_0(),
					$current);
			}
		)
		otherlv_1='success'
		{
			newLeafNode(otherlv_1, grammarAccess.getSuccessAccess().getSuccessKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSuccessAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSuccessAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAlways
entryRuleAlways returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlwaysRule()); }
	iv_ruleAlways=ruleAlways
	{ $current=$iv_ruleAlways.current; }
	EOF;

// Rule Always
ruleAlways returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlwaysAccess().getAlwaysAction_0(),
					$current);
			}
		)
		otherlv_1='always'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlwaysAccess().getAlwaysKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAlwaysAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getAlwaysAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleCancelled
entryRuleCancelled returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCancelledRule()); }
	iv_ruleCancelled=ruleCancelled
	{ $current=$iv_ruleCancelled.current; }
	EOF;

// Rule Cancelled
ruleCancelled returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCancelledAccess().getCancelledAction_0(),
					$current);
			}
		)
		otherlv_1='cancelled'
		{
			newLeafNode(otherlv_1, grammarAccess.getCancelledAccess().getCancelledKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getCancelledAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCancelledAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFailure
entryRuleFailure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFailureRule()); }
	iv_ruleFailure=ruleFailure
	{ $current=$iv_ruleFailure.current; }
	EOF;

// Rule Failure
ruleFailure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFailureAccess().getFailureAction_0(),
					$current);
			}
		)
		otherlv_1='failure'
		{
			newLeafNode(otherlv_1, grammarAccess.getFailureAccess().getFailureKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFailureAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFailureAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Rule COMPARISON_OP
ruleCOMPARISON_OP returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getCOMPARISON_OPAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCOMPARISON_OPAccess().getGTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>='
			{
				$current = grammarAccess.getCOMPARISON_OPAccess().getGTEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCOMPARISON_OPAccess().getGTEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getCOMPARISON_OPAccess().getLTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCOMPARISON_OPAccess().getLTEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getCOMPARISON_OPAccess().getLTEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCOMPARISON_OPAccess().getLTEEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule EQUALITY_OP
ruleEQUALITY_OP returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getEQUALITY_OPAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEQUALITY_OPAccess().getEQUALSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getEQUALITY_OPAccess().getNOT_EQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEQUALITY_OPAccess().getNOT_EQUALSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CONTEXT
ruleCONTEXT returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='github'
			{
				$current = grammarAccess.getCONTEXTAccess().getGITHUBEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCONTEXTAccess().getGITHUBEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='env'
			{
				$current = grammarAccess.getCONTEXTAccess().getENVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCONTEXTAccess().getENVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='vars'
			{
				$current = grammarAccess.getCONTEXTAccess().getVARSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCONTEXTAccess().getVARSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='job'
			{
				$current = grammarAccess.getCONTEXTAccess().getJOBEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCONTEXTAccess().getJOBEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='jobs'
			{
				$current = grammarAccess.getCONTEXTAccess().getJOBSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCONTEXTAccess().getJOBSEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='steps'
			{
				$current = grammarAccess.getCONTEXTAccess().getSTEPSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getCONTEXTAccess().getSTEPSEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='runner'
			{
				$current = grammarAccess.getCONTEXTAccess().getRUNNEREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getCONTEXTAccess().getRUNNEREnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='secrets'
			{
				$current = grammarAccess.getCONTEXTAccess().getSECRETSEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getCONTEXTAccess().getSECRETSEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='strategy'
			{
				$current = grammarAccess.getCONTEXTAccess().getSTRATEGYEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getCONTEXTAccess().getSTRATEGYEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='matrix'
			{
				$current = grammarAccess.getCONTEXTAccess().getMATRIXEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getCONTEXTAccess().getMATRIXEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='needs'
			{
				$current = grammarAccess.getCONTEXTAccess().getNEEDSEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getCONTEXTAccess().getNEEDSEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='inputs'
			{
				$current = grammarAccess.getCONTEXTAccess().getINPUTSEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getCONTEXTAccess().getINPUTSEnumLiteralDeclaration_11());
			}
		)
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
