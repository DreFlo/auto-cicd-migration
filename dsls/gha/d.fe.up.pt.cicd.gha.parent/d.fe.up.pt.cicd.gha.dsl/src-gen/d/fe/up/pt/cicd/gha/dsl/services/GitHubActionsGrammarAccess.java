/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.gha.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GitHubActionsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns GHA::Expression:
		//    Or
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsAndParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//Or returns GHA::Expression:
		//    And ({GHA::Or.lhs=current} '||' rhs=And)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({GHA::Or.lhs=current} '||' rhs=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({GHA::Or.lhs=current} '||' rhs=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{GHA::Or.lhs=current}
		public Action getOrLhsAction_1_0() { return cOrLhsAction_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//rhs=And
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//And
		public RuleCall getRhsAndParserRuleCall_1_2_0() { return cRhsAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsEqualityParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//And returns GHA::Expression:
		//    Equality ({GHA::And.lhs=current}  '&&'  rhs=Equality )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({GHA::And.lhs=current}  '&&'  rhs=Equality )*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({GHA::And.lhs=current}  '&&'  rhs=Equality )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{GHA::And.lhs=current}
		public Action getAndLhsAction_1_0() { return cAndLhsAction_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//rhs=Equality
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//Equality
		public RuleCall getRhsEqualityParserRuleCall_1_2_0() { return cRhsEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEQUALITY_OPEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsComparisonParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//Equality returns GHA::Expression:
		//    Comparison ({GHA::Equality.lhs=current}  op=EQUALITY_OP  rhs=Comparison )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({GHA::Equality.lhs=current}  op=EQUALITY_OP  rhs=Comparison )*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({GHA::Equality.lhs=current}  op=EQUALITY_OP  rhs=Comparison )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{GHA::Equality.lhs=current}
		public Action getEqualityLhsAction_1_0() { return cEqualityLhsAction_1_0; }
		
		//op=EQUALITY_OP
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//EQUALITY_OP
		public RuleCall getOpEQUALITY_OPEnumRuleCall_1_1_0() { return cOpEQUALITY_OPEnumRuleCall_1_1_0; }
		
		//rhs=Comparison
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//Comparison
		public RuleCall getRhsComparisonParserRuleCall_1_2_0() { return cRhsComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpCOMPARISON_OPEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsUnaryOpParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//Comparison returns GHA::Expression:
		//    UnaryOp ({GHA::Comparison.lhs=current}  op=COMPARISON_OP  rhs=UnaryOp )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryOp ({GHA::Comparison.lhs=current}  op=COMPARISON_OP  rhs=UnaryOp )*
		public Group getGroup() { return cGroup; }
		
		//UnaryOp
		public RuleCall getUnaryOpParserRuleCall_0() { return cUnaryOpParserRuleCall_0; }
		
		//({GHA::Comparison.lhs=current}  op=COMPARISON_OP  rhs=UnaryOp )*
		public Group getGroup_1() { return cGroup_1; }
		
		//{GHA::Comparison.lhs=current}
		public Action getComparisonLhsAction_1_0() { return cComparisonLhsAction_1_0; }
		
		//op=COMPARISON_OP
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//COMPARISON_OP
		public RuleCall getOpCOMPARISON_OPEnumRuleCall_1_1_0() { return cOpCOMPARISON_OPEnumRuleCall_1_1_0; }
		
		//rhs=UnaryOp
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//UnaryOp
		public RuleCall getRhsUnaryOpParserRuleCall_1_2_0() { return cRhsUnaryOpParserRuleCall_1_2_0; }
	}
	public class UnaryOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlankParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOp returns GHA::Expression:
		//    Not | Blank
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Not | Blank
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Not
		public RuleCall getNotParserRuleCall_0() { return cNotParserRuleCall_0; }
		
		//Blank
		public RuleCall getBlankParserRuleCall_1() { return cBlankParserRuleCall_1; }
	}
	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChildExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildExprVariableDereferenceParserRuleCall_1_0 = (RuleCall)cChildExprAssignment_1.eContents().get(0);
		
		//Not returns GHA::Not:
		//    '!' childExpr=VariableDereference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' childExpr=VariableDereference
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//childExpr=VariableDereference
		public Assignment getChildExprAssignment_1() { return cChildExprAssignment_1; }
		
		//VariableDereference
		public RuleCall getChildExprVariableDereferenceParserRuleCall_1_0() { return cChildExprVariableDereferenceParserRuleCall_1_0; }
	}
	public class BlankElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Blank");
		private final RuleCall cVariableDereferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Blank returns GHA::Expression:
		//    VariableDereference
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VariableDereference
		public RuleCall getVariableDereferenceParserRuleCall() { return cVariableDereferenceParserRuleCall; }
	}
	public class VariableDereferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.VariableDereference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cVariableDereferenceVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_0_1_0 = (RuleCall)cPropertyAssignment_1_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_0_0 = (Keyword)cGroup_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_0_1 = (Group)cGroup_1_1_1_0.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_1_1_0_1_0 = (Keyword)cGroup_1_1_1_0_1.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1_1_0_1_1 = (Assignment)cGroup_1_1_1_0_1.eContents().get(1);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_1_0_1_1_0 = (RuleCall)cPropertyAssignment_1_1_1_0_1_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_1_1_0_1_2 = (Keyword)cGroup_1_1_1_0_1.eContents().get(2);
		private final Group cGroup_1_1_1_1 = (Group)cAlternatives_1_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_1_0 = (Group)cGroup_1_1_1_1.eContents().get(0);
		private final Keyword cApostropheKeyword_1_1_1_1_0_0 = (Keyword)cGroup_1_1_1_1_0.eContents().get(0);
		private final Assignment cPropertyAssignment_1_1_1_1_0_1 = (Assignment)cGroup_1_1_1_1_0.eContents().get(1);
		private final RuleCall cPropertyIDTerminalRuleCall_1_1_1_1_0_1_0 = (RuleCall)cPropertyAssignment_1_1_1_1_0_1.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_1_1_1_1_0_2 = (Keyword)cGroup_1_1_1_1_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_1_1_1_1_1 = (Keyword)cGroup_1_1_1_1.eContents().get(1);
		
		//VariableDereference returns GHA::Expression:
		//    Primary ({GHA::VariableDereference.variable=current} (('.' property=ID) | ('['  ('"' property=ID '"') | ("'" property=ID '"')  ']')))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({GHA::VariableDereference.variable=current} (('.' property=ID) | ('['  ('"' property=ID '"') | ("'" property=ID '"')  ']')))*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({GHA::VariableDereference.variable=current} (('.' property=ID) | ('['  ('"' property=ID '"') | ("'" property=ID '"')  ']')))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{GHA::VariableDereference.variable=current}
		public Action getVariableDereferenceVariableAction_1_0() { return cVariableDereferenceVariableAction_1_0; }
		
		//(('.' property=ID) | ('['  ('"' property=ID '"') | ("'" property=ID '"')  ']'))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//('.' property=ID)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0_0() { return cFullStopKeyword_1_1_0_0; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1_0_1() { return cPropertyAssignment_1_1_0_1; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_0_1_0() { return cPropertyIDTerminalRuleCall_1_1_0_1_0; }
		
		//('['  ('"' property=ID '"') | ("'" property=ID '"')  ']')
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'['  ('"' property=ID '"')
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1_0_0() { return cLeftSquareBracketKeyword_1_1_1_0_0; }
		
		//('"' property=ID '"')
		public Group getGroup_1_1_1_0_1() { return cGroup_1_1_1_0_1; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_1_1_0_1_0() { return cQuotationMarkKeyword_1_1_1_0_1_0; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1_1_0_1_1() { return cPropertyAssignment_1_1_1_0_1_1; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_1_0_1_1_0() { return cPropertyIDTerminalRuleCall_1_1_1_0_1_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_1_1_0_1_2() { return cQuotationMarkKeyword_1_1_1_0_1_2; }
		
		//("'" property=ID '"')  ']'
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//("'" property=ID '"')
		public Group getGroup_1_1_1_1_0() { return cGroup_1_1_1_1_0; }
		
		//"'"
		public Keyword getApostropheKeyword_1_1_1_1_0_0() { return cApostropheKeyword_1_1_1_1_0_0; }
		
		//property=ID
		public Assignment getPropertyAssignment_1_1_1_1_0_1() { return cPropertyAssignment_1_1_1_1_0_1; }
		
		//ID
		public RuleCall getPropertyIDTerminalRuleCall_1_1_1_1_0_1_0() { return cPropertyIDTerminalRuleCall_1_1_1_1_0_1_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_1_1_1_0_2() { return cQuotationMarkKeyword_1_1_1_1_0_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_1_1_1() { return cRightSquareBracketKeyword_1_1_1_1_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cCallExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns GHA::Expression:
		//    ('('  Expression  ')') | CallExpression | Atomic
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('('  Expression  ')') | CallExpression | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('('  Expression  ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//CallExpression
		public RuleCall getCallExpressionParserRuleCall_1() { return cCallExpressionParserRuleCall_1; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGitHubContextAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cContextAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cContextCONTEXTEnumRuleCall_0_1_0 = (RuleCall)cContextAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntegerLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cDoubleLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBooleanLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cStringLiteralAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		
		//Atomic returns GHA::Value:
		//    ({GHA::GitHubContext} context=CONTEXT) |
		//    ({GHA::Variable} name=ID) |
		//    ({GHA::IntegerLiteral} value=INT) |
		//    ({GHA::DoubleLiteral} value=DOUBLE) |
		//    ({GHA::BooleanLiteral} value=BOOLEAN) |
		//    ({GHA::StringLiteral} value=STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//({GHA::GitHubContext} context=CONTEXT) |
		//({GHA::Variable} name=ID) |
		//({GHA::IntegerLiteral} value=INT) |
		//({GHA::DoubleLiteral} value=DOUBLE) |
		//({GHA::BooleanLiteral} value=BOOLEAN) |
		//({GHA::StringLiteral} value=STRING)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({GHA::GitHubContext} context=CONTEXT)
		public Group getGroup_0() { return cGroup_0; }
		
		//{GHA::GitHubContext}
		public Action getGitHubContextAction_0_0() { return cGitHubContextAction_0_0; }
		
		//context=CONTEXT
		public Assignment getContextAssignment_0_1() { return cContextAssignment_0_1; }
		
		//CONTEXT
		public RuleCall getContextCONTEXTEnumRuleCall_0_1_0() { return cContextCONTEXTEnumRuleCall_0_1_0; }
		
		//({GHA::Variable} name=ID)
		public Group getGroup_1() { return cGroup_1; }
		
		//{GHA::Variable}
		public Action getVariableAction_1_0() { return cVariableAction_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//({GHA::IntegerLiteral} value=INT)
		public Group getGroup_2() { return cGroup_2; }
		
		//{GHA::IntegerLiteral}
		public Action getIntegerLiteralAction_2_0() { return cIntegerLiteralAction_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
		
		//({GHA::DoubleLiteral} value=DOUBLE)
		public Group getGroup_3() { return cGroup_3; }
		
		//{GHA::DoubleLiteral}
		public Action getDoubleLiteralAction_3_0() { return cDoubleLiteralAction_3_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_3_1_0() { return cValueDOUBLETerminalRuleCall_3_1_0; }
		
		//({GHA::BooleanLiteral} value=BOOLEAN)
		public Group getGroup_4() { return cGroup_4; }
		
		//{GHA::BooleanLiteral}
		public Action getBooleanLiteralAction_4_0() { return cBooleanLiteralAction_4_0; }
		
		//value=BOOLEAN
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_4_1_0() { return cValueBOOLEANTerminalRuleCall_4_1_0; }
		
		//({GHA::StringLiteral} value=STRING)
		public Group getGroup_5() { return cGroup_5; }
		
		//{GHA::StringLiteral}
		public Action getStringLiteralAction_5_0() { return cStringLiteralAction_5_0; }
		
		//value=STRING
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_5_1_0() { return cValueSTRINGTerminalRuleCall_5_1_0; }
	}
	public class CallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.CallExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContainsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStartsWithParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndsWithParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFormatParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJoinParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cToJSONParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFromJSONParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cHashFilesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSuccessParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cAlwaysParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFailureParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cCancelledParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//CallExpression returns GHA::BuiltInFunctionCall:
		//    Contains |
		//    StartsWith |
		//    EndsWith |
		//    Format |
		//    Join |
		//    ToJSON |
		//    FromJSON |
		//    HashFiles |
		//    Success |
		//    Always |
		//    Failure |
		//    Cancelled
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Contains |
		//StartsWith |
		//EndsWith |
		//Format |
		//Join |
		//ToJSON |
		//FromJSON |
		//HashFiles |
		//Success |
		//Always |
		//Failure |
		//Cancelled
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_0() { return cContainsParserRuleCall_0; }
		
		//StartsWith
		public RuleCall getStartsWithParserRuleCall_1() { return cStartsWithParserRuleCall_1; }
		
		//EndsWith
		public RuleCall getEndsWithParserRuleCall_2() { return cEndsWithParserRuleCall_2; }
		
		//Format
		public RuleCall getFormatParserRuleCall_3() { return cFormatParserRuleCall_3; }
		
		//Join
		public RuleCall getJoinParserRuleCall_4() { return cJoinParserRuleCall_4; }
		
		//ToJSON
		public RuleCall getToJSONParserRuleCall_5() { return cToJSONParserRuleCall_5; }
		
		//FromJSON
		public RuleCall getFromJSONParserRuleCall_6() { return cFromJSONParserRuleCall_6; }
		
		//HashFiles
		public RuleCall getHashFilesParserRuleCall_7() { return cHashFilesParserRuleCall_7; }
		
		//Success
		public RuleCall getSuccessParserRuleCall_8() { return cSuccessParserRuleCall_8; }
		
		//Always
		public RuleCall getAlwaysParserRuleCall_9() { return cAlwaysParserRuleCall_9; }
		
		//Failure
		public RuleCall getFailureParserRuleCall_10() { return cFailureParserRuleCall_10; }
		
		//Cancelled
		public RuleCall getCancelledParserRuleCall_11() { return cCancelledParserRuleCall_11; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSearchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSearchExpressionParserRuleCall_2_0 = (RuleCall)cSearchAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cItemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemExpressionParserRuleCall_4_0 = (RuleCall)cItemAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Contains returns GHA::Contains:
		//    'contains' '('  search=Expression  ','  item=Expression  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'contains' '('  search=Expression  ','  item=Expression  ')'
		public Group getGroup() { return cGroup; }
		
		//'contains'
		public Keyword getContainsKeyword_0() { return cContainsKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//search=Expression
		public Assignment getSearchAssignment_2() { return cSearchAssignment_2; }
		
		//Expression
		public RuleCall getSearchExpressionParserRuleCall_2_0() { return cSearchExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//item=Expression
		public Assignment getItemAssignment_4() { return cItemAssignment_4; }
		
		//Expression
		public RuleCall getItemExpressionParserRuleCall_4_0() { return cItemExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class StartsWithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.StartsWith");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartsWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSearchStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSearchStringExpressionParserRuleCall_2_0 = (RuleCall)cSearchStringAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSearchValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSearchValueExpressionParserRuleCall_4_0 = (RuleCall)cSearchValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StartsWith returns GHA::StartsWith:
		//    'startsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'startsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
		public Group getGroup() { return cGroup; }
		
		//'startsWith'
		public Keyword getStartsWithKeyword_0() { return cStartsWithKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//searchString=Expression
		public Assignment getSearchStringAssignment_2() { return cSearchStringAssignment_2; }
		
		//Expression
		public RuleCall getSearchStringExpressionParserRuleCall_2_0() { return cSearchStringExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//searchValue=Expression
		public Assignment getSearchValueAssignment_4() { return cSearchValueAssignment_4; }
		
		//Expression
		public RuleCall getSearchValueExpressionParserRuleCall_4_0() { return cSearchValueExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EndsWithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.EndsWith");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndsWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSearchStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSearchStringExpressionParserRuleCall_2_0 = (RuleCall)cSearchStringAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSearchValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSearchValueExpressionParserRuleCall_4_0 = (RuleCall)cSearchValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EndsWith returns GHA::EndsWith:
		//    'endsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'endsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
		public Group getGroup() { return cGroup; }
		
		//'endsWith'
		public Keyword getEndsWithKeyword_0() { return cEndsWithKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//searchString=Expression
		public Assignment getSearchStringAssignment_2() { return cSearchStringAssignment_2; }
		
		//Expression
		public RuleCall getSearchStringExpressionParserRuleCall_2_0() { return cSearchStringExpressionParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//searchValue=Expression
		public Assignment getSearchValueAssignment_4() { return cSearchValueAssignment_4; }
		
		//Expression
		public RuleCall getSearchValueExpressionParserRuleCall_4_0() { return cSearchValueExpressionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class FormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Format");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStringAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStringExpressionParserRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReplaceValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cReplaceValuesExpressionParserRuleCall_3_1_0 = (RuleCall)cReplaceValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Format returns GHA::Format:
		//    'format' '('  string=Expression ( ','  replaceValues+=Expression)*  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'format' '('  string=Expression ( ','  replaceValues+=Expression)*  ')'
		public Group getGroup() { return cGroup; }
		
		//'format'
		public Keyword getFormatKeyword_0() { return cFormatKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//string=Expression
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }
		
		//Expression
		public RuleCall getStringExpressionParserRuleCall_2_0() { return cStringExpressionParserRuleCall_2_0; }
		
		//( ','  replaceValues+=Expression)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//replaceValues+=Expression
		public Assignment getReplaceValuesAssignment_3_1() { return cReplaceValuesAssignment_3_1; }
		
		//Expression
		public RuleCall getReplaceValuesExpressionParserRuleCall_3_1_0() { return cReplaceValuesExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJoinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArrayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArrayExpressionParserRuleCall_2_0 = (RuleCall)cArrayAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSepAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSepExpressionParserRuleCall_3_1_0 = (RuleCall)cSepAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Join returns GHA::Join:
		//    'join' '('  array=Expression ( ','  sep=Expression)?  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'join' '('  array=Expression ( ','  sep=Expression)?  ')'
		public Group getGroup() { return cGroup; }
		
		//'join'
		public Keyword getJoinKeyword_0() { return cJoinKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//array=Expression
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//Expression
		public RuleCall getArrayExpressionParserRuleCall_2_0() { return cArrayExpressionParserRuleCall_2_0; }
		
		//( ','  sep=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//sep=Expression
		public Assignment getSepAssignment_3_1() { return cSepAssignment_3_1; }
		
		//Expression
		public RuleCall getSepExpressionParserRuleCall_3_1_0() { return cSepExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ToJSONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.ToJSON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToJSONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ToJSON returns GHA::ToJSON:
		//    'toJSON' '('  value=Expression  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'toJSON' '('  value=Expression  ')'
		public Group getGroup() { return cGroup; }
		
		//'toJSON'
		public Keyword getToJSONKeyword_0() { return cToJSONKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FromJSONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.FromJSON");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromJSONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FromJSON returns GHA::FromJSON:
		//    'fromJSON' '('  value=Expression  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'fromJSON' '('  value=Expression  ')'
		public Group getGroup() { return cGroup; }
		
		//'fromJSON'
		public Keyword getFromJSONKeyword_0() { return cFromJSONKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class HashFilesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.HashFiles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHashFilesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPathExpressionParserRuleCall_2_0 = (RuleCall)cPathAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HashFiles returns GHA::HashFiles:
		//    'hashFiles' '('  path=Expression  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'hashFiles' '('  path=Expression  ')'
		public Group getGroup() { return cGroup; }
		
		//'hashFiles'
		public Keyword getHashFilesKeyword_0() { return cHashFilesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//path=Expression
		public Assignment getPathAssignment_2() { return cPathAssignment_2; }
		
		//Expression
		public RuleCall getPathExpressionParserRuleCall_2_0() { return cPathExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Success");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSuccessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Success returns GHA::Success:
		//    {GHA::Success} 'success' '('  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GHA::Success} 'success' '('  ')'
		public Group getGroup() { return cGroup; }
		
		//{GHA::Success}
		public Action getSuccessAction_0() { return cSuccessAction_0; }
		
		//'success'
		public Keyword getSuccessKeyword_1() { return cSuccessKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AlwaysElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Always");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlwaysAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAlwaysKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Always returns GHA::Always:
		//    {GHA::Always} 'always' '('  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GHA::Always} 'always' '('  ')'
		public Group getGroup() { return cGroup; }
		
		//{GHA::Always}
		public Action getAlwaysAction_0() { return cAlwaysAction_0; }
		
		//'always'
		public Keyword getAlwaysKeyword_1() { return cAlwaysKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CancelledElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Cancelled");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCancelledAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCancelledKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Cancelled returns GHA::Cancelled:
		//    {GHA::Cancelled} 'cancelled' '('  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GHA::Cancelled} 'cancelled' '('  ')'
		public Group getGroup() { return cGroup; }
		
		//{GHA::Cancelled}
		public Action getCancelledAction_0() { return cCancelledAction_0; }
		
		//'cancelled'
		public Keyword getCancelledKeyword_1() { return cCancelledKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FailureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.Failure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFailureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFailureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Failure returns GHA::Failure:
		//    {GHA::Failure} 'failure' '('  ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GHA::Failure} 'failure' '('  ')'
		public Group getGroup() { return cGroup; }
		
		//{GHA::Failure}
		public Action getFailureAction_0() { return cFailureAction_0; }
		
		//'failure'
		public Keyword getFailureKeyword_1() { return cFailureKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	
	public class COMPARISON_OPElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.COMPARISON_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGTGreaterThanSignKeyword_0_0 = (Keyword)cGTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_1_0 = (Keyword)cGTEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLTLessThanSignKeyword_2_0 = (Keyword)cLTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLTELessThanSignEqualsSignKeyword_3_0 = (Keyword)cLTEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum COMPARISON_OP returns GHA::COMPARISON_OPS:
		//    GT='>' |
		//    GTE='>=' |
		//    LT='<' |
		//    LTE='<='
		//;
		public EnumRule getRule() { return rule; }
		
		//GT='>' |
		//GTE='>=' |
		//LT='<' |
		//LTE='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GT='>'
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_0() { return cGTEnumLiteralDeclaration_0; }
		
		//'>'
		public Keyword getGTGreaterThanSignKeyword_0_0() { return cGTGreaterThanSignKeyword_0_0; }
		
		//GTE='>='
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_1() { return cGTEEnumLiteralDeclaration_1; }
		
		//'>='
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_1_0() { return cGTEGreaterThanSignEqualsSignKeyword_1_0; }
		
		//LT='<'
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_2() { return cLTEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLTLessThanSignKeyword_2_0() { return cLTLessThanSignKeyword_2_0; }
		
		//LTE='<='
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_3() { return cLTEEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLTELessThanSignEqualsSignKeyword_3_0() { return cLTELessThanSignEqualsSignKeyword_3_0; }
	}
	public class EQUALITY_OPElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.EQUALITY_OP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EQUALITY_OP returns GHA::EQUALITY_OPS:
		//    EQUALS='==' |
		//    NOT_EQUALS='!='
		//;
		public EnumRule getRule() { return rule; }
		
		//EQUALS='==' |
		//NOT_EQUALS='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUALS='=='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_0_0() { return cEQUALSEqualsSignEqualsSignKeyword_0_0; }
		
		//NOT_EQUALS='!='
		public EnumLiteralDeclaration getNOT_EQUALSEnumLiteralDeclaration_1() { return cNOT_EQUALSEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALSExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class CONTEXTElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.CONTEXT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGITHUBEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGITHUBGithubKeyword_0_0 = (Keyword)cGITHUBEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cENVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cENVEnvKeyword_1_0 = (Keyword)cENVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVARSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVARSVarsKeyword_2_0 = (Keyword)cVARSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJOBEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJOBJobKeyword_3_0 = (Keyword)cJOBEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cJOBSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cJOBSJobsKeyword_4_0 = (Keyword)cJOBSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSTEPSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSTEPSStepsKeyword_5_0 = (Keyword)cSTEPSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cRUNNEREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cRUNNERRunnerKeyword_6_0 = (Keyword)cRUNNEREnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSECRETSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSECRETSSecretsKeyword_7_0 = (Keyword)cSECRETSEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSTRATEGYEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSTRATEGYStrategyKeyword_8_0 = (Keyword)cSTRATEGYEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cMATRIXEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cMATRIXMatrixKeyword_9_0 = (Keyword)cMATRIXEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNEEDSEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNEEDSNeedsKeyword_10_0 = (Keyword)cNEEDSEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cINPUTSEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cINPUTSInputsKeyword_11_0 = (Keyword)cINPUTSEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum CONTEXT returns GHA::CONTEXTS:
		//    GITHUB='github' |
		//    ENV='env' |
		//    VARS='vars' |
		//    JOB='job' |
		//    JOBS='jobs' |
		//    STEPS='steps' |
		//    RUNNER='runner' |
		//    SECRETS='secrets' |
		//    STRATEGY='strategy' |
		//    MATRIX='matrix' |
		//    NEEDS='needs' |
		//    INPUTS='inputs'
		//;
		public EnumRule getRule() { return rule; }
		
		//GITHUB='github' |
		//ENV='env' |
		//VARS='vars' |
		//JOB='job' |
		//JOBS='jobs' |
		//STEPS='steps' |
		//RUNNER='runner' |
		//SECRETS='secrets' |
		//STRATEGY='strategy' |
		//MATRIX='matrix' |
		//NEEDS='needs' |
		//INPUTS='inputs'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GITHUB='github'
		public EnumLiteralDeclaration getGITHUBEnumLiteralDeclaration_0() { return cGITHUBEnumLiteralDeclaration_0; }
		
		//'github'
		public Keyword getGITHUBGithubKeyword_0_0() { return cGITHUBGithubKeyword_0_0; }
		
		//ENV='env'
		public EnumLiteralDeclaration getENVEnumLiteralDeclaration_1() { return cENVEnumLiteralDeclaration_1; }
		
		//'env'
		public Keyword getENVEnvKeyword_1_0() { return cENVEnvKeyword_1_0; }
		
		//VARS='vars'
		public EnumLiteralDeclaration getVARSEnumLiteralDeclaration_2() { return cVARSEnumLiteralDeclaration_2; }
		
		//'vars'
		public Keyword getVARSVarsKeyword_2_0() { return cVARSVarsKeyword_2_0; }
		
		//JOB='job'
		public EnumLiteralDeclaration getJOBEnumLiteralDeclaration_3() { return cJOBEnumLiteralDeclaration_3; }
		
		//'job'
		public Keyword getJOBJobKeyword_3_0() { return cJOBJobKeyword_3_0; }
		
		//JOBS='jobs'
		public EnumLiteralDeclaration getJOBSEnumLiteralDeclaration_4() { return cJOBSEnumLiteralDeclaration_4; }
		
		//'jobs'
		public Keyword getJOBSJobsKeyword_4_0() { return cJOBSJobsKeyword_4_0; }
		
		//STEPS='steps'
		public EnumLiteralDeclaration getSTEPSEnumLiteralDeclaration_5() { return cSTEPSEnumLiteralDeclaration_5; }
		
		//'steps'
		public Keyword getSTEPSStepsKeyword_5_0() { return cSTEPSStepsKeyword_5_0; }
		
		//RUNNER='runner'
		public EnumLiteralDeclaration getRUNNEREnumLiteralDeclaration_6() { return cRUNNEREnumLiteralDeclaration_6; }
		
		//'runner'
		public Keyword getRUNNERRunnerKeyword_6_0() { return cRUNNERRunnerKeyword_6_0; }
		
		//SECRETS='secrets'
		public EnumLiteralDeclaration getSECRETSEnumLiteralDeclaration_7() { return cSECRETSEnumLiteralDeclaration_7; }
		
		//'secrets'
		public Keyword getSECRETSSecretsKeyword_7_0() { return cSECRETSSecretsKeyword_7_0; }
		
		//STRATEGY='strategy'
		public EnumLiteralDeclaration getSTRATEGYEnumLiteralDeclaration_8() { return cSTRATEGYEnumLiteralDeclaration_8; }
		
		//'strategy'
		public Keyword getSTRATEGYStrategyKeyword_8_0() { return cSTRATEGYStrategyKeyword_8_0; }
		
		//MATRIX='matrix'
		public EnumLiteralDeclaration getMATRIXEnumLiteralDeclaration_9() { return cMATRIXEnumLiteralDeclaration_9; }
		
		//'matrix'
		public Keyword getMATRIXMatrixKeyword_9_0() { return cMATRIXMatrixKeyword_9_0; }
		
		//NEEDS='needs'
		public EnumLiteralDeclaration getNEEDSEnumLiteralDeclaration_10() { return cNEEDSEnumLiteralDeclaration_10; }
		
		//'needs'
		public Keyword getNEEDSNeedsKeyword_10_0() { return cNEEDSNeedsKeyword_10_0; }
		
		//INPUTS='inputs'
		public EnumLiteralDeclaration getINPUTSEnumLiteralDeclaration_11() { return cINPUTSEnumLiteralDeclaration_11; }
		
		//'inputs'
		public Keyword getINPUTSInputsKeyword_11_0() { return cINPUTSInputsKeyword_11_0; }
	}
	
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final UnaryOpElements pUnaryOp;
	private final NotElements pNot;
	private final BlankElements pBlank;
	private final VariableDereferenceElements pVariableDereference;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final CallExpressionElements pCallExpression;
	private final ContainsElements pContains;
	private final StartsWithElements pStartsWith;
	private final EndsWithElements pEndsWith;
	private final FormatElements pFormat;
	private final JoinElements pJoin;
	private final ToJSONElements pToJSON;
	private final FromJSONElements pFromJSON;
	private final HashFilesElements pHashFiles;
	private final SuccessElements pSuccess;
	private final AlwaysElements pAlways;
	private final CancelledElements pCancelled;
	private final FailureElements pFailure;
	private final COMPARISON_OPElements eCOMPARISON_OP;
	private final EQUALITY_OPElements eEQUALITY_OP;
	private final CONTEXTElements eCONTEXT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GitHubActionsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pUnaryOp = new UnaryOpElements();
		this.pNot = new NotElements();
		this.pBlank = new BlankElements();
		this.pVariableDereference = new VariableDereferenceElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pCallExpression = new CallExpressionElements();
		this.pContains = new ContainsElements();
		this.pStartsWith = new StartsWithElements();
		this.pEndsWith = new EndsWithElements();
		this.pFormat = new FormatElements();
		this.pJoin = new JoinElements();
		this.pToJSON = new ToJSONElements();
		this.pFromJSON = new FromJSONElements();
		this.pHashFiles = new HashFilesElements();
		this.pSuccess = new SuccessElements();
		this.pAlways = new AlwaysElements();
		this.pCancelled = new CancelledElements();
		this.pFailure = new FailureElements();
		this.eCOMPARISON_OP = new COMPARISON_OPElements();
		this.eEQUALITY_OP = new EQUALITY_OPElements();
		this.eCONTEXT = new CONTEXTElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.DOUBLE");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.gha.dsl.GitHubActions.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("d.fe.up.pt.cicd.gha.dsl.GitHubActions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Expression returns GHA::Expression:
	//    Or
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or returns GHA::Expression:
	//    And ({GHA::Or.lhs=current} '||' rhs=And)*
	//;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And returns GHA::Expression:
	//    Equality ({GHA::And.lhs=current}  '&&'  rhs=Equality )*
	//;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality returns GHA::Expression:
	//    Comparison ({GHA::Equality.lhs=current}  op=EQUALITY_OP  rhs=Comparison )*
	//;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison returns GHA::Expression:
	//    UnaryOp ({GHA::Comparison.lhs=current}  op=COMPARISON_OP  rhs=UnaryOp )*
	//;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//UnaryOp returns GHA::Expression:
	//    Not | Blank
	//;
	public UnaryOpElements getUnaryOpAccess() {
		return pUnaryOp;
	}
	
	public ParserRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}
	
	//Not returns GHA::Not:
	//    '!' childExpr=VariableDereference
	//;
	public NotElements getNotAccess() {
		return pNot;
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}
	
	//Blank returns GHA::Expression:
	//    VariableDereference
	//;
	public BlankElements getBlankAccess() {
		return pBlank;
	}
	
	public ParserRule getBlankRule() {
		return getBlankAccess().getRule();
	}
	
	//VariableDereference returns GHA::Expression:
	//    Primary ({GHA::VariableDereference.variable=current} (('.' property=ID) | ('['  ('"' property=ID '"') | ("'" property=ID '"')  ']')))*
	//;
	public VariableDereferenceElements getVariableDereferenceAccess() {
		return pVariableDereference;
	}
	
	public ParserRule getVariableDereferenceRule() {
		return getVariableDereferenceAccess().getRule();
	}
	
	//Primary returns GHA::Expression:
	//    ('('  Expression  ')') | CallExpression | Atomic
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic returns GHA::Value:
	//    ({GHA::GitHubContext} context=CONTEXT) |
	//    ({GHA::Variable} name=ID) |
	//    ({GHA::IntegerLiteral} value=INT) |
	//    ({GHA::DoubleLiteral} value=DOUBLE) |
	//    ({GHA::BooleanLiteral} value=BOOLEAN) |
	//    ({GHA::StringLiteral} value=STRING)
	//;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//CallExpression returns GHA::BuiltInFunctionCall:
	//    Contains |
	//    StartsWith |
	//    EndsWith |
	//    Format |
	//    Join |
	//    ToJSON |
	//    FromJSON |
	//    HashFiles |
	//    Success |
	//    Always |
	//    Failure |
	//    Cancelled
	//;
	public CallExpressionElements getCallExpressionAccess() {
		return pCallExpression;
	}
	
	public ParserRule getCallExpressionRule() {
		return getCallExpressionAccess().getRule();
	}
	
	//Contains returns GHA::Contains:
	//    'contains' '('  search=Expression  ','  item=Expression  ')'
	//;
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//StartsWith returns GHA::StartsWith:
	//    'startsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
	//;
	public StartsWithElements getStartsWithAccess() {
		return pStartsWith;
	}
	
	public ParserRule getStartsWithRule() {
		return getStartsWithAccess().getRule();
	}
	
	//EndsWith returns GHA::EndsWith:
	//    'endsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
	//;
	public EndsWithElements getEndsWithAccess() {
		return pEndsWith;
	}
	
	public ParserRule getEndsWithRule() {
		return getEndsWithAccess().getRule();
	}
	
	//Format returns GHA::Format:
	//    'format' '('  string=Expression ( ','  replaceValues+=Expression)*  ')'
	//;
	public FormatElements getFormatAccess() {
		return pFormat;
	}
	
	public ParserRule getFormatRule() {
		return getFormatAccess().getRule();
	}
	
	//Join returns GHA::Join:
	//    'join' '('  array=Expression ( ','  sep=Expression)?  ')'
	//;
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}
	
	//ToJSON returns GHA::ToJSON:
	//    'toJSON' '('  value=Expression  ')'
	//;
	public ToJSONElements getToJSONAccess() {
		return pToJSON;
	}
	
	public ParserRule getToJSONRule() {
		return getToJSONAccess().getRule();
	}
	
	//FromJSON returns GHA::FromJSON:
	//    'fromJSON' '('  value=Expression  ')'
	//;
	public FromJSONElements getFromJSONAccess() {
		return pFromJSON;
	}
	
	public ParserRule getFromJSONRule() {
		return getFromJSONAccess().getRule();
	}
	
	//HashFiles returns GHA::HashFiles:
	//    'hashFiles' '('  path=Expression  ')'
	//;
	public HashFilesElements getHashFilesAccess() {
		return pHashFiles;
	}
	
	public ParserRule getHashFilesRule() {
		return getHashFilesAccess().getRule();
	}
	
	//Success returns GHA::Success:
	//    {GHA::Success} 'success' '('  ')'
	//;
	public SuccessElements getSuccessAccess() {
		return pSuccess;
	}
	
	public ParserRule getSuccessRule() {
		return getSuccessAccess().getRule();
	}
	
	//Always returns GHA::Always:
	//    {GHA::Always} 'always' '('  ')'
	//;
	public AlwaysElements getAlwaysAccess() {
		return pAlways;
	}
	
	public ParserRule getAlwaysRule() {
		return getAlwaysAccess().getRule();
	}
	
	//Cancelled returns GHA::Cancelled:
	//    {GHA::Cancelled} 'cancelled' '('  ')'
	//;
	public CancelledElements getCancelledAccess() {
		return pCancelled;
	}
	
	public ParserRule getCancelledRule() {
		return getCancelledAccess().getRule();
	}
	
	//Failure returns GHA::Failure:
	//    {GHA::Failure} 'failure' '('  ')'
	//;
	public FailureElements getFailureAccess() {
		return pFailure;
	}
	
	public ParserRule getFailureRule() {
		return getFailureAccess().getRule();
	}
	
	//enum COMPARISON_OP returns GHA::COMPARISON_OPS:
	//    GT='>' |
	//    GTE='>=' |
	//    LT='<' |
	//    LTE='<='
	//;
	public COMPARISON_OPElements getCOMPARISON_OPAccess() {
		return eCOMPARISON_OP;
	}
	
	public EnumRule getCOMPARISON_OPRule() {
		return getCOMPARISON_OPAccess().getRule();
	}
	
	//enum EQUALITY_OP returns GHA::EQUALITY_OPS:
	//    EQUALS='==' |
	//    NOT_EQUALS='!='
	//;
	public EQUALITY_OPElements getEQUALITY_OPAccess() {
		return eEQUALITY_OP;
	}
	
	public EnumRule getEQUALITY_OPRule() {
		return getEQUALITY_OPAccess().getRule();
	}
	
	//enum CONTEXT returns GHA::CONTEXTS:
	//    GITHUB='github' |
	//    ENV='env' |
	//    VARS='vars' |
	//    JOB='job' |
	//    JOBS='jobs' |
	//    STEPS='steps' |
	//    RUNNER='runner' |
	//    SECRETS='secrets' |
	//    STRATEGY='strategy' |
	//    MATRIX='matrix' |
	//    NEEDS='needs' |
	//    INPUTS='inputs'
	//;
	public CONTEXTElements getCONTEXTAccess() {
		return eCONTEXT;
	}
	
	public EnumRule getCONTEXTRule() {
		return getCONTEXTAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDoubleObject:
	//    INT '.' INT
	//;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal BOOLEAN returns ecore::EBooleanObject:
	//    'true' | 'false'
	//;
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
