grammar d.fe.up.pt.cicd.gha.dsl.GitHubActions with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://d.fe.up.pt/GHA" as GHA

Expression returns GHA::Expression:
	Or
;

Or returns GHA::Expression:
    And ({GHA::Or.lhs=current} '||' rhs=And)*
;


And returns GHA::Expression:
    Equality ({GHA::And.lhs=current}  '&&'  rhs=Equality )*
;

Equality returns GHA::Expression:
	Comparison ({GHA::Equality.lhs=current}  op=EQUALITY_OP  rhs=Comparison )*
;

Comparison returns GHA::Expression:
	UnaryOp ({GHA::Comparison.lhs=current}  op=COMPARISON_OP  rhs=UnaryOp )*
;

UnaryOp returns GHA::Expression:
	Not | Blank
;

Not returns GHA::Not:
	'!' childExpr=VariableDereference
;

Blank returns GHA::Expression:
	VariableDereference
;

VariableDereference returns GHA::Expression:
	Primary ({GHA::DotOp.lhs=current} (('.' rhs=VariableDereference) | ('[' rhs=VariableDereference ']')))?
;

Primary returns GHA::Expression:
    ('('  Expression  ')') | CallExpression | Atomic
;

Atomic returns GHA::Value:
	({GHA::GitHubContext} context=CONTEXT) |
	({GHA::VariableReference} name=ID) | 
	({GHA::IntegerLiteral} value=INT) |
	({GHA::DoubleLiteral} value=DOUBLE) |
	({GHA::BooleanLiteral} value=BOOLEAN) |
	({GHA::StringLiteral} value=STRING)
;

CallExpression returns GHA::BuiltInFunctionCall:
	Contains |
	StartsWith |
	EndsWith |
	Format |
	Join |
	ToJSON |
	FromJSON |
	HashFiles |
	Success |
	Always |
	Failure |
	Cancelled
;

Contains returns GHA::Contains:
	'contains' '('  search=Expression  ','  item=Expression  ')'
;

StartsWith returns GHA::StartsWith:
	'startsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
;

EndsWith returns GHA::EndsWith:
	'endsWith' '('  searchString=Expression  ','  searchValue=Expression  ')'
;

Format returns GHA::Format:
	'format' '('  string=Expression ( ','  replaceValues+=Expression)*  ')'
;

Join returns GHA::Join:
	'join' '('  array=Expression ( ','  sep=Expression)?  ')'
;

ToJSON returns GHA::ToJSON:
	'toJSON' '('  value=Expression  ')'
;

FromJSON returns GHA::FromJSON:
	'fromJSON' '('  value=Expression  ')'
;

HashFiles returns GHA::HashFiles:
	'hashFiles' '('  path=Expression  ')'
;

Success returns GHA::Success:
	{GHA::Success} 'success' '('  ')'
;

Always returns GHA::Always:
	{GHA::Always} 'always' '('  ')'
;

Cancelled returns GHA::Cancelled:
	{GHA::Cancelled} 'cancelled' '('  ')'
;

Failure returns GHA::Failure:
	{GHA::Failure} 'failure' '('  ')'
;

enum COMPARISON_OP returns GHA::COMPARISON_OPS:
	GT='>' |
	GTE='>=' |
	LT='<' |
	LTE='<='
;

enum EQUALITY_OP returns GHA::EQUALITY_OPS:
	EQUALS='==' |
	NOT_EQUALS='!='
;

enum CONTEXT returns GHA::CONTEXTS:
	GITHUB='github' |
	ENV='env' |
	VARS='vars' |
	JOB='job' |
	JOBS='jobs' |
	STEPS='steps' |
	RUNNER='runner' |
	SECRETS='secrets' |
	STRATEGY='strategy' |
	MATRIX='matrix' |
	NEEDS='needs' |
	INPUTS='inputs'
;

terminal DOUBLE returns ecore::EDoubleObject:
	INT '.' INT
;

terminal BOOLEAN returns ecore::EBooleanObject:
	'true' | 'false'
;