package d.fe.up.pt.cicd.gha.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import d.fe.up.pt.cicd.gha.services.GitHubActionsGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalGitHubActionsParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Pull_request_review_comment", "Branch_protection_rule", "Review_request_removed", "Auto_merge_disabled", "Pull_request_review", "Pull_request_target", "Repository_dispatch", "Repository_projects", "Auto_merge_enabled", "CancelInProgress", "Converted_to_draft", "ContinueOnError", "Deployment_status", "Workflow_dispatch", "WorkingDirectory", "Ready_for_review", "Registry_package", "Review_requested", "BranchesIgnore", "Security_events", "TimeoutMinutes", "Project_column", "Pull_requests", "Workflow_call", "MaxParalell", "PathsIgnore", "Project_card", "Pull_request", "Workflow_run", "Check_suite", "Concurrency", "Credentials", "Deployments", "Description", "Discussions", "Environment", "Merge_group", "Permissions", "Synchronize", "TagsIgnore", "Deployment", "Discussion", "Entrypoint", "Page_build", "StartsWith", "Unassigned", "Cancelled", "Check_run", "Container", "FailFast", "HashFiles", "Milestone", "Unlabeled", "Assigned", "Branches", "Contains", "Contents", "Defaults", "EndsWith", "FromJSON", "IdToken", "Includes", "Packages", "Password", "Reopened", "Required", "RunName", "Schedule", "Services", "Statuses", "Strategy", "Unlocked", "Username", "Actions", "Boolean", "Created", "Default", "Deleted", "Exludes", "Failure", "Inherit", "Labeled", "Options", "Outputs", "Project", "Release", "RunsOn", "Secrets", "Success", "Volumes", "Always", "Checks", "Choice", "Closed", "Create", "Delete", "Edited", "Format", "Github", "Gollum", "Inputs", "Issues", "Labels", "Locked", "Matrix", "Number", "Opened", "Public", "Runner", "Status", "String", "ToJSON", "Group", "Image", "Label", "Needs", "Pages", "Paths", "Ports", "Shell", "Steps", "Types", "Value", "Watch", "Write", "Args", "Cron", "Fork", "Jobs", "Join", "Name", "None", "Push", "Read", "Tags", "Type", "Uses", "Vars", "With", "DollarSignLeftCurlyBracketLeftCurlyBracket", "Env", "Job", "Run", "Url", "ExclamationMarkEqualsSign", "AmpersandAmpersand", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "GreaterThanSignEqualsSign", "Id", "If", "On", "VerticalLineVerticalLine", "RightCurlyBracketRightCurlyBracket", "ExclamationMark", "LeftParenthesis", "RightParenthesis", "Comma", "HyphenMinus", "FullStop", "Colon", "LessThanSign", "GreaterThanSign", "LeftSquareBracket", "RightSquareBracket", "RULE_INT", "RULE_DOUBLE", "RULE_BOOLEAN", "RULE_BEGIN", "RULE_END", "RULE_NEWLINE", "RULE_END_OF_FILE", "RULE_ID", "RULE_STRING", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int Delete=99;
    public static final int Secrets=91;
    public static final int Labeled=85;
    public static final int Needs=119;
    public static final int Deployments=36;
    public static final int Exludes=82;
    public static final int String=114;
    public static final int Image=117;
    public static final int Success=92;
    public static final int LessThanSign=165;
    public static final int Unlabeled=56;
    public static final int RunName=70;
    public static final int Matrix=108;
    public static final int LeftParenthesis=159;
    public static final int Concurrency=34;
    public static final int Workflow_call=27;
    public static final int TagsIgnore=43;
    public static final int FromJSON=63;
    public static final int Boolean=78;
    public static final int Push=136;
    public static final int Failure=83;
    public static final int Tags=138;
    public static final int ExclamationMark=158;
    public static final int Assigned=57;
    public static final int Status=113;
    public static final int GreaterThanSign=166;
    public static final int Review_requested=21;
    public static final int Repository_dispatch=10;
    public static final int RULE_ID=176;
    public static final int Actions=77;
    public static final int Github=102;
    public static final int Labels=106;
    public static final int GreaterThanSignEqualsSign=152;
    public static final int Merge_group=40;
    public static final int Pages=120;
    public static final int Project=88;
    public static final int EqualsSignEqualsSign=151;
    public static final int Contents=60;
    public static final int Defaults=61;
    public static final int Statuses=73;
    public static final int RULE_INT=169;
    public static final int Contains=59;
    public static final int Outputs=87;
    public static final int Edited=100;
    public static final int RULE_ML_COMMENT=178;
    public static final int Unassigned=49;
    public static final int LeftSquareBracket=167;
    public static final int Always=94;
    public static final int Id=153;
    public static final int ContinueOnError=15;
    public static final int If=154;
    public static final int EndsWith=62;
    public static final int Write=128;
    public static final int Group=116;
    public static final int Description=37;
    public static final int RightCurlyBracketRightCurlyBracket=157;
    public static final int Unlocked=75;
    public static final int Check_suite=33;
    public static final int VerticalLineVerticalLine=156;
    public static final int RULE_NEWLINE=174;
    public static final int Auto_merge_disabled=7;
    public static final int Pull_request_review=8;
    public static final int Url=147;
    public static final int Created=79;
    public static final int Comma=161;
    public static final int Project_card=30;
    public static final int HyphenMinus=162;
    public static final int Jobs=132;
    public static final int Registry_package=20;
    public static final int Gollum=103;
    public static final int Watch=127;
    public static final int Deleted=81;
    public static final int Paths=121;
    public static final int LessThanSignEqualsSign=150;
    public static final int IdToken=64;
    public static final int FullStop=163;
    public static final int TimeoutMinutes=24;
    public static final int Vars=141;
    public static final int HashFiles=54;
    public static final int Ports=122;
    public static final int Join=133;
    public static final int Run=146;
    public static final int Default=80;
    public static final int Services=72;
    public static final int Type=139;
    public static final int Pull_request=31;
    public static final int ExclamationMarkEqualsSign=148;
    public static final int None=135;
    public static final int Credentials=35;
    public static final int Review_request_removed=6;
    public static final int Ready_for_review=19;
    public static final int Types=125;
    public static final int Choice=96;
    public static final int RULE_BEGIN=172;
    public static final int Deployment_status=16;
    public static final int Discussions=38;
    public static final int Security_events=23;
    public static final int Synchronize=42;
    public static final int Label=118;
    public static final int Deployment=44;
    public static final int RULE_BOOLEAN=171;
    public static final int Check_run=51;
    public static final int Cron=130;
    public static final int Name=134;
    public static final int Pull_request_review_comment=4;
    public static final int Read=137;
    public static final int Container=52;
    public static final int Branch_protection_rule=5;
    public static final int Volumes=93;
    public static final int ToJSON=115;
    public static final int Packages=66;
    public static final int Permissions=41;
    public static final int Job=145;
    public static final int Inherit=84;
    public static final int RightSquareBracket=168;
    public static final int WorkingDirectory=18;
    public static final int Opened=110;
    public static final int Repository_projects=11;
    public static final int MaxParalell=28;
    public static final int Milestone=55;
    public static final int Branches=58;
    public static final int RightParenthesis=160;
    public static final int Public=111;
    public static final int FailFast=53;
    public static final int Checks=95;
    public static final int Value=126;
    public static final int Environment=39;
    public static final int Discussion=45;
    public static final int DollarSignLeftCurlyBracketLeftCurlyBracket=143;
    public static final int Steps=124;
    public static final int Options=86;
    public static final int Runner=112;
    public static final int RULE_END=173;
    public static final int Fork=131;
    public static final int Uses=140;
    public static final int Reopened=68;
    public static final int Pull_request_target=9;
    public static final int Issues=105;
    public static final int RULE_STRING=177;
    public static final int Env=144;
    public static final int StartsWith=48;
    public static final int CancelInProgress=13;
    public static final int With=142;
    public static final int RULE_SL_COMMENT=179;
    public static final int Pull_requests=26;
    public static final int Includes=65;
    public static final int Locked=107;
    public static final int Shell=123;
    public static final int Auto_merge_enabled=12;
    public static final int Format=101;
    public static final int Project_column=25;
    public static final int Required=69;
    public static final int Number=109;
    public static final int AmpersandAmpersand=149;
    public static final int RULE_DOUBLE=170;
    public static final int Page_build=47;
    public static final int Create=98;
    public static final int RULE_END_OF_FILE=175;
    public static final int Colon=164;
    public static final int EOF=-1;
    public static final int Inputs=104;
    public static final int Release=89;
    public static final int Password=67;
    public static final int BranchesIgnore=22;
    public static final int Args=129;
    public static final int Entrypoint=46;
    public static final int PathsIgnore=29;
    public static final int RULE_WS=180;
    public static final int Cancelled=50;
    public static final int RULE_ANY_OTHER=181;
    public static final int Workflow_dispatch=17;
    public static final int Username=76;
    public static final int Converted_to_draft=14;
    public static final int RunsOn=90;
    public static final int Closed=97;
    public static final int Schedule=71;
    public static final int Strategy=74;
    public static final int Workflow_run=32;
    public static final int On=155;

    // delegates
    // delegators


        public InternalGitHubActionsParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalGitHubActionsParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalGitHubActionsParser.tokenNames; }
    public String getGrammarFileName() { return "InternalGitHubActionsParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private GitHubActionsGrammarAccess grammarAccess;

        public InternalGitHubActionsParser(TokenStream input, GitHubActionsGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Workflow";
       	}

       	@Override
       	protected GitHubActionsGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleWorkflow"
    // InternalGitHubActionsParser.g:65:1: entryRuleWorkflow returns [EObject current=null] : iv_ruleWorkflow= ruleWorkflow EOF ;
    public final EObject entryRuleWorkflow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWorkflow = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getWorkflowAccess().getUnorderedGroup_0()
        	);

        try {
            // InternalGitHubActionsParser.g:69:2: (iv_ruleWorkflow= ruleWorkflow EOF )
            // InternalGitHubActionsParser.g:70:2: iv_ruleWorkflow= ruleWorkflow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWorkflowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWorkflow=ruleWorkflow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWorkflow; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleWorkflow"


    // $ANTLR start "ruleWorkflow"
    // InternalGitHubActionsParser.g:79:1: ruleWorkflow returns [EObject current=null] : ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) ) ) ( ( RULE_END_OF_FILE )=>this_END_OF_FILE_56= RULE_END_OF_FILE ) ) ;
    public final EObject ruleWorkflow() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_NEWLINE_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token this_NEWLINE_18=null;
        Token this_NEWLINE_19=null;
        Token this_BEGIN_20=null;
        Token otherlv_21=null;
        Token this_NEWLINE_23=null;
        Token this_END_24=null;
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_NEWLINE_28=null;
        Token this_BEGIN_29=null;
        Token this_END_31=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token this_END_37=null;
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_NEWLINE_40=null;
        Token this_BEGIN_41=null;
        Token this_END_43=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        Token this_END_OF_FILE_56=null;
        EObject lv_name_3_0 = null;

        EObject lv_runName_7_0 = null;

        EObject lv_triggers_11_0 = null;

        EObject lv_triggers_14_0 = null;

        EObject lv_triggers_16_0 = null;

        EObject lv_triggers_22_0 = null;

        EObject lv_triggers_25_0 = null;

        EObject lv_permissions_30_0 = null;

        EObject lv_environmentVariables_36_0 = null;

        EObject lv_defaults_42_0 = null;

        EObject lv_concurrencyGroup_48_0 = null;

        EObject lv_jobs_54_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getWorkflowAccess().getUnorderedGroup_0()
        	);

        try {
            // InternalGitHubActionsParser.g:88:2: ( ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) ) ) ( ( RULE_END_OF_FILE )=>this_END_OF_FILE_56= RULE_END_OF_FILE ) ) )
            // InternalGitHubActionsParser.g:89:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) ) ) ( ( RULE_END_OF_FILE )=>this_END_OF_FILE_56= RULE_END_OF_FILE ) )
            {
            // InternalGitHubActionsParser.g:89:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) ) ) ( ( RULE_END_OF_FILE )=>this_END_OF_FILE_56= RULE_END_OF_FILE ) )
            // InternalGitHubActionsParser.g:90:3: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) ) ) ( ( RULE_END_OF_FILE )=>this_END_OF_FILE_56= RULE_END_OF_FILE )
            {
            // InternalGitHubActionsParser.g:90:3: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:91:4: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:91:4: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:92:5: ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());
            // InternalGitHubActionsParser.g:95:5: ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:96:6: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:96:6: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+
            int cnt8=0;
            loop8:
            do {
                int alt8=9;
                alt8 = dfa8.predict(input);
                switch (alt8) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:97:4: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:97:4: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:98:5: {...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:98:105: ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:99:6: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 0);
            	    // InternalGitHubActionsParser.g:102:9: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:102:10: {...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:102:19: (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:102:20: otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE
            	    {
            	    otherlv_1=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_1, grammarAccess.getWorkflowAccess().getNameKeyword_0_0_0());
            	      								
            	    }
            	    otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_2, grammarAccess.getWorkflowAccess().getColonKeyword_0_0_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:110:9: ( (lv_name_3_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:111:10: (lv_name_3_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:111:10: (lv_name_3_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:112:11: lv_name_3_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getWorkflowAccess().getNameExpressionParserRuleCall_0_0_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_name_3_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      											}
            	      											set(
            	      												current,
            	      												"name",
            	      												lv_name_3_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_4, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_0_3());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:139:4: ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:139:4: ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:140:5: {...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:140:105: ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:141:6: ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 1);
            	    // InternalGitHubActionsParser.g:144:9: ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:144:10: {...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:144:19: (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:144:20: otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	    {
            	    otherlv_5=(Token)match(input,RunName,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_5, grammarAccess.getWorkflowAccess().getRunNameKeyword_0_1_0());
            	      								
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_6, grammarAccess.getWorkflowAccess().getColonKeyword_0_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:152:9: ( (lv_runName_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:153:10: (lv_runName_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:153:10: (lv_runName_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:154:11: lv_runName_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getWorkflowAccess().getRunNameExpressionParserRuleCall_0_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_runName_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      											}
            	      											set(
            	      												current,
            	      												"runName",
            	      												lv_runName_7_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_8, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_1_3());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:181:4: ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:181:4: ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) )
            	    // InternalGitHubActionsParser.g:182:5: {...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:182:105: ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:183:6: ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 2);
            	    // InternalGitHubActionsParser.g:186:9: ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:186:10: {...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:186:19: (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) )
            	    // InternalGitHubActionsParser.g:186:20: otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ )
            	    {
            	    otherlv_9=(Token)match(input,On,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_9, grammarAccess.getWorkflowAccess().getOnKeyword_0_2_0());
            	      								
            	    }
            	    otherlv_10=(Token)match(input,Colon,FOLLOW_7); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_10, grammarAccess.getWorkflowAccess().getColonKeyword_0_2_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:194:9: ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ )
            	    int alt4=4;
            	    switch ( input.LA(1) ) {
            	    case Pull_request_review_comment:
            	    case Branch_protection_rule:
            	    case Pull_request_review:
            	    case Pull_request_target:
            	    case Repository_dispatch:
            	    case Deployment_status:
            	    case Workflow_dispatch:
            	    case Registry_package:
            	    case Project_column:
            	    case Workflow_call:
            	    case Project_card:
            	    case Pull_request:
            	    case Check_suite:
            	    case Merge_group:
            	    case Deployment:
            	    case Discussion:
            	    case Page_build:
            	    case Check_run:
            	    case Milestone:
            	    case Project:
            	    case Release:
            	    case Create:
            	    case Delete:
            	    case Gollum:
            	    case Issues:
            	    case Public:
            	    case Status:
            	    case Label:
            	    case Watch:
            	    case Fork:
            	    case Push:
            	        {
            	        alt4=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt4=2;
            	        }
            	        break;
            	    case RULE_NEWLINE:
            	        {
            	        int LA4_3 = input.LA(2);

            	        if ( (LA4_3==RULE_BEGIN) ) {
            	            int LA4_4 = input.LA(3);

            	            if ( (LA4_4==HyphenMinus) ) {
            	                alt4=3;
            	            }
            	            else if ( ((LA4_4>=Pull_request_review_comment && LA4_4<=Branch_protection_rule)||(LA4_4>=Pull_request_review && LA4_4<=Repository_dispatch)||(LA4_4>=Deployment_status && LA4_4<=Workflow_dispatch)||LA4_4==Registry_package||LA4_4==Project_column||LA4_4==Workflow_call||(LA4_4>=Project_card && LA4_4<=Check_suite)||LA4_4==Merge_group||(LA4_4>=Deployment && LA4_4<=Discussion)||LA4_4==Page_build||LA4_4==Check_run||LA4_4==Milestone||LA4_4==Schedule||(LA4_4>=Project && LA4_4<=Release)||(LA4_4>=Create && LA4_4<=Delete)||LA4_4==Gollum||LA4_4==Issues||LA4_4==Public||LA4_4==Status||LA4_4==Label||LA4_4==Watch||LA4_4==Fork||LA4_4==Push||LA4_4==LeftSquareBracket||LA4_4==RULE_NEWLINE) ) {
            	                alt4=4;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 4, 4, input);

            	                throw nvae;
            	            }
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return current;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 4, 3, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 4, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt4) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:195:10: ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE )
            	            {
            	            // InternalGitHubActionsParser.g:195:10: ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:196:11: ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE
            	            {
            	            // InternalGitHubActionsParser.g:196:11: ( (lv_triggers_11_0= ruleSimpleTrigger ) )
            	            // InternalGitHubActionsParser.g:197:12: (lv_triggers_11_0= ruleSimpleTrigger )
            	            {
            	            // InternalGitHubActionsParser.g:197:12: (lv_triggers_11_0= ruleSimpleTrigger )
            	            // InternalGitHubActionsParser.g:198:13: lv_triggers_11_0= ruleSimpleTrigger
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_0_0_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_triggers_11_0=ruleSimpleTrigger();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	              													}
            	              													add(
            	              														current,
            	              														"triggers",
            	              														lv_triggers_11_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }

            	            this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_6); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_NEWLINE_12, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_2_2_0_1());
            	              										
            	            }

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:221:10: (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE )
            	            {
            	            // InternalGitHubActionsParser.g:221:10: (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:222:11: otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE
            	            {
            	            otherlv_13=(Token)match(input,LeftSquareBracket,FOLLOW_8); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_13, grammarAccess.getWorkflowAccess().getLeftSquareBracketKeyword_0_2_2_1_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:226:11: ( (lv_triggers_14_0= ruleSimpleTrigger ) )
            	            // InternalGitHubActionsParser.g:227:12: (lv_triggers_14_0= ruleSimpleTrigger )
            	            {
            	            // InternalGitHubActionsParser.g:227:12: (lv_triggers_14_0= ruleSimpleTrigger )
            	            // InternalGitHubActionsParser.g:228:13: lv_triggers_14_0= ruleSimpleTrigger
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_1_1_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_9);
            	            lv_triggers_14_0=ruleSimpleTrigger();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	              													}
            	              													add(
            	              														current,
            	              														"triggers",
            	              														lv_triggers_14_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:245:11: (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )*
            	            loop1:
            	            do {
            	                int alt1=2;
            	                int LA1_0 = input.LA(1);

            	                if ( (LA1_0==Comma) ) {
            	                    alt1=1;
            	                }


            	                switch (alt1) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:246:12: otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) )
            	            	    {
            	            	    otherlv_15=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_15, grammarAccess.getWorkflowAccess().getCommaKeyword_0_2_2_1_2_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:250:12: ( (lv_triggers_16_0= ruleSimpleTrigger ) )
            	            	    // InternalGitHubActionsParser.g:251:13: (lv_triggers_16_0= ruleSimpleTrigger )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:251:13: (lv_triggers_16_0= ruleSimpleTrigger )
            	            	    // InternalGitHubActionsParser.g:252:14: lv_triggers_16_0= ruleSimpleTrigger
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_1_2_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_9);
            	            	    lv_triggers_16_0=ruleSimpleTrigger();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"triggers",
            	            	      															lv_triggers_16_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop1;
            	                }
            	            } while (true);

            	            otherlv_17=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_17, grammarAccess.getWorkflowAccess().getRightSquareBracketKeyword_0_2_2_1_3());
            	              										
            	            }
            	            this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_6); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_NEWLINE_18, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_2_2_1_4());
            	              										
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:280:10: (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:280:10: (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END )
            	            // InternalGitHubActionsParser.g:281:11: this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END
            	            {
            	            this_NEWLINE_19=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_NEWLINE_19, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_2_2_2_0());
            	              										
            	            }
            	            this_BEGIN_20=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_BEGIN_20, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_2_2_2_1());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:289:11: (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+
            	            int cnt2=0;
            	            loop2:
            	            do {
            	                int alt2=2;
            	                int LA2_0 = input.LA(1);

            	                if ( (LA2_0==HyphenMinus) ) {
            	                    alt2=1;
            	                }


            	                switch (alt2) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:290:12: otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE
            	            	    {
            	            	    otherlv_21=(Token)match(input,HyphenMinus,FOLLOW_8); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_21, grammarAccess.getWorkflowAccess().getHyphenMinusKeyword_0_2_2_2_2_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:294:12: ( (lv_triggers_22_0= ruleSimpleTrigger ) )
            	            	    // InternalGitHubActionsParser.g:295:13: (lv_triggers_22_0= ruleSimpleTrigger )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:295:13: (lv_triggers_22_0= ruleSimpleTrigger )
            	            	    // InternalGitHubActionsParser.g:296:14: lv_triggers_22_0= ruleSimpleTrigger
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_2_2_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_5);
            	            	    lv_triggers_22_0=ruleSimpleTrigger();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"triggers",
            	            	      															lv_triggers_22_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_23=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(this_NEWLINE_23, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_2_2_2_2_2());
            	            	      											
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt2 >= 1 ) break loop2;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(2, input);
            	                        throw eee;
            	                }
            	                cnt2++;
            	            } while (true);

            	            this_END_24=(Token)match(input,RULE_END,FOLLOW_6); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_END_24, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_2_2_2_3());
            	              										
            	            }

            	            }


            	            }
            	            break;
            	        case 4 :
            	            // InternalGitHubActionsParser.g:324:10: ( (lv_triggers_25_0= ruleOptionedTrigger ) )+
            	            {
            	            // InternalGitHubActionsParser.g:324:10: ( (lv_triggers_25_0= ruleOptionedTrigger ) )+
            	            int cnt3=0;
            	            loop3:
            	            do {
            	                int alt3=2;
            	                int LA3_0 = input.LA(1);

            	                if ( (LA3_0==RULE_NEWLINE) ) {
            	                    alt3=1;
            	                }


            	                switch (alt3) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:325:11: (lv_triggers_25_0= ruleOptionedTrigger )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:325:11: (lv_triggers_25_0= ruleOptionedTrigger )
            	            	    // InternalGitHubActionsParser.g:326:12: lv_triggers_25_0= ruleOptionedTrigger
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersOptionedTriggerParserRuleCall_0_2_2_3_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_13);
            	            	    lv_triggers_25_0=ruleOptionedTrigger();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"triggers",
            	            	      													lv_triggers_25_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.OptionedTrigger");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt3 >= 1 ) break loop3;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(3, input);
            	                        throw eee;
            	                }
            	                cnt3++;
            	            } while (true);


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:350:4: ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:350:4: ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:351:5: {...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:351:105: ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:352:6: ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 3);
            	    // InternalGitHubActionsParser.g:355:9: ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) )
            	    // InternalGitHubActionsParser.g:355:10: {...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:355:19: (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END )
            	    // InternalGitHubActionsParser.g:355:20: otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END
            	    {
            	    otherlv_26=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_26, grammarAccess.getWorkflowAccess().getPermissionsKeyword_0_3_0());
            	      								
            	    }
            	    otherlv_27=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_27, grammarAccess.getWorkflowAccess().getColonKeyword_0_3_1());
            	      								
            	    }
            	    this_NEWLINE_28=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_28, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_3_2());
            	      								
            	    }
            	    this_BEGIN_29=(Token)match(input,RULE_BEGIN,FOLLOW_14); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_29, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_3_3());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:371:9: ( (lv_permissions_30_0= rulePermission ) )+
            	    int cnt5=0;
            	    loop5:
            	    do {
            	        int alt5=2;
            	        int LA5_0 = input.LA(1);

            	        if ( (LA5_0==Repository_projects||LA5_0==Security_events||LA5_0==Pull_requests||LA5_0==Deployments||LA5_0==Discussions||LA5_0==Contents||LA5_0==IdToken||LA5_0==Packages||LA5_0==Statuses||LA5_0==Actions||LA5_0==Checks||LA5_0==Issues||LA5_0==Pages) ) {
            	            alt5=1;
            	        }


            	        switch (alt5) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:372:10: (lv_permissions_30_0= rulePermission )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:372:10: (lv_permissions_30_0= rulePermission )
            	    	    // InternalGitHubActionsParser.g:373:11: lv_permissions_30_0= rulePermission
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      											newCompositeNode(grammarAccess.getWorkflowAccess().getPermissionsPermissionParserRuleCall_0_3_4_0());
            	    	      										
            	    	    }
            	    	    pushFollow(FOLLOW_15);
            	    	    lv_permissions_30_0=rulePermission();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      											if (current==null) {
            	    	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	    	      											}
            	    	      											add(
            	    	      												current,
            	    	      												"permissions",
            	    	      												lv_permissions_30_0,
            	    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Permission");
            	    	      											afterParserOrEnumRuleCall();
            	    	      										
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt5 >= 1 ) break loop5;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(5, input);
            	                throw eee;
            	        }
            	        cnt5++;
            	    } while (true);

            	    this_END_31=(Token)match(input,RULE_END,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_31, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_3_5());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:400:4: ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:400:4: ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:401:5: {...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:401:105: ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:402:6: ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 4);
            	    // InternalGitHubActionsParser.g:405:9: ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
            	    // InternalGitHubActionsParser.g:405:10: {...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:405:19: (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
            	    // InternalGitHubActionsParser.g:405:20: otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END
            	    {
            	    otherlv_32=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_32, grammarAccess.getWorkflowAccess().getEnvKeyword_0_4_0());
            	      								
            	    }
            	    otherlv_33=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_33, grammarAccess.getWorkflowAccess().getColonKeyword_0_4_1());
            	      								
            	    }
            	    this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_34, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_4_2());
            	      								
            	    }
            	    this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_35, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_4_3());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:421:9: ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
            	    int cnt6=0;
            	    loop6:
            	    do {
            	        int alt6=2;
            	        int LA6_0 = input.LA(1);

            	        if ( (LA6_0==RULE_ID) ) {
            	            alt6=1;
            	        }


            	        switch (alt6) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:422:10: (lv_environmentVariables_36_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:422:10: (lv_environmentVariables_36_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:423:11: lv_environmentVariables_36_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      											newCompositeNode(grammarAccess.getWorkflowAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_0_4_4_0());
            	    	      										
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_environmentVariables_36_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      											if (current==null) {
            	    	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	    	      											}
            	    	      											add(
            	    	      												current,
            	    	      												"environmentVariables",
            	    	      												lv_environmentVariables_36_0,
            	    	      												"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      											afterParserOrEnumRuleCall();
            	    	      										
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt6 >= 1 ) break loop6;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(6, input);
            	                throw eee;
            	        }
            	        cnt6++;
            	    } while (true);

            	    this_END_37=(Token)match(input,RULE_END,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_37, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_4_5());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:450:4: ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:450:4: ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:451:5: {...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:451:105: ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:452:6: ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 5);
            	    // InternalGitHubActionsParser.g:455:9: ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) )
            	    // InternalGitHubActionsParser.g:455:10: {...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:455:19: (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END )
            	    // InternalGitHubActionsParser.g:455:20: otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END
            	    {
            	    otherlv_38=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_38, grammarAccess.getWorkflowAccess().getDefaultsKeyword_0_5_0());
            	      								
            	    }
            	    otherlv_39=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_39, grammarAccess.getWorkflowAccess().getColonKeyword_0_5_1());
            	      								
            	    }
            	    this_NEWLINE_40=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_40, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_5_2());
            	      								
            	    }
            	    this_BEGIN_41=(Token)match(input,RULE_BEGIN,FOLLOW_18); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_41, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_5_3());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:471:9: ( (lv_defaults_42_0= ruleDefaults ) )
            	    // InternalGitHubActionsParser.g:472:10: (lv_defaults_42_0= ruleDefaults )
            	    {
            	    // InternalGitHubActionsParser.g:472:10: (lv_defaults_42_0= ruleDefaults )
            	    // InternalGitHubActionsParser.g:473:11: lv_defaults_42_0= ruleDefaults
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getWorkflowAccess().getDefaultsDefaultsParserRuleCall_0_5_4_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_defaults_42_0=ruleDefaults();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      											}
            	      											set(
            	      												current,
            	      												"defaults",
            	      												lv_defaults_42_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Defaults");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_END_43=(Token)match(input,RULE_END,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_43, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_5_5());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:500:4: ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:500:4: ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:501:5: {...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:501:105: ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:502:6: ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 6);
            	    // InternalGitHubActionsParser.g:505:9: ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) )
            	    // InternalGitHubActionsParser.g:505:10: {...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:505:19: (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END )
            	    // InternalGitHubActionsParser.g:505:20: otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END
            	    {
            	    otherlv_44=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_44, grammarAccess.getWorkflowAccess().getConcurrencyKeyword_0_6_0());
            	      								
            	    }
            	    otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_45, grammarAccess.getWorkflowAccess().getColonKeyword_0_6_1());
            	      								
            	    }
            	    this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_46, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_6_2());
            	      								
            	    }
            	    this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_47, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_6_3());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:521:9: ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) )
            	    // InternalGitHubActionsParser.g:522:10: (lv_concurrencyGroup_48_0= ruleConcurrencyGroup )
            	    {
            	    // InternalGitHubActionsParser.g:522:10: (lv_concurrencyGroup_48_0= ruleConcurrencyGroup )
            	    // InternalGitHubActionsParser.g:523:11: lv_concurrencyGroup_48_0= ruleConcurrencyGroup
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getWorkflowAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_0_6_4_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_concurrencyGroup_48_0=ruleConcurrencyGroup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      											}
            	      											set(
            	      												current,
            	      												"concurrencyGroup",
            	      												lv_concurrencyGroup_48_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.ConcurrencyGroup");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_END_49=(Token)match(input,RULE_END,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_49, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_6_5());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:550:4: ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:550:4: ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:551:5: {...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:551:105: ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:552:6: ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 7);
            	    // InternalGitHubActionsParser.g:555:9: ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) )
            	    // InternalGitHubActionsParser.g:555:10: {...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:555:19: (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END )
            	    // InternalGitHubActionsParser.g:555:20: otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END
            	    {
            	    otherlv_50=(Token)match(input,Jobs,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_50, grammarAccess.getWorkflowAccess().getJobsKeyword_0_7_0());
            	      								
            	    }
            	    otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_51, grammarAccess.getWorkflowAccess().getColonKeyword_0_7_1());
            	      								
            	    }
            	    this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_52, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_7_2());
            	      								
            	    }
            	    this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_21); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_53, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_7_3());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:571:9: ( (lv_jobs_54_0= ruleJob ) )+
            	    int cnt7=0;
            	    loop7:
            	    do {
            	        int alt7=2;
            	        alt7 = dfa7.predict(input);
            	        switch (alt7) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:572:10: (lv_jobs_54_0= ruleJob )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:572:10: (lv_jobs_54_0= ruleJob )
            	    	    // InternalGitHubActionsParser.g:573:11: lv_jobs_54_0= ruleJob
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      											newCompositeNode(grammarAccess.getWorkflowAccess().getJobsJobParserRuleCall_0_7_4_0());
            	    	      										
            	    	    }
            	    	    pushFollow(FOLLOW_21);
            	    	    lv_jobs_54_0=ruleJob();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      											if (current==null) {
            	    	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	    	      											}
            	    	      											add(
            	    	      												current,
            	    	      												"jobs",
            	    	      												lv_jobs_54_0,
            	    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Job");
            	    	      											afterParserOrEnumRuleCall();
            	    	      										
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt7 >= 1 ) break loop7;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(7, input);
            	                throw eee;
            	        }
            	        cnt7++;
            	    } while (true);

            	    this_END_55=(Token)match(input,RULE_END,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_55, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_7_5());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        throw eee;
                }
                cnt8++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getWorkflowAccess().getUnorderedGroup_0()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canLeave(grammarAccess.getWorkflowAccess().getUnorderedGroup_0())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getWorkflowAccess().getUnorderedGroup_0());

            }

            // InternalGitHubActionsParser.g:608:3: ( ( RULE_END_OF_FILE )=>this_END_OF_FILE_56= RULE_END_OF_FILE )
            // InternalGitHubActionsParser.g:609:4: ( RULE_END_OF_FILE )=>this_END_OF_FILE_56= RULE_END_OF_FILE
            {
            this_END_OF_FILE_56=(Token)match(input,RULE_END_OF_FILE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_END_OF_FILE_56, grammarAccess.getWorkflowAccess().getEND_OF_FILETerminalRuleCall_1());
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleWorkflow"


    // $ANTLR start "entryRuleJob"
    // InternalGitHubActionsParser.g:622:1: entryRuleJob returns [EObject current=null] : iv_ruleJob= ruleJob EOF ;
    public final EObject entryRuleJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJob = null;


        try {
            // InternalGitHubActionsParser.g:622:44: (iv_ruleJob= ruleJob EOF )
            // InternalGitHubActionsParser.g:623:2: iv_ruleJob= ruleJob EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJobRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJob=ruleJob();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJob; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJob"


    // $ANTLR start "ruleJob"
    // InternalGitHubActionsParser.g:629:1: ruleJob returns [EObject current=null] : (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob ) ;
    public final EObject ruleJob() throws RecognitionException {
        EObject current = null;

        EObject this_ScriptJob_0 = null;

        EObject this_ReuseWorkflowJob_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:635:2: ( (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob ) )
            // InternalGitHubActionsParser.g:636:2: (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob )
            {
            // InternalGitHubActionsParser.g:636:2: (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob )
            int alt9=2;
            alt9 = dfa9.predict(input);
            switch (alt9) {
                case 1 :
                    // InternalGitHubActionsParser.g:637:3: this_ScriptJob_0= ruleScriptJob
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJobAccess().getScriptJobParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ScriptJob_0=ruleScriptJob();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ScriptJob_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:649:3: this_ReuseWorkflowJob_1= ruleReuseWorkflowJob
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJobAccess().getReuseWorkflowJobParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReuseWorkflowJob_1=ruleReuseWorkflowJob();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ReuseWorkflowJob_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJob"


    // $ANTLR start "entryRuleScriptJob"
    // InternalGitHubActionsParser.g:664:1: entryRuleScriptJob returns [EObject current=null] : iv_ruleScriptJob= ruleScriptJob EOF ;
    public final EObject entryRuleScriptJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScriptJob = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getScriptJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:668:2: (iv_ruleScriptJob= ruleScriptJob EOF )
            // InternalGitHubActionsParser.g:669:2: iv_ruleScriptJob= ruleScriptJob EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptJobRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptJob=ruleScriptJob();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptJob; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleScriptJob"


    // $ANTLR start "ruleScriptJob"
    // InternalGitHubActionsParser.g:678:1: ruleScriptJob returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleScriptJob() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_11=null;
        Token this_BEGIN_12=null;
        Token this_END_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_18=null;
        Token otherlv_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token otherlv_23=null;
        Token this_NEWLINE_24=null;
        Token this_NEWLINE_25=null;
        Token this_BEGIN_26=null;
        Token otherlv_27=null;
        Token otherlv_28=null;
        Token this_NEWLINE_29=null;
        Token this_END_30=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_36=null;
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_NEWLINE_40=null;
        Token this_BEGIN_41=null;
        Token this_END_43=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_58=null;
        Token this_BEGIN_59=null;
        Token this_END_61=null;
        Token otherlv_62=null;
        Token otherlv_63=null;
        Token this_NEWLINE_64=null;
        Token this_BEGIN_65=null;
        Token this_END_67=null;
        Token otherlv_68=null;
        Token otherlv_69=null;
        Token otherlv_71=null;
        Token otherlv_72=null;
        Token this_NEWLINE_73=null;
        Token this_BEGIN_74=null;
        Token this_END_76=null;
        Token otherlv_77=null;
        Token otherlv_78=null;
        Token this_NEWLINE_80=null;
        Token otherlv_81=null;
        Token otherlv_82=null;
        Token this_NEWLINE_84=null;
        Token this_END_85=null;
        EObject lv_jobName_7_0 = null;

        EObject lv_permissions_13_0 = null;

        EObject lv_if_31_0 = null;

        EObject lv_agent_34_0 = null;

        EObject lv_stagingEnvironment_37_0 = null;

        EObject lv_concurrencyGroup_42_0 = null;

        EObject lv_environmentVariables_48_0 = null;

        EObject lv_defaults_54_0 = null;

        EObject lv_steps_60_0 = null;

        EObject lv_strategy_66_0 = null;

        EObject lv_container_70_0 = null;

        EObject lv_services_75_0 = null;

        EObject lv_continueOnError_79_0 = null;

        EObject lv_timeoutMinutes_83_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getScriptJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:687:2: ( ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:688:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:688:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:689:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:689:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:690:4: ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getScriptJobAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:693:4: ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:694:5: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:694:5: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+
            int cnt19=0;
            loop19:
            do {
                int alt19=16;
                alt19 = dfa19.predict(input);
                switch (alt19) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:695:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:695:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    // InternalGitHubActionsParser.g:696:4: {...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:696:103: ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    // InternalGitHubActionsParser.g:697:5: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:700:8: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    // InternalGitHubActionsParser.g:700:9: {...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:700:18: ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    // InternalGitHubActionsParser.g:700:19: ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    {
            	    // InternalGitHubActionsParser.g:700:19: ( (lv_name_1_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:701:9: (lv_name_1_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:701:9: (lv_name_1_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:702:10: lv_name_1_0= RULE_ID
            	    {
            	    lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_name_1_0, grammarAccess.getScriptJobAccess().getNameIDTerminalRuleCall_0_0_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getScriptJobRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"name",
            	      											lv_name_1_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getScriptJobAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_3, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_22); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:730:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    int alt10=2;
            	    int LA10_0 = input.LA(1);

            	    if ( (LA10_0==Name) ) {
            	        alt10=1;
            	    }
            	    switch (alt10) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:731:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	            {
            	            otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getScriptJobAccess().getNameKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getScriptJobAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:739:9: ( (lv_jobName_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:740:10: (lv_jobName_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:740:10: (lv_jobName_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:741:11: lv_jobName_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getScriptJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_jobName_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"jobName",
            	              												lv_jobName_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_23); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_8, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_0_4_3());
            	              								
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:769:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:769:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:770:4: {...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:770:103: ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:771:5: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:774:8: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
            	    // InternalGitHubActionsParser.g:774:9: {...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:774:18: (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
            	    // InternalGitHubActionsParser.g:774:19: otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END
            	    {
            	    otherlv_9=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getScriptJobAccess().getPermissionsKeyword_1_0());
            	      							
            	    }
            	    otherlv_10=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_10, grammarAccess.getScriptJobAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    this_NEWLINE_11=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_11, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_1_2());
            	      							
            	    }
            	    this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_14); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_12, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_1_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:790:8: ( (lv_permissions_13_0= rulePermission ) )+
            	    int cnt11=0;
            	    loop11:
            	    do {
            	        int alt11=2;
            	        int LA11_0 = input.LA(1);

            	        if ( (LA11_0==Repository_projects||LA11_0==Security_events||LA11_0==Pull_requests||LA11_0==Deployments||LA11_0==Discussions||LA11_0==Contents||LA11_0==IdToken||LA11_0==Packages||LA11_0==Statuses||LA11_0==Actions||LA11_0==Checks||LA11_0==Issues||LA11_0==Pages) ) {
            	            alt11=1;
            	        }


            	        switch (alt11) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:791:9: (lv_permissions_13_0= rulePermission )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:791:9: (lv_permissions_13_0= rulePermission )
            	    	    // InternalGitHubActionsParser.g:792:10: lv_permissions_13_0= rulePermission
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getPermissionsPermissionParserRuleCall_1_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_15);
            	    	    lv_permissions_13_0=rulePermission();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"permissions",
            	    	      											lv_permissions_13_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Permission");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt11 >= 1 ) break loop11;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(11, input);
            	                throw eee;
            	        }
            	        cnt11++;
            	    } while (true);

            	    this_END_14=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_14, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_1_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:819:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:819:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:820:4: {...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:820:103: ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:821:5: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:824:8: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:824:9: {...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:824:18: ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
            	    int alt14=3;
            	    switch ( input.LA(1) ) {
            	    case Needs:
            	        {
            	        alt14=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt14=2;
            	        }
            	        break;
            	    case RULE_NEWLINE:
            	        {
            	        alt14=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 14, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt14) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:824:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
            	            {
            	            // InternalGitHubActionsParser.g:824:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
            	            // InternalGitHubActionsParser.g:825:9: otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
            	            {
            	            otherlv_15=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_15, grammarAccess.getScriptJobAccess().getNeedsKeyword_2_0_0());
            	              								
            	            }
            	            otherlv_16=(Token)match(input,Colon,FOLLOW_16); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_16, grammarAccess.getScriptJobAccess().getColonKeyword_2_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:833:9: ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:834:10: ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE
            	            {
            	            // InternalGitHubActionsParser.g:834:10: ( (otherlv_17= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:835:11: (otherlv_17= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:835:11: (otherlv_17= RULE_ID )
            	            // InternalGitHubActionsParser.g:836:12: otherlv_17= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              												/* */
            	              											
            	            }
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElement(grammarAccess.getScriptJobRule());
            	              												}
            	              											
            	            }
            	            otherlv_17=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												newLeafNode(otherlv_17, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_0_2_0_0());
            	              											
            	            }

            	            }


            	            }

            	            this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_23); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_NEWLINE_18, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_0_2_1());
            	              									
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:857:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
            	            {
            	            // InternalGitHubActionsParser.g:857:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:858:9: otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE
            	            {
            	            otherlv_19=(Token)match(input,LeftSquareBracket,FOLLOW_16); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_19, grammarAccess.getScriptJobAccess().getLeftSquareBracketKeyword_2_1_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:862:9: ( (otherlv_20= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:863:10: (otherlv_20= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:863:10: (otherlv_20= RULE_ID )
            	            // InternalGitHubActionsParser.g:864:11: otherlv_20= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              											/* */
            	              										
            	            }
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElement(grammarAccess.getScriptJobRule());
            	              											}
            	              										
            	            }
            	            otherlv_20=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_20, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_1_1_0());
            	              										
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:878:9: (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )*
            	            loop12:
            	            do {
            	                int alt12=2;
            	                int LA12_0 = input.LA(1);

            	                if ( (LA12_0==Comma) ) {
            	                    alt12=1;
            	                }


            	                switch (alt12) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:879:10: otherlv_21= Comma ( (otherlv_22= RULE_ID ) )
            	            	    {
            	            	    otherlv_21=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_21, grammarAccess.getScriptJobAccess().getCommaKeyword_2_1_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:883:10: ( (otherlv_22= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:884:11: (otherlv_22= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:884:11: (otherlv_22= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:885:12: otherlv_22= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getScriptJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_22=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_22, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_1_2_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop12;
            	                }
            	            } while (true);

            	            otherlv_23=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_23, grammarAccess.getScriptJobAccess().getRightSquareBracketKeyword_2_1_3());
            	              								
            	            }
            	            this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_23); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_24, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_1_4());
            	              								
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:910:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:910:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
            	            // InternalGitHubActionsParser.g:911:9: this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END
            	            {
            	            this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_25, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_0());
            	              								
            	            }
            	            this_BEGIN_26=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_26, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_2_2_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:919:9: (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+
            	            int cnt13=0;
            	            loop13:
            	            do {
            	                int alt13=2;
            	                int LA13_0 = input.LA(1);

            	                if ( (LA13_0==HyphenMinus) ) {
            	                    alt13=1;
            	                }


            	                switch (alt13) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:920:10: otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE
            	            	    {
            	            	    otherlv_27=(Token)match(input,HyphenMinus,FOLLOW_16); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_27, grammarAccess.getScriptJobAccess().getHyphenMinusKeyword_2_2_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:924:10: ( (otherlv_28= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:925:11: (otherlv_28= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:925:11: (otherlv_28= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:926:12: otherlv_28= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getScriptJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_28=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_28, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_2_2_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_29=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(this_NEWLINE_29, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_2_2());
            	            	      									
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt13 >= 1 ) break loop13;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(13, input);
            	                        throw eee;
            	                }
            	                cnt13++;
            	            } while (true);

            	            this_END_30=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_30, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_2_2_3());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:956:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:956:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:957:4: {...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:957:103: ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:958:5: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:961:8: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:961:9: {...}? => ( (lv_if_31_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:961:18: ( (lv_if_31_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:961:19: (lv_if_31_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:961:19: (lv_if_31_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:962:9: lv_if_31_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getScriptJobAccess().getIfIfStatementParserRuleCall_3_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_23);
            	    lv_if_31_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_31_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:984:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:984:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:985:4: {...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:985:103: ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
            	    // InternalGitHubActionsParser.g:986:5: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:989:8: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
            	    // InternalGitHubActionsParser.g:989:9: {...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:989:18: (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
            	    // InternalGitHubActionsParser.g:989:19: otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) )
            	    {
            	    otherlv_32=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_32, grammarAccess.getScriptJobAccess().getRunsOnKeyword_4_0());
            	      							
            	    }
            	    otherlv_33=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_33, grammarAccess.getScriptJobAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:997:8: ( (lv_agent_34_0= ruleAgent ) )
            	    // InternalGitHubActionsParser.g:998:9: (lv_agent_34_0= ruleAgent )
            	    {
            	    // InternalGitHubActionsParser.g:998:9: (lv_agent_34_0= ruleAgent )
            	    // InternalGitHubActionsParser.g:999:10: lv_agent_34_0= ruleAgent
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getAgentAgentParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_23);
            	    lv_agent_34_0=ruleAgent();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"agent",
            	      											lv_agent_34_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Agent");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:1022:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1022:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1023:4: {...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:1023:103: ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1024:5: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:1027:8: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
            	    // InternalGitHubActionsParser.g:1027:9: {...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1027:18: (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
            	    // InternalGitHubActionsParser.g:1027:19: otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
            	    {
            	    otherlv_35=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_35, grammarAccess.getScriptJobAccess().getEnvironmentKeyword_5_0());
            	      							
            	    }
            	    otherlv_36=(Token)match(input,Colon,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_36, grammarAccess.getScriptJobAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1035:8: ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
            	    // InternalGitHubActionsParser.g:1036:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
            	    {
            	    // InternalGitHubActionsParser.g:1036:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
            	    // InternalGitHubActionsParser.g:1037:10: lv_stagingEnvironment_37_0= ruleStagingEnvironment
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_23);
            	    lv_stagingEnvironment_37_0=ruleStagingEnvironment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"stagingEnvironment",
            	      											lv_stagingEnvironment_37_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.StagingEnvironment");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:1060:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1060:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1061:4: {...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:1061:103: ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1062:5: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:1065:8: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1065:9: {...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1065:18: (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
            	    // InternalGitHubActionsParser.g:1065:19: otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END
            	    {
            	    otherlv_38=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_38, grammarAccess.getScriptJobAccess().getConcurrencyKeyword_6_0());
            	      							
            	    }
            	    otherlv_39=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_39, grammarAccess.getScriptJobAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    this_NEWLINE_40=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_40, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_6_2());
            	      							
            	    }
            	    this_BEGIN_41=(Token)match(input,RULE_BEGIN,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_41, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_6_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1081:8: ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) )
            	    // InternalGitHubActionsParser.g:1082:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
            	    {
            	    // InternalGitHubActionsParser.g:1082:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
            	    // InternalGitHubActionsParser.g:1083:10: lv_concurrencyGroup_42_0= ruleConcurrencyGroup
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_4_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_concurrencyGroup_42_0=ruleConcurrencyGroup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"concurrencyGroup",
            	      											lv_concurrencyGroup_42_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.ConcurrencyGroup");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_END_43=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_43, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_6_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:1110:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1110:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1111:4: {...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:1111:103: ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1112:5: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:1115:8: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1115:9: {...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1115:18: (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
            	    // InternalGitHubActionsParser.g:1115:19: otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END
            	    {
            	    otherlv_44=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_44, grammarAccess.getScriptJobAccess().getEnvKeyword_7_0());
            	      							
            	    }
            	    otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_45, grammarAccess.getScriptJobAccess().getColonKeyword_7_1());
            	      							
            	    }
            	    this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_46, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_7_2());
            	      							
            	    }
            	    this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_47, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_7_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1131:8: ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+
            	    int cnt15=0;
            	    loop15:
            	    do {
            	        int alt15=2;
            	        int LA15_0 = input.LA(1);

            	        if ( (LA15_0==RULE_ID) ) {
            	            alt15=1;
            	        }


            	        switch (alt15) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1132:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1132:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:1133:10: lv_environmentVariables_48_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_environmentVariables_48_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_48_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt15 >= 1 ) break loop15;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(15, input);
            	                throw eee;
            	        }
            	        cnt15++;
            	    } while (true);

            	    this_END_49=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_49, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_7_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalGitHubActionsParser.g:1160:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1160:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1161:4: {...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalGitHubActionsParser.g:1161:103: ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1162:5: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8);
            	    // InternalGitHubActionsParser.g:1165:8: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1165:9: {...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1165:18: (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
            	    // InternalGitHubActionsParser.g:1165:19: otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END
            	    {
            	    otherlv_50=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_50, grammarAccess.getScriptJobAccess().getDefaultsKeyword_8_0());
            	      							
            	    }
            	    otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_51, grammarAccess.getScriptJobAccess().getColonKeyword_8_1());
            	      							
            	    }
            	    this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_52, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_8_2());
            	      							
            	    }
            	    this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_18); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_53, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_8_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1181:8: ( (lv_defaults_54_0= ruleDefaults ) )
            	    // InternalGitHubActionsParser.g:1182:9: (lv_defaults_54_0= ruleDefaults )
            	    {
            	    // InternalGitHubActionsParser.g:1182:9: (lv_defaults_54_0= ruleDefaults )
            	    // InternalGitHubActionsParser.g:1183:10: lv_defaults_54_0= ruleDefaults
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getDefaultsDefaultsParserRuleCall_8_4_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_defaults_54_0=ruleDefaults();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"defaults",
            	      											lv_defaults_54_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Defaults");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_END_55=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_55, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_8_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 10 :
            	    // InternalGitHubActionsParser.g:1210:3: ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1210:3: ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1211:4: {...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9)");
            	    }
            	    // InternalGitHubActionsParser.g:1211:103: ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1212:5: ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9);
            	    // InternalGitHubActionsParser.g:1215:8: ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1215:9: {...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1215:18: (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END )
            	    // InternalGitHubActionsParser.g:1215:19: otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END
            	    {
            	    otherlv_56=(Token)match(input,Steps,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_56, grammarAccess.getScriptJobAccess().getStepsKeyword_9_0());
            	      							
            	    }
            	    otherlv_57=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_57, grammarAccess.getScriptJobAccess().getColonKeyword_9_1());
            	      							
            	    }
            	    this_NEWLINE_58=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_58, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_9_2());
            	      							
            	    }
            	    this_BEGIN_59=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_59, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_9_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1231:8: ( (lv_steps_60_0= ruleStep ) )+
            	    int cnt16=0;
            	    loop16:
            	    do {
            	        int alt16=2;
            	        int LA16_0 = input.LA(1);

            	        if ( (LA16_0==HyphenMinus) ) {
            	            alt16=1;
            	        }


            	        switch (alt16) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1232:9: (lv_steps_60_0= ruleStep )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1232:9: (lv_steps_60_0= ruleStep )
            	    	    // InternalGitHubActionsParser.g:1233:10: lv_steps_60_0= ruleStep
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStepsStepParserRuleCall_9_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_12);
            	    	    lv_steps_60_0=ruleStep();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"steps",
            	    	      											lv_steps_60_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Step");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt16 >= 1 ) break loop16;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(16, input);
            	                throw eee;
            	        }
            	        cnt16++;
            	    } while (true);

            	    this_END_61=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_61, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_9_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 11 :
            	    // InternalGitHubActionsParser.g:1260:3: ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1260:3: ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1261:4: {...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10)");
            	    }
            	    // InternalGitHubActionsParser.g:1261:104: ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1262:5: ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10);
            	    // InternalGitHubActionsParser.g:1265:8: ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1265:9: {...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1265:18: (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END )
            	    // InternalGitHubActionsParser.g:1265:19: otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END
            	    {
            	    otherlv_62=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_62, grammarAccess.getScriptJobAccess().getStrategyKeyword_10_0());
            	      							
            	    }
            	    otherlv_63=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_63, grammarAccess.getScriptJobAccess().getColonKeyword_10_1());
            	      							
            	    }
            	    this_NEWLINE_64=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_64, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_10_2());
            	      							
            	    }
            	    this_BEGIN_65=(Token)match(input,RULE_BEGIN,FOLLOW_26); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_65, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_10_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1281:8: ( (lv_strategy_66_0= ruleStrategy ) )
            	    // InternalGitHubActionsParser.g:1282:9: (lv_strategy_66_0= ruleStrategy )
            	    {
            	    // InternalGitHubActionsParser.g:1282:9: (lv_strategy_66_0= ruleStrategy )
            	    // InternalGitHubActionsParser.g:1283:10: lv_strategy_66_0= ruleStrategy
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStrategyStrategyParserRuleCall_10_4_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_strategy_66_0=ruleStrategy();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"strategy",
            	      											lv_strategy_66_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Strategy");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_END_67=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_67, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_10_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 12 :
            	    // InternalGitHubActionsParser.g:1310:3: ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1310:3: ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1311:4: {...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11)");
            	    }
            	    // InternalGitHubActionsParser.g:1311:104: ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1312:5: ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11);
            	    // InternalGitHubActionsParser.g:1315:8: ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) )
            	    // InternalGitHubActionsParser.g:1315:9: {...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1315:18: (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) )
            	    // InternalGitHubActionsParser.g:1315:19: otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) )
            	    {
            	    otherlv_68=(Token)match(input,Container,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_68, grammarAccess.getScriptJobAccess().getContainerKeyword_11_0());
            	      							
            	    }
            	    otherlv_69=(Token)match(input,Colon,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_69, grammarAccess.getScriptJobAccess().getColonKeyword_11_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1323:8: ( (lv_container_70_0= ruleContainer ) )
            	    // InternalGitHubActionsParser.g:1324:9: (lv_container_70_0= ruleContainer )
            	    {
            	    // InternalGitHubActionsParser.g:1324:9: (lv_container_70_0= ruleContainer )
            	    // InternalGitHubActionsParser.g:1325:10: lv_container_70_0= ruleContainer
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getContainerContainerParserRuleCall_11_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_23);
            	    lv_container_70_0=ruleContainer();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"container",
            	      											lv_container_70_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Container");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 13 :
            	    // InternalGitHubActionsParser.g:1348:3: ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1348:3: ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1349:4: {...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12)");
            	    }
            	    // InternalGitHubActionsParser.g:1349:104: ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1350:5: ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12);
            	    // InternalGitHubActionsParser.g:1353:8: ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1353:9: {...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1353:18: (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END )
            	    // InternalGitHubActionsParser.g:1353:19: otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END
            	    {
            	    otherlv_71=(Token)match(input,Services,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_71, grammarAccess.getScriptJobAccess().getServicesKeyword_12_0());
            	      							
            	    }
            	    otherlv_72=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_72, grammarAccess.getScriptJobAccess().getColonKeyword_12_1());
            	      							
            	    }
            	    this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_73, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_12_2());
            	      							
            	    }
            	    this_BEGIN_74=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_74, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_12_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1369:8: ( (lv_services_75_0= ruleService ) )+
            	    int cnt17=0;
            	    loop17:
            	    do {
            	        int alt17=2;
            	        int LA17_0 = input.LA(1);

            	        if ( (LA17_0==RULE_ID) ) {
            	            alt17=1;
            	        }


            	        switch (alt17) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1370:9: (lv_services_75_0= ruleService )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1370:9: (lv_services_75_0= ruleService )
            	    	    // InternalGitHubActionsParser.g:1371:10: lv_services_75_0= ruleService
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getServicesServiceParserRuleCall_12_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_services_75_0=ruleService();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"services",
            	    	      											lv_services_75_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Service");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt17 >= 1 ) break loop17;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(17, input);
            	                throw eee;
            	        }
            	        cnt17++;
            	    } while (true);

            	    this_END_76=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_76, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_12_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 14 :
            	    // InternalGitHubActionsParser.g:1398:3: ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1398:3: ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:1399:4: {...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13)");
            	    }
            	    // InternalGitHubActionsParser.g:1399:104: ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:1400:5: ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13);
            	    // InternalGitHubActionsParser.g:1403:8: ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:1403:9: {...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1403:18: (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:1403:19: otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE
            	    {
            	    otherlv_77=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_77, grammarAccess.getScriptJobAccess().getContinueOnErrorKeyword_13_0());
            	      							
            	    }
            	    otherlv_78=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_78, grammarAccess.getScriptJobAccess().getColonKeyword_13_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1411:8: ( (lv_continueOnError_79_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:1412:9: (lv_continueOnError_79_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:1412:9: (lv_continueOnError_79_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:1413:10: lv_continueOnError_79_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getContinueOnErrorExpressionParserRuleCall_13_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_continueOnError_79_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_79_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_80=(Token)match(input,RULE_NEWLINE,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_80, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_13_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 15 :
            	    // InternalGitHubActionsParser.g:1440:3: ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1440:3: ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1441:4: {...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14)");
            	    }
            	    // InternalGitHubActionsParser.g:1441:104: ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1442:5: ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14);
            	    // InternalGitHubActionsParser.g:1445:8: ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1445:9: {...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1445:18: ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END )
            	    // InternalGitHubActionsParser.g:1445:19: (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:1445:19: (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )?
            	    int alt18=2;
            	    int LA18_0 = input.LA(1);

            	    if ( (LA18_0==TimeoutMinutes) ) {
            	        alt18=1;
            	    }
            	    switch (alt18) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:1446:9: otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE
            	            {
            	            otherlv_81=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_81, grammarAccess.getScriptJobAccess().getTimeoutMinutesKeyword_14_0_0());
            	              								
            	            }
            	            otherlv_82=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_82, grammarAccess.getScriptJobAccess().getColonKeyword_14_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1454:9: ( (lv_timeoutMinutes_83_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:1455:10: (lv_timeoutMinutes_83_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:1455:10: (lv_timeoutMinutes_83_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:1456:11: lv_timeoutMinutes_83_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getScriptJobAccess().getTimeoutMinutesExpressionParserRuleCall_14_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_timeoutMinutes_83_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_83_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_84=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_84, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_14_0_3());
            	              								
            	            }

            	            }
            	            break;

            	    }

            	    this_END_85=(Token)match(input,RULE_END,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_85, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt19 >= 1 ) break loop19;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(19, input);
                        throw eee;
                }
                cnt19++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleScriptJob"


    // $ANTLR start "entryRuleReuseWorkflowJob"
    // InternalGitHubActionsParser.g:1502:1: entryRuleReuseWorkflowJob returns [EObject current=null] : iv_ruleReuseWorkflowJob= ruleReuseWorkflowJob EOF ;
    public final EObject entryRuleReuseWorkflowJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReuseWorkflowJob = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:1506:2: (iv_ruleReuseWorkflowJob= ruleReuseWorkflowJob EOF )
            // InternalGitHubActionsParser.g:1507:2: iv_ruleReuseWorkflowJob= ruleReuseWorkflowJob EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReuseWorkflowJobRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReuseWorkflowJob=ruleReuseWorkflowJob();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReuseWorkflowJob; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleReuseWorkflowJob"


    // $ANTLR start "ruleReuseWorkflowJob"
    // InternalGitHubActionsParser.g:1516:1: ruleReuseWorkflowJob returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleReuseWorkflowJob() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_11=null;
        Token this_BEGIN_12=null;
        Token this_END_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_18=null;
        Token otherlv_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token otherlv_23=null;
        Token this_NEWLINE_24=null;
        Token this_NEWLINE_25=null;
        Token this_BEGIN_26=null;
        Token otherlv_27=null;
        Token otherlv_28=null;
        Token this_NEWLINE_29=null;
        Token this_END_30=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_36=null;
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_NEWLINE_40=null;
        Token this_BEGIN_41=null;
        Token this_END_43=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_58=null;
        Token this_BEGIN_59=null;
        Token this_END_61=null;
        Token otherlv_62=null;
        Token otherlv_63=null;
        Token otherlv_65=null;
        Token otherlv_66=null;
        Token this_NEWLINE_67=null;
        Token this_BEGIN_68=null;
        Token this_END_70=null;
        Token otherlv_71=null;
        Token otherlv_72=null;
        Token this_NEWLINE_74=null;
        Token otherlv_75=null;
        Token otherlv_76=null;
        Token this_NEWLINE_77=null;
        Token this_BEGIN_78=null;
        Token this_END_80=null;
        Token otherlv_81=null;
        Token otherlv_82=null;
        Token lv_inheritSecrets_83_0=null;
        Token this_NEWLINE_84=null;
        Token this_NEWLINE_85=null;
        Token this_BEGIN_86=null;
        Token this_END_88=null;
        Token otherlv_89=null;
        Token otherlv_90=null;
        Token this_NEWLINE_92=null;
        Token otherlv_93=null;
        Token otherlv_94=null;
        Token this_NEWLINE_96=null;
        Token this_END_97=null;
        EObject lv_jobName_7_0 = null;

        EObject lv_permissions_13_0 = null;

        EObject lv_if_31_0 = null;

        EObject lv_agent_34_0 = null;

        EObject lv_stagingEnvironment_37_0 = null;

        EObject lv_concurrencyGroup_42_0 = null;

        EObject lv_environmentVariables_48_0 = null;

        EObject lv_defaults_54_0 = null;

        EObject lv_strategy_60_0 = null;

        EObject lv_container_64_0 = null;

        EObject lv_services_69_0 = null;

        EObject lv_workflowPath_73_0 = null;

        EObject lv_args_79_0 = null;

        EObject lv_secrets_87_0 = null;

        EObject lv_continueOnError_91_0 = null;

        EObject lv_timeoutMinutes_95_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:1525:2: ( ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:1526:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:1526:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:1527:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:1527:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:1528:4: ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:1531:4: ( ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:1532:5: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:1532:5: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+
            int cnt31=0;
            loop31:
            do {
                int alt31=18;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:1533:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1533:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    // InternalGitHubActionsParser.g:1534:4: {...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:1534:110: ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    // InternalGitHubActionsParser.g:1535:5: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:1538:8: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    // InternalGitHubActionsParser.g:1538:9: {...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1538:18: ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    // InternalGitHubActionsParser.g:1538:19: ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    {
            	    // InternalGitHubActionsParser.g:1538:19: ( (lv_name_1_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:1539:9: (lv_name_1_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:1539:9: (lv_name_1_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:1540:10: lv_name_1_0= RULE_ID
            	    {
            	    lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_name_1_0, grammarAccess.getReuseWorkflowJobAccess().getNameIDTerminalRuleCall_0_0_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"name",
            	      											lv_name_1_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_3, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1568:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    int alt20=2;
            	    int LA20_0 = input.LA(1);

            	    if ( (LA20_0==Name) ) {
            	        alt20=1;
            	    }
            	    switch (alt20) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:1569:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	            {
            	            otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getReuseWorkflowJobAccess().getNameKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1577:9: ( (lv_jobName_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:1578:10: (lv_jobName_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:1578:10: (lv_jobName_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:1579:11: lv_jobName_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_jobName_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"jobName",
            	              												lv_jobName_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_29); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_8, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_0_4_3());
            	              								
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:1607:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1607:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1608:4: {...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:1608:110: ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1609:5: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:1612:8: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1612:9: {...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1612:18: (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
            	    // InternalGitHubActionsParser.g:1612:19: otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END
            	    {
            	    otherlv_9=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getReuseWorkflowJobAccess().getPermissionsKeyword_1_0());
            	      							
            	    }
            	    otherlv_10=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_10, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    this_NEWLINE_11=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_11, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_1_2());
            	      							
            	    }
            	    this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_14); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_12, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_1_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1628:8: ( (lv_permissions_13_0= rulePermission ) )+
            	    int cnt21=0;
            	    loop21:
            	    do {
            	        int alt21=2;
            	        int LA21_0 = input.LA(1);

            	        if ( (LA21_0==Repository_projects||LA21_0==Security_events||LA21_0==Pull_requests||LA21_0==Deployments||LA21_0==Discussions||LA21_0==Contents||LA21_0==IdToken||LA21_0==Packages||LA21_0==Statuses||LA21_0==Actions||LA21_0==Checks||LA21_0==Issues||LA21_0==Pages) ) {
            	            alt21=1;
            	        }


            	        switch (alt21) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1629:9: (lv_permissions_13_0= rulePermission )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1629:9: (lv_permissions_13_0= rulePermission )
            	    	    // InternalGitHubActionsParser.g:1630:10: lv_permissions_13_0= rulePermission
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getPermissionsPermissionParserRuleCall_1_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_15);
            	    	    lv_permissions_13_0=rulePermission();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"permissions",
            	    	      											lv_permissions_13_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Permission");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt21 >= 1 ) break loop21;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(21, input);
            	                throw eee;
            	        }
            	        cnt21++;
            	    } while (true);

            	    this_END_14=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_14, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_1_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:1657:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1657:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1658:4: {...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:1658:110: ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1659:5: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:1662:8: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1662:9: {...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1662:18: ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
            	    int alt24=3;
            	    switch ( input.LA(1) ) {
            	    case Needs:
            	        {
            	        alt24=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt24=2;
            	        }
            	        break;
            	    case RULE_NEWLINE:
            	        {
            	        alt24=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 24, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt24) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:1662:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
            	            {
            	            // InternalGitHubActionsParser.g:1662:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
            	            // InternalGitHubActionsParser.g:1663:9: otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
            	            {
            	            otherlv_15=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_15, grammarAccess.getReuseWorkflowJobAccess().getNeedsKeyword_2_0_0());
            	              								
            	            }
            	            otherlv_16=(Token)match(input,Colon,FOLLOW_16); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_16, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_2_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1671:9: ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:1672:10: ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE
            	            {
            	            // InternalGitHubActionsParser.g:1672:10: ( (otherlv_17= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:1673:11: (otherlv_17= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:1673:11: (otherlv_17= RULE_ID )
            	            // InternalGitHubActionsParser.g:1674:12: otherlv_17= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              												/* */
            	              											
            	            }
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	              												}
            	              											
            	            }
            	            otherlv_17=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												newLeafNode(otherlv_17, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_0_2_0_0());
            	              											
            	            }

            	            }


            	            }

            	            this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_29); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_NEWLINE_18, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_0_2_1());
            	              									
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:1695:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
            	            {
            	            // InternalGitHubActionsParser.g:1695:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:1696:9: otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE
            	            {
            	            otherlv_19=(Token)match(input,LeftSquareBracket,FOLLOW_16); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_19, grammarAccess.getReuseWorkflowJobAccess().getLeftSquareBracketKeyword_2_1_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1700:9: ( (otherlv_20= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:1701:10: (otherlv_20= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:1701:10: (otherlv_20= RULE_ID )
            	            // InternalGitHubActionsParser.g:1702:11: otherlv_20= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              											/* */
            	              										
            	            }
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              										
            	            }
            	            otherlv_20=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_20, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_1_1_0());
            	              										
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:1716:9: (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )*
            	            loop22:
            	            do {
            	                int alt22=2;
            	                int LA22_0 = input.LA(1);

            	                if ( (LA22_0==Comma) ) {
            	                    alt22=1;
            	                }


            	                switch (alt22) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:1717:10: otherlv_21= Comma ( (otherlv_22= RULE_ID ) )
            	            	    {
            	            	    otherlv_21=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_21, grammarAccess.getReuseWorkflowJobAccess().getCommaKeyword_2_1_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:1721:10: ( (otherlv_22= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:1722:11: (otherlv_22= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:1722:11: (otherlv_22= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:1723:12: otherlv_22= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_22=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_22, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_1_2_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop22;
            	                }
            	            } while (true);

            	            otherlv_23=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_23, grammarAccess.getReuseWorkflowJobAccess().getRightSquareBracketKeyword_2_1_3());
            	              								
            	            }
            	            this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_29); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_24, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_1_4());
            	              								
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:1748:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:1748:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
            	            // InternalGitHubActionsParser.g:1749:9: this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END
            	            {
            	            this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_25, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_0());
            	              								
            	            }
            	            this_BEGIN_26=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_26, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_2_2_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1757:9: (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+
            	            int cnt23=0;
            	            loop23:
            	            do {
            	                int alt23=2;
            	                int LA23_0 = input.LA(1);

            	                if ( (LA23_0==HyphenMinus) ) {
            	                    alt23=1;
            	                }


            	                switch (alt23) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:1758:10: otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE
            	            	    {
            	            	    otherlv_27=(Token)match(input,HyphenMinus,FOLLOW_16); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_27, grammarAccess.getReuseWorkflowJobAccess().getHyphenMinusKeyword_2_2_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:1762:10: ( (otherlv_28= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:1763:11: (otherlv_28= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:1763:11: (otherlv_28= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:1764:12: otherlv_28= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_28=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_28, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_2_2_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_29=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(this_NEWLINE_29, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_2_2());
            	            	      									
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt23 >= 1 ) break loop23;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(23, input);
            	                        throw eee;
            	                }
            	                cnt23++;
            	            } while (true);

            	            this_END_30=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_30, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_2_2_3());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:1794:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1794:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1795:4: {...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:1795:110: ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:1796:5: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:1799:8: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:1799:9: {...}? => ( (lv_if_31_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1799:18: ( (lv_if_31_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:1799:19: (lv_if_31_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:1799:19: (lv_if_31_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:1800:9: lv_if_31_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getIfIfStatementParserRuleCall_3_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_if_31_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_31_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:1822:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1822:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1823:4: {...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:1823:110: ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1824:5: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:1827:8: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
            	    // InternalGitHubActionsParser.g:1827:9: {...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1827:18: (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
            	    // InternalGitHubActionsParser.g:1827:19: otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) )
            	    {
            	    otherlv_32=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_32, grammarAccess.getReuseWorkflowJobAccess().getRunsOnKeyword_4_0());
            	      							
            	    }
            	    otherlv_33=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_33, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1835:8: ( (lv_agent_34_0= ruleAgent ) )
            	    // InternalGitHubActionsParser.g:1836:9: (lv_agent_34_0= ruleAgent )
            	    {
            	    // InternalGitHubActionsParser.g:1836:9: (lv_agent_34_0= ruleAgent )
            	    // InternalGitHubActionsParser.g:1837:10: lv_agent_34_0= ruleAgent
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getAgentAgentParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_agent_34_0=ruleAgent();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"agent",
            	      											lv_agent_34_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Agent");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:1860:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1860:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1861:4: {...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:1861:110: ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1862:5: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:1865:8: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
            	    // InternalGitHubActionsParser.g:1865:9: {...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1865:18: (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
            	    // InternalGitHubActionsParser.g:1865:19: otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
            	    {
            	    otherlv_35=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_35, grammarAccess.getReuseWorkflowJobAccess().getEnvironmentKeyword_5_0());
            	      							
            	    }
            	    otherlv_36=(Token)match(input,Colon,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_36, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1873:8: ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
            	    // InternalGitHubActionsParser.g:1874:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
            	    {
            	    // InternalGitHubActionsParser.g:1874:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
            	    // InternalGitHubActionsParser.g:1875:10: lv_stagingEnvironment_37_0= ruleStagingEnvironment
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_stagingEnvironment_37_0=ruleStagingEnvironment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"stagingEnvironment",
            	      											lv_stagingEnvironment_37_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.StagingEnvironment");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:1898:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1898:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1899:4: {...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:1899:110: ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1900:5: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:1903:8: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1903:9: {...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1903:18: (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
            	    // InternalGitHubActionsParser.g:1903:19: otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END
            	    {
            	    otherlv_38=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_38, grammarAccess.getReuseWorkflowJobAccess().getConcurrencyKeyword_6_0());
            	      							
            	    }
            	    otherlv_39=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_39, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    this_NEWLINE_40=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_40, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_6_2());
            	      							
            	    }
            	    this_BEGIN_41=(Token)match(input,RULE_BEGIN,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_41, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_6_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1919:8: ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) )
            	    // InternalGitHubActionsParser.g:1920:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
            	    {
            	    // InternalGitHubActionsParser.g:1920:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
            	    // InternalGitHubActionsParser.g:1921:10: lv_concurrencyGroup_42_0= ruleConcurrencyGroup
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_4_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_concurrencyGroup_42_0=ruleConcurrencyGroup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"concurrencyGroup",
            	      											lv_concurrencyGroup_42_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.ConcurrencyGroup");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_END_43=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_43, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_6_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:1948:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1948:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1949:4: {...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:1949:110: ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1950:5: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:1953:8: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1953:9: {...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1953:18: (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
            	    // InternalGitHubActionsParser.g:1953:19: otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END
            	    {
            	    otherlv_44=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_44, grammarAccess.getReuseWorkflowJobAccess().getEnvKeyword_7_0());
            	      							
            	    }
            	    otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_45, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_7_1());
            	      							
            	    }
            	    this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_46, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_7_2());
            	      							
            	    }
            	    this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_47, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_7_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1969:8: ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+
            	    int cnt25=0;
            	    loop25:
            	    do {
            	        int alt25=2;
            	        int LA25_0 = input.LA(1);

            	        if ( (LA25_0==RULE_ID) ) {
            	            alt25=1;
            	        }


            	        switch (alt25) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1970:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1970:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:1971:10: lv_environmentVariables_48_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_environmentVariables_48_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_48_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt25 >= 1 ) break loop25;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(25, input);
            	                throw eee;
            	        }
            	        cnt25++;
            	    } while (true);

            	    this_END_49=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_49, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_7_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalGitHubActionsParser.g:1998:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1998:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1999:4: {...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalGitHubActionsParser.g:1999:110: ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:2000:5: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8);
            	    // InternalGitHubActionsParser.g:2003:8: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
            	    // InternalGitHubActionsParser.g:2003:9: {...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2003:18: (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
            	    // InternalGitHubActionsParser.g:2003:19: otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END
            	    {
            	    otherlv_50=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_50, grammarAccess.getReuseWorkflowJobAccess().getDefaultsKeyword_8_0());
            	      							
            	    }
            	    otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_51, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_8_1());
            	      							
            	    }
            	    this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_52, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_8_2());
            	      							
            	    }
            	    this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_18); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_53, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_8_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2019:8: ( (lv_defaults_54_0= ruleDefaults ) )
            	    // InternalGitHubActionsParser.g:2020:9: (lv_defaults_54_0= ruleDefaults )
            	    {
            	    // InternalGitHubActionsParser.g:2020:9: (lv_defaults_54_0= ruleDefaults )
            	    // InternalGitHubActionsParser.g:2021:10: lv_defaults_54_0= ruleDefaults
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getDefaultsDefaultsParserRuleCall_8_4_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_defaults_54_0=ruleDefaults();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"defaults",
            	      											lv_defaults_54_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Defaults");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_END_55=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_55, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_8_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 10 :
            	    // InternalGitHubActionsParser.g:2048:3: ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2048:3: ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:2049:4: {...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9)");
            	    }
            	    // InternalGitHubActionsParser.g:2049:110: ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:2050:5: ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9);
            	    // InternalGitHubActionsParser.g:2053:8: ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) )
            	    // InternalGitHubActionsParser.g:2053:9: {...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2053:18: (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END )
            	    // InternalGitHubActionsParser.g:2053:19: otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END
            	    {
            	    otherlv_56=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_56, grammarAccess.getReuseWorkflowJobAccess().getStrategyKeyword_9_0());
            	      							
            	    }
            	    otherlv_57=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_57, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_9_1());
            	      							
            	    }
            	    this_NEWLINE_58=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_58, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_9_2());
            	      							
            	    }
            	    this_BEGIN_59=(Token)match(input,RULE_BEGIN,FOLLOW_26); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_59, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_9_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2069:8: ( (lv_strategy_60_0= ruleStrategy ) )
            	    // InternalGitHubActionsParser.g:2070:9: (lv_strategy_60_0= ruleStrategy )
            	    {
            	    // InternalGitHubActionsParser.g:2070:9: (lv_strategy_60_0= ruleStrategy )
            	    // InternalGitHubActionsParser.g:2071:10: lv_strategy_60_0= ruleStrategy
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStrategyStrategyParserRuleCall_9_4_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_strategy_60_0=ruleStrategy();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"strategy",
            	      											lv_strategy_60_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Strategy");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_END_61=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_61, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_9_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 11 :
            	    // InternalGitHubActionsParser.g:2098:3: ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2098:3: ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2099:4: {...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10)");
            	    }
            	    // InternalGitHubActionsParser.g:2099:111: ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2100:5: ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10);
            	    // InternalGitHubActionsParser.g:2103:8: ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) )
            	    // InternalGitHubActionsParser.g:2103:9: {...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2103:18: (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) )
            	    // InternalGitHubActionsParser.g:2103:19: otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) )
            	    {
            	    otherlv_62=(Token)match(input,Container,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_62, grammarAccess.getReuseWorkflowJobAccess().getContainerKeyword_10_0());
            	      							
            	    }
            	    otherlv_63=(Token)match(input,Colon,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_63, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_10_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2111:8: ( (lv_container_64_0= ruleContainer ) )
            	    // InternalGitHubActionsParser.g:2112:9: (lv_container_64_0= ruleContainer )
            	    {
            	    // InternalGitHubActionsParser.g:2112:9: (lv_container_64_0= ruleContainer )
            	    // InternalGitHubActionsParser.g:2113:10: lv_container_64_0= ruleContainer
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContainerContainerParserRuleCall_10_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_29);
            	    lv_container_64_0=ruleContainer();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"container",
            	      											lv_container_64_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Container");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 12 :
            	    // InternalGitHubActionsParser.g:2136:3: ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2136:3: ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:2137:4: {...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11)");
            	    }
            	    // InternalGitHubActionsParser.g:2137:111: ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:2138:5: ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11);
            	    // InternalGitHubActionsParser.g:2141:8: ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) )
            	    // InternalGitHubActionsParser.g:2141:9: {...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2141:18: (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END )
            	    // InternalGitHubActionsParser.g:2141:19: otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END
            	    {
            	    otherlv_65=(Token)match(input,Services,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_65, grammarAccess.getReuseWorkflowJobAccess().getServicesKeyword_11_0());
            	      							
            	    }
            	    otherlv_66=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_66, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_11_1());
            	      							
            	    }
            	    this_NEWLINE_67=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_67, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_11_2());
            	      							
            	    }
            	    this_BEGIN_68=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_68, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_11_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2157:8: ( (lv_services_69_0= ruleService ) )+
            	    int cnt26=0;
            	    loop26:
            	    do {
            	        int alt26=2;
            	        int LA26_0 = input.LA(1);

            	        if ( (LA26_0==RULE_ID) ) {
            	            alt26=1;
            	        }


            	        switch (alt26) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:2158:9: (lv_services_69_0= ruleService )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:2158:9: (lv_services_69_0= ruleService )
            	    	    // InternalGitHubActionsParser.g:2159:10: lv_services_69_0= ruleService
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getServicesServiceParserRuleCall_11_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_services_69_0=ruleService();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"services",
            	    	      											lv_services_69_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Service");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt26 >= 1 ) break loop26;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(26, input);
            	                throw eee;
            	        }
            	        cnt26++;
            	    } while (true);

            	    this_END_70=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_70, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_11_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 13 :
            	    // InternalGitHubActionsParser.g:2186:3: ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2186:3: ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:2187:4: {...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12)");
            	    }
            	    // InternalGitHubActionsParser.g:2187:111: ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:2188:5: ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12);
            	    // InternalGitHubActionsParser.g:2191:8: ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:2191:9: {...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2191:18: (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:2191:19: otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE
            	    {
            	    otherlv_71=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_71, grammarAccess.getReuseWorkflowJobAccess().getUsesKeyword_12_0());
            	      							
            	    }
            	    otherlv_72=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_72, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_12_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2199:8: ( (lv_workflowPath_73_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2200:9: (lv_workflowPath_73_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2200:9: (lv_workflowPath_73_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2201:10: lv_workflowPath_73_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getWorkflowPathExpressionParserRuleCall_12_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_workflowPath_73_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"workflowPath",
            	      											lv_workflowPath_73_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_74=(Token)match(input,RULE_NEWLINE,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_74, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_12_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 14 :
            	    // InternalGitHubActionsParser.g:2228:3: ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2228:3: ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:2229:4: {...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13)");
            	    }
            	    // InternalGitHubActionsParser.g:2229:111: ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:2230:5: ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13);
            	    // InternalGitHubActionsParser.g:2233:8: ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) )
            	    // InternalGitHubActionsParser.g:2233:9: {...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2233:18: (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END )
            	    // InternalGitHubActionsParser.g:2233:19: otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END
            	    {
            	    otherlv_75=(Token)match(input,With,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_75, grammarAccess.getReuseWorkflowJobAccess().getWithKeyword_13_0());
            	      							
            	    }
            	    otherlv_76=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_76, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_13_1());
            	      							
            	    }
            	    this_NEWLINE_77=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_77, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_13_2());
            	      							
            	    }
            	    this_BEGIN_78=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_78, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_13_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2249:8: ( (lv_args_79_0= ruleVariableAssignment ) )+
            	    int cnt27=0;
            	    loop27:
            	    do {
            	        int alt27=2;
            	        int LA27_0 = input.LA(1);

            	        if ( (LA27_0==RULE_ID) ) {
            	            alt27=1;
            	        }


            	        switch (alt27) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:2250:9: (lv_args_79_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:2250:9: (lv_args_79_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:2251:10: lv_args_79_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getArgsVariableAssignmentParserRuleCall_13_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_args_79_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"args",
            	    	      											lv_args_79_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt27 >= 1 ) break loop27;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(27, input);
            	                throw eee;
            	        }
            	        cnt27++;
            	    } while (true);

            	    this_END_80=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_80, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_13_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 15 :
            	    // InternalGitHubActionsParser.g:2278:3: ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2278:3: ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2279:4: {...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14)");
            	    }
            	    // InternalGitHubActionsParser.g:2279:111: ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2280:5: ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14);
            	    // InternalGitHubActionsParser.g:2283:8: ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:2283:9: {...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2283:18: (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:2283:19: otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) )
            	    {
            	    otherlv_81=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_81, grammarAccess.getReuseWorkflowJobAccess().getSecretsKeyword_14_0());
            	      							
            	    }
            	    otherlv_82=(Token)match(input,Colon,FOLLOW_30); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_82, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_14_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2291:8: ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) )
            	    int alt29=2;
            	    int LA29_0 = input.LA(1);

            	    if ( (LA29_0==Inherit) ) {
            	        alt29=1;
            	    }
            	    else if ( (LA29_0==RULE_NEWLINE) ) {
            	        alt29=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 29, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt29) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:2292:9: ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE )
            	            {
            	            // InternalGitHubActionsParser.g:2292:9: ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:2293:10: ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE
            	            {
            	            // InternalGitHubActionsParser.g:2293:10: ( (lv_inheritSecrets_83_0= Inherit ) )
            	            // InternalGitHubActionsParser.g:2294:11: (lv_inheritSecrets_83_0= Inherit )
            	            {
            	            // InternalGitHubActionsParser.g:2294:11: (lv_inheritSecrets_83_0= Inherit )
            	            // InternalGitHubActionsParser.g:2295:12: lv_inheritSecrets_83_0= Inherit
            	            {
            	            lv_inheritSecrets_83_0=(Token)match(input,Inherit,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												newLeafNode(lv_inheritSecrets_83_0, grammarAccess.getReuseWorkflowJobAccess().getInheritSecretsInheritKeyword_14_2_0_0_0());
            	              											
            	            }
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	              												}
            	              												setWithLastConsumed(current, "inheritSecrets", lv_inheritSecrets_83_0 != null, "inherit");
            	              											
            	            }

            	            }


            	            }

            	            this_NEWLINE_84=(Token)match(input,RULE_NEWLINE,FOLLOW_29); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_NEWLINE_84, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_0_1());
            	              									
            	            }

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:2313:9: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:2313:9: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END )
            	            // InternalGitHubActionsParser.g:2314:10: this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END
            	            {
            	            this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_NEWLINE_85, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_1_0());
            	              									
            	            }
            	            this_BEGIN_86=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_BEGIN_86, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_14_2_1_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:2322:10: ( (lv_secrets_87_0= ruleVariableAssignment ) )+
            	            int cnt28=0;
            	            loop28:
            	            do {
            	                int alt28=2;
            	                int LA28_0 = input.LA(1);

            	                if ( (LA28_0==RULE_ID) ) {
            	                    alt28=1;
            	                }


            	                switch (alt28) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:2323:11: (lv_secrets_87_0= ruleVariableAssignment )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:2323:11: (lv_secrets_87_0= ruleVariableAssignment )
            	            	    // InternalGitHubActionsParser.g:2324:12: lv_secrets_87_0= ruleVariableAssignment
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getSecretsVariableAssignmentParserRuleCall_14_2_1_2_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_17);
            	            	    lv_secrets_87_0=ruleVariableAssignment();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"secrets",
            	            	      													lv_secrets_87_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt28 >= 1 ) break loop28;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(28, input);
            	                        throw eee;
            	                }
            	                cnt28++;
            	            } while (true);

            	            this_END_88=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_END_88, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_14_2_1_3());
            	              									
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 16 :
            	    // InternalGitHubActionsParser.g:2353:3: ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2353:3: ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:2354:4: {...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15)");
            	    }
            	    // InternalGitHubActionsParser.g:2354:111: ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:2355:5: ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15);
            	    // InternalGitHubActionsParser.g:2358:8: ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:2358:9: {...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2358:18: (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:2358:19: otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE
            	    {
            	    otherlv_89=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_89, grammarAccess.getReuseWorkflowJobAccess().getContinueOnErrorKeyword_15_0());
            	      							
            	    }
            	    otherlv_90=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_90, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_15_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2366:8: ( (lv_continueOnError_91_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2367:9: (lv_continueOnError_91_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2367:9: (lv_continueOnError_91_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2368:10: lv_continueOnError_91_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContinueOnErrorExpressionParserRuleCall_15_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_continueOnError_91_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_91_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_92=(Token)match(input,RULE_NEWLINE,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_92, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_15_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 17 :
            	    // InternalGitHubActionsParser.g:2395:3: ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2395:3: ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:2396:4: {...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16)");
            	    }
            	    // InternalGitHubActionsParser.g:2396:111: ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:2397:5: ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16);
            	    // InternalGitHubActionsParser.g:2400:8: ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) )
            	    // InternalGitHubActionsParser.g:2400:9: {...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2400:18: ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END )
            	    // InternalGitHubActionsParser.g:2400:19: (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:2400:19: (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )?
            	    int alt30=2;
            	    int LA30_0 = input.LA(1);

            	    if ( (LA30_0==TimeoutMinutes) ) {
            	        alt30=1;
            	    }
            	    switch (alt30) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:2401:9: otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE
            	            {
            	            otherlv_93=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_93, grammarAccess.getReuseWorkflowJobAccess().getTimeoutMinutesKeyword_16_0_0());
            	              								
            	            }
            	            otherlv_94=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_94, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_16_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:2409:9: ( (lv_timeoutMinutes_95_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:2410:10: (lv_timeoutMinutes_95_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:2410:10: (lv_timeoutMinutes_95_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:2411:11: lv_timeoutMinutes_95_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getTimeoutMinutesExpressionParserRuleCall_16_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_timeoutMinutes_95_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_95_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_96=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_96, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_16_0_3());
            	              								
            	            }

            	            }
            	            break;

            	    }

            	    this_END_97=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_97, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt31 >= 1 ) break loop31;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(31, input);
                        throw eee;
                }
                cnt31++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleReuseWorkflowJob"


    // $ANTLR start "entryRuleAgent"
    // InternalGitHubActionsParser.g:2457:1: entryRuleAgent returns [EObject current=null] : iv_ruleAgent= ruleAgent EOF ;
    public final EObject entryRuleAgent() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAgent = null;


        try {
            // InternalGitHubActionsParser.g:2457:46: (iv_ruleAgent= ruleAgent EOF )
            // InternalGitHubActionsParser.g:2458:2: iv_ruleAgent= ruleAgent EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAgentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAgent=ruleAgent();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAgent; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAgent"


    // $ANTLR start "ruleAgent"
    // InternalGitHubActionsParser.g:2464:1: ruleAgent returns [EObject current=null] : ( ( ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE ) | (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) ) | ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END ) ) ) ;
    public final EObject ruleAgent() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token this_NEWLINE_7=null;
        Token this_NEWLINE_8=null;
        Token this_BEGIN_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token this_END_13=null;
        Token this_NEWLINE_14=null;
        Token this_BEGIN_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_19=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token this_NEWLINE_25=null;
        Token this_NEWLINE_26=null;
        Token this_BEGIN_27=null;
        Token otherlv_28=null;
        Token this_NEWLINE_30=null;
        Token this_END_31=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token this_NEWLINE_35=null;
        Token otherlv_36=null;
        Token otherlv_37=null;
        Token this_NEWLINE_39=null;
        Token otherlv_40=null;
        Token otherlv_41=null;
        Token this_NEWLINE_43=null;
        Token otherlv_44=null;
        Token otherlv_46=null;
        Token otherlv_48=null;
        Token this_NEWLINE_49=null;
        Token this_NEWLINE_50=null;
        Token this_BEGIN_51=null;
        Token otherlv_52=null;
        Token this_NEWLINE_54=null;
        Token this_END_55=null;
        Token this_END_56=null;
        EObject lv_labels_0_0 = null;

        EObject lv_labels_3_0 = null;

        EObject lv_labels_5_0 = null;

        EObject lv_labels_11_0 = null;

        EObject lv_labels_18_0 = null;

        EObject lv_labels_21_0 = null;

        EObject lv_labels_23_0 = null;

        EObject lv_labels_29_0 = null;

        EObject lv_group_34_0 = null;

        EObject lv_group_38_0 = null;

        EObject lv_labels_42_0 = null;

        EObject lv_labels_45_0 = null;

        EObject lv_labels_47_0 = null;

        EObject lv_labels_53_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:2470:2: ( ( ( ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE ) | (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) ) | ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END ) ) ) )
            // InternalGitHubActionsParser.g:2471:2: ( ( ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE ) | (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) ) | ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END ) ) )
            {
            // InternalGitHubActionsParser.g:2471:2: ( ( ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE ) | (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) ) | ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END ) ) )
            int alt43=2;
            switch ( input.LA(1) ) {
            case DollarSignLeftCurlyBracketLeftCurlyBracket:
            case LeftSquareBracket:
            case RULE_STRING:
                {
                alt43=1;
                }
                break;
            case RULE_NEWLINE:
                {
                int LA43_2 = input.LA(2);

                if ( (LA43_2==RULE_BEGIN) ) {
                    int LA43_4 = input.LA(3);

                    if ( (LA43_4==HyphenMinus) ) {
                        alt43=1;
                    }
                    else if ( (LA43_4==Labels||LA43_4==LeftSquareBracket||LA43_4==RULE_NEWLINE) ) {
                        alt43=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 43, 4, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 2, input);

                    throw nvae;
                }
                }
                break;
            case Group:
                {
                alt43=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // InternalGitHubActionsParser.g:2472:3: ( ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE ) | (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) )
                    {
                    // InternalGitHubActionsParser.g:2472:3: ( ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE ) | (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) )
                    int alt34=3;
                    switch ( input.LA(1) ) {
                    case DollarSignLeftCurlyBracketLeftCurlyBracket:
                    case RULE_STRING:
                        {
                        alt34=1;
                        }
                        break;
                    case LeftSquareBracket:
                        {
                        alt34=2;
                        }
                        break;
                    case RULE_NEWLINE:
                        {
                        alt34=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 34, 0, input);

                        throw nvae;
                    }

                    switch (alt34) {
                        case 1 :
                            // InternalGitHubActionsParser.g:2473:4: ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE )
                            {
                            // InternalGitHubActionsParser.g:2473:4: ( ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE )
                            // InternalGitHubActionsParser.g:2474:5: ( (lv_labels_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE
                            {
                            // InternalGitHubActionsParser.g:2474:5: ( (lv_labels_0_0= ruleExpression ) )
                            // InternalGitHubActionsParser.g:2475:6: (lv_labels_0_0= ruleExpression )
                            {
                            // InternalGitHubActionsParser.g:2475:6: (lv_labels_0_0= ruleExpression )
                            // InternalGitHubActionsParser.g:2476:7: lv_labels_0_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_0_0_0());
                              						
                            }
                            pushFollow(FOLLOW_5);
                            lv_labels_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAgentRule());
                              							}
                              							add(
                              								current,
                              								"labels",
                              								lv_labels_0_0,
                              								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            this_NEWLINE_1=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_NEWLINE_1, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_0_1());
                              				
                            }

                            }


                            }
                            break;
                        case 2 :
                            // InternalGitHubActionsParser.g:2499:4: (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE )
                            {
                            // InternalGitHubActionsParser.g:2499:4: (otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE )
                            // InternalGitHubActionsParser.g:2500:5: otherlv_2= LeftSquareBracket ( (lv_labels_3_0= ruleExpression ) ) (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )* otherlv_6= RightSquareBracket this_NEWLINE_7= RULE_NEWLINE
                            {
                            otherlv_2=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_2, grammarAccess.getAgentAccess().getLeftSquareBracketKeyword_0_1_0());
                              				
                            }
                            // InternalGitHubActionsParser.g:2504:5: ( (lv_labels_3_0= ruleExpression ) )
                            // InternalGitHubActionsParser.g:2505:6: (lv_labels_3_0= ruleExpression )
                            {
                            // InternalGitHubActionsParser.g:2505:6: (lv_labels_3_0= ruleExpression )
                            // InternalGitHubActionsParser.g:2506:7: lv_labels_3_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_9);
                            lv_labels_3_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAgentRule());
                              							}
                              							add(
                              								current,
                              								"labels",
                              								lv_labels_3_0,
                              								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            // InternalGitHubActionsParser.g:2523:5: (otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) ) )*
                            loop32:
                            do {
                                int alt32=2;
                                int LA32_0 = input.LA(1);

                                if ( (LA32_0==Comma) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                            	case 1 :
                            	    // InternalGitHubActionsParser.g:2524:6: otherlv_4= Comma ( (lv_labels_5_0= ruleExpression ) )
                            	    {
                            	    otherlv_4=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_4, grammarAccess.getAgentAccess().getCommaKeyword_0_1_2_0());
                            	      					
                            	    }
                            	    // InternalGitHubActionsParser.g:2528:6: ( (lv_labels_5_0= ruleExpression ) )
                            	    // InternalGitHubActionsParser.g:2529:7: (lv_labels_5_0= ruleExpression )
                            	    {
                            	    // InternalGitHubActionsParser.g:2529:7: (lv_labels_5_0= ruleExpression )
                            	    // InternalGitHubActionsParser.g:2530:8: lv_labels_5_0= ruleExpression
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_1_2_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_9);
                            	    lv_labels_5_0=ruleExpression();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAgentRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"labels",
                            	      									lv_labels_5_0,
                            	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop32;
                                }
                            } while (true);

                            otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getAgentAccess().getRightSquareBracketKeyword_0_1_3());
                              				
                            }
                            this_NEWLINE_7=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_NEWLINE_7, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_1_4());
                              				
                            }

                            }


                            }
                            break;
                        case 3 :
                            // InternalGitHubActionsParser.g:2558:4: (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END )
                            {
                            // InternalGitHubActionsParser.g:2558:4: (this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END )
                            // InternalGitHubActionsParser.g:2559:5: this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END
                            {
                            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_NEWLINE_8, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_2_0());
                              				
                            }
                            this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_BEGIN_9, grammarAccess.getAgentAccess().getBEGINTerminalRuleCall_0_2_1());
                              				
                            }
                            // InternalGitHubActionsParser.g:2567:5: (otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+
                            int cnt33=0;
                            loop33:
                            do {
                                int alt33=2;
                                int LA33_0 = input.LA(1);

                                if ( (LA33_0==HyphenMinus) ) {
                                    alt33=1;
                                }


                                switch (alt33) {
                            	case 1 :
                            	    // InternalGitHubActionsParser.g:2568:6: otherlv_10= HyphenMinus ( (lv_labels_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
                            	    {
                            	    otherlv_10=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_10, grammarAccess.getAgentAccess().getHyphenMinusKeyword_0_2_2_0());
                            	      					
                            	    }
                            	    // InternalGitHubActionsParser.g:2572:6: ( (lv_labels_11_0= ruleExpression ) )
                            	    // InternalGitHubActionsParser.g:2573:7: (lv_labels_11_0= ruleExpression )
                            	    {
                            	    // InternalGitHubActionsParser.g:2573:7: (lv_labels_11_0= ruleExpression )
                            	    // InternalGitHubActionsParser.g:2574:8: lv_labels_11_0= ruleExpression
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_2_2_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_5);
                            	    lv_labels_11_0=ruleExpression();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAgentRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"labels",
                            	      									lv_labels_11_0,
                            	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }

                            	    this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(this_NEWLINE_12, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_2_2_2());
                            	      					
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt33 >= 1 ) break loop33;
                            	    if (state.backtracking>0) {state.failed=true; return current;}
                                        EarlyExitException eee =
                                            new EarlyExitException(33, input);
                                        throw eee;
                                }
                                cnt33++;
                            } while (true);

                            this_END_13=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_END_13, grammarAccess.getAgentAccess().getENDTerminalRuleCall_0_2_3());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:2603:3: ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) ) | ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END ) )
                    {
                    // InternalGitHubActionsParser.g:2603:3: ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) ) | ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END ) )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==RULE_NEWLINE) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==Group) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // InternalGitHubActionsParser.g:2604:4: (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) )
                            {
                            // InternalGitHubActionsParser.g:2604:4: (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? ) )
                            // InternalGitHubActionsParser.g:2605:5: this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? )
                            {
                            this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_NEWLINE_14, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_0());
                              				
                            }
                            this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_31); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_BEGIN_15, grammarAccess.getAgentAccess().getBEGINTerminalRuleCall_1_0_1());
                              				
                            }
                            // InternalGitHubActionsParser.g:2613:5: ( ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )? )
                            // InternalGitHubActionsParser.g:2614:6: ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) ) (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )?
                            {
                            // InternalGitHubActionsParser.g:2614:6: ( (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) ) | (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE ) | (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END ) )
                            int alt37=3;
                            switch ( input.LA(1) ) {
                            case Labels:
                                {
                                alt37=1;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt37=2;
                                }
                                break;
                            case RULE_NEWLINE:
                                {
                                alt37=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return current;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 37, 0, input);

                                throw nvae;
                            }

                            switch (alt37) {
                                case 1 :
                                    // InternalGitHubActionsParser.g:2615:7: (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) )
                                    {
                                    // InternalGitHubActionsParser.g:2615:7: (otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE ) )
                                    // InternalGitHubActionsParser.g:2616:8: otherlv_16= Labels otherlv_17= Colon ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )
                                    {
                                    otherlv_16=(Token)match(input,Labels,FOLLOW_3); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_16, grammarAccess.getAgentAccess().getLabelsKeyword_1_0_2_0_0_0());
                                      							
                                    }
                                    otherlv_17=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_17, grammarAccess.getAgentAccess().getColonKeyword_1_0_2_0_0_1());
                                      							
                                    }
                                    // InternalGitHubActionsParser.g:2624:8: ( ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )
                                    // InternalGitHubActionsParser.g:2625:9: ( (lv_labels_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE
                                    {
                                    // InternalGitHubActionsParser.g:2625:9: ( (lv_labels_18_0= ruleExpression ) )
                                    // InternalGitHubActionsParser.g:2626:10: (lv_labels_18_0= ruleExpression )
                                    {
                                    // InternalGitHubActionsParser.g:2626:10: (lv_labels_18_0= ruleExpression )
                                    // InternalGitHubActionsParser.g:2627:11: lv_labels_18_0= ruleExpression
                                    {
                                    if ( state.backtracking==0 ) {

                                      											newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_0_2_0_0_2_0_0());
                                      										
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_labels_18_0=ruleExpression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getAgentRule());
                                      											}
                                      											add(
                                      												current,
                                      												"labels",
                                      												lv_labels_18_0,
                                      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                      											afterParserOrEnumRuleCall();
                                      										
                                    }

                                    }


                                    }

                                    this_NEWLINE_19=(Token)match(input,RULE_NEWLINE,FOLLOW_32); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(this_NEWLINE_19, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_0_2_1());
                                      								
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalGitHubActionsParser.g:2651:7: (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE )
                                    {
                                    // InternalGitHubActionsParser.g:2651:7: (otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE )
                                    // InternalGitHubActionsParser.g:2652:8: otherlv_20= LeftSquareBracket ( (lv_labels_21_0= ruleExpression ) ) (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )* otherlv_24= RightSquareBracket this_NEWLINE_25= RULE_NEWLINE
                                    {
                                    otherlv_20=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_20, grammarAccess.getAgentAccess().getLeftSquareBracketKeyword_1_0_2_0_1_0());
                                      							
                                    }
                                    // InternalGitHubActionsParser.g:2656:8: ( (lv_labels_21_0= ruleExpression ) )
                                    // InternalGitHubActionsParser.g:2657:9: (lv_labels_21_0= ruleExpression )
                                    {
                                    // InternalGitHubActionsParser.g:2657:9: (lv_labels_21_0= ruleExpression )
                                    // InternalGitHubActionsParser.g:2658:10: lv_labels_21_0= ruleExpression
                                    {
                                    if ( state.backtracking==0 ) {

                                      										newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_0_2_0_1_1_0());
                                      									
                                    }
                                    pushFollow(FOLLOW_9);
                                    lv_labels_21_0=ruleExpression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElementForParent(grammarAccess.getAgentRule());
                                      										}
                                      										add(
                                      											current,
                                      											"labels",
                                      											lv_labels_21_0,
                                      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                      										afterParserOrEnumRuleCall();
                                      									
                                    }

                                    }


                                    }

                                    // InternalGitHubActionsParser.g:2675:8: (otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) ) )*
                                    loop35:
                                    do {
                                        int alt35=2;
                                        int LA35_0 = input.LA(1);

                                        if ( (LA35_0==Comma) ) {
                                            alt35=1;
                                        }


                                        switch (alt35) {
                                    	case 1 :
                                    	    // InternalGitHubActionsParser.g:2676:9: otherlv_22= Comma ( (lv_labels_23_0= ruleExpression ) )
                                    	    {
                                    	    otherlv_22=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      									newLeafNode(otherlv_22, grammarAccess.getAgentAccess().getCommaKeyword_1_0_2_0_1_2_0());
                                    	      								
                                    	    }
                                    	    // InternalGitHubActionsParser.g:2680:9: ( (lv_labels_23_0= ruleExpression ) )
                                    	    // InternalGitHubActionsParser.g:2681:10: (lv_labels_23_0= ruleExpression )
                                    	    {
                                    	    // InternalGitHubActionsParser.g:2681:10: (lv_labels_23_0= ruleExpression )
                                    	    // InternalGitHubActionsParser.g:2682:11: lv_labels_23_0= ruleExpression
                                    	    {
                                    	    if ( state.backtracking==0 ) {

                                    	      											newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_0_2_0_1_2_1_0());
                                    	      										
                                    	    }
                                    	    pushFollow(FOLLOW_9);
                                    	    lv_labels_23_0=ruleExpression();

                                    	    state._fsp--;
                                    	    if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      											if (current==null) {
                                    	      												current = createModelElementForParent(grammarAccess.getAgentRule());
                                    	      											}
                                    	      											add(
                                    	      												current,
                                    	      												"labels",
                                    	      												lv_labels_23_0,
                                    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                    	      											afterParserOrEnumRuleCall();
                                    	      										
                                    	    }

                                    	    }


                                    	    }


                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop35;
                                        }
                                    } while (true);

                                    otherlv_24=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_24, grammarAccess.getAgentAccess().getRightSquareBracketKeyword_1_0_2_0_1_3());
                                      							
                                    }
                                    this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_32); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_NEWLINE_25, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_1_4());
                                      							
                                    }

                                    }


                                    }
                                    break;
                                case 3 :
                                    // InternalGitHubActionsParser.g:2710:7: (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END )
                                    {
                                    // InternalGitHubActionsParser.g:2710:7: (this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END )
                                    // InternalGitHubActionsParser.g:2711:8: this_NEWLINE_26= RULE_NEWLINE this_BEGIN_27= RULE_BEGIN (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+ this_END_31= RULE_END
                                    {
                                    this_NEWLINE_26=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_NEWLINE_26, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_2_0());
                                      							
                                    }
                                    this_BEGIN_27=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_BEGIN_27, grammarAccess.getAgentAccess().getBEGINTerminalRuleCall_1_0_2_0_2_1());
                                      							
                                    }
                                    // InternalGitHubActionsParser.g:2719:8: (otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE )+
                                    int cnt36=0;
                                    loop36:
                                    do {
                                        int alt36=2;
                                        int LA36_0 = input.LA(1);

                                        if ( (LA36_0==HyphenMinus) ) {
                                            alt36=1;
                                        }


                                        switch (alt36) {
                                    	case 1 :
                                    	    // InternalGitHubActionsParser.g:2720:9: otherlv_28= HyphenMinus ( (lv_labels_29_0= ruleExpression ) ) this_NEWLINE_30= RULE_NEWLINE
                                    	    {
                                    	    otherlv_28=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      									newLeafNode(otherlv_28, grammarAccess.getAgentAccess().getHyphenMinusKeyword_1_0_2_0_2_2_0());
                                    	      								
                                    	    }
                                    	    // InternalGitHubActionsParser.g:2724:9: ( (lv_labels_29_0= ruleExpression ) )
                                    	    // InternalGitHubActionsParser.g:2725:10: (lv_labels_29_0= ruleExpression )
                                    	    {
                                    	    // InternalGitHubActionsParser.g:2725:10: (lv_labels_29_0= ruleExpression )
                                    	    // InternalGitHubActionsParser.g:2726:11: lv_labels_29_0= ruleExpression
                                    	    {
                                    	    if ( state.backtracking==0 ) {

                                    	      											newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_0_2_0_2_2_1_0());
                                    	      										
                                    	    }
                                    	    pushFollow(FOLLOW_5);
                                    	    lv_labels_29_0=ruleExpression();

                                    	    state._fsp--;
                                    	    if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      											if (current==null) {
                                    	      												current = createModelElementForParent(grammarAccess.getAgentRule());
                                    	      											}
                                    	      											add(
                                    	      												current,
                                    	      												"labels",
                                    	      												lv_labels_29_0,
                                    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                    	      											afterParserOrEnumRuleCall();
                                    	      										
                                    	    }

                                    	    }


                                    	    }

                                    	    this_NEWLINE_30=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      									newLeafNode(this_NEWLINE_30, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_0_2_2_2());
                                    	      								
                                    	    }

                                    	    }
                                    	    break;

                                    	default :
                                    	    if ( cnt36 >= 1 ) break loop36;
                                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                                EarlyExitException eee =
                                                    new EarlyExitException(36, input);
                                                throw eee;
                                        }
                                        cnt36++;
                                    } while (true);

                                    this_END_31=(Token)match(input,RULE_END,FOLLOW_32); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_END_31, grammarAccess.getAgentAccess().getENDTerminalRuleCall_1_0_2_0_2_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }

                            // InternalGitHubActionsParser.g:2754:6: (otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )?
                            int alt38=2;
                            int LA38_0 = input.LA(1);

                            if ( (LA38_0==Group) ) {
                                alt38=1;
                            }
                            switch (alt38) {
                                case 1 :
                                    // InternalGitHubActionsParser.g:2755:7: otherlv_32= Group otherlv_33= Colon ( (lv_group_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE
                                    {
                                    otherlv_32=(Token)match(input,Group,FOLLOW_3); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      							newLeafNode(otherlv_32, grammarAccess.getAgentAccess().getGroupKeyword_1_0_2_1_0());
                                      						
                                    }
                                    otherlv_33=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      							newLeafNode(otherlv_33, grammarAccess.getAgentAccess().getColonKeyword_1_0_2_1_1());
                                      						
                                    }
                                    // InternalGitHubActionsParser.g:2763:7: ( (lv_group_34_0= ruleExpression ) )
                                    // InternalGitHubActionsParser.g:2764:8: (lv_group_34_0= ruleExpression )
                                    {
                                    // InternalGitHubActionsParser.g:2764:8: (lv_group_34_0= ruleExpression )
                                    // InternalGitHubActionsParser.g:2765:9: lv_group_34_0= ruleExpression
                                    {
                                    if ( state.backtracking==0 ) {

                                      									newCompositeNode(grammarAccess.getAgentAccess().getGroupExpressionParserRuleCall_1_0_2_1_2_0());
                                      								
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_group_34_0=ruleExpression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									if (current==null) {
                                      										current = createModelElementForParent(grammarAccess.getAgentRule());
                                      									}
                                      									set(
                                      										current,
                                      										"group",
                                      										lv_group_34_0,
                                      										"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                      									afterParserOrEnumRuleCall();
                                      								
                                    }

                                    }


                                    }

                                    this_NEWLINE_35=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      							newLeafNode(this_NEWLINE_35, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_0_2_1_3());
                                      						
                                    }

                                    }
                                    break;

                            }


                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalGitHubActionsParser.g:2790:4: ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END )
                            {
                            // InternalGitHubActionsParser.g:2790:4: ( ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END )
                            // InternalGitHubActionsParser.g:2791:5: ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? ) this_END_56= RULE_END
                            {
                            // InternalGitHubActionsParser.g:2791:5: ( (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )? )
                            // InternalGitHubActionsParser.g:2792:6: (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE ) ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )?
                            {
                            // InternalGitHubActionsParser.g:2792:6: (otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE )
                            // InternalGitHubActionsParser.g:2793:7: otherlv_36= Group otherlv_37= Colon ( (lv_group_38_0= ruleExpression ) ) this_NEWLINE_39= RULE_NEWLINE
                            {
                            otherlv_36=(Token)match(input,Group,FOLLOW_3); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_36, grammarAccess.getAgentAccess().getGroupKeyword_1_1_0_0_0());
                              						
                            }
                            otherlv_37=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(otherlv_37, grammarAccess.getAgentAccess().getColonKeyword_1_1_0_0_1());
                              						
                            }
                            // InternalGitHubActionsParser.g:2801:7: ( (lv_group_38_0= ruleExpression ) )
                            // InternalGitHubActionsParser.g:2802:8: (lv_group_38_0= ruleExpression )
                            {
                            // InternalGitHubActionsParser.g:2802:8: (lv_group_38_0= ruleExpression )
                            // InternalGitHubActionsParser.g:2803:9: lv_group_38_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              									newCompositeNode(grammarAccess.getAgentAccess().getGroupExpressionParserRuleCall_1_1_0_0_2_0());
                              								
                            }
                            pushFollow(FOLLOW_5);
                            lv_group_38_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              									if (current==null) {
                              										current = createModelElementForParent(grammarAccess.getAgentRule());
                              									}
                              									set(
                              										current,
                              										"group",
                              										lv_group_38_0,
                              										"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                              									afterParserOrEnumRuleCall();
                              								
                            }

                            }


                            }

                            this_NEWLINE_39=(Token)match(input,RULE_NEWLINE,FOLLOW_33); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(this_NEWLINE_39, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_0_3());
                              						
                            }

                            }

                            // InternalGitHubActionsParser.g:2825:6: ( (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) ) | (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE ) | (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END ) )?
                            int alt41=4;
                            switch ( input.LA(1) ) {
                                case Labels:
                                    {
                                    alt41=1;
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt41=2;
                                    }
                                    break;
                                case RULE_NEWLINE:
                                    {
                                    alt41=3;
                                    }
                                    break;
                            }

                            switch (alt41) {
                                case 1 :
                                    // InternalGitHubActionsParser.g:2826:7: (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) )
                                    {
                                    // InternalGitHubActionsParser.g:2826:7: (otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE ) )
                                    // InternalGitHubActionsParser.g:2827:8: otherlv_40= Labels otherlv_41= Colon ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE )
                                    {
                                    otherlv_40=(Token)match(input,Labels,FOLLOW_3); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_40, grammarAccess.getAgentAccess().getLabelsKeyword_1_1_0_1_0_0());
                                      							
                                    }
                                    otherlv_41=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_41, grammarAccess.getAgentAccess().getColonKeyword_1_1_0_1_0_1());
                                      							
                                    }
                                    // InternalGitHubActionsParser.g:2835:8: ( ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE )
                                    // InternalGitHubActionsParser.g:2836:9: ( (lv_labels_42_0= ruleExpression ) ) this_NEWLINE_43= RULE_NEWLINE
                                    {
                                    // InternalGitHubActionsParser.g:2836:9: ( (lv_labels_42_0= ruleExpression ) )
                                    // InternalGitHubActionsParser.g:2837:10: (lv_labels_42_0= ruleExpression )
                                    {
                                    // InternalGitHubActionsParser.g:2837:10: (lv_labels_42_0= ruleExpression )
                                    // InternalGitHubActionsParser.g:2838:11: lv_labels_42_0= ruleExpression
                                    {
                                    if ( state.backtracking==0 ) {

                                      											newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_0_2_0_0());
                                      										
                                    }
                                    pushFollow(FOLLOW_5);
                                    lv_labels_42_0=ruleExpression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      											if (current==null) {
                                      												current = createModelElementForParent(grammarAccess.getAgentRule());
                                      											}
                                      											add(
                                      												current,
                                      												"labels",
                                      												lv_labels_42_0,
                                      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                      											afterParserOrEnumRuleCall();
                                      										
                                    }

                                    }


                                    }

                                    this_NEWLINE_43=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      									newLeafNode(this_NEWLINE_43, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_0_2_1());
                                      								
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalGitHubActionsParser.g:2862:7: (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE )
                                    {
                                    // InternalGitHubActionsParser.g:2862:7: (otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE )
                                    // InternalGitHubActionsParser.g:2863:8: otherlv_44= LeftSquareBracket ( (lv_labels_45_0= ruleExpression ) ) (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )* otherlv_48= RightSquareBracket this_NEWLINE_49= RULE_NEWLINE
                                    {
                                    otherlv_44=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_44, grammarAccess.getAgentAccess().getLeftSquareBracketKeyword_1_1_0_1_1_0());
                                      							
                                    }
                                    // InternalGitHubActionsParser.g:2867:8: ( (lv_labels_45_0= ruleExpression ) )
                                    // InternalGitHubActionsParser.g:2868:9: (lv_labels_45_0= ruleExpression )
                                    {
                                    // InternalGitHubActionsParser.g:2868:9: (lv_labels_45_0= ruleExpression )
                                    // InternalGitHubActionsParser.g:2869:10: lv_labels_45_0= ruleExpression
                                    {
                                    if ( state.backtracking==0 ) {

                                      										newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_1_1_0());
                                      									
                                    }
                                    pushFollow(FOLLOW_9);
                                    lv_labels_45_0=ruleExpression();

                                    state._fsp--;
                                    if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      										if (current==null) {
                                      											current = createModelElementForParent(grammarAccess.getAgentRule());
                                      										}
                                      										add(
                                      											current,
                                      											"labels",
                                      											lv_labels_45_0,
                                      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                      										afterParserOrEnumRuleCall();
                                      									
                                    }

                                    }


                                    }

                                    // InternalGitHubActionsParser.g:2886:8: (otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) ) )*
                                    loop39:
                                    do {
                                        int alt39=2;
                                        int LA39_0 = input.LA(1);

                                        if ( (LA39_0==Comma) ) {
                                            alt39=1;
                                        }


                                        switch (alt39) {
                                    	case 1 :
                                    	    // InternalGitHubActionsParser.g:2887:9: otherlv_46= Comma ( (lv_labels_47_0= ruleExpression ) )
                                    	    {
                                    	    otherlv_46=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      									newLeafNode(otherlv_46, grammarAccess.getAgentAccess().getCommaKeyword_1_1_0_1_1_2_0());
                                    	      								
                                    	    }
                                    	    // InternalGitHubActionsParser.g:2891:9: ( (lv_labels_47_0= ruleExpression ) )
                                    	    // InternalGitHubActionsParser.g:2892:10: (lv_labels_47_0= ruleExpression )
                                    	    {
                                    	    // InternalGitHubActionsParser.g:2892:10: (lv_labels_47_0= ruleExpression )
                                    	    // InternalGitHubActionsParser.g:2893:11: lv_labels_47_0= ruleExpression
                                    	    {
                                    	    if ( state.backtracking==0 ) {

                                    	      											newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_1_2_1_0());
                                    	      										
                                    	    }
                                    	    pushFollow(FOLLOW_9);
                                    	    lv_labels_47_0=ruleExpression();

                                    	    state._fsp--;
                                    	    if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      											if (current==null) {
                                    	      												current = createModelElementForParent(grammarAccess.getAgentRule());
                                    	      											}
                                    	      											add(
                                    	      												current,
                                    	      												"labels",
                                    	      												lv_labels_47_0,
                                    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                    	      											afterParserOrEnumRuleCall();
                                    	      										
                                    	    }

                                    	    }


                                    	    }


                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop39;
                                        }
                                    } while (true);

                                    otherlv_48=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(otherlv_48, grammarAccess.getAgentAccess().getRightSquareBracketKeyword_1_1_0_1_1_3());
                                      							
                                    }
                                    this_NEWLINE_49=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_NEWLINE_49, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_1_4());
                                      							
                                    }

                                    }


                                    }
                                    break;
                                case 3 :
                                    // InternalGitHubActionsParser.g:2921:7: (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END )
                                    {
                                    // InternalGitHubActionsParser.g:2921:7: (this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END )
                                    // InternalGitHubActionsParser.g:2922:8: this_NEWLINE_50= RULE_NEWLINE this_BEGIN_51= RULE_BEGIN (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+ this_END_55= RULE_END
                                    {
                                    this_NEWLINE_50=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_NEWLINE_50, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_2_0());
                                      							
                                    }
                                    this_BEGIN_51=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_BEGIN_51, grammarAccess.getAgentAccess().getBEGINTerminalRuleCall_1_1_0_1_2_1());
                                      							
                                    }
                                    // InternalGitHubActionsParser.g:2930:8: (otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE )+
                                    int cnt40=0;
                                    loop40:
                                    do {
                                        int alt40=2;
                                        int LA40_0 = input.LA(1);

                                        if ( (LA40_0==HyphenMinus) ) {
                                            alt40=1;
                                        }


                                        switch (alt40) {
                                    	case 1 :
                                    	    // InternalGitHubActionsParser.g:2931:9: otherlv_52= HyphenMinus ( (lv_labels_53_0= ruleExpression ) ) this_NEWLINE_54= RULE_NEWLINE
                                    	    {
                                    	    otherlv_52=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      									newLeafNode(otherlv_52, grammarAccess.getAgentAccess().getHyphenMinusKeyword_1_1_0_1_2_2_0());
                                    	      								
                                    	    }
                                    	    // InternalGitHubActionsParser.g:2935:9: ( (lv_labels_53_0= ruleExpression ) )
                                    	    // InternalGitHubActionsParser.g:2936:10: (lv_labels_53_0= ruleExpression )
                                    	    {
                                    	    // InternalGitHubActionsParser.g:2936:10: (lv_labels_53_0= ruleExpression )
                                    	    // InternalGitHubActionsParser.g:2937:11: lv_labels_53_0= ruleExpression
                                    	    {
                                    	    if ( state.backtracking==0 ) {

                                    	      											newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_2_2_1_0());
                                    	      										
                                    	    }
                                    	    pushFollow(FOLLOW_5);
                                    	    lv_labels_53_0=ruleExpression();

                                    	    state._fsp--;
                                    	    if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      											if (current==null) {
                                    	      												current = createModelElementForParent(grammarAccess.getAgentRule());
                                    	      											}
                                    	      											add(
                                    	      												current,
                                    	      												"labels",
                                    	      												lv_labels_53_0,
                                    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                                    	      											afterParserOrEnumRuleCall();
                                    	      										
                                    	    }

                                    	    }


                                    	    }

                                    	    this_NEWLINE_54=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                                    	    if ( state.backtracking==0 ) {

                                    	      									newLeafNode(this_NEWLINE_54, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_1_2_2_2());
                                    	      								
                                    	    }

                                    	    }
                                    	    break;

                                    	default :
                                    	    if ( cnt40 >= 1 ) break loop40;
                                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                                EarlyExitException eee =
                                                    new EarlyExitException(40, input);
                                                throw eee;
                                        }
                                        cnt40++;
                                    } while (true);

                                    this_END_55=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
                                    if ( state.backtracking==0 ) {

                                      								newLeafNode(this_END_55, grammarAccess.getAgentAccess().getENDTerminalRuleCall_1_1_0_1_2_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }


                            }

                            this_END_56=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_END_56, grammarAccess.getAgentAccess().getENDTerminalRuleCall_1_1_1());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAgent"


    // $ANTLR start "entryRuleStep"
    // InternalGitHubActionsParser.g:2976:1: entryRuleStep returns [EObject current=null] : iv_ruleStep= ruleStep EOF ;
    public final EObject entryRuleStep() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStep = null;


        try {
            // InternalGitHubActionsParser.g:2976:45: (iv_ruleStep= ruleStep EOF )
            // InternalGitHubActionsParser.g:2977:2: iv_ruleStep= ruleStep EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStepRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStep=ruleStep();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStep; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStep"


    // $ANTLR start "ruleStep"
    // InternalGitHubActionsParser.g:2983:1: ruleStep returns [EObject current=null] : (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END ) ;
    public final EObject ruleStep() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token this_BEGIN_1=null;
        Token this_END_4=null;
        EObject this_Command_2 = null;

        EObject this_Package_3 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:2989:2: ( (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END ) )
            // InternalGitHubActionsParser.g:2990:2: (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END )
            {
            // InternalGitHubActionsParser.g:2990:2: (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END )
            // InternalGitHubActionsParser.g:2991:3: otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END
            {
            otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStepAccess().getHyphenMinusKeyword_0());
              		
            }
            this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_1, grammarAccess.getStepAccess().getBEGINTerminalRuleCall_1());
              		
            }
            // InternalGitHubActionsParser.g:2999:3: (this_Command_2= ruleCommand | this_Package_3= rulePackage )
            int alt44=2;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // InternalGitHubActionsParser.g:3000:4: this_Command_2= ruleCommand
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStepAccess().getCommandParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_Command_2=ruleCommand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Command_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:3012:4: this_Package_3= rulePackage
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStepAccess().getPackageParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_Package_3=rulePackage();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Package_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            this_END_4=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_4, grammarAccess.getStepAccess().getENDTerminalRuleCall_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStep"


    // $ANTLR start "entryRuleCommand"
    // InternalGitHubActionsParser.g:3032:1: entryRuleCommand returns [EObject current=null] : iv_ruleCommand= ruleCommand EOF ;
    public final EObject entryRuleCommand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCommand = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getCommandAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:3036:2: (iv_ruleCommand= ruleCommand EOF )
            // InternalGitHubActionsParser.g:3037:2: iv_ruleCommand= ruleCommand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCommandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCommand=ruleCommand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCommand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleCommand"


    // $ANTLR start "ruleCommand"
    // InternalGitHubActionsParser.g:3046:1: ruleCommand returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleCommand() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;
        Token this_NEWLINE_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_9=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token this_NEWLINE_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_20=null;
        Token this_BEGIN_21=null;
        Token this_END_23=null;
        Token otherlv_24=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token this_NEWLINE_35=null;
        EObject lv_if_5_0 = null;

        EObject lv_name_8_0 = null;

        EObject lv_shell_12_0 = null;

        EObject lv_workingDirectory_16_0 = null;

        EObject lv_environmentVariables_22_0 = null;

        EObject lv_continueOnError_26_0 = null;

        EObject lv_timeoutMinutes_30_0 = null;

        EObject lv_command_34_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getCommandAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:3055:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:3056:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:3056:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:3057:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:3057:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:3058:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getCommandAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:3061:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:3062:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:3062:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+
            int cnt47=0;
            loop47:
            do {
                int alt47=9;
                alt47 = dfa47.predict(input);
                switch (alt47) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:3063:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3063:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3064:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:3064:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3065:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:3068:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3068:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3068:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3068:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE
            	    {
            	    otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_1, grammarAccess.getCommandAccess().getIdKeyword_0_0());
            	      							
            	    }
            	    otherlv_2=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getCommandAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3076:8: ( (lv_id_3_0= RULE_STRING ) )
            	    // InternalGitHubActionsParser.g:3077:9: (lv_id_3_0= RULE_STRING )
            	    {
            	    // InternalGitHubActionsParser.g:3077:9: (lv_id_3_0= RULE_STRING )
            	    // InternalGitHubActionsParser.g:3078:10: lv_id_3_0= RULE_STRING
            	    {
            	    lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_3_0, grammarAccess.getCommandAccess().getIdSTRINGTerminalRuleCall_0_2_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getCommandRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_3_0,
            	      											"org.eclipse.xtext.common.Terminals.STRING");
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_4, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_0_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:3104:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3104:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3105:4: {...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:3105:101: ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:3106:5: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:3109:8: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:3109:9: {...}? => ( (lv_if_5_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3109:18: ( (lv_if_5_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:3109:19: (lv_if_5_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:3109:19: (lv_if_5_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:3110:9: lv_if_5_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getCommandAccess().getIfIfStatementParserRuleCall_1_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_36);
            	    lv_if_5_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getCommandRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_5_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:3132:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3132:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3133:4: {...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:3133:101: ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3134:5: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:3137:8: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3137:9: {...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3137:18: (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3137:19: otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE
            	    {
            	    otherlv_6=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_6, grammarAccess.getCommandAccess().getNameKeyword_2_0());
            	      							
            	    }
            	    otherlv_7=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_7, grammarAccess.getCommandAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3145:8: ( (lv_name_8_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3146:9: (lv_name_8_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3146:9: (lv_name_8_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3147:10: lv_name_8_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getNameExpressionParserRuleCall_2_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_name_8_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"name",
            	      											lv_name_8_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_9=(Token)match(input,RULE_NEWLINE,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_9, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_2_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:3174:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3174:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3175:4: {...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:3175:101: ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3176:5: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:3179:8: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3179:9: {...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3179:18: (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3179:19: otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE
            	    {
            	    otherlv_10=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_10, grammarAccess.getCommandAccess().getShellKeyword_3_0());
            	      							
            	    }
            	    otherlv_11=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_11, grammarAccess.getCommandAccess().getColonKeyword_3_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3187:8: ( (lv_shell_12_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3188:9: (lv_shell_12_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3188:9: (lv_shell_12_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3189:10: lv_shell_12_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getShellExpressionParserRuleCall_3_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_shell_12_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"shell",
            	      											lv_shell_12_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_13=(Token)match(input,RULE_NEWLINE,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_13, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_3_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:3216:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3216:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3217:4: {...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:3217:101: ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3218:5: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:3221:8: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3221:9: {...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3221:18: (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3221:19: otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
            	    {
            	    otherlv_14=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_14, grammarAccess.getCommandAccess().getWorkingDirectoryKeyword_4_0());
            	      							
            	    }
            	    otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_15, grammarAccess.getCommandAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3229:8: ( (lv_workingDirectory_16_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3230:9: (lv_workingDirectory_16_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3230:9: (lv_workingDirectory_16_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3231:10: lv_workingDirectory_16_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_workingDirectory_16_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"workingDirectory",
            	      											lv_workingDirectory_16_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_17, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_4_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:3258:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3258:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:3259:4: {...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:3259:101: ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:3260:5: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:3263:8: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
            	    // InternalGitHubActionsParser.g:3263:9: {...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3263:18: (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
            	    // InternalGitHubActionsParser.g:3263:19: otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END
            	    {
            	    otherlv_18=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_18, grammarAccess.getCommandAccess().getEnvKeyword_5_0());
            	      							
            	    }
            	    otherlv_19=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_19, grammarAccess.getCommandAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_20, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_5_2());
            	      							
            	    }
            	    this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_21, grammarAccess.getCommandAccess().getBEGINTerminalRuleCall_5_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3279:8: ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+
            	    int cnt45=0;
            	    loop45:
            	    do {
            	        int alt45=2;
            	        int LA45_0 = input.LA(1);

            	        if ( (LA45_0==RULE_ID) ) {
            	            alt45=1;
            	        }


            	        switch (alt45) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:3280:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:3280:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:3281:10: lv_environmentVariables_22_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getCommandAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_environmentVariables_22_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_22_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt45 >= 1 ) break loop45;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(45, input);
            	                throw eee;
            	        }
            	        cnt45++;
            	    } while (true);

            	    this_END_23=(Token)match(input,RULE_END,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_23, grammarAccess.getCommandAccess().getENDTerminalRuleCall_5_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:3308:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3308:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3309:4: {...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:3309:101: ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3310:5: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:3313:8: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3313:9: {...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3313:18: (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3313:19: otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
            	    {
            	    otherlv_24=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_24, grammarAccess.getCommandAccess().getContinueOnErrorKeyword_6_0());
            	      							
            	    }
            	    otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_25, grammarAccess.getCommandAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3321:8: ( (lv_continueOnError_26_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3322:9: (lv_continueOnError_26_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3322:9: (lv_continueOnError_26_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3323:10: lv_continueOnError_26_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_continueOnError_26_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_26_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_27, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_6_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:3350:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3350:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3351:4: {...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:3351:101: ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3352:5: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:3355:8: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3355:9: {...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3355:18: ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3355:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
            	    {
            	    // InternalGitHubActionsParser.g:3355:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )?
            	    int alt46=2;
            	    int LA46_0 = input.LA(1);

            	    if ( (LA46_0==TimeoutMinutes) ) {
            	        alt46=1;
            	    }
            	    switch (alt46) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:3356:9: otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
            	            {
            	            otherlv_28=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_28, grammarAccess.getCommandAccess().getTimeoutMinutesKeyword_7_0_0());
            	              								
            	            }
            	            otherlv_29=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_29, grammarAccess.getCommandAccess().getColonKeyword_7_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:3364:9: ( (lv_timeoutMinutes_30_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:3365:10: (lv_timeoutMinutes_30_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:3365:10: (lv_timeoutMinutes_30_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:3366:11: lv_timeoutMinutes_30_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getCommandAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_timeoutMinutes_30_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getCommandRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_30_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_18); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_31, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_7_0_3());
            	              								
            	            }

            	            }
            	            break;

            	    }

            	    // InternalGitHubActionsParser.g:3388:8: (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3389:9: otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE
            	    {
            	    otherlv_32=(Token)match(input,Run,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_32, grammarAccess.getCommandAccess().getRunKeyword_7_1_0());
            	      								
            	    }
            	    otherlv_33=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_33, grammarAccess.getCommandAccess().getColonKeyword_7_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:3397:9: ( (lv_command_34_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3398:10: (lv_command_34_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3398:10: (lv_command_34_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3399:11: lv_command_34_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getCommandAccess().getCommandExpressionParserRuleCall_7_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_command_34_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getCommandRule());
            	      											}
            	      											set(
            	      												current,
            	      												"command",
            	      												lv_command_34_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_NEWLINE_35=(Token)match(input,RULE_NEWLINE,FOLLOW_36); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_35, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_7_1_3());
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt47 >= 1 ) break loop47;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(47, input);
                        throw eee;
                }
                cnt47++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getCommandAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canLeave(grammarAccess.getCommandAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getCommandAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleCommand"


    // $ANTLR start "entryRulePackage"
    // InternalGitHubActionsParser.g:3441:1: entryRulePackage returns [EObject current=null] : iv_rulePackage= rulePackage EOF ;
    public final EObject entryRulePackage() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePackage = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getPackageAccess().getUnorderedGroup(), 
        	grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4()
        	);

        try {
            // InternalGitHubActionsParser.g:3446:2: (iv_rulePackage= rulePackage EOF )
            // InternalGitHubActionsParser.g:3447:2: iv_rulePackage= rulePackage EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPackageRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePackage=rulePackage();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePackage; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRulePackage"


    // $ANTLR start "rulePackage"
    // InternalGitHubActionsParser.g:3456:1: rulePackage returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?) ) ) ;
    public final EObject rulePackage() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;
        Token this_NEWLINE_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_9=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token this_NEWLINE_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_20=null;
        Token this_BEGIN_21=null;
        Token this_END_23=null;
        Token otherlv_24=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token this_NEWLINE_35=null;
        Token otherlv_36=null;
        Token otherlv_37=null;
        Token this_NEWLINE_38=null;
        Token this_BEGIN_39=null;
        Token otherlv_41=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_46=null;
        Token this_NEWLINE_48=null;
        Token this_END_50=null;
        EObject lv_if_5_0 = null;

        EObject lv_name_8_0 = null;

        EObject lv_shell_12_0 = null;

        EObject lv_workingDirectory_16_0 = null;

        EObject lv_environmentVariables_22_0 = null;

        EObject lv_continueOnError_26_0 = null;

        EObject lv_timeoutMinutes_30_0 = null;

        EObject lv_uses_34_0 = null;

        EObject lv_entrypoint_43_0 = null;

        EObject lv_containerArgs_47_0 = null;

        EObject lv_args_49_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getPackageAccess().getUnorderedGroup(), 
        	grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4()
        	);

        try {
            // InternalGitHubActionsParser.g:3466:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:3467:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:3467:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:3468:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:3468:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:3469:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getPackageAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:3472:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:3473:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:3473:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+
            int cnt53=0;
            loop53:
            do {
                int alt53=10;
                alt53 = dfa53.predict(input);
                switch (alt53) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:3474:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3474:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3475:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:3475:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3476:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:3479:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3479:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3479:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3479:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE
            	    {
            	    otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_1, grammarAccess.getPackageAccess().getIdKeyword_0_0());
            	      							
            	    }
            	    otherlv_2=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3487:8: ( (lv_id_3_0= RULE_STRING ) )
            	    // InternalGitHubActionsParser.g:3488:9: (lv_id_3_0= RULE_STRING )
            	    {
            	    // InternalGitHubActionsParser.g:3488:9: (lv_id_3_0= RULE_STRING )
            	    // InternalGitHubActionsParser.g:3489:10: lv_id_3_0= RULE_STRING
            	    {
            	    lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_3_0, grammarAccess.getPackageAccess().getIdSTRINGTerminalRuleCall_0_2_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getPackageRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_3_0,
            	      											"org.eclipse.xtext.common.Terminals.STRING");
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_4, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_0_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:3515:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3515:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3516:4: {...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:3516:101: ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:3517:5: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:3520:8: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:3520:9: {...}? => ( (lv_if_5_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3520:18: ( (lv_if_5_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:3520:19: (lv_if_5_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:3520:19: (lv_if_5_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:3521:9: lv_if_5_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getPackageAccess().getIfIfStatementParserRuleCall_1_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_37);
            	    lv_if_5_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getPackageRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_5_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:3543:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3543:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3544:4: {...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:3544:101: ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3545:5: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:3548:8: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3548:9: {...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3548:18: (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3548:19: otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE
            	    {
            	    otherlv_6=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_6, grammarAccess.getPackageAccess().getNameKeyword_2_0());
            	      							
            	    }
            	    otherlv_7=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_7, grammarAccess.getPackageAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3556:8: ( (lv_name_8_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3557:9: (lv_name_8_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3557:9: (lv_name_8_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3558:10: lv_name_8_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getNameExpressionParserRuleCall_2_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_name_8_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"name",
            	      											lv_name_8_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_9=(Token)match(input,RULE_NEWLINE,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_9, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_2_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:3585:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3585:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3586:4: {...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:3586:101: ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3587:5: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:3590:8: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3590:9: {...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3590:18: (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3590:19: otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE
            	    {
            	    otherlv_10=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_10, grammarAccess.getPackageAccess().getShellKeyword_3_0());
            	      							
            	    }
            	    otherlv_11=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_11, grammarAccess.getPackageAccess().getColonKeyword_3_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3598:8: ( (lv_shell_12_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3599:9: (lv_shell_12_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3599:9: (lv_shell_12_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3600:10: lv_shell_12_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getShellExpressionParserRuleCall_3_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_shell_12_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"shell",
            	      											lv_shell_12_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_13=(Token)match(input,RULE_NEWLINE,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_13, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_3_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:3627:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3627:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3628:4: {...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:3628:101: ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3629:5: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:3632:8: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3632:9: {...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3632:18: (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3632:19: otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
            	    {
            	    otherlv_14=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_14, grammarAccess.getPackageAccess().getWorkingDirectoryKeyword_4_0());
            	      							
            	    }
            	    otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_15, grammarAccess.getPackageAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3640:8: ( (lv_workingDirectory_16_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3641:9: (lv_workingDirectory_16_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3641:9: (lv_workingDirectory_16_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3642:10: lv_workingDirectory_16_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_workingDirectory_16_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"workingDirectory",
            	      											lv_workingDirectory_16_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_17, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_4_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:3669:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3669:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:3670:4: {...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:3670:101: ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:3671:5: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:3674:8: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
            	    // InternalGitHubActionsParser.g:3674:9: {...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3674:18: (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
            	    // InternalGitHubActionsParser.g:3674:19: otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END
            	    {
            	    otherlv_18=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_18, grammarAccess.getPackageAccess().getEnvKeyword_5_0());
            	      							
            	    }
            	    otherlv_19=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_19, grammarAccess.getPackageAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_20, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_5_2());
            	      							
            	    }
            	    this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_21, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_5_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3690:8: ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+
            	    int cnt48=0;
            	    loop48:
            	    do {
            	        int alt48=2;
            	        int LA48_0 = input.LA(1);

            	        if ( (LA48_0==RULE_ID) ) {
            	            alt48=1;
            	        }


            	        switch (alt48) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:3691:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:3691:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:3692:10: lv_environmentVariables_22_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getPackageAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_4_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_17);
            	    	    lv_environmentVariables_22_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_22_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt48 >= 1 ) break loop48;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(48, input);
            	                throw eee;
            	        }
            	        cnt48++;
            	    } while (true);

            	    this_END_23=(Token)match(input,RULE_END,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_23, grammarAccess.getPackageAccess().getENDTerminalRuleCall_5_5());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:3719:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3719:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3720:4: {...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:3720:101: ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3721:5: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:3724:8: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3724:9: {...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3724:18: (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3724:19: otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
            	    {
            	    otherlv_24=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_24, grammarAccess.getPackageAccess().getContinueOnErrorKeyword_6_0());
            	      							
            	    }
            	    otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_25, grammarAccess.getPackageAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3732:8: ( (lv_continueOnError_26_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3733:9: (lv_continueOnError_26_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3733:9: (lv_continueOnError_26_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3734:10: lv_continueOnError_26_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_continueOnError_26_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_26_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_27, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_6_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:3761:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3761:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3762:4: {...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:3762:101: ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:3763:5: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:3766:8: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:3766:9: {...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3766:18: ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:3766:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
            	    {
            	    // InternalGitHubActionsParser.g:3766:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )?
            	    int alt49=2;
            	    int LA49_0 = input.LA(1);

            	    if ( (LA49_0==TimeoutMinutes) ) {
            	        alt49=1;
            	    }
            	    switch (alt49) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:3767:9: otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
            	            {
            	            otherlv_28=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_28, grammarAccess.getPackageAccess().getTimeoutMinutesKeyword_7_0_0());
            	              								
            	            }
            	            otherlv_29=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_29, grammarAccess.getPackageAccess().getColonKeyword_7_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:3775:9: ( (lv_timeoutMinutes_30_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:3776:10: (lv_timeoutMinutes_30_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:3776:10: (lv_timeoutMinutes_30_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:3777:11: lv_timeoutMinutes_30_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getPackageAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_timeoutMinutes_30_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getPackageRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_30_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_38); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_31, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_7_0_3());
            	              								
            	            }

            	            }
            	            break;

            	    }

            	    // InternalGitHubActionsParser.g:3799:8: (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:3800:9: otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE
            	    {
            	    otherlv_32=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_32, grammarAccess.getPackageAccess().getUsesKeyword_7_1_0());
            	      								
            	    }
            	    otherlv_33=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_33, grammarAccess.getPackageAccess().getColonKeyword_7_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:3808:9: ( (lv_uses_34_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3809:10: (lv_uses_34_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3809:10: (lv_uses_34_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3810:11: lv_uses_34_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getPackageAccess().getUsesExpressionParserRuleCall_7_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_uses_34_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getPackageRule());
            	      											}
            	      											set(
            	      												current,
            	      												"uses",
            	      												lv_uses_34_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_NEWLINE_35=(Token)match(input,RULE_NEWLINE,FOLLOW_37); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_35, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_7_1_3());
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalGitHubActionsParser.g:3838:3: ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3838:3: ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3839:4: {...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalGitHubActionsParser.g:3839:101: ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:3840:5: ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 8);
            	    // InternalGitHubActionsParser.g:3843:8: ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:3843:9: {...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3843:18: ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) )
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0==With) ) {
            	        alt52=1;
            	    }
            	    else if ( (LA52_0==RULE_ID) ) {
            	        alt52=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 52, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:3843:19: (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:3843:19: (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
            	            // InternalGitHubActionsParser.g:3844:9: otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
            	            {
            	            otherlv_36=(Token)match(input,With,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_36, grammarAccess.getPackageAccess().getWithKeyword_8_0_0());
            	              								
            	            }
            	            otherlv_37=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_37, grammarAccess.getPackageAccess().getColonKeyword_8_0_1());
            	              								
            	            }
            	            this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_38, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2());
            	              								
            	            }
            	            this_BEGIN_39=(Token)match(input,RULE_BEGIN,FOLLOW_39); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_39, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:3860:9: ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
            	            // InternalGitHubActionsParser.g:3861:10: ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            	            {
            	            // InternalGitHubActionsParser.g:3861:10: ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            	            // InternalGitHubActionsParser.g:3862:11: ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?)
            	            {
            	            getUnorderedGroupHelper().enter(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4());
            	            // InternalGitHubActionsParser.g:3865:11: ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?)
            	            // InternalGitHubActionsParser.g:3866:12: ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?
            	            {
            	            // InternalGitHubActionsParser.g:3866:12: ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+
            	            int cnt50=0;
            	            loop50:
            	            do {
            	                int alt50=3;
            	                int LA50_0 = input.LA(1);

            	                if ( LA50_0 == Entrypoint && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0) ) {
            	                    alt50=1;
            	                }
            	                else if ( LA50_0 == Args && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1) ) {
            	                    alt50=2;
            	                }


            	                switch (alt50) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:3867:10: ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3867:10: ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3868:11: {...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) )
            	            	    {
            	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0)");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3868:114: ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) )
            	            	    // InternalGitHubActionsParser.g:3869:12: ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
            	            	    {
            	            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0);
            	            	    // InternalGitHubActionsParser.g:3872:15: ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
            	            	    // InternalGitHubActionsParser.g:3872:16: {...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
            	            	    {
            	            	    if ( !((true)) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3872:25: (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
            	            	    // InternalGitHubActionsParser.g:3872:26: otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
            	            	    {
            	            	    otherlv_41=(Token)match(input,Entrypoint,FOLLOW_3); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_41, grammarAccess.getPackageAccess().getEntrypointKeyword_8_0_4_0_0());
            	            	      														
            	            	    }
            	            	    otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_42, grammarAccess.getPackageAccess().getColonKeyword_8_0_4_0_1());
            	            	      														
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3880:15: ( (lv_entrypoint_43_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:3881:16: (lv_entrypoint_43_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3881:16: (lv_entrypoint_43_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:3882:17: lv_entrypoint_43_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      																	newCompositeNode(grammarAccess.getPackageAccess().getEntrypointExpressionParserRuleCall_8_0_4_0_2_0());
            	            	      																
            	            	    }
            	            	    pushFollow(FOLLOW_5);
            	            	    lv_entrypoint_43_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      																	if (current==null) {
            	            	      																		current = createModelElementForParent(grammarAccess.getPackageRule());
            	            	      																	}
            	            	      																	set(
            	            	      																		current,
            	            	      																		"entrypoint",
            	            	      																		lv_entrypoint_43_0,
            	            	      																		"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      																	afterParserOrEnumRuleCall();
            	            	      																
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_40); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(this_NEWLINE_44, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_4_0_3());
            	            	      														
            	            	    }

            	            	    }


            	            	    }

            	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4());

            	            	    }


            	            	    }


            	            	    }
            	            	    break;
            	            	case 2 :
            	            	    // InternalGitHubActionsParser.g:3909:10: ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3909:10: ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3910:11: {...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) )
            	            	    {
            	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1)");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3910:114: ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) )
            	            	    // InternalGitHubActionsParser.g:3911:12: ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) )
            	            	    {
            	            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1);
            	            	    // InternalGitHubActionsParser.g:3914:15: ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) )
            	            	    // InternalGitHubActionsParser.g:3914:16: {...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE )
            	            	    {
            	            	    if ( !((true)) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3914:25: (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE )
            	            	    // InternalGitHubActionsParser.g:3914:26: otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE
            	            	    {
            	            	    otherlv_45=(Token)match(input,Args,FOLLOW_3); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_45, grammarAccess.getPackageAccess().getArgsKeyword_8_0_4_1_0());
            	            	      														
            	            	    }
            	            	    otherlv_46=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_46, grammarAccess.getPackageAccess().getColonKeyword_8_0_4_1_1());
            	            	      														
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3922:15: ( (lv_containerArgs_47_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:3923:16: (lv_containerArgs_47_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3923:16: (lv_containerArgs_47_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:3924:17: lv_containerArgs_47_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      																	newCompositeNode(grammarAccess.getPackageAccess().getContainerArgsExpressionParserRuleCall_8_0_4_1_2_0());
            	            	      																
            	            	    }
            	            	    pushFollow(FOLLOW_5);
            	            	    lv_containerArgs_47_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      																	if (current==null) {
            	            	      																		current = createModelElementForParent(grammarAccess.getPackageRule());
            	            	      																	}
            	            	      																	set(
            	            	      																		current,
            	            	      																		"containerArgs",
            	            	      																		lv_containerArgs_47_0,
            	            	      																		"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      																	afterParserOrEnumRuleCall();
            	            	      																
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_48=(Token)match(input,RULE_NEWLINE,FOLLOW_40); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(this_NEWLINE_48, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_4_1_3());
            	            	      														
            	            	    }

            	            	    }


            	            	    }

            	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4());

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt50 >= 1 ) break loop50;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(50, input);
            	                        throw eee;
            	                }
            	                cnt50++;
            	            } while (true);

            	            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4()) ) {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4())");
            	            }

            	            }


            	            }

            	            getUnorderedGroupHelper().leave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4());

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:3961:8: ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:3961:8: ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END )
            	            // InternalGitHubActionsParser.g:3962:9: ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END
            	            {
            	            // InternalGitHubActionsParser.g:3962:9: ( (lv_args_49_0= ruleVariableAssignment ) )+
            	            int cnt51=0;
            	            loop51:
            	            do {
            	                int alt51=2;
            	                int LA51_0 = input.LA(1);

            	                if ( (LA51_0==RULE_ID) ) {
            	                    alt51=1;
            	                }


            	                switch (alt51) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:3963:10: (lv_args_49_0= ruleVariableAssignment )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3963:10: (lv_args_49_0= ruleVariableAssignment )
            	            	    // InternalGitHubActionsParser.g:3964:11: lv_args_49_0= ruleVariableAssignment
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      											newCompositeNode(grammarAccess.getPackageAccess().getArgsVariableAssignmentParserRuleCall_8_1_0_0());
            	            	      										
            	            	    }
            	            	    pushFollow(FOLLOW_17);
            	            	    lv_args_49_0=ruleVariableAssignment();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											if (current==null) {
            	            	      												current = createModelElementForParent(grammarAccess.getPackageRule());
            	            	      											}
            	            	      											add(
            	            	      												current,
            	            	      												"args",
            	            	      												lv_args_49_0,
            	            	      												"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	            	      											afterParserOrEnumRuleCall();
            	            	      										
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt51 >= 1 ) break loop51;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(51, input);
            	                        throw eee;
            	                }
            	                cnt51++;
            	            } while (true);

            	            this_END_50=(Token)match(input,RULE_END,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_50, grammarAccess.getPackageAccess().getENDTerminalRuleCall_8_1_1());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt53 >= 1 ) break loop53;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(53, input);
                        throw eee;
                }
                cnt53++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getPackageAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "rulePackage"


    // $ANTLR start "entryRuleIfStatement"
    // InternalGitHubActionsParser.g:4006:1: entryRuleIfStatement returns [EObject current=null] : iv_ruleIfStatement= ruleIfStatement EOF ;
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIfStatement = null;


        try {
            // InternalGitHubActionsParser.g:4006:52: (iv_ruleIfStatement= ruleIfStatement EOF )
            // InternalGitHubActionsParser.g:4007:2: iv_ruleIfStatement= ruleIfStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIfStatement"


    // $ANTLR start "ruleIfStatement"
    // InternalGitHubActionsParser.g:4013:1: ruleIfStatement returns [EObject current=null] : (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression this_NEWLINE_3= RULE_NEWLINE ) ;
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_3=null;
        EObject this_Expression_2 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4019:2: ( (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression this_NEWLINE_3= RULE_NEWLINE ) )
            // InternalGitHubActionsParser.g:4020:2: (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression this_NEWLINE_3= RULE_NEWLINE )
            {
            // InternalGitHubActionsParser.g:4020:2: (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression this_NEWLINE_3= RULE_NEWLINE )
            // InternalGitHubActionsParser.g:4021:3: otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression this_NEWLINE_3= RULE_NEWLINE
            {
            otherlv_0=(Token)match(input,If,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getColonKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_5);
            this_Expression_2=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Expression_2;
              			afterParserOrEnumRuleCall();
              		
            }
            this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_3, grammarAccess.getIfStatementAccess().getNEWLINETerminalRuleCall_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIfStatement"


    // $ANTLR start "entryRuleConcurrencyGroup"
    // InternalGitHubActionsParser.g:4048:1: entryRuleConcurrencyGroup returns [EObject current=null] : iv_ruleConcurrencyGroup= ruleConcurrencyGroup EOF ;
    public final EObject entryRuleConcurrencyGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConcurrencyGroup = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:4052:2: (iv_ruleConcurrencyGroup= ruleConcurrencyGroup EOF )
            // InternalGitHubActionsParser.g:4053:2: iv_ruleConcurrencyGroup= ruleConcurrencyGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConcurrencyGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConcurrencyGroup=ruleConcurrencyGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConcurrencyGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleConcurrencyGroup"


    // $ANTLR start "ruleConcurrencyGroup"
    // InternalGitHubActionsParser.g:4062:1: ruleConcurrencyGroup returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleConcurrencyGroup() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_NEWLINE_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_name_3_0 = null;

        EObject lv_cancelInProgress_7_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:4071:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:4072:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:4072:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:4073:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:4073:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:4074:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:4077:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:4078:5: ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:4078:5: ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )+
            int cnt54=0;
            loop54:
            do {
                int alt54=3;
                int LA54_0 = input.LA(1);

                if ( LA54_0 == Group && getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 0) ) {
                    alt54=1;
                }
                else if ( LA54_0 == CancelInProgress && getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 1) ) {
                    alt54=2;
                }


                switch (alt54) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:4079:3: ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:4079:3: ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:4080:4: {...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:4080:110: ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:4081:5: ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:4084:8: ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:4084:9: {...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "true");
            	    }
            	    // InternalGitHubActionsParser.g:4084:18: (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:4084:19: otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE
            	    {
            	    otherlv_1=(Token)match(input,Group,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_1, grammarAccess.getConcurrencyGroupAccess().getGroupKeyword_0_0());
            	      							
            	    }
            	    otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getConcurrencyGroupAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:4092:8: ( (lv_name_3_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:4093:9: (lv_name_3_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:4093:9: (lv_name_3_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:4094:10: lv_name_3_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getNameExpressionParserRuleCall_0_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_name_3_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getConcurrencyGroupRule());
            	      										}
            	      										set(
            	      											current,
            	      											"name",
            	      											lv_name_3_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_41); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_4, grammarAccess.getConcurrencyGroupAccess().getNEWLINETerminalRuleCall_0_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:4121:3: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:4121:3: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:4122:4: {...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:4122:110: ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:4123:5: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:4126:8: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:4126:9: {...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "true");
            	    }
            	    // InternalGitHubActionsParser.g:4126:18: (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:4126:19: otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	    {
            	    otherlv_5=(Token)match(input,CancelInProgress,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_5, grammarAccess.getConcurrencyGroupAccess().getCancelInProgressKeyword_1_0());
            	      							
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_6, grammarAccess.getConcurrencyGroupAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:4134:8: ( (lv_cancelInProgress_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:4135:9: (lv_cancelInProgress_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:4135:9: (lv_cancelInProgress_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:4136:10: lv_cancelInProgress_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getCancelInProgressExpressionParserRuleCall_1_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_cancelInProgress_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getConcurrencyGroupRule());
            	      										}
            	      										set(
            	      											current,
            	      											"cancelInProgress",
            	      											lv_cancelInProgress_7_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_41); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_8, grammarAccess.getConcurrencyGroupAccess().getNEWLINETerminalRuleCall_1_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt54 >= 1 ) break loop54;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(54, input);
                        throw eee;
                }
                cnt54++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleConcurrencyGroup", "getUnorderedGroupHelper().canLeave(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleConcurrencyGroup"


    // $ANTLR start "entryRuleSimpleTrigger"
    // InternalGitHubActionsParser.g:4177:1: entryRuleSimpleTrigger returns [EObject current=null] : iv_ruleSimpleTrigger= ruleSimpleTrigger EOF ;
    public final EObject entryRuleSimpleTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4177:54: (iv_ruleSimpleTrigger= ruleSimpleTrigger EOF )
            // InternalGitHubActionsParser.g:4178:2: iv_ruleSimpleTrigger= ruleSimpleTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleTrigger=ruleSimpleTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleTrigger"


    // $ANTLR start "ruleSimpleTrigger"
    // InternalGitHubActionsParser.g:4184:1: ruleSimpleTrigger returns [EObject current=null] : ( (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger ) this_NEWLINE_5= RULE_NEWLINE ) ;
    public final EObject ruleSimpleTrigger() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_5=null;
        EObject this_SimpleWorkflowDispatchTrigger_0 = null;

        EObject this_SimpleWorkflowCallTrigger_1 = null;

        EObject this_SimplePushTriggerTrigger_2 = null;

        EObject this_SimplePullRequestTrigger_3 = null;

        EObject this_SimpleStandardEventTrigger_4 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4190:2: ( ( (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger ) this_NEWLINE_5= RULE_NEWLINE ) )
            // InternalGitHubActionsParser.g:4191:2: ( (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger ) this_NEWLINE_5= RULE_NEWLINE )
            {
            // InternalGitHubActionsParser.g:4191:2: ( (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger ) this_NEWLINE_5= RULE_NEWLINE )
            // InternalGitHubActionsParser.g:4192:3: (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger ) this_NEWLINE_5= RULE_NEWLINE
            {
            // InternalGitHubActionsParser.g:4192:3: (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger )
            int alt55=5;
            switch ( input.LA(1) ) {
            case Workflow_dispatch:
                {
                alt55=1;
                }
                break;
            case Workflow_call:
                {
                alt55=2;
                }
                break;
            case Push:
                {
                alt55=3;
                }
                break;
            case Pull_request_target:
            case Pull_request:
                {
                alt55=4;
                }
                break;
            case Pull_request_review_comment:
            case Branch_protection_rule:
            case Pull_request_review:
            case Repository_dispatch:
            case Deployment_status:
            case Registry_package:
            case Project_column:
            case Project_card:
            case Check_suite:
            case Merge_group:
            case Deployment:
            case Discussion:
            case Page_build:
            case Check_run:
            case Milestone:
            case Project:
            case Release:
            case Create:
            case Delete:
            case Gollum:
            case Issues:
            case Public:
            case Status:
            case Label:
            case Watch:
            case Fork:
                {
                alt55=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // InternalGitHubActionsParser.g:4193:4: this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimpleWorkflowDispatchTriggerParserRuleCall_0_0());
                      			
                    }
                    pushFollow(FOLLOW_5);
                    this_SimpleWorkflowDispatchTrigger_0=ruleSimpleWorkflowDispatchTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_SimpleWorkflowDispatchTrigger_0;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4205:4: this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimpleWorkflowCallTriggerParserRuleCall_0_1());
                      			
                    }
                    pushFollow(FOLLOW_5);
                    this_SimpleWorkflowCallTrigger_1=ruleSimpleWorkflowCallTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_SimpleWorkflowCallTrigger_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:4217:4: this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimplePushTriggerTriggerParserRuleCall_0_2());
                      			
                    }
                    pushFollow(FOLLOW_5);
                    this_SimplePushTriggerTrigger_2=ruleSimplePushTriggerTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_SimplePushTriggerTrigger_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:4229:4: this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimplePullRequestTriggerParserRuleCall_0_3());
                      			
                    }
                    pushFollow(FOLLOW_5);
                    this_SimplePullRequestTrigger_3=ruleSimplePullRequestTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_SimplePullRequestTrigger_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:4241:4: this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimpleStandardEventTriggerParserRuleCall_0_4());
                      			
                    }
                    pushFollow(FOLLOW_5);
                    this_SimpleStandardEventTrigger_4=ruleSimpleStandardEventTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_SimpleStandardEventTrigger_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            this_NEWLINE_5=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_5, grammarAccess.getSimpleTriggerAccess().getNEWLINETerminalRuleCall_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleTrigger"


    // $ANTLR start "entryRuleSimplePullRequestTrigger"
    // InternalGitHubActionsParser.g:4261:1: entryRuleSimplePullRequestTrigger returns [EObject current=null] : iv_ruleSimplePullRequestTrigger= ruleSimplePullRequestTrigger EOF ;
    public final EObject entryRuleSimplePullRequestTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimplePullRequestTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4261:65: (iv_ruleSimplePullRequestTrigger= ruleSimplePullRequestTrigger EOF )
            // InternalGitHubActionsParser.g:4262:2: iv_ruleSimplePullRequestTrigger= ruleSimplePullRequestTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimplePullRequestTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimplePullRequestTrigger=ruleSimplePullRequestTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimplePullRequestTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimplePullRequestTrigger"


    // $ANTLR start "ruleSimplePullRequestTrigger"
    // InternalGitHubActionsParser.g:4268:1: ruleSimplePullRequestTrigger returns [EObject current=null] : ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) ) ;
    public final EObject ruleSimplePullRequestTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4274:2: ( ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) ) )
            // InternalGitHubActionsParser.g:4275:2: ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) )
            {
            // InternalGitHubActionsParser.g:4275:2: ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Pull_request) ) {
                alt56=1;
            }
            else if ( (LA56_0==Pull_request_target) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // InternalGitHubActionsParser.g:4276:3: ( () otherlv_1= Pull_request )
                    {
                    // InternalGitHubActionsParser.g:4276:3: ( () otherlv_1= Pull_request )
                    // InternalGitHubActionsParser.g:4277:4: () otherlv_1= Pull_request
                    {
                    // InternalGitHubActionsParser.g:4277:4: ()
                    // InternalGitHubActionsParser.g:4278:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getSimplePullRequestTriggerAccess().getPullRequestTriggerAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,Pull_request,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSimplePullRequestTriggerAccess().getPull_requestKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4293:3: ( () otherlv_3= Pull_request_target )
                    {
                    // InternalGitHubActionsParser.g:4293:3: ( () otherlv_3= Pull_request_target )
                    // InternalGitHubActionsParser.g:4294:4: () otherlv_3= Pull_request_target
                    {
                    // InternalGitHubActionsParser.g:4294:4: ()
                    // InternalGitHubActionsParser.g:4295:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getSimplePullRequestTriggerAccess().getPullRequestTriggerAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_3=(Token)match(input,Pull_request_target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getSimplePullRequestTriggerAccess().getPull_request_targetKeyword_1_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimplePullRequestTrigger"


    // $ANTLR start "entryRuleSimplePushTriggerTrigger"
    // InternalGitHubActionsParser.g:4313:1: entryRuleSimplePushTriggerTrigger returns [EObject current=null] : iv_ruleSimplePushTriggerTrigger= ruleSimplePushTriggerTrigger EOF ;
    public final EObject entryRuleSimplePushTriggerTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimplePushTriggerTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4313:65: (iv_ruleSimplePushTriggerTrigger= ruleSimplePushTriggerTrigger EOF )
            // InternalGitHubActionsParser.g:4314:2: iv_ruleSimplePushTriggerTrigger= ruleSimplePushTriggerTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimplePushTriggerTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimplePushTriggerTrigger=ruleSimplePushTriggerTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimplePushTriggerTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimplePushTriggerTrigger"


    // $ANTLR start "ruleSimplePushTriggerTrigger"
    // InternalGitHubActionsParser.g:4320:1: ruleSimplePushTriggerTrigger returns [EObject current=null] : ( () otherlv_1= Push ) ;
    public final EObject ruleSimplePushTriggerTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4326:2: ( ( () otherlv_1= Push ) )
            // InternalGitHubActionsParser.g:4327:2: ( () otherlv_1= Push )
            {
            // InternalGitHubActionsParser.g:4327:2: ( () otherlv_1= Push )
            // InternalGitHubActionsParser.g:4328:3: () otherlv_1= Push
            {
            // InternalGitHubActionsParser.g:4328:3: ()
            // InternalGitHubActionsParser.g:4329:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSimplePushTriggerTriggerAccess().getPushTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Push,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSimplePushTriggerTriggerAccess().getPushKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimplePushTriggerTrigger"


    // $ANTLR start "entryRuleSimpleWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:4346:1: entryRuleSimpleWorkflowCallTrigger returns [EObject current=null] : iv_ruleSimpleWorkflowCallTrigger= ruleSimpleWorkflowCallTrigger EOF ;
    public final EObject entryRuleSimpleWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleWorkflowCallTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4346:66: (iv_ruleSimpleWorkflowCallTrigger= ruleSimpleWorkflowCallTrigger EOF )
            // InternalGitHubActionsParser.g:4347:2: iv_ruleSimpleWorkflowCallTrigger= ruleSimpleWorkflowCallTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleWorkflowCallTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleWorkflowCallTrigger=ruleSimpleWorkflowCallTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleWorkflowCallTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleWorkflowCallTrigger"


    // $ANTLR start "ruleSimpleWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:4353:1: ruleSimpleWorkflowCallTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_call ) ;
    public final EObject ruleSimpleWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4359:2: ( ( () otherlv_1= Workflow_call ) )
            // InternalGitHubActionsParser.g:4360:2: ( () otherlv_1= Workflow_call )
            {
            // InternalGitHubActionsParser.g:4360:2: ( () otherlv_1= Workflow_call )
            // InternalGitHubActionsParser.g:4361:3: () otherlv_1= Workflow_call
            {
            // InternalGitHubActionsParser.g:4361:3: ()
            // InternalGitHubActionsParser.g:4362:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSimpleWorkflowCallTriggerAccess().getWorkflowCallTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_call,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSimpleWorkflowCallTriggerAccess().getWorkflow_callKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleWorkflowCallTrigger"


    // $ANTLR start "entryRuleSimpleWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:4379:1: entryRuleSimpleWorkflowDispatchTrigger returns [EObject current=null] : iv_ruleSimpleWorkflowDispatchTrigger= ruleSimpleWorkflowDispatchTrigger EOF ;
    public final EObject entryRuleSimpleWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleWorkflowDispatchTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4379:70: (iv_ruleSimpleWorkflowDispatchTrigger= ruleSimpleWorkflowDispatchTrigger EOF )
            // InternalGitHubActionsParser.g:4380:2: iv_ruleSimpleWorkflowDispatchTrigger= ruleSimpleWorkflowDispatchTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleWorkflowDispatchTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleWorkflowDispatchTrigger=ruleSimpleWorkflowDispatchTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleWorkflowDispatchTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleWorkflowDispatchTrigger"


    // $ANTLR start "ruleSimpleWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:4386:1: ruleSimpleWorkflowDispatchTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_dispatch ) ;
    public final EObject ruleSimpleWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4392:2: ( ( () otherlv_1= Workflow_dispatch ) )
            // InternalGitHubActionsParser.g:4393:2: ( () otherlv_1= Workflow_dispatch )
            {
            // InternalGitHubActionsParser.g:4393:2: ( () otherlv_1= Workflow_dispatch )
            // InternalGitHubActionsParser.g:4394:3: () otherlv_1= Workflow_dispatch
            {
            // InternalGitHubActionsParser.g:4394:3: ()
            // InternalGitHubActionsParser.g:4395:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSimpleWorkflowDispatchTriggerAccess().getWorkflowDispatchTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_dispatch,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSimpleWorkflowDispatchTriggerAccess().getWorkflow_dispatchKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleWorkflowDispatchTrigger"


    // $ANTLR start "entryRuleSimpleStandardEventTrigger"
    // InternalGitHubActionsParser.g:4412:1: entryRuleSimpleStandardEventTrigger returns [EObject current=null] : iv_ruleSimpleStandardEventTrigger= ruleSimpleStandardEventTrigger EOF ;
    public final EObject entryRuleSimpleStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleStandardEventTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4412:67: (iv_ruleSimpleStandardEventTrigger= ruleSimpleStandardEventTrigger EOF )
            // InternalGitHubActionsParser.g:4413:2: iv_ruleSimpleStandardEventTrigger= ruleSimpleStandardEventTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleStandardEventTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleStandardEventTrigger=ruleSimpleStandardEventTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleStandardEventTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleStandardEventTrigger"


    // $ANTLR start "ruleSimpleStandardEventTrigger"
    // InternalGitHubActionsParser.g:4419:1: ruleSimpleStandardEventTrigger returns [EObject current=null] : ( (lv_event_0_0= ruleEVENT ) ) ;
    public final EObject ruleSimpleStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        Enumerator lv_event_0_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4425:2: ( ( (lv_event_0_0= ruleEVENT ) ) )
            // InternalGitHubActionsParser.g:4426:2: ( (lv_event_0_0= ruleEVENT ) )
            {
            // InternalGitHubActionsParser.g:4426:2: ( (lv_event_0_0= ruleEVENT ) )
            // InternalGitHubActionsParser.g:4427:3: (lv_event_0_0= ruleEVENT )
            {
            // InternalGitHubActionsParser.g:4427:3: (lv_event_0_0= ruleEVENT )
            // InternalGitHubActionsParser.g:4428:4: lv_event_0_0= ruleEVENT
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSimpleStandardEventTriggerAccess().getEventEVENTEnumRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_event_0_0=ruleEVENT();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSimpleStandardEventTriggerRule());
              				}
              				set(
              					current,
              					"event",
              					lv_event_0_0,
              					"d.fe.up.pt.cicd.gha.GitHubActions.EVENT");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleStandardEventTrigger"


    // $ANTLR start "entryRuleOptionedTrigger"
    // InternalGitHubActionsParser.g:4448:1: entryRuleOptionedTrigger returns [EObject current=null] : iv_ruleOptionedTrigger= ruleOptionedTrigger EOF ;
    public final EObject entryRuleOptionedTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4448:56: (iv_ruleOptionedTrigger= ruleOptionedTrigger EOF )
            // InternalGitHubActionsParser.g:4449:2: iv_ruleOptionedTrigger= ruleOptionedTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedTrigger=ruleOptionedTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedTrigger"


    // $ANTLR start "ruleOptionedTrigger"
    // InternalGitHubActionsParser.g:4455:1: ruleOptionedTrigger returns [EObject current=null] : (this_NEWLINE_0= RULE_NEWLINE this_BEGIN_1= RULE_BEGIN (this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_3= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger ) this_END_9= RULE_END ) ;
    public final EObject ruleOptionedTrigger() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_0=null;
        Token this_BEGIN_1=null;
        Token this_END_9=null;
        EObject this_OptionedPullRequestTrigger_2 = null;

        EObject this_OptionedPushTrigger_3 = null;

        EObject this_OptionedScheduleTrigger_4 = null;

        EObject this_OptionedStandardEventTrigger_5 = null;

        EObject this_OptionedWorkflowCallTrigger_6 = null;

        EObject this_OptionedWorkflowRunTrigger_7 = null;

        EObject this_OptionedWorkflowDispatchTrigger_8 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4461:2: ( (this_NEWLINE_0= RULE_NEWLINE this_BEGIN_1= RULE_BEGIN (this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_3= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger ) this_END_9= RULE_END ) )
            // InternalGitHubActionsParser.g:4462:2: (this_NEWLINE_0= RULE_NEWLINE this_BEGIN_1= RULE_BEGIN (this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_3= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger ) this_END_9= RULE_END )
            {
            // InternalGitHubActionsParser.g:4462:2: (this_NEWLINE_0= RULE_NEWLINE this_BEGIN_1= RULE_BEGIN (this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_3= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger ) this_END_9= RULE_END )
            // InternalGitHubActionsParser.g:4463:3: this_NEWLINE_0= RULE_NEWLINE this_BEGIN_1= RULE_BEGIN (this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_3= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger ) this_END_9= RULE_END
            {
            this_NEWLINE_0=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_0, grammarAccess.getOptionedTriggerAccess().getNEWLINETerminalRuleCall_0());
              		
            }
            this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_42); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_1, grammarAccess.getOptionedTriggerAccess().getBEGINTerminalRuleCall_1());
              		
            }
            // InternalGitHubActionsParser.g:4471:3: (this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_3= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger )
            int alt57=7;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // InternalGitHubActionsParser.g:4472:4: this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedPullRequestTriggerParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_OptionedPullRequestTrigger_2=ruleOptionedPullRequestTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_OptionedPullRequestTrigger_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4484:4: this_OptionedPushTrigger_3= ruleOptionedPushTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedPushTriggerParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_OptionedPushTrigger_3=ruleOptionedPushTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_OptionedPushTrigger_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:4496:4: this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedScheduleTriggerParserRuleCall_2_2());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_OptionedScheduleTrigger_4=ruleOptionedScheduleTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_OptionedScheduleTrigger_4;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:4508:4: this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedStandardEventTriggerParserRuleCall_2_3());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_OptionedStandardEventTrigger_5=ruleOptionedStandardEventTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_OptionedStandardEventTrigger_5;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:4520:4: this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedWorkflowCallTriggerParserRuleCall_2_4());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_OptionedWorkflowCallTrigger_6=ruleOptionedWorkflowCallTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_OptionedWorkflowCallTrigger_6;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:4532:4: this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedWorkflowRunTriggerParserRuleCall_2_5());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_OptionedWorkflowRunTrigger_7=ruleOptionedWorkflowRunTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_OptionedWorkflowRunTrigger_7;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:4544:4: this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedWorkflowDispatchTriggerParserRuleCall_2_6());
                      			
                    }
                    pushFollow(FOLLOW_19);
                    this_OptionedWorkflowDispatchTrigger_8=ruleOptionedWorkflowDispatchTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_OptionedWorkflowDispatchTrigger_8;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            this_END_9=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_9, grammarAccess.getOptionedTriggerAccess().getENDTerminalRuleCall_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedTrigger"


    // $ANTLR start "entryRuleOptionedStandardEventTrigger"
    // InternalGitHubActionsParser.g:4564:1: entryRuleOptionedStandardEventTrigger returns [EObject current=null] : iv_ruleOptionedStandardEventTrigger= ruleOptionedStandardEventTrigger EOF ;
    public final EObject entryRuleOptionedStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedStandardEventTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4564:69: (iv_ruleOptionedStandardEventTrigger= ruleOptionedStandardEventTrigger EOF )
            // InternalGitHubActionsParser.g:4565:2: iv_ruleOptionedStandardEventTrigger= ruleOptionedStandardEventTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedStandardEventTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedStandardEventTrigger=ruleOptionedStandardEventTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedStandardEventTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedStandardEventTrigger"


    // $ANTLR start "ruleOptionedStandardEventTrigger"
    // InternalGitHubActionsParser.g:4571:1: ruleOptionedStandardEventTrigger returns [EObject current=null] : ( ( ( (lv_event_0_0= ruleEVENT ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE ) ) | (otherlv_8= LeftSquareBracket ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_12= RightSquareBracket this_NEWLINE_13= RULE_NEWLINE ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) this_END_20= RULE_END ) ) ;
    public final EObject ruleOptionedStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_NEWLINE_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token this_NEWLINE_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token this_NEWLINE_13=null;
        Token this_NEWLINE_14=null;
        Token this_BEGIN_15=null;
        Token otherlv_16=null;
        Token this_NEWLINE_18=null;
        Token this_END_19=null;
        Token this_END_20=null;
        Enumerator lv_event_0_0 = null;

        Enumerator lv_eventTypes_6_0 = null;

        Enumerator lv_eventTypes_9_0 = null;

        Enumerator lv_eventTypes_11_0 = null;

        Enumerator lv_eventTypes_17_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4577:2: ( ( ( ( (lv_event_0_0= ruleEVENT ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE ) ) | (otherlv_8= LeftSquareBracket ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_12= RightSquareBracket this_NEWLINE_13= RULE_NEWLINE ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) this_END_20= RULE_END ) ) )
            // InternalGitHubActionsParser.g:4578:2: ( ( ( (lv_event_0_0= ruleEVENT ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE ) ) | (otherlv_8= LeftSquareBracket ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_12= RightSquareBracket this_NEWLINE_13= RULE_NEWLINE ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) this_END_20= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:4578:2: ( ( ( (lv_event_0_0= ruleEVENT ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE ) ) | (otherlv_8= LeftSquareBracket ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_12= RightSquareBracket this_NEWLINE_13= RULE_NEWLINE ) | ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) this_END_20= RULE_END ) )
            int alt60=3;
            switch ( input.LA(1) ) {
            case Pull_request_review_comment:
            case Branch_protection_rule:
            case Pull_request_review:
            case Repository_dispatch:
            case Deployment_status:
            case Registry_package:
            case Project_column:
            case Project_card:
            case Check_suite:
            case Merge_group:
            case Deployment:
            case Discussion:
            case Page_build:
            case Check_run:
            case Milestone:
            case Project:
            case Release:
            case Create:
            case Delete:
            case Gollum:
            case Issues:
            case Public:
            case Status:
            case Label:
            case Watch:
            case Fork:
                {
                alt60=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt60=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt60=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }

            switch (alt60) {
                case 1 :
                    // InternalGitHubActionsParser.g:4579:3: ( ( (lv_event_0_0= ruleEVENT ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE ) )
                    {
                    // InternalGitHubActionsParser.g:4579:3: ( ( (lv_event_0_0= ruleEVENT ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE ) )
                    // InternalGitHubActionsParser.g:4580:4: ( (lv_event_0_0= ruleEVENT ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE )
                    {
                    // InternalGitHubActionsParser.g:4580:4: ( (lv_event_0_0= ruleEVENT ) )
                    // InternalGitHubActionsParser.g:4581:5: (lv_event_0_0= ruleEVENT )
                    {
                    // InternalGitHubActionsParser.g:4581:5: (lv_event_0_0= ruleEVENT )
                    // InternalGitHubActionsParser.g:4582:6: lv_event_0_0= ruleEVENT
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventEVENTEnumRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_3);
                    lv_event_0_0=ruleEVENT();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                      						}
                      						set(
                      							current,
                      							"event",
                      							lv_event_0_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.EVENT");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOptionedStandardEventTriggerAccess().getColonKeyword_0_1());
                      			
                    }
                    this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_2, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_0_2());
                      			
                    }
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_3, grammarAccess.getOptionedStandardEventTriggerAccess().getBEGINTerminalRuleCall_0_3());
                      			
                    }
                    otherlv_4=(Token)match(input,Types,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getOptionedStandardEventTriggerAccess().getTypesKeyword_0_4());
                      			
                    }
                    otherlv_5=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getOptionedStandardEventTriggerAccess().getColonKeyword_0_5());
                      			
                    }
                    // InternalGitHubActionsParser.g:4619:4: ( ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:4620:5: ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_7= RULE_NEWLINE
                    {
                    // InternalGitHubActionsParser.g:4620:5: ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    // InternalGitHubActionsParser.g:4621:6: (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    {
                    // InternalGitHubActionsParser.g:4621:6: (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    // InternalGitHubActionsParser.g:4622:7: lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_0_6_0_0());
                      						
                    }
                    pushFollow(FOLLOW_5);
                    lv_eventTypes_6_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                      							}
                      							add(
                      								current,
                      								"eventTypes",
                      								lv_eventTypes_6_0,
                      								"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    this_NEWLINE_7=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_7, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_0_6_1());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4646:3: (otherlv_8= LeftSquareBracket ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_12= RightSquareBracket this_NEWLINE_13= RULE_NEWLINE )
                    {
                    // InternalGitHubActionsParser.g:4646:3: (otherlv_8= LeftSquareBracket ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_12= RightSquareBracket this_NEWLINE_13= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:4647:4: otherlv_8= LeftSquareBracket ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_12= RightSquareBracket this_NEWLINE_13= RULE_NEWLINE
                    {
                    otherlv_8=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_8, grammarAccess.getOptionedStandardEventTriggerAccess().getLeftSquareBracketKeyword_1_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:4651:4: ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    // InternalGitHubActionsParser.g:4652:5: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    {
                    // InternalGitHubActionsParser.g:4652:5: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    // InternalGitHubActionsParser.g:4653:6: lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_eventTypes_9_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                      						}
                      						add(
                      							current,
                      							"eventTypes",
                      							lv_eventTypes_9_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalGitHubActionsParser.g:4670:4: (otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==Comma) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4671:5: otherlv_10= Comma ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	    {
                    	    otherlv_10=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_10, grammarAccess.getOptionedStandardEventTriggerAccess().getCommaKeyword_1_2_0());
                    	      				
                    	    }
                    	    // InternalGitHubActionsParser.g:4675:5: ( (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	    // InternalGitHubActionsParser.g:4676:6: (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    {
                    	    // InternalGitHubActionsParser.g:4676:6: (lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    // InternalGitHubActionsParser.g:4677:7: lv_eventTypes_11_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_1_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_eventTypes_11_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"eventTypes",
                    	      								lv_eventTypes_11_0,
                    	      								"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);

                    otherlv_12=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_12, grammarAccess.getOptionedStandardEventTriggerAccess().getRightSquareBracketKeyword_1_3());
                      			
                    }
                    this_NEWLINE_13=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_13, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_1_4());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:4705:3: ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) this_END_20= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:4705:3: ( (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) this_END_20= RULE_END )
                    // InternalGitHubActionsParser.g:4706:4: (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) this_END_20= RULE_END
                    {
                    // InternalGitHubActionsParser.g:4706:4: (this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END )
                    // InternalGitHubActionsParser.g:4707:5: this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END
                    {
                    this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_14, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_2_0_0());
                      				
                    }
                    this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_15, grammarAccess.getOptionedStandardEventTriggerAccess().getBEGINTerminalRuleCall_2_0_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:4715:5: (otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE )+
                    int cnt59=0;
                    loop59:
                    do {
                        int alt59=2;
                        int LA59_0 = input.LA(1);

                        if ( (LA59_0==HyphenMinus) ) {
                            alt59=1;
                        }


                        switch (alt59) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4716:6: otherlv_16= HyphenMinus ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_18= RULE_NEWLINE
                    	    {
                    	    otherlv_16=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_16, grammarAccess.getOptionedStandardEventTriggerAccess().getHyphenMinusKeyword_2_0_2_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:4720:6: ( (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	    // InternalGitHubActionsParser.g:4721:7: (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    {
                    	    // InternalGitHubActionsParser.g:4721:7: (lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    // InternalGitHubActionsParser.g:4722:8: lv_eventTypes_17_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_2_0_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_eventTypes_17_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"eventTypes",
                    	      									lv_eventTypes_17_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_NEWLINE_18, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_2_0_2_2());
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt59 >= 1 ) break loop59;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(59, input);
                                throw eee;
                        }
                        cnt59++;
                    } while (true);

                    this_END_19=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_19, grammarAccess.getOptionedStandardEventTriggerAccess().getENDTerminalRuleCall_2_0_3());
                      				
                    }

                    }

                    this_END_20=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_20, grammarAccess.getOptionedStandardEventTriggerAccess().getENDTerminalRuleCall_2_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedStandardEventTrigger"


    // $ANTLR start "entryRuleOptionedWorkflowRunTrigger"
    // InternalGitHubActionsParser.g:4758:1: entryRuleOptionedWorkflowRunTrigger returns [EObject current=null] : iv_ruleOptionedWorkflowRunTrigger= ruleOptionedWorkflowRunTrigger EOF ;
    public final EObject entryRuleOptionedWorkflowRunTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedWorkflowRunTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4758:67: (iv_ruleOptionedWorkflowRunTrigger= ruleOptionedWorkflowRunTrigger EOF )
            // InternalGitHubActionsParser.g:4759:2: iv_ruleOptionedWorkflowRunTrigger= ruleOptionedWorkflowRunTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedWorkflowRunTrigger=ruleOptionedWorkflowRunTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedWorkflowRunTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedWorkflowRunTrigger"


    // $ANTLR start "ruleOptionedWorkflowRunTrigger"
    // InternalGitHubActionsParser.g:4765:1: ruleOptionedWorkflowRunTrigger returns [EObject current=null] : ( (otherlv_0= Workflow_run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) ) otherlv_6= Colon ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket this_NEWLINE_14= RULE_NEWLINE ) | ( (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ;
    public final EObject ruleOptionedWorkflowRunTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token lv_ignoreSpecifiedBranches_5_0=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token this_NEWLINE_14=null;
        Token this_NEWLINE_15=null;
        Token this_BEGIN_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_19=null;
        Token this_END_20=null;
        Token this_END_21=null;
        EObject lv_branches_7_0 = null;

        EObject lv_branches_10_0 = null;

        EObject lv_branches_12_0 = null;

        EObject lv_branches_18_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4771:2: ( ( (otherlv_0= Workflow_run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) ) otherlv_6= Colon ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket this_NEWLINE_14= RULE_NEWLINE ) | ( (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
            // InternalGitHubActionsParser.g:4772:2: ( (otherlv_0= Workflow_run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) ) otherlv_6= Colon ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket this_NEWLINE_14= RULE_NEWLINE ) | ( (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:4772:2: ( (otherlv_0= Workflow_run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) ) otherlv_6= Colon ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket this_NEWLINE_14= RULE_NEWLINE ) | ( (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
            int alt64=3;
            switch ( input.LA(1) ) {
            case Workflow_run:
                {
                alt64=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt64=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt64=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }

            switch (alt64) {
                case 1 :
                    // InternalGitHubActionsParser.g:4773:3: (otherlv_0= Workflow_run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) ) otherlv_6= Colon ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
                    {
                    // InternalGitHubActionsParser.g:4773:3: (otherlv_0= Workflow_run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) ) otherlv_6= Colon ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
                    // InternalGitHubActionsParser.g:4774:4: otherlv_0= Workflow_run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) ) otherlv_6= Colon ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
                    {
                    otherlv_0=(Token)match(input,Workflow_run,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getOptionedWorkflowRunTriggerAccess().getWorkflow_runKeyword_0_0());
                      			
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOptionedWorkflowRunTriggerAccess().getColonKeyword_0_1());
                      			
                    }
                    this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_2, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_0_2());
                      			
                    }
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_45); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_3, grammarAccess.getOptionedWorkflowRunTriggerAccess().getBEGINTerminalRuleCall_0_3());
                      			
                    }
                    // InternalGitHubActionsParser.g:4790:4: (otherlv_4= Branches | ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) ) )
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==Branches) ) {
                        alt61=1;
                    }
                    else if ( (LA61_0==BranchesIgnore) ) {
                        alt61=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 0, input);

                        throw nvae;
                    }
                    switch (alt61) {
                        case 1 :
                            // InternalGitHubActionsParser.g:4791:5: otherlv_4= Branches
                            {
                            otherlv_4=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_4, grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesKeyword_0_4_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalGitHubActionsParser.g:4796:5: ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) )
                            {
                            // InternalGitHubActionsParser.g:4796:5: ( (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore ) )
                            // InternalGitHubActionsParser.g:4797:6: (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore )
                            {
                            // InternalGitHubActionsParser.g:4797:6: (lv_ignoreSpecifiedBranches_5_0= BranchesIgnore )
                            // InternalGitHubActionsParser.g:4798:7: lv_ignoreSpecifiedBranches_5_0= BranchesIgnore
                            {
                            lv_ignoreSpecifiedBranches_5_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_ignoreSpecifiedBranches_5_0, grammarAccess.getOptionedWorkflowRunTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_0_4_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getOptionedWorkflowRunTriggerRule());
                              							}
                              							setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_5_0 != null, "branches-ignore");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_6, grammarAccess.getOptionedWorkflowRunTriggerAccess().getColonKeyword_0_5());
                      			
                    }
                    // InternalGitHubActionsParser.g:4815:4: ( ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:4816:5: ( (lv_branches_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
                    {
                    // InternalGitHubActionsParser.g:4816:5: ( (lv_branches_7_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:4817:6: (lv_branches_7_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:4817:6: (lv_branches_7_0= ruleExpression )
                    // InternalGitHubActionsParser.g:4818:7: lv_branches_7_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_0_6_0_0());
                      						
                    }
                    pushFollow(FOLLOW_5);
                    lv_branches_7_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                      							}
                      							add(
                      								current,
                      								"branches",
                      								lv_branches_7_0,
                      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_8, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_0_6_1());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4842:3: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket this_NEWLINE_14= RULE_NEWLINE )
                    {
                    // InternalGitHubActionsParser.g:4842:3: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket this_NEWLINE_14= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:4843:4: otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket this_NEWLINE_14= RULE_NEWLINE
                    {
                    otherlv_9=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_9, grammarAccess.getOptionedWorkflowRunTriggerAccess().getLeftSquareBracketKeyword_1_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:4847:4: ( (lv_branches_10_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:4848:5: (lv_branches_10_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:4848:5: (lv_branches_10_0= ruleExpression )
                    // InternalGitHubActionsParser.g:4849:6: lv_branches_10_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_9);
                    lv_branches_10_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                      						}
                      						add(
                      							current,
                      							"branches",
                      							lv_branches_10_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalGitHubActionsParser.g:4866:4: (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )*
                    loop62:
                    do {
                        int alt62=2;
                        int LA62_0 = input.LA(1);

                        if ( (LA62_0==Comma) ) {
                            alt62=1;
                        }


                        switch (alt62) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4867:5: otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) )
                    	    {
                    	    otherlv_11=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_11, grammarAccess.getOptionedWorkflowRunTriggerAccess().getCommaKeyword_1_2_0());
                    	      				
                    	    }
                    	    // InternalGitHubActionsParser.g:4871:5: ( (lv_branches_12_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:4872:6: (lv_branches_12_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:4872:6: (lv_branches_12_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:4873:7: lv_branches_12_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_1_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_branches_12_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"branches",
                    	      								lv_branches_12_0,
                    	      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop62;
                        }
                    } while (true);

                    otherlv_13=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_13, grammarAccess.getOptionedWorkflowRunTriggerAccess().getRightSquareBracketKeyword_1_3());
                      			
                    }
                    this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_14, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_1_4());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:4901:3: ( (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) this_END_21= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:4901:3: ( (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) this_END_21= RULE_END )
                    // InternalGitHubActionsParser.g:4902:4: (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) this_END_21= RULE_END
                    {
                    // InternalGitHubActionsParser.g:4902:4: (this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END )
                    // InternalGitHubActionsParser.g:4903:5: this_NEWLINE_15= RULE_NEWLINE this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END
                    {
                    this_NEWLINE_15=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_15, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_2_0_0());
                      				
                    }
                    this_BEGIN_16=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_16, grammarAccess.getOptionedWorkflowRunTriggerAccess().getBEGINTerminalRuleCall_2_0_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:4911:5: (otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+
                    int cnt63=0;
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);

                        if ( (LA63_0==HyphenMinus) ) {
                            alt63=1;
                        }


                        switch (alt63) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4912:6: otherlv_17= HyphenMinus ( (lv_branches_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE
                    	    {
                    	    otherlv_17=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_17, grammarAccess.getOptionedWorkflowRunTriggerAccess().getHyphenMinusKeyword_2_0_2_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:4916:6: ( (lv_branches_18_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:4917:7: (lv_branches_18_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:4917:7: (lv_branches_18_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:4918:8: lv_branches_18_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_2_0_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_branches_18_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"branches",
                    	      									lv_branches_18_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_19=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_NEWLINE_19, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_2_0_2_2());
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt63 >= 1 ) break loop63;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(63, input);
                                throw eee;
                        }
                        cnt63++;
                    } while (true);

                    this_END_20=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_20, grammarAccess.getOptionedWorkflowRunTriggerAccess().getENDTerminalRuleCall_2_0_3());
                      				
                    }

                    }

                    this_END_21=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_21, grammarAccess.getOptionedWorkflowRunTriggerAccess().getENDTerminalRuleCall_2_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedWorkflowRunTrigger"


    // $ANTLR start "entryRuleOptionedPullRequestTrigger"
    // InternalGitHubActionsParser.g:4954:1: entryRuleOptionedPullRequestTrigger returns [EObject current=null] : iv_ruleOptionedPullRequestTrigger= ruleOptionedPullRequestTrigger EOF ;
    public final EObject entryRuleOptionedPullRequestTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedPullRequestTrigger = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0()
        	);

        try {
            // InternalGitHubActionsParser.g:4960:2: (iv_ruleOptionedPullRequestTrigger= ruleOptionedPullRequestTrigger EOF )
            // InternalGitHubActionsParser.g:4961:2: iv_ruleOptionedPullRequestTrigger= ruleOptionedPullRequestTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedPullRequestTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedPullRequestTrigger=ruleOptionedPullRequestTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedPullRequestTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedPullRequestTrigger"


    // $ANTLR start "ruleOptionedPullRequestTrigger"
    // InternalGitHubActionsParser.g:4970:1: ruleOptionedPullRequestTrigger returns [EObject current=null] : ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END ) ) ) ;
    public final EObject ruleOptionedPullRequestTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_NEWLINE_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token this_NEWLINE_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_NEWLINE_16=null;
        Token this_NEWLINE_17=null;
        Token this_BEGIN_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        Token this_END_22=null;
        Token otherlv_23=null;
        Token lv_ignoreSpecifiedBranches_24_0=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        Token otherlv_40=null;
        Token lv_ignoreSpecifiedPaths_41_0=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token this_NEWLINE_50=null;
        Token this_NEWLINE_51=null;
        Token this_BEGIN_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token this_END_56=null;
        Token otherlv_58=null;
        Token lv_ignoreSpecifiedBranches_59_0=null;
        Token otherlv_60=null;
        Token this_NEWLINE_62=null;
        Token otherlv_63=null;
        Token otherlv_65=null;
        Token otherlv_67=null;
        Token this_NEWLINE_68=null;
        Token this_NEWLINE_69=null;
        Token this_BEGIN_70=null;
        Token otherlv_71=null;
        Token this_NEWLINE_73=null;
        Token this_END_74=null;
        Token otherlv_75=null;
        Token otherlv_76=null;
        Token this_NEWLINE_78=null;
        Token otherlv_79=null;
        Token otherlv_81=null;
        Token otherlv_83=null;
        Token this_NEWLINE_84=null;
        Token this_NEWLINE_85=null;
        Token this_BEGIN_86=null;
        Token otherlv_87=null;
        Token this_NEWLINE_89=null;
        Token this_END_90=null;
        Token otherlv_91=null;
        Token lv_ignoreSpecifiedPaths_92_0=null;
        Token otherlv_93=null;
        Token this_NEWLINE_95=null;
        Token otherlv_96=null;
        Token otherlv_98=null;
        Token otherlv_100=null;
        Token this_NEWLINE_101=null;
        Token this_NEWLINE_102=null;
        Token this_BEGIN_103=null;
        Token otherlv_104=null;
        Token this_NEWLINE_106=null;
        Token this_END_107=null;
        Token otherlv_109=null;
        Token lv_ignoreSpecifiedPaths_110_0=null;
        Token otherlv_111=null;
        Token this_NEWLINE_113=null;
        Token otherlv_114=null;
        Token otherlv_116=null;
        Token otherlv_118=null;
        Token this_NEWLINE_119=null;
        Token this_NEWLINE_120=null;
        Token this_BEGIN_121=null;
        Token otherlv_122=null;
        Token this_NEWLINE_124=null;
        Token this_END_125=null;
        Token otherlv_126=null;
        Token otherlv_127=null;
        Token this_NEWLINE_129=null;
        Token otherlv_130=null;
        Token otherlv_132=null;
        Token otherlv_134=null;
        Token this_NEWLINE_135=null;
        Token this_NEWLINE_136=null;
        Token this_BEGIN_137=null;
        Token otherlv_138=null;
        Token this_NEWLINE_140=null;
        Token this_END_141=null;
        Token otherlv_142=null;
        Token lv_ignoreSpecifiedBranches_143_0=null;
        Token otherlv_144=null;
        Token this_NEWLINE_146=null;
        Token otherlv_147=null;
        Token otherlv_149=null;
        Token otherlv_151=null;
        Token this_NEWLINE_152=null;
        Token this_NEWLINE_153=null;
        Token this_BEGIN_154=null;
        Token otherlv_155=null;
        Token this_NEWLINE_157=null;
        Token this_END_158=null;
        Token this_END_159=null;
        Enumerator lv_eventTypes_9_0 = null;

        Enumerator lv_eventTypes_12_0 = null;

        Enumerator lv_eventTypes_14_0 = null;

        Enumerator lv_eventTypes_20_0 = null;

        EObject lv_branches_26_0 = null;

        EObject lv_branches_29_0 = null;

        EObject lv_branches_31_0 = null;

        EObject lv_branches_37_0 = null;

        EObject lv_paths_43_0 = null;

        EObject lv_paths_46_0 = null;

        EObject lv_paths_48_0 = null;

        EObject lv_paths_54_0 = null;

        EObject lv_branches_61_0 = null;

        EObject lv_branches_64_0 = null;

        EObject lv_branches_66_0 = null;

        EObject lv_branches_72_0 = null;

        Enumerator lv_eventTypes_77_0 = null;

        Enumerator lv_eventTypes_80_0 = null;

        Enumerator lv_eventTypes_82_0 = null;

        Enumerator lv_eventTypes_88_0 = null;

        EObject lv_paths_94_0 = null;

        EObject lv_paths_97_0 = null;

        EObject lv_paths_99_0 = null;

        EObject lv_paths_105_0 = null;

        EObject lv_paths_112_0 = null;

        EObject lv_paths_115_0 = null;

        EObject lv_paths_117_0 = null;

        EObject lv_paths_123_0 = null;

        Enumerator lv_eventTypes_128_0 = null;

        Enumerator lv_eventTypes_131_0 = null;

        Enumerator lv_eventTypes_133_0 = null;

        Enumerator lv_eventTypes_139_0 = null;

        EObject lv_branches_145_0 = null;

        EObject lv_branches_148_0 = null;

        EObject lv_branches_150_0 = null;

        EObject lv_branches_156_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0()
        	);

        try {
            // InternalGitHubActionsParser.g:4981:2: ( ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END ) ) ) )
            // InternalGitHubActionsParser.g:4982:2: ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END ) ) )
            {
            // InternalGitHubActionsParser.g:4982:2: ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END ) ) )
            // InternalGitHubActionsParser.g:4983:3: () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:4983:3: ()
            // InternalGitHubActionsParser.g:4984:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedPullRequestTriggerAccess().getPullRequestTriggerAction_0(),
              					current);
              			
            }

            }

            // InternalGitHubActionsParser.g:4993:3: (otherlv_1= Pull_request | otherlv_2= Pull_request_target )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==Pull_request) ) {
                alt65=1;
            }
            else if ( (LA65_0==Pull_request_target) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    // InternalGitHubActionsParser.g:4994:4: otherlv_1= Pull_request
                    {
                    otherlv_1=(Token)match(input,Pull_request,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_requestKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4999:4: otherlv_2= Pull_request_target
                    {
                    otherlv_2=(Token)match(input,Pull_request_target,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_request_targetKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_3=(Token)match(input,Colon,FOLLOW_46); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:5008:3: ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END ) )
            int alt102=3;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // InternalGitHubActionsParser.g:5009:4: (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
                    {
                    // InternalGitHubActionsParser.g:5009:4: (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
                    // InternalGitHubActionsParser.g:5010:5: this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    {
                    this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_4, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_0());
                      				
                    }
                    this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_47); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_5, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:5018:5: ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:5019:6: ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:5019:6: ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:5020:7: ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2());
                    // InternalGitHubActionsParser.g:5023:7: ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:5024:8: ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:5024:8: ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+
                    int cnt77=0;
                    loop77:
                    do {
                        int alt77=3;
                        alt77 = dfa77.predict(input);
                        switch (alt77) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:5025:6: ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:5025:6: ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:5026:7: {...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:5026:129: ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
                    	    // InternalGitHubActionsParser.g:5027:8: ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0);
                    	    // InternalGitHubActionsParser.g:5030:11: ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
                    	    // InternalGitHubActionsParser.g:5030:12: {...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:5030:21: ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
                    	    // InternalGitHubActionsParser.g:5030:22: ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
                    	    {
                    	    // InternalGitHubActionsParser.g:5030:22: ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) )
                    	    int alt68=3;
                    	    switch ( input.LA(1) ) {
                    	    case Types:
                    	        {
                    	        alt68=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt68=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt68=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 68, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt68) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:5031:12: (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:5031:12: (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:5032:13: otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE )
                    	            {
                    	            otherlv_7=(Token)match(input,Types,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_7, grammarAccess.getOptionedPullRequestTriggerAccess().getTypesKeyword_3_0_2_0_0_0_0());
                    	              												
                    	            }
                    	            otherlv_8=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_8, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_0_2_0_0_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:5040:13: ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5041:14: ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:5041:14: ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            // InternalGitHubActionsParser.g:5042:15: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5042:15: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            // InternalGitHubActionsParser.g:5043:16: lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_eventTypes_9_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"eventTypes",
                    	              																	lv_eventTypes_9_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_10, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:5067:12: (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5067:12: (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5068:13: otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE
                    	            {
                    	            otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_11, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_0_2_0_0_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:5072:13: ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            // InternalGitHubActionsParser.g:5073:14: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5073:14: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            // InternalGitHubActionsParser.g:5074:15: lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_eventTypes_12_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"eventTypes",
                    	              																lv_eventTypes_12_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:5091:13: (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                    	            loop66:
                    	            do {
                    	                int alt66=2;
                    	                int LA66_0 = input.LA(1);

                    	                if ( (LA66_0==Comma) ) {
                    	                    alt66=1;
                    	                }


                    	                switch (alt66) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5092:14: otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    {
                    	            	    otherlv_13=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_13, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_0_2_0_0_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5096:14: ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    // InternalGitHubActionsParser.g:5097:15: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5097:15: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    // InternalGitHubActionsParser.g:5098:16: lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_eventTypes_14_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"eventTypes",
                    	            	      																	lv_eventTypes_14_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop66;
                    	                }
                    	            } while (true);

                    	            otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_15, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_0_2_0_0_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_16, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:5126:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:5126:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                    	            // InternalGitHubActionsParser.g:5127:13: this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END
                    	            {
                    	            this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_17, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_18, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:5135:13: (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+
                    	            int cnt67=0;
                    	            loop67:
                    	            do {
                    	                int alt67=2;
                    	                int LA67_0 = input.LA(1);

                    	                if ( (LA67_0==HyphenMinus) ) {
                    	                    alt67=1;
                    	                }


                    	                switch (alt67) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5136:14: otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_19=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_19, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_0_2_0_0_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5140:14: ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    // InternalGitHubActionsParser.g:5141:15: (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5141:15: (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    // InternalGitHubActionsParser.g:5142:16: lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_eventTypes_20_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"eventTypes",
                    	            	      																	lv_eventTypes_20_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_21, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt67 >= 1 ) break loop67;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(67, input);
                    	                        throw eee;
                    	                }
                    	                cnt67++;
                    	            } while (true);

                    	            this_END_22=(Token)match(input,RULE_END,FOLLOW_48); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_22, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    // InternalGitHubActionsParser.g:5170:11: ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
                    	    int alt72=4;
                    	    alt72 = dfa72.predict(input);
                    	    switch (alt72) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:5171:12: ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:5171:12: ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:5172:13: (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5172:13: (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) )
                    	            int alt69=2;
                    	            int LA69_0 = input.LA(1);

                    	            if ( (LA69_0==Branches) ) {
                    	                alt69=1;
                    	            }
                    	            else if ( (LA69_0==BranchesIgnore) ) {
                    	                alt69=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 69, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt69) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:5173:14: otherlv_23= Branches
                    	                    {
                    	                    otherlv_23=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(otherlv_23, grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesKeyword_3_0_2_0_1_0_0_0());
                    	                      													
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:5178:14: ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5178:14: ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) )
                    	                    // InternalGitHubActionsParser.g:5179:15: (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5179:15: (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore )
                    	                    // InternalGitHubActionsParser.g:5180:16: lv_ignoreSpecifiedBranches_24_0= BranchesIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedBranches_24_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      																newLeafNode(lv_ignoreSpecifiedBranches_24_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_0_2_0_1_0_0_1_0());
                    	                      															
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      																if (current==null) {
                    	                      																	current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
                    	                      																}
                    	                      																setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_24_0 != null, "branches-ignore");
                    	                      															
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_25, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_0_2_0_1_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:5197:13: ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5198:14: ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:5198:14: ( (lv_branches_26_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5199:15: (lv_branches_26_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5199:15: (lv_branches_26_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5200:16: lv_branches_26_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_branches_26_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"branches",
                    	              																	lv_branches_26_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_27, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5225:13: otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
                    	            {
                    	            otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_28, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_0_2_0_1_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:5229:13: ( (lv_branches_29_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5231:15: lv_branches_29_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_branches_29_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"branches",
                    	              																lv_branches_29_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:5248:13: (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )*
                    	            loop70:
                    	            do {
                    	                int alt70=2;
                    	                int LA70_0 = input.LA(1);

                    	                if ( (LA70_0==Comma) ) {
                    	                    alt70=1;
                    	                }


                    	                switch (alt70) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5249:14: otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_30, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_0_2_0_1_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5253:14: ( (lv_branches_31_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5255:16: lv_branches_31_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_branches_31_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"branches",
                    	            	      																	lv_branches_31_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop70;
                    	                }
                    	            } while (true);

                    	            otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_32, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_0_2_0_1_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_33, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                    	            // InternalGitHubActionsParser.g:5284:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
                    	            {
                    	            this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_34, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_35, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_1_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:5292:13: (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
                    	            int cnt71=0;
                    	            loop71:
                    	            do {
                    	                int alt71=2;
                    	                int LA71_0 = input.LA(1);

                    	                if ( (LA71_0==HyphenMinus) ) {
                    	                    alt71=1;
                    	                }


                    	                switch (alt71) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5293:14: otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_36, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_0_2_0_1_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5297:14: ( (lv_branches_37_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5299:16: lv_branches_37_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_branches_37_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"branches",
                    	            	      																	lv_branches_37_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_38, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt71 >= 1 ) break loop71;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(71, input);
                    	                        throw eee;
                    	                }
                    	                cnt71++;
                    	            } while (true);

                    	            this_END_39=(Token)match(input,RULE_END,FOLLOW_49); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_39, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_2_0_1_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:5333:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:5333:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:5334:7: {...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:5334:129: ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:5335:8: ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1);
                    	    // InternalGitHubActionsParser.g:5338:11: ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:5338:12: {...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:5338:21: ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
                    	    int alt76=3;
                    	    switch ( input.LA(1) ) {
                    	    case PathsIgnore:
                    	    case Paths:
                    	        {
                    	        alt76=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt76=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt76=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 76, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt76) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:5338:22: ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:5338:22: ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:5339:12: (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5339:12: (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) )
                    	            int alt73=2;
                    	            int LA73_0 = input.LA(1);

                    	            if ( (LA73_0==Paths) ) {
                    	                alt73=1;
                    	            }
                    	            else if ( (LA73_0==PathsIgnore) ) {
                    	                alt73=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 73, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt73) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:5340:13: otherlv_40= Paths
                    	                    {
                    	                    otherlv_40=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      													newLeafNode(otherlv_40, grammarAccess.getOptionedPullRequestTriggerAccess().getPathsKeyword_3_0_2_1_0_0_0());
                    	                      												
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:5345:13: ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5345:13: ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:5346:14: (lv_ignoreSpecifiedPaths_41_0= PathsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5346:14: (lv_ignoreSpecifiedPaths_41_0= PathsIgnore )
                    	                    // InternalGitHubActionsParser.g:5347:15: lv_ignoreSpecifiedPaths_41_0= PathsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedPaths_41_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      															newLeafNode(lv_ignoreSpecifiedPaths_41_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_0_2_1_0_0_1_0());
                    	                      														
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      															if (current==null) {
                    	                      																current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
                    	                      															}
                    	                      															setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_41_0 != null, "paths-ignore");
                    	                      														
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_42, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_0_2_1_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5364:12: ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5365:13: ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:5365:13: ( (lv_paths_43_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5366:14: (lv_paths_43_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5366:14: (lv_paths_43_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5367:15: lv_paths_43_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_paths_43_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"paths",
                    	              																lv_paths_43_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_44, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:5391:11: (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5391:11: (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5392:12: otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE
                    	            {
                    	            otherlv_45=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_45, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_0_2_1_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5396:12: ( (lv_paths_46_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5397:13: (lv_paths_46_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5397:13: (lv_paths_46_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5398:14: lv_paths_46_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_paths_46_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"paths",
                    	              															lv_paths_46_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:5415:12: (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )*
                    	            loop74:
                    	            do {
                    	                int alt74=2;
                    	                int LA74_0 = input.LA(1);

                    	                if ( (LA74_0==Comma) ) {
                    	                    alt74=1;
                    	                }


                    	                switch (alt74) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5416:13: otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_47=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_47, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_0_2_1_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5420:13: ( (lv_paths_48_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5421:14: (lv_paths_48_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5421:14: (lv_paths_48_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5422:15: lv_paths_48_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_paths_48_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"paths",
                    	            	      																lv_paths_48_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop74;
                    	                }
                    	            } while (true);

                    	            otherlv_49=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_49, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_0_2_1_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_50=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_50, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:5450:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:5450:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                    	            // InternalGitHubActionsParser.g:5451:12: this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END
                    	            {
                    	            this_NEWLINE_51=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_51, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_52=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_52, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5459:12: (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+
                    	            int cnt75=0;
                    	            loop75:
                    	            do {
                    	                int alt75=2;
                    	                int LA75_0 = input.LA(1);

                    	                if ( (LA75_0==HyphenMinus) ) {
                    	                    alt75=1;
                    	                }


                    	                switch (alt75) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5460:13: otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_53=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_53, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_0_2_1_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5464:13: ( (lv_paths_54_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5465:14: (lv_paths_54_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5465:14: (lv_paths_54_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5466:15: lv_paths_54_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_paths_54_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"paths",
                    	            	      																lv_paths_54_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_55, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt75 >= 1 ) break loop75;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(75, input);
                    	                        throw eee;
                    	                }
                    	                cnt75++;
                    	            } while (true);

                    	            this_END_56=(Token)match(input,RULE_END,FOLLOW_49); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_56, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_2_1_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt77 >= 1 ) break loop77;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(77, input);
                                throw eee;
                        }
                        cnt77++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2());

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:5509:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    {
                    // InternalGitHubActionsParser.g:5509:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:5510:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:5510:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:5511:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1());
                    // InternalGitHubActionsParser.g:5514:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:5515:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:5515:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+
                    int cnt89=0;
                    loop89:
                    do {
                        int alt89=3;
                        int LA89_0 = input.LA(1);

                        if ( LA89_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                            alt89=1;
                        }
                        else if ( LA89_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                            alt89=1;
                        }
                        else if ( (LA89_0==LeftSquareBracket) ) {
                            int LA89_5 = input.LA(2);

                            if ( synpred167_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                                alt89=1;
                            }
                            else if ( synpred173_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                                alt89=2;
                            }


                        }
                        else if ( (LA89_0==RULE_NEWLINE) ) {
                            int LA89_6 = input.LA(2);

                            if ( synpred167_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                                alt89=1;
                            }
                            else if ( synpred173_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                                alt89=2;
                            }


                        }
                        else if ( LA89_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                            alt89=2;
                        }
                        else if ( LA89_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                            alt89=2;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:5516:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:5516:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:5517:6: {...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:5517:126: ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) )
                    	    // InternalGitHubActionsParser.g:5518:7: ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0);
                    	    // InternalGitHubActionsParser.g:5521:10: ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) )
                    	    // InternalGitHubActionsParser.g:5521:11: {...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:5521:20: ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? )
                    	    // InternalGitHubActionsParser.g:5521:21: ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )?
                    	    {
                    	    // InternalGitHubActionsParser.g:5521:21: ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) )
                    	    int alt81=3;
                    	    switch ( input.LA(1) ) {
                    	    case BranchesIgnore:
                    	    case Branches:
                    	        {
                    	        alt81=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt81=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt81=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 81, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt81) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:5522:11: ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:5522:11: ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:5523:12: (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5523:12: (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) )
                    	            int alt78=2;
                    	            int LA78_0 = input.LA(1);

                    	            if ( (LA78_0==Branches) ) {
                    	                alt78=1;
                    	            }
                    	            else if ( (LA78_0==BranchesIgnore) ) {
                    	                alt78=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 78, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt78) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:5524:13: otherlv_58= Branches
                    	                    {
                    	                    otherlv_58=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      													newLeafNode(otherlv_58, grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesKeyword_3_1_0_0_0_0_0());
                    	                      												
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:5529:13: ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5529:13: ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) )
                    	                    // InternalGitHubActionsParser.g:5530:14: (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5530:14: (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore )
                    	                    // InternalGitHubActionsParser.g:5531:15: lv_ignoreSpecifiedBranches_59_0= BranchesIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedBranches_59_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      															newLeafNode(lv_ignoreSpecifiedBranches_59_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_1_0_0_0_0_1_0());
                    	                      														
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      															if (current==null) {
                    	                      																current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
                    	                      															}
                    	                      															setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_59_0 != null, "branches-ignore");
                    	                      														
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_60, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_1_0_0_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5548:12: ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5549:13: ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:5549:13: ( (lv_branches_61_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5550:14: (lv_branches_61_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5550:14: (lv_branches_61_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5551:15: lv_branches_61_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_branches_61_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"branches",
                    	              																lv_branches_61_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_62=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_62, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:5575:11: (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5575:11: (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5576:12: otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE
                    	            {
                    	            otherlv_63=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_63, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_1_0_0_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5580:12: ( (lv_branches_64_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5581:13: (lv_branches_64_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5581:13: (lv_branches_64_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5582:14: lv_branches_64_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_branches_64_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"branches",
                    	              															lv_branches_64_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:5599:12: (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )*
                    	            loop79:
                    	            do {
                    	                int alt79=2;
                    	                int LA79_0 = input.LA(1);

                    	                if ( (LA79_0==Comma) ) {
                    	                    alt79=1;
                    	                }


                    	                switch (alt79) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5600:13: otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_65=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_65, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_1_0_0_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5604:13: ( (lv_branches_66_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5605:14: (lv_branches_66_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5605:14: (lv_branches_66_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5606:15: lv_branches_66_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_branches_66_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"branches",
                    	            	      																lv_branches_66_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop79;
                    	                }
                    	            } while (true);

                    	            otherlv_67=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_67, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_1_0_0_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_68=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_68, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:5634:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:5634:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                    	            // InternalGitHubActionsParser.g:5635:12: this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END
                    	            {
                    	            this_NEWLINE_69=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_69, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_70=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_70, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5643:12: (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+
                    	            int cnt80=0;
                    	            loop80:
                    	            do {
                    	                int alt80=2;
                    	                int LA80_0 = input.LA(1);

                    	                if ( (LA80_0==HyphenMinus) ) {
                    	                    alt80=1;
                    	                }


                    	                switch (alt80) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5644:13: otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_71=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_71, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_1_0_0_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5648:13: ( (lv_branches_72_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5649:14: (lv_branches_72_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5649:14: (lv_branches_72_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5650:15: lv_branches_72_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_branches_72_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"branches",
                    	            	      																lv_branches_72_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_73, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt80 >= 1 ) break loop80;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(80, input);
                    	                        throw eee;
                    	                }
                    	                cnt80++;
                    	            } while (true);

                    	            this_END_74=(Token)match(input,RULE_END,FOLLOW_48); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_74, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_0_0_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    // InternalGitHubActionsParser.g:5678:10: ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )?
                    	    int alt84=4;
                    	    switch ( input.LA(1) ) {
                    	        case Types:
                    	            {
                    	            alt84=1;
                    	            }
                    	            break;
                    	        case LeftSquareBracket:
                    	            {
                    	            int LA84_2 = input.LA(2);

                    	            if ( ((LA84_2>=Review_request_removed && LA84_2<=Auto_merge_disabled)||LA84_2==Auto_merge_enabled||LA84_2==Converted_to_draft||LA84_2==Ready_for_review||LA84_2==Review_requested||LA84_2==Synchronize||LA84_2==Unassigned||(LA84_2>=Unlabeled && LA84_2<=Assigned)||LA84_2==Reopened||LA84_2==Unlocked||LA84_2==Created||LA84_2==Deleted||LA84_2==Labeled||LA84_2==Closed||LA84_2==Edited||LA84_2==Locked||LA84_2==Opened) ) {
                    	                alt84=2;
                    	            }
                    	            }
                    	            break;
                    	        case RULE_NEWLINE:
                    	            {
                    	            int LA84_3 = input.LA(2);

                    	            if ( (LA84_3==RULE_BEGIN) ) {
                    	                int LA84_6 = input.LA(3);

                    	                if ( (LA84_6==HyphenMinus) ) {
                    	                    int LA84_7 = input.LA(4);

                    	                    if ( ((LA84_7>=Review_request_removed && LA84_7<=Auto_merge_disabled)||LA84_7==Auto_merge_enabled||LA84_7==Converted_to_draft||LA84_7==Ready_for_review||LA84_7==Review_requested||LA84_7==Synchronize||LA84_7==Unassigned||(LA84_7>=Unlabeled && LA84_7<=Assigned)||LA84_7==Reopened||LA84_7==Unlocked||LA84_7==Created||LA84_7==Deleted||LA84_7==Labeled||LA84_7==Closed||LA84_7==Edited||LA84_7==Locked||LA84_7==Opened) ) {
                    	                        alt84=3;
                    	                    }
                    	                }
                    	            }
                    	            }
                    	            break;
                    	    }

                    	    switch (alt84) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:5679:11: (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:5679:11: (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:5680:12: otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE )
                    	            {
                    	            otherlv_75=(Token)match(input,Types,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_75, grammarAccess.getOptionedPullRequestTriggerAccess().getTypesKeyword_3_1_0_1_0_0());
                    	              											
                    	            }
                    	            otherlv_76=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_76, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_1_0_1_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5688:12: ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5689:13: ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:5689:13: ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            // InternalGitHubActionsParser.g:5690:14: (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5690:14: (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            // InternalGitHubActionsParser.g:5691:15: lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_eventTypes_77_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"eventTypes",
                    	              																lv_eventTypes_77_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_78=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_78, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:5715:11: (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5715:11: (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5716:12: otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE
                    	            {
                    	            otherlv_79=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_79, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_1_0_1_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5720:12: ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            // InternalGitHubActionsParser.g:5721:13: (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5721:13: (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            // InternalGitHubActionsParser.g:5722:14: lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_eventTypes_80_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"eventTypes",
                    	              															lv_eventTypes_80_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:5739:12: (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                    	            loop82:
                    	            do {
                    	                int alt82=2;
                    	                int LA82_0 = input.LA(1);

                    	                if ( (LA82_0==Comma) ) {
                    	                    alt82=1;
                    	                }


                    	                switch (alt82) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5740:13: otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    {
                    	            	    otherlv_81=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_81, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_1_0_1_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5744:13: ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    // InternalGitHubActionsParser.g:5745:14: (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5745:14: (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    // InternalGitHubActionsParser.g:5746:15: lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_eventTypes_82_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"eventTypes",
                    	            	      																lv_eventTypes_82_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop82;
                    	                }
                    	            } while (true);

                    	            otherlv_83=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_83, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_1_0_1_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_84=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_84, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:5774:11: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:5774:11: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END )
                    	            // InternalGitHubActionsParser.g:5775:12: this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END
                    	            {
                    	            this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_85, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_86=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_86, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_0_1_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:5783:12: (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+
                    	            int cnt83=0;
                    	            loop83:
                    	            do {
                    	                int alt83=2;
                    	                int LA83_0 = input.LA(1);

                    	                if ( (LA83_0==HyphenMinus) ) {
                    	                    alt83=1;
                    	                }


                    	                switch (alt83) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5784:13: otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_87=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_87, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_1_0_1_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5788:13: ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    // InternalGitHubActionsParser.g:5789:14: (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5789:14: (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    // InternalGitHubActionsParser.g:5790:15: lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_eventTypes_88_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"eventTypes",
                    	            	      																lv_eventTypes_88_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_89=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_89, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt83 >= 1 ) break loop83;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(83, input);
                    	                        throw eee;
                    	                }
                    	                cnt83++;
                    	            } while (true);

                    	            this_END_90=(Token)match(input,RULE_END,FOLLOW_50); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_90, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_0_1_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:5824:5: ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:5824:5: ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:5825:6: {...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:5825:126: ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:5826:7: ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1);
                    	    // InternalGitHubActionsParser.g:5829:10: ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:5829:11: {...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:5829:20: ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) )
                    	    int alt88=3;
                    	    switch ( input.LA(1) ) {
                    	    case PathsIgnore:
                    	    case Paths:
                    	        {
                    	        alt88=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt88=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt88=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 88, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt88) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:5829:21: ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:5829:21: ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:5830:11: (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5830:11: (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) )
                    	            int alt85=2;
                    	            int LA85_0 = input.LA(1);

                    	            if ( (LA85_0==Paths) ) {
                    	                alt85=1;
                    	            }
                    	            else if ( (LA85_0==PathsIgnore) ) {
                    	                alt85=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 85, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt85) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:5831:12: otherlv_91= Paths
                    	                    {
                    	                    otherlv_91=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      												newLeafNode(otherlv_91, grammarAccess.getOptionedPullRequestTriggerAccess().getPathsKeyword_3_1_1_0_0_0());
                    	                      											
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:5836:12: ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5836:12: ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:5837:13: (lv_ignoreSpecifiedPaths_92_0= PathsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:5837:13: (lv_ignoreSpecifiedPaths_92_0= PathsIgnore )
                    	                    // InternalGitHubActionsParser.g:5838:14: lv_ignoreSpecifiedPaths_92_0= PathsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedPaths_92_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(lv_ignoreSpecifiedPaths_92_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_1_1_0_0_1_0());
                    	                      													
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      														if (current==null) {
                    	                      															current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
                    	                      														}
                    	                      														setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_92_0 != null, "paths-ignore");
                    	                      													
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_93=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_93, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_1_1_0_1());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:5855:11: ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5856:12: ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:5856:12: ( (lv_paths_94_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5857:13: (lv_paths_94_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5857:13: (lv_paths_94_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5858:14: lv_paths_94_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_0_2_0_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_paths_94_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"paths",
                    	              															lv_paths_94_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_95=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_95, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_0_2_1());
                    	              											
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:5882:10: (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:5882:10: (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:5883:11: otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE
                    	            {
                    	            otherlv_96=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_96, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_1_1_1_0());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:5887:11: ( (lv_paths_97_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:5888:12: (lv_paths_97_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:5888:12: (lv_paths_97_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:5889:13: lv_paths_97_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_1_0());
                    	              												
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_paths_97_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													if (current==null) {
                    	              														current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              													}
                    	              													add(
                    	              														current,
                    	              														"paths",
                    	              														lv_paths_97_0,
                    	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              													afterParserOrEnumRuleCall();
                    	              												
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:5906:11: (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )*
                    	            loop86:
                    	            do {
                    	                int alt86=2;
                    	                int LA86_0 = input.LA(1);

                    	                if ( (LA86_0==Comma) ) {
                    	                    alt86=1;
                    	                }


                    	                switch (alt86) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5907:12: otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_98=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(otherlv_98, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_1_1_1_2_0());
                    	            	      											
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5911:12: ( (lv_paths_99_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5912:13: (lv_paths_99_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5912:13: (lv_paths_99_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5913:14: lv_paths_99_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_2_1_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_paths_99_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"paths",
                    	            	      															lv_paths_99_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop86;
                    	                }
                    	            } while (true);

                    	            otherlv_100=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_100, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_1_1_1_3());
                    	              										
                    	            }
                    	            this_NEWLINE_101=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_NEWLINE_101, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_1_4());
                    	              										
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:5941:10: (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:5941:10: (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END )
                    	            // InternalGitHubActionsParser.g:5942:11: this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END
                    	            {
                    	            this_NEWLINE_102=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_NEWLINE_102, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0());
                    	              										
                    	            }
                    	            this_BEGIN_103=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_BEGIN_103, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_1_2_1());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:5950:11: (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+
                    	            int cnt87=0;
                    	            loop87:
                    	            do {
                    	                int alt87=2;
                    	                int LA87_0 = input.LA(1);

                    	                if ( (LA87_0==HyphenMinus) ) {
                    	                    alt87=1;
                    	                }


                    	                switch (alt87) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:5951:12: otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_104=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(otherlv_104, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_1_1_2_2_0());
                    	            	      											
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:5955:12: ( (lv_paths_105_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:5956:13: (lv_paths_105_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:5956:13: (lv_paths_105_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:5957:14: lv_paths_105_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_2_2_1_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_paths_105_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"paths",
                    	            	      															lv_paths_105_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_106=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(this_NEWLINE_106, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_2_2());
                    	            	      											
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt87 >= 1 ) break loop87;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(87, input);
                    	                        throw eee;
                    	                }
                    	                cnt87++;
                    	            } while (true);

                    	            this_END_107=(Token)match(input,RULE_END,FOLLOW_50); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_END_107, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_1_2_3());
                    	              										
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt89 >= 1 ) break loop89;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(89, input);
                                throw eee;
                        }
                        cnt89++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1());

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:5999:4: ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:5999:4: ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END )
                    // InternalGitHubActionsParser.g:6000:5: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END
                    {
                    // InternalGitHubActionsParser.g:6000:5: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:6001:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:6001:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:6002:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0());
                    // InternalGitHubActionsParser.g:6005:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:6006:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:6006:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+
                    int cnt101=0;
                    loop101:
                    do {
                        int alt101=3;
                        int LA101_0 = input.LA(1);

                        if ( LA101_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                            alt101=1;
                        }
                        else if ( LA101_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                            alt101=1;
                        }
                        else if ( (LA101_0==LeftSquareBracket) ) {
                            int LA101_4 = input.LA(2);

                            if ( synpred185_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                                alt101=1;
                            }
                            else if ( synpred191_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                                alt101=2;
                            }


                        }
                        else if ( (LA101_0==RULE_NEWLINE) ) {
                            int LA101_5 = input.LA(2);

                            if ( synpred185_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                                alt101=1;
                            }
                            else if ( synpred191_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                                alt101=2;
                            }


                        }
                        else if ( LA101_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                            alt101=2;
                        }
                        else if ( LA101_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                            alt101=2;
                        }


                        switch (alt101) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:6007:6: ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:6007:6: ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:6008:7: {...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:6008:129: ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) )
                    	    // InternalGitHubActionsParser.g:6009:8: ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0);
                    	    // InternalGitHubActionsParser.g:6012:11: ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) )
                    	    // InternalGitHubActionsParser.g:6012:12: {...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:6012:21: ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? )
                    	    // InternalGitHubActionsParser.g:6012:22: ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )?
                    	    {
                    	    // InternalGitHubActionsParser.g:6012:22: ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) )
                    	    int alt93=3;
                    	    switch ( input.LA(1) ) {
                    	    case PathsIgnore:
                    	    case Paths:
                    	        {
                    	        alt93=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt93=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt93=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 93, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt93) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:6013:12: ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:6013:12: ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:6014:13: (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6014:13: (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) )
                    	            int alt90=2;
                    	            int LA90_0 = input.LA(1);

                    	            if ( (LA90_0==Paths) ) {
                    	                alt90=1;
                    	            }
                    	            else if ( (LA90_0==PathsIgnore) ) {
                    	                alt90=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 90, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt90) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:6015:14: otherlv_109= Paths
                    	                    {
                    	                    otherlv_109=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(otherlv_109, grammarAccess.getOptionedPullRequestTriggerAccess().getPathsKeyword_3_2_0_0_0_0_0_0());
                    	                      													
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:6020:14: ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6020:14: ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:6021:15: (lv_ignoreSpecifiedPaths_110_0= PathsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6021:15: (lv_ignoreSpecifiedPaths_110_0= PathsIgnore )
                    	                    // InternalGitHubActionsParser.g:6022:16: lv_ignoreSpecifiedPaths_110_0= PathsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedPaths_110_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      																newLeafNode(lv_ignoreSpecifiedPaths_110_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_2_0_0_0_0_0_1_0());
                    	                      															
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      																if (current==null) {
                    	                      																	current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
                    	                      																}
                    	                      																setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_110_0 != null, "paths-ignore");
                    	                      															
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_111=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_111, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_2_0_0_0_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6039:13: ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6040:14: ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:6040:14: ( (lv_paths_112_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6041:15: (lv_paths_112_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6041:15: (lv_paths_112_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6042:16: lv_paths_112_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_paths_112_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"paths",
                    	              																	lv_paths_112_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_113=(Token)match(input,RULE_NEWLINE,FOLLOW_51); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_113, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:6066:12: (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6066:12: (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6067:13: otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE
                    	            {
                    	            otherlv_114=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_114, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_2_0_0_0_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6071:13: ( (lv_paths_115_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6072:14: (lv_paths_115_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6072:14: (lv_paths_115_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6073:15: lv_paths_115_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_paths_115_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"paths",
                    	              																lv_paths_115_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:6090:13: (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )*
                    	            loop91:
                    	            do {
                    	                int alt91=2;
                    	                int LA91_0 = input.LA(1);

                    	                if ( (LA91_0==Comma) ) {
                    	                    alt91=1;
                    	                }


                    	                switch (alt91) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6091:14: otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_116=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_116, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_2_0_0_0_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6095:14: ( (lv_paths_117_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6096:15: (lv_paths_117_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6096:15: (lv_paths_117_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6097:16: lv_paths_117_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_paths_117_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"paths",
                    	            	      																	lv_paths_117_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop91;
                    	                }
                    	            } while (true);

                    	            otherlv_118=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_118, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_2_0_0_0_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_119=(Token)match(input,RULE_NEWLINE,FOLLOW_51); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_119, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:6125:12: (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:6125:12: (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END )
                    	            // InternalGitHubActionsParser.g:6126:13: this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END
                    	            {
                    	            this_NEWLINE_120=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_120, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_121=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_121, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6134:13: (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+
                    	            int cnt92=0;
                    	            loop92:
                    	            do {
                    	                int alt92=2;
                    	                int LA92_0 = input.LA(1);

                    	                if ( (LA92_0==HyphenMinus) ) {
                    	                    alt92=1;
                    	                }


                    	                switch (alt92) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6135:14: otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_122=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_122, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_2_0_0_0_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6139:14: ( (lv_paths_123_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6140:15: (lv_paths_123_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6140:15: (lv_paths_123_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6141:16: lv_paths_123_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_paths_123_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"paths",
                    	            	      																	lv_paths_123_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_124=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_124, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt92 >= 1 ) break loop92;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(92, input);
                    	                        throw eee;
                    	                }
                    	                cnt92++;
                    	            } while (true);

                    	            this_END_125=(Token)match(input,RULE_END,FOLLOW_51); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_125, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    // InternalGitHubActionsParser.g:6169:11: ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )?
                    	    int alt96=4;
                    	    switch ( input.LA(1) ) {
                    	        case Types:
                    	            {
                    	            alt96=1;
                    	            }
                    	            break;
                    	        case LeftSquareBracket:
                    	            {
                    	            int LA96_2 = input.LA(2);

                    	            if ( ((LA96_2>=Review_request_removed && LA96_2<=Auto_merge_disabled)||LA96_2==Auto_merge_enabled||LA96_2==Converted_to_draft||LA96_2==Ready_for_review||LA96_2==Review_requested||LA96_2==Synchronize||LA96_2==Unassigned||(LA96_2>=Unlabeled && LA96_2<=Assigned)||LA96_2==Reopened||LA96_2==Unlocked||LA96_2==Created||LA96_2==Deleted||LA96_2==Labeled||LA96_2==Closed||LA96_2==Edited||LA96_2==Locked||LA96_2==Opened) ) {
                    	                alt96=2;
                    	            }
                    	            }
                    	            break;
                    	        case RULE_NEWLINE:
                    	            {
                    	            int LA96_3 = input.LA(2);

                    	            if ( (LA96_3==RULE_BEGIN) ) {
                    	                int LA96_6 = input.LA(3);

                    	                if ( (LA96_6==HyphenMinus) ) {
                    	                    int LA96_7 = input.LA(4);

                    	                    if ( ((LA96_7>=Review_request_removed && LA96_7<=Auto_merge_disabled)||LA96_7==Auto_merge_enabled||LA96_7==Converted_to_draft||LA96_7==Ready_for_review||LA96_7==Review_requested||LA96_7==Synchronize||LA96_7==Unassigned||(LA96_7>=Unlabeled && LA96_7<=Assigned)||LA96_7==Reopened||LA96_7==Unlocked||LA96_7==Created||LA96_7==Deleted||LA96_7==Labeled||LA96_7==Closed||LA96_7==Edited||LA96_7==Locked||LA96_7==Opened) ) {
                    	                        alt96=3;
                    	                    }
                    	                }
                    	            }
                    	            }
                    	            break;
                    	    }

                    	    switch (alt96) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:6170:12: (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:6170:12: (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:6171:13: otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE )
                    	            {
                    	            otherlv_126=(Token)match(input,Types,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_126, grammarAccess.getOptionedPullRequestTriggerAccess().getTypesKeyword_3_2_0_0_1_0_0());
                    	              												
                    	            }
                    	            otherlv_127=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_127, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_2_0_0_1_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6179:13: ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6180:14: ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:6180:14: ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            // InternalGitHubActionsParser.g:6181:15: (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6181:15: (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            // InternalGitHubActionsParser.g:6182:16: lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_eventTypes_128_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"eventTypes",
                    	              																	lv_eventTypes_128_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_129=(Token)match(input,RULE_NEWLINE,FOLLOW_52); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_129, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:6206:12: (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6206:12: (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6207:13: otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE
                    	            {
                    	            otherlv_130=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_130, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_2_0_0_1_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6211:13: ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            // InternalGitHubActionsParser.g:6212:14: (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6212:14: (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            // InternalGitHubActionsParser.g:6213:15: lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_eventTypes_131_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"eventTypes",
                    	              																lv_eventTypes_131_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:6230:13: (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                    	            loop94:
                    	            do {
                    	                int alt94=2;
                    	                int LA94_0 = input.LA(1);

                    	                if ( (LA94_0==Comma) ) {
                    	                    alt94=1;
                    	                }


                    	                switch (alt94) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6231:14: otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    {
                    	            	    otherlv_132=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_132, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_2_0_0_1_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6235:14: ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    // InternalGitHubActionsParser.g:6236:15: (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6236:15: (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    // InternalGitHubActionsParser.g:6237:16: lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_eventTypes_133_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"eventTypes",
                    	            	      																	lv_eventTypes_133_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop94;
                    	                }
                    	            } while (true);

                    	            otherlv_134=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_134, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_2_0_0_1_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_135=(Token)match(input,RULE_NEWLINE,FOLLOW_52); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_135, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:6265:12: (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:6265:12: (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END )
                    	            // InternalGitHubActionsParser.g:6266:13: this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END
                    	            {
                    	            this_NEWLINE_136=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_136, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_137=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_137, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_1_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6274:13: (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+
                    	            int cnt95=0;
                    	            loop95:
                    	            do {
                    	                int alt95=2;
                    	                int LA95_0 = input.LA(1);

                    	                if ( (LA95_0==HyphenMinus) ) {
                    	                    alt95=1;
                    	                }


                    	                switch (alt95) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6275:14: otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_138=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_138, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_2_0_0_1_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6279:14: ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	            	    // InternalGitHubActionsParser.g:6280:15: (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6280:15: (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	            	    // InternalGitHubActionsParser.g:6281:16: lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_eventTypes_139_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"eventTypes",
                    	            	      																	lv_eventTypes_139_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_140=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_140, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt95 >= 1 ) break loop95;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(95, input);
                    	                        throw eee;
                    	                }
                    	                cnt95++;
                    	            } while (true);

                    	            this_END_141=(Token)match(input,RULE_END,FOLLOW_52); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_141, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_0_1_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:6315:6: ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:6315:6: ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:6316:7: {...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:6316:129: ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:6317:8: ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1);
                    	    // InternalGitHubActionsParser.g:6320:11: ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:6320:12: {...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:6320:21: ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) )
                    	    int alt100=3;
                    	    switch ( input.LA(1) ) {
                    	    case BranchesIgnore:
                    	    case Branches:
                    	        {
                    	        alt100=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt100=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt100=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 100, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt100) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:6320:22: ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:6320:22: ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:6321:12: (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6321:12: (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) )
                    	            int alt97=2;
                    	            int LA97_0 = input.LA(1);

                    	            if ( (LA97_0==Branches) ) {
                    	                alt97=1;
                    	            }
                    	            else if ( (LA97_0==BranchesIgnore) ) {
                    	                alt97=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 97, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt97) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:6322:13: otherlv_142= Branches
                    	                    {
                    	                    otherlv_142=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      													newLeafNode(otherlv_142, grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesKeyword_3_2_0_1_0_0_0());
                    	                      												
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:6327:13: ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6327:13: ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) )
                    	                    // InternalGitHubActionsParser.g:6328:14: (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6328:14: (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore )
                    	                    // InternalGitHubActionsParser.g:6329:15: lv_ignoreSpecifiedBranches_143_0= BranchesIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedBranches_143_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      															newLeafNode(lv_ignoreSpecifiedBranches_143_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_2_0_1_0_0_1_0());
                    	                      														
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      															if (current==null) {
                    	                      																current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
                    	                      															}
                    	                      															setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_143_0 != null, "branches-ignore");
                    	                      														
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_144=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_144, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_2_0_1_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:6346:12: ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6347:13: ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:6347:13: ( (lv_branches_145_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6348:14: (lv_branches_145_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6348:14: (lv_branches_145_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6349:15: lv_branches_145_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_branches_145_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"branches",
                    	              																lv_branches_145_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_146=(Token)match(input,RULE_NEWLINE,FOLLOW_52); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_146, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:6373:11: (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6373:11: (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6374:12: otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE
                    	            {
                    	            otherlv_147=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_147, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_2_0_1_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:6378:12: ( (lv_branches_148_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6379:13: (lv_branches_148_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6379:13: (lv_branches_148_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6380:14: lv_branches_148_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_branches_148_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"branches",
                    	              															lv_branches_148_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:6397:12: (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )*
                    	            loop98:
                    	            do {
                    	                int alt98=2;
                    	                int LA98_0 = input.LA(1);

                    	                if ( (LA98_0==Comma) ) {
                    	                    alt98=1;
                    	                }


                    	                switch (alt98) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6398:13: otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_149=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_149, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_2_0_1_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6402:13: ( (lv_branches_150_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6403:14: (lv_branches_150_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6403:14: (lv_branches_150_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6404:15: lv_branches_150_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_branches_150_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"branches",
                    	            	      																lv_branches_150_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop98;
                    	                }
                    	            } while (true);

                    	            otherlv_151=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_151, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_2_0_1_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_152=(Token)match(input,RULE_NEWLINE,FOLLOW_52); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_152, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:6432:11: (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:6432:11: (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END )
                    	            // InternalGitHubActionsParser.g:6433:12: this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END
                    	            {
                    	            this_NEWLINE_153=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_153, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_154=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_154, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:6441:12: (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+
                    	            int cnt99=0;
                    	            loop99:
                    	            do {
                    	                int alt99=2;
                    	                int LA99_0 = input.LA(1);

                    	                if ( (LA99_0==HyphenMinus) ) {
                    	                    alt99=1;
                    	                }


                    	                switch (alt99) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6442:13: otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_155=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_155, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_2_0_1_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6446:13: ( (lv_branches_156_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6447:14: (lv_branches_156_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6447:14: (lv_branches_156_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6448:15: lv_branches_156_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_branches_156_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"branches",
                    	            	      																lv_branches_156_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_157=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_157, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt99 >= 1 ) break loop99;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(99, input);
                    	                        throw eee;
                    	                }
                    	                cnt99++;
                    	            } while (true);

                    	            this_END_158=(Token)match(input,RULE_END,FOLLOW_52); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_158, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_1_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt101 >= 1 ) break loop101;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(101, input);
                                throw eee;
                        }
                        cnt101++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0());

                    }

                    this_END_159=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_159, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_1());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOptionedPullRequestTrigger"


    // $ANTLR start "entryRuleOptionedPushTrigger"
    // InternalGitHubActionsParser.g:6502:1: entryRuleOptionedPushTrigger returns [EObject current=null] : iv_ruleOptionedPushTrigger= ruleOptionedPushTrigger EOF ;
    public final EObject entryRuleOptionedPushTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedPushTrigger = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0()
        	);

        try {
            // InternalGitHubActionsParser.g:6508:2: (iv_ruleOptionedPushTrigger= ruleOptionedPushTrigger EOF )
            // InternalGitHubActionsParser.g:6509:2: iv_ruleOptionedPushTrigger= ruleOptionedPushTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedPushTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedPushTrigger=ruleOptionedPushTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedPushTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedPushTrigger"


    // $ANTLR start "ruleOptionedPushTrigger"
    // InternalGitHubActionsParser.g:6518:1: ruleOptionedPushTrigger returns [EObject current=null] : ( () otherlv_1= Push otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END ) ) ) ;
    public final EObject ruleOptionedPushTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_6=null;
        Token lv_ignoreSpecifiedBranches_7_0=null;
        Token otherlv_8=null;
        Token this_NEWLINE_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_NEWLINE_16=null;
        Token this_NEWLINE_17=null;
        Token this_BEGIN_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        Token this_END_22=null;
        Token otherlv_23=null;
        Token lv_ignoreSpecifiedPaths_24_0=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        Token otherlv_40=null;
        Token lv_ignoreSpecifiedTags_41_0=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token this_NEWLINE_50=null;
        Token this_NEWLINE_51=null;
        Token this_BEGIN_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token this_END_56=null;
        Token otherlv_58=null;
        Token lv_ignoreSpecifiedPaths_59_0=null;
        Token otherlv_60=null;
        Token this_NEWLINE_62=null;
        Token otherlv_63=null;
        Token otherlv_65=null;
        Token otherlv_67=null;
        Token this_NEWLINE_68=null;
        Token this_NEWLINE_69=null;
        Token this_BEGIN_70=null;
        Token otherlv_71=null;
        Token this_NEWLINE_73=null;
        Token this_END_74=null;
        Token otherlv_75=null;
        Token lv_ignoreSpecifiedBranches_76_0=null;
        Token otherlv_77=null;
        Token this_NEWLINE_79=null;
        Token otherlv_80=null;
        Token otherlv_82=null;
        Token otherlv_84=null;
        Token this_NEWLINE_85=null;
        Token this_NEWLINE_86=null;
        Token this_BEGIN_87=null;
        Token otherlv_88=null;
        Token this_NEWLINE_90=null;
        Token this_END_91=null;
        Token otherlv_92=null;
        Token lv_ignoreSpecifiedTags_93_0=null;
        Token otherlv_94=null;
        Token this_NEWLINE_96=null;
        Token otherlv_97=null;
        Token otherlv_99=null;
        Token otherlv_101=null;
        Token this_NEWLINE_102=null;
        Token this_NEWLINE_103=null;
        Token this_BEGIN_104=null;
        Token otherlv_105=null;
        Token this_NEWLINE_107=null;
        Token this_END_108=null;
        Token otherlv_110=null;
        Token lv_ignoreSpecifiedTags_111_0=null;
        Token otherlv_112=null;
        Token this_NEWLINE_114=null;
        Token otherlv_115=null;
        Token otherlv_117=null;
        Token otherlv_119=null;
        Token this_NEWLINE_120=null;
        Token this_NEWLINE_121=null;
        Token this_BEGIN_122=null;
        Token otherlv_123=null;
        Token this_NEWLINE_125=null;
        Token this_END_126=null;
        Token otherlv_127=null;
        Token lv_ignoreSpecifiedBranches_128_0=null;
        Token otherlv_129=null;
        Token this_NEWLINE_131=null;
        Token otherlv_132=null;
        Token otherlv_134=null;
        Token otherlv_136=null;
        Token this_NEWLINE_137=null;
        Token this_NEWLINE_138=null;
        Token this_BEGIN_139=null;
        Token otherlv_140=null;
        Token this_NEWLINE_142=null;
        Token this_END_143=null;
        Token otherlv_144=null;
        Token lv_ignoreSpecifiedPaths_145_0=null;
        Token otherlv_146=null;
        Token this_NEWLINE_148=null;
        Token otherlv_149=null;
        Token otherlv_151=null;
        Token otherlv_153=null;
        Token this_NEWLINE_154=null;
        Token this_NEWLINE_155=null;
        Token this_BEGIN_156=null;
        Token otherlv_157=null;
        Token this_NEWLINE_159=null;
        Token this_END_160=null;
        Token this_END_161=null;
        EObject lv_branches_9_0 = null;

        EObject lv_branches_12_0 = null;

        EObject lv_branches_14_0 = null;

        EObject lv_branches_20_0 = null;

        EObject lv_paths_26_0 = null;

        EObject lv_paths_29_0 = null;

        EObject lv_paths_31_0 = null;

        EObject lv_paths_37_0 = null;

        EObject lv_tags_43_0 = null;

        EObject lv_tags_46_0 = null;

        EObject lv_tags_48_0 = null;

        EObject lv_tags_54_0 = null;

        EObject lv_paths_61_0 = null;

        EObject lv_paths_64_0 = null;

        EObject lv_paths_66_0 = null;

        EObject lv_paths_72_0 = null;

        EObject lv_branches_78_0 = null;

        EObject lv_branches_81_0 = null;

        EObject lv_branches_83_0 = null;

        EObject lv_branches_89_0 = null;

        EObject lv_tags_95_0 = null;

        EObject lv_tags_98_0 = null;

        EObject lv_tags_100_0 = null;

        EObject lv_tags_106_0 = null;

        EObject lv_tags_113_0 = null;

        EObject lv_tags_116_0 = null;

        EObject lv_tags_118_0 = null;

        EObject lv_tags_124_0 = null;

        EObject lv_branches_130_0 = null;

        EObject lv_branches_133_0 = null;

        EObject lv_branches_135_0 = null;

        EObject lv_branches_141_0 = null;

        EObject lv_paths_147_0 = null;

        EObject lv_paths_150_0 = null;

        EObject lv_paths_152_0 = null;

        EObject lv_paths_158_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0()
        	);

        try {
            // InternalGitHubActionsParser.g:6529:2: ( ( () otherlv_1= Push otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END ) ) ) )
            // InternalGitHubActionsParser.g:6530:2: ( () otherlv_1= Push otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END ) ) )
            {
            // InternalGitHubActionsParser.g:6530:2: ( () otherlv_1= Push otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END ) ) )
            // InternalGitHubActionsParser.g:6531:3: () otherlv_1= Push otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:6531:3: ()
            // InternalGitHubActionsParser.g:6532:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedPushTriggerAccess().getPushTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Push,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedPushTriggerAccess().getPushKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:6549:3: ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END ) )
            int alt142=3;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // InternalGitHubActionsParser.g:6550:4: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
                    {
                    // InternalGitHubActionsParser.g:6550:4: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
                    // InternalGitHubActionsParser.g:6551:5: this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    {
                    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_3, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_0());
                      				
                    }
                    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_4, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:6559:5: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:6560:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:6560:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:6561:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2());
                    // InternalGitHubActionsParser.g:6564:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:6565:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:6565:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+
                    int cnt115=0;
                    loop115:
                    do {
                        int alt115=3;
                        int LA115_0 = input.LA(1);

                        if ( LA115_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                            alt115=1;
                        }
                        else if ( LA115_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                            alt115=1;
                        }
                        else if ( (LA115_0==LeftSquareBracket) ) {
                            int LA115_5 = input.LA(2);

                            if ( synpred203_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                                alt115=1;
                            }
                            else if ( synpred209_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                                alt115=2;
                            }


                        }
                        else if ( (LA115_0==RULE_NEWLINE) ) {
                            int LA115_6 = input.LA(2);

                            if ( synpred203_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                                alt115=1;
                            }
                            else if ( synpred209_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                                alt115=2;
                            }


                        }
                        else if ( LA115_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                            alt115=2;
                        }
                        else if ( LA115_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                            alt115=2;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:6566:6: ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:6566:6: ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:6567:7: {...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:6567:122: ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
                    	    // InternalGitHubActionsParser.g:6568:8: ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0);
                    	    // InternalGitHubActionsParser.g:6571:11: ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
                    	    // InternalGitHubActionsParser.g:6571:12: {...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:6571:21: ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
                    	    // InternalGitHubActionsParser.g:6571:22: ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
                    	    {
                    	    // InternalGitHubActionsParser.g:6571:22: ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) )
                    	    int alt106=3;
                    	    switch ( input.LA(1) ) {
                    	    case BranchesIgnore:
                    	    case Branches:
                    	        {
                    	        alt106=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt106=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt106=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 106, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt106) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:6572:12: ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:6572:12: ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:6573:13: (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6573:13: (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) )
                    	            int alt103=2;
                    	            int LA103_0 = input.LA(1);

                    	            if ( (LA103_0==Branches) ) {
                    	                alt103=1;
                    	            }
                    	            else if ( (LA103_0==BranchesIgnore) ) {
                    	                alt103=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 103, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt103) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:6574:14: otherlv_6= Branches
                    	                    {
                    	                    otherlv_6=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(otherlv_6, grammarAccess.getOptionedPushTriggerAccess().getBranchesKeyword_3_0_2_0_0_0_0_0());
                    	                      													
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:6579:14: ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6579:14: ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) )
                    	                    // InternalGitHubActionsParser.g:6580:15: (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6580:15: (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore )
                    	                    // InternalGitHubActionsParser.g:6581:16: lv_ignoreSpecifiedBranches_7_0= BranchesIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedBranches_7_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      																newLeafNode(lv_ignoreSpecifiedBranches_7_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_0_2_0_0_0_0_1_0());
                    	                      															
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      																if (current==null) {
                    	                      																	current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      																}
                    	                      																setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_7_0 != null, "branches-ignore");
                    	                      															
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_8=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_8, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_0_2_0_0_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6598:13: ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6599:14: ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:6599:14: ( (lv_branches_9_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6600:15: (lv_branches_9_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6600:15: (lv_branches_9_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6601:16: lv_branches_9_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_branches_9_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"branches",
                    	              																	lv_branches_9_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_10, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:6625:12: (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6625:12: (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6626:13: otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE
                    	            {
                    	            otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_11, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_0_2_0_0_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6630:13: ( (lv_branches_12_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6631:14: (lv_branches_12_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6631:14: (lv_branches_12_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6632:15: lv_branches_12_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_branches_12_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"branches",
                    	              																lv_branches_12_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:6649:13: (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )*
                    	            loop104:
                    	            do {
                    	                int alt104=2;
                    	                int LA104_0 = input.LA(1);

                    	                if ( (LA104_0==Comma) ) {
                    	                    alt104=1;
                    	                }


                    	                switch (alt104) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6650:14: otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_13=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_13, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_0_2_0_0_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6654:14: ( (lv_branches_14_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6655:15: (lv_branches_14_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6655:15: (lv_branches_14_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6656:16: lv_branches_14_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_branches_14_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"branches",
                    	            	      																	lv_branches_14_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop104;
                    	                }
                    	            } while (true);

                    	            otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_15, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_0_2_0_0_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_16, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:6684:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:6684:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                    	            // InternalGitHubActionsParser.g:6685:13: this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END
                    	            {
                    	            this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_17, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_18, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6693:13: (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+
                    	            int cnt105=0;
                    	            loop105:
                    	            do {
                    	                int alt105=2;
                    	                int LA105_0 = input.LA(1);

                    	                if ( (LA105_0==HyphenMinus) ) {
                    	                    alt105=1;
                    	                }


                    	                switch (alt105) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6694:14: otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_19=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_19, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_0_2_0_0_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6698:14: ( (lv_branches_20_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6699:15: (lv_branches_20_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6699:15: (lv_branches_20_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6700:16: lv_branches_20_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_branches_20_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"branches",
                    	            	      																	lv_branches_20_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_21, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt105 >= 1 ) break loop105;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(105, input);
                    	                        throw eee;
                    	                }
                    	                cnt105++;
                    	            } while (true);

                    	            this_END_22=(Token)match(input,RULE_END,FOLLOW_55); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_22, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    // InternalGitHubActionsParser.g:6728:11: ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
                    	    int alt110=4;
                    	    alt110 = dfa110.predict(input);
                    	    switch (alt110) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:6729:12: ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:6729:12: ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:6730:13: (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6730:13: (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) )
                    	            int alt107=2;
                    	            int LA107_0 = input.LA(1);

                    	            if ( (LA107_0==Paths) ) {
                    	                alt107=1;
                    	            }
                    	            else if ( (LA107_0==PathsIgnore) ) {
                    	                alt107=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 107, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt107) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:6731:14: otherlv_23= Paths
                    	                    {
                    	                    otherlv_23=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(otherlv_23, grammarAccess.getOptionedPushTriggerAccess().getPathsKeyword_3_0_2_0_1_0_0_0());
                    	                      													
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:6736:14: ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6736:14: ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:6737:15: (lv_ignoreSpecifiedPaths_24_0= PathsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6737:15: (lv_ignoreSpecifiedPaths_24_0= PathsIgnore )
                    	                    // InternalGitHubActionsParser.g:6738:16: lv_ignoreSpecifiedPaths_24_0= PathsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedPaths_24_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      																newLeafNode(lv_ignoreSpecifiedPaths_24_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_0_2_0_1_0_0_1_0());
                    	                      															
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      																if (current==null) {
                    	                      																	current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      																}
                    	                      																setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_24_0 != null, "paths-ignore");
                    	                      															
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_25, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_0_2_0_1_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6755:13: ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6756:14: ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:6756:14: ( (lv_paths_26_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6757:15: (lv_paths_26_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6757:15: (lv_paths_26_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6758:16: lv_paths_26_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_paths_26_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"paths",
                    	              																	lv_paths_26_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_27, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6783:13: otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
                    	            {
                    	            otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_28, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_0_2_0_1_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6787:13: ( (lv_paths_29_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6789:15: lv_paths_29_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_paths_29_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"paths",
                    	              																lv_paths_29_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:6806:13: (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )*
                    	            loop108:
                    	            do {
                    	                int alt108=2;
                    	                int LA108_0 = input.LA(1);

                    	                if ( (LA108_0==Comma) ) {
                    	                    alt108=1;
                    	                }


                    	                switch (alt108) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6807:14: otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_30, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_0_2_0_1_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6811:14: ( (lv_paths_31_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6813:16: lv_paths_31_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_paths_31_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"paths",
                    	            	      																	lv_paths_31_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop108;
                    	                }
                    	            } while (true);

                    	            otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_32, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_0_2_0_1_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_33, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                    	            // InternalGitHubActionsParser.g:6842:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
                    	            {
                    	            this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_34, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_35, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_1_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:6850:13: (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
                    	            int cnt109=0;
                    	            loop109:
                    	            do {
                    	                int alt109=2;
                    	                int LA109_0 = input.LA(1);

                    	                if ( (LA109_0==HyphenMinus) ) {
                    	                    alt109=1;
                    	                }


                    	                switch (alt109) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6851:14: otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_36, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_0_2_0_1_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6855:14: ( (lv_paths_37_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6857:16: lv_paths_37_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_paths_37_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"paths",
                    	            	      																	lv_paths_37_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_38, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt109 >= 1 ) break loop109;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(109, input);
                    	                        throw eee;
                    	                }
                    	                cnt109++;
                    	            } while (true);

                    	            this_END_39=(Token)match(input,RULE_END,FOLLOW_56); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_39, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_2_0_1_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:6891:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:6891:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:6892:7: {...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:6892:122: ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:6893:8: ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1);
                    	    // InternalGitHubActionsParser.g:6896:11: ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:6896:12: {...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:6896:21: ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
                    	    int alt114=3;
                    	    switch ( input.LA(1) ) {
                    	    case TagsIgnore:
                    	    case Tags:
                    	        {
                    	        alt114=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt114=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt114=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 114, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt114) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:6896:22: ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:6896:22: ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:6897:12: (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6897:12: (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) )
                    	            int alt111=2;
                    	            int LA111_0 = input.LA(1);

                    	            if ( (LA111_0==Tags) ) {
                    	                alt111=1;
                    	            }
                    	            else if ( (LA111_0==TagsIgnore) ) {
                    	                alt111=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 111, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt111) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:6898:13: otherlv_40= Tags
                    	                    {
                    	                    otherlv_40=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      													newLeafNode(otherlv_40, grammarAccess.getOptionedPushTriggerAccess().getTagsKeyword_3_0_2_1_0_0_0());
                    	                      												
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:6903:13: ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6903:13: ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:6904:14: (lv_ignoreSpecifiedTags_41_0= TagsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:6904:14: (lv_ignoreSpecifiedTags_41_0= TagsIgnore )
                    	                    // InternalGitHubActionsParser.g:6905:15: lv_ignoreSpecifiedTags_41_0= TagsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedTags_41_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      															newLeafNode(lv_ignoreSpecifiedTags_41_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedTagsTagsIgnoreKeyword_3_0_2_1_0_0_1_0());
                    	                      														
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      															if (current==null) {
                    	                      																current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      															}
                    	                      															setWithLastConsumed(current, "ignoreSpecifiedTags", lv_ignoreSpecifiedTags_41_0 != null, "tags-ignore");
                    	                      														
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_42, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_0_2_1_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:6922:12: ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6923:13: ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:6923:13: ( (lv_tags_43_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6924:14: (lv_tags_43_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6924:14: (lv_tags_43_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6925:15: lv_tags_43_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_tags_43_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"tags",
                    	              																lv_tags_43_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_44, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:6949:11: (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:6949:11: (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:6950:12: otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE
                    	            {
                    	            otherlv_45=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_45, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_0_2_1_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:6954:12: ( (lv_tags_46_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:6955:13: (lv_tags_46_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:6955:13: (lv_tags_46_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:6956:14: lv_tags_46_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_tags_46_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"tags",
                    	              															lv_tags_46_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:6973:12: (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )*
                    	            loop112:
                    	            do {
                    	                int alt112=2;
                    	                int LA112_0 = input.LA(1);

                    	                if ( (LA112_0==Comma) ) {
                    	                    alt112=1;
                    	                }


                    	                switch (alt112) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:6974:13: otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_47=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_47, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_0_2_1_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:6978:13: ( (lv_tags_48_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:6979:14: (lv_tags_48_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:6979:14: (lv_tags_48_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:6980:15: lv_tags_48_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_tags_48_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"tags",
                    	            	      																lv_tags_48_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop112;
                    	                }
                    	            } while (true);

                    	            otherlv_49=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_49, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_0_2_1_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_50=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_50, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:7008:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:7008:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                    	            // InternalGitHubActionsParser.g:7009:12: this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END
                    	            {
                    	            this_NEWLINE_51=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_51, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_52=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_52, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7017:12: (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+
                    	            int cnt113=0;
                    	            loop113:
                    	            do {
                    	                int alt113=2;
                    	                int LA113_0 = input.LA(1);

                    	                if ( (LA113_0==HyphenMinus) ) {
                    	                    alt113=1;
                    	                }


                    	                switch (alt113) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7018:13: otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_53=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_53, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_0_2_1_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7022:13: ( (lv_tags_54_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7023:14: (lv_tags_54_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7023:14: (lv_tags_54_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7024:15: lv_tags_54_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_tags_54_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"tags",
                    	            	      																lv_tags_54_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_55, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt113 >= 1 ) break loop113;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(113, input);
                    	                        throw eee;
                    	                }
                    	                cnt113++;
                    	            } while (true);

                    	            this_END_56=(Token)match(input,RULE_END,FOLLOW_56); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_56, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_2_1_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt115 >= 1 ) break loop115;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(115, input);
                                throw eee;
                        }
                        cnt115++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2());

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:7067:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    {
                    // InternalGitHubActionsParser.g:7067:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:7068:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:7068:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:7069:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1());
                    // InternalGitHubActionsParser.g:7072:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:7073:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:7073:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+
                    int cnt128=0;
                    loop128:
                    do {
                        int alt128=3;
                        int LA128_0 = input.LA(1);

                        if ( LA128_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                            alt128=1;
                        }
                        else if ( LA128_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                            alt128=1;
                        }
                        else if ( (LA128_0==LeftSquareBracket) ) {
                            int LA128_5 = input.LA(2);

                            if ( synpred222_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                                alt128=1;
                            }
                            else if ( synpred228_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                                alt128=2;
                            }


                        }
                        else if ( (LA128_0==RULE_NEWLINE) ) {
                            int LA128_6 = input.LA(2);

                            if ( synpred222_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                                alt128=1;
                            }
                            else if ( synpred228_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                                alt128=2;
                            }


                        }
                        else if ( LA128_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                            alt128=2;
                        }
                        else if ( LA128_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                            alt128=2;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:7074:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:7074:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:7075:6: {...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:7075:119: ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) )
                    	    // InternalGitHubActionsParser.g:7076:7: ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0);
                    	    // InternalGitHubActionsParser.g:7079:10: ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) )
                    	    // InternalGitHubActionsParser.g:7079:11: {...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:7079:20: ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? )
                    	    // InternalGitHubActionsParser.g:7079:21: ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?
                    	    {
                    	    // InternalGitHubActionsParser.g:7079:21: ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) )
                    	    int alt119=3;
                    	    switch ( input.LA(1) ) {
                    	    case PathsIgnore:
                    	    case Paths:
                    	        {
                    	        alt119=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt119=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt119=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 119, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt119) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:7080:11: ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:7080:11: ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:7081:12: (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7081:12: (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) )
                    	            int alt116=2;
                    	            int LA116_0 = input.LA(1);

                    	            if ( (LA116_0==Paths) ) {
                    	                alt116=1;
                    	            }
                    	            else if ( (LA116_0==PathsIgnore) ) {
                    	                alt116=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 116, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt116) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:7082:13: otherlv_58= Paths
                    	                    {
                    	                    otherlv_58=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      													newLeafNode(otherlv_58, grammarAccess.getOptionedPushTriggerAccess().getPathsKeyword_3_1_0_0_0_0_0());
                    	                      												
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:7087:13: ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7087:13: ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:7088:14: (lv_ignoreSpecifiedPaths_59_0= PathsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7088:14: (lv_ignoreSpecifiedPaths_59_0= PathsIgnore )
                    	                    // InternalGitHubActionsParser.g:7089:15: lv_ignoreSpecifiedPaths_59_0= PathsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedPaths_59_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      															newLeafNode(lv_ignoreSpecifiedPaths_59_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_1_0_0_0_0_1_0());
                    	                      														
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      															if (current==null) {
                    	                      																current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      															}
                    	                      															setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_59_0 != null, "paths-ignore");
                    	                      														
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_60, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_1_0_0_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7106:12: ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7107:13: ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:7107:13: ( (lv_paths_61_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7108:14: (lv_paths_61_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7108:14: (lv_paths_61_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7109:15: lv_paths_61_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_paths_61_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"paths",
                    	              																lv_paths_61_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_62=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_62, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:7133:11: (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7133:11: (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7134:12: otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE
                    	            {
                    	            otherlv_63=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_63, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_1_0_0_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7138:12: ( (lv_paths_64_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7139:13: (lv_paths_64_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7139:13: (lv_paths_64_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7140:14: lv_paths_64_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_paths_64_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"paths",
                    	              															lv_paths_64_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:7157:12: (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )*
                    	            loop117:
                    	            do {
                    	                int alt117=2;
                    	                int LA117_0 = input.LA(1);

                    	                if ( (LA117_0==Comma) ) {
                    	                    alt117=1;
                    	                }


                    	                switch (alt117) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7158:13: otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_65=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_65, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_1_0_0_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7162:13: ( (lv_paths_66_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7163:14: (lv_paths_66_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7163:14: (lv_paths_66_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7164:15: lv_paths_66_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_paths_66_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"paths",
                    	            	      																lv_paths_66_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop117;
                    	                }
                    	            } while (true);

                    	            otherlv_67=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_67, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_1_0_0_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_68=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_68, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:7192:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:7192:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                    	            // InternalGitHubActionsParser.g:7193:12: this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END
                    	            {
                    	            this_NEWLINE_69=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_69, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_70=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_70, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7201:12: (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+
                    	            int cnt118=0;
                    	            loop118:
                    	            do {
                    	                int alt118=2;
                    	                int LA118_0 = input.LA(1);

                    	                if ( (LA118_0==HyphenMinus) ) {
                    	                    alt118=1;
                    	                }


                    	                switch (alt118) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7202:13: otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_71=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_71, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_1_0_0_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7206:13: ( (lv_paths_72_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7207:14: (lv_paths_72_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7207:14: (lv_paths_72_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7208:15: lv_paths_72_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_paths_72_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"paths",
                    	            	      																lv_paths_72_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_73, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt118 >= 1 ) break loop118;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(118, input);
                    	                        throw eee;
                    	                }
                    	                cnt118++;
                    	            } while (true);

                    	            this_END_74=(Token)match(input,RULE_END,FOLLOW_55); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_74, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_0_0_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    // InternalGitHubActionsParser.g:7236:10: ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?
                    	    int alt123=4;
                    	    alt123 = dfa123.predict(input);
                    	    switch (alt123) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:7237:11: ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:7237:11: ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:7238:12: (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7238:12: (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) )
                    	            int alt120=2;
                    	            int LA120_0 = input.LA(1);

                    	            if ( (LA120_0==Branches) ) {
                    	                alt120=1;
                    	            }
                    	            else if ( (LA120_0==BranchesIgnore) ) {
                    	                alt120=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 120, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt120) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:7239:13: otherlv_75= Branches
                    	                    {
                    	                    otherlv_75=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      													newLeafNode(otherlv_75, grammarAccess.getOptionedPushTriggerAccess().getBranchesKeyword_3_1_0_1_0_0_0());
                    	                      												
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:7244:13: ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7244:13: ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) )
                    	                    // InternalGitHubActionsParser.g:7245:14: (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7245:14: (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore )
                    	                    // InternalGitHubActionsParser.g:7246:15: lv_ignoreSpecifiedBranches_76_0= BranchesIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedBranches_76_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      															newLeafNode(lv_ignoreSpecifiedBranches_76_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_1_0_1_0_0_1_0());
                    	                      														
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      															if (current==null) {
                    	                      																current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      															}
                    	                      															setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_76_0 != null, "branches-ignore");
                    	                      														
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_77=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_77, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_1_0_1_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7263:12: ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7264:13: ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:7264:13: ( (lv_branches_78_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7265:14: (lv_branches_78_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7265:14: (lv_branches_78_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7266:15: lv_branches_78_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_branches_78_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"branches",
                    	              																lv_branches_78_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_79=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_79, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7291:12: otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE
                    	            {
                    	            otherlv_80=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_80, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_1_0_1_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7295:12: ( (lv_branches_81_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7297:14: lv_branches_81_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_branches_81_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"branches",
                    	              															lv_branches_81_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:7314:12: (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )*
                    	            loop121:
                    	            do {
                    	                int alt121=2;
                    	                int LA121_0 = input.LA(1);

                    	                if ( (LA121_0==Comma) ) {
                    	                    alt121=1;
                    	                }


                    	                switch (alt121) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7315:13: otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_82=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_82, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_1_0_1_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7319:13: ( (lv_branches_83_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7321:15: lv_branches_83_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_branches_83_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"branches",
                    	            	      																lv_branches_83_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop121;
                    	                }
                    	            } while (true);

                    	            otherlv_84=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_84, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_1_0_1_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_85, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
                    	            // InternalGitHubActionsParser.g:7350:12: this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END
                    	            {
                    	            this_NEWLINE_86=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_86, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_87=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_87, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_0_1_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7358:12: (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+
                    	            int cnt122=0;
                    	            loop122:
                    	            do {
                    	                int alt122=2;
                    	                int LA122_0 = input.LA(1);

                    	                if ( (LA122_0==HyphenMinus) ) {
                    	                    alt122=1;
                    	                }


                    	                switch (alt122) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7359:13: otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_88=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_88, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_1_0_1_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7363:13: ( (lv_branches_89_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7365:15: lv_branches_89_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_branches_89_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"branches",
                    	            	      																lv_branches_89_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_90=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_90, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt122 >= 1 ) break loop122;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(122, input);
                    	                        throw eee;
                    	                }
                    	                cnt122++;
                    	            } while (true);

                    	            this_END_91=(Token)match(input,RULE_END,FOLLOW_57); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_91, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_0_1_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:7399:5: ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:7399:5: ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:7400:6: {...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:7400:119: ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:7401:7: ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1);
                    	    // InternalGitHubActionsParser.g:7404:10: ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:7404:11: {...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:7404:20: ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) )
                    	    int alt127=3;
                    	    switch ( input.LA(1) ) {
                    	    case TagsIgnore:
                    	    case Tags:
                    	        {
                    	        alt127=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt127=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt127=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 127, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt127) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:7404:21: ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:7404:21: ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:7405:11: (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7405:11: (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) )
                    	            int alt124=2;
                    	            int LA124_0 = input.LA(1);

                    	            if ( (LA124_0==Tags) ) {
                    	                alt124=1;
                    	            }
                    	            else if ( (LA124_0==TagsIgnore) ) {
                    	                alt124=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 124, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt124) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:7406:12: otherlv_92= Tags
                    	                    {
                    	                    otherlv_92=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      												newLeafNode(otherlv_92, grammarAccess.getOptionedPushTriggerAccess().getTagsKeyword_3_1_1_0_0_0());
                    	                      											
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:7411:12: ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7411:12: ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:7412:13: (lv_ignoreSpecifiedTags_93_0= TagsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7412:13: (lv_ignoreSpecifiedTags_93_0= TagsIgnore )
                    	                    // InternalGitHubActionsParser.g:7413:14: lv_ignoreSpecifiedTags_93_0= TagsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedTags_93_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(lv_ignoreSpecifiedTags_93_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedTagsTagsIgnoreKeyword_3_1_1_0_0_1_0());
                    	                      													
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      														if (current==null) {
                    	                      															current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      														}
                    	                      														setWithLastConsumed(current, "ignoreSpecifiedTags", lv_ignoreSpecifiedTags_93_0 != null, "tags-ignore");
                    	                      													
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_94=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_94, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_1_1_0_1());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:7430:11: ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7431:12: ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:7431:12: ( (lv_tags_95_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7432:13: (lv_tags_95_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7432:13: (lv_tags_95_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7433:14: lv_tags_95_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_0_2_0_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_tags_95_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"tags",
                    	              															lv_tags_95_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_96=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_96, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_0_2_1());
                    	              											
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:7457:10: (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7457:10: (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7458:11: otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE
                    	            {
                    	            otherlv_97=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_97, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_1_1_1_0());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:7462:11: ( (lv_tags_98_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7463:12: (lv_tags_98_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7463:12: (lv_tags_98_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7464:13: lv_tags_98_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_1_1_0());
                    	              												
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_tags_98_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													if (current==null) {
                    	              														current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              													}
                    	              													add(
                    	              														current,
                    	              														"tags",
                    	              														lv_tags_98_0,
                    	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              													afterParserOrEnumRuleCall();
                    	              												
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:7481:11: (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )*
                    	            loop125:
                    	            do {
                    	                int alt125=2;
                    	                int LA125_0 = input.LA(1);

                    	                if ( (LA125_0==Comma) ) {
                    	                    alt125=1;
                    	                }


                    	                switch (alt125) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7482:12: otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_99=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(otherlv_99, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_1_1_1_2_0());
                    	            	      											
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7486:12: ( (lv_tags_100_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7487:13: (lv_tags_100_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7487:13: (lv_tags_100_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7488:14: lv_tags_100_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_1_2_1_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_tags_100_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"tags",
                    	            	      															lv_tags_100_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop125;
                    	                }
                    	            } while (true);

                    	            otherlv_101=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_101, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_1_1_1_3());
                    	              										
                    	            }
                    	            this_NEWLINE_102=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_NEWLINE_102, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_1_4());
                    	              										
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:7516:10: (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:7516:10: (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END )
                    	            // InternalGitHubActionsParser.g:7517:11: this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END
                    	            {
                    	            this_NEWLINE_103=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_NEWLINE_103, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0());
                    	              										
                    	            }
                    	            this_BEGIN_104=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_BEGIN_104, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_1_2_1());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:7525:11: (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+
                    	            int cnt126=0;
                    	            loop126:
                    	            do {
                    	                int alt126=2;
                    	                int LA126_0 = input.LA(1);

                    	                if ( (LA126_0==HyphenMinus) ) {
                    	                    alt126=1;
                    	                }


                    	                switch (alt126) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7526:12: otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_105=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(otherlv_105, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_1_1_2_2_0());
                    	            	      											
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7530:12: ( (lv_tags_106_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7531:13: (lv_tags_106_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7531:13: (lv_tags_106_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7532:14: lv_tags_106_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_2_2_1_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_tags_106_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"tags",
                    	            	      															lv_tags_106_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_107=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(this_NEWLINE_107, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_2_2());
                    	            	      											
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt126 >= 1 ) break loop126;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(126, input);
                    	                        throw eee;
                    	                }
                    	                cnt126++;
                    	            } while (true);

                    	            this_END_108=(Token)match(input,RULE_END,FOLLOW_57); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_END_108, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_1_2_3());
                    	              										
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt128 >= 1 ) break loop128;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(128, input);
                                throw eee;
                        }
                        cnt128++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1());

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:7574:4: ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:7574:4: ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END )
                    // InternalGitHubActionsParser.g:7575:5: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END
                    {
                    // InternalGitHubActionsParser.g:7575:5: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:7576:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:7576:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:7577:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0());
                    // InternalGitHubActionsParser.g:7580:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:7581:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:7581:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+
                    int cnt141=0;
                    loop141:
                    do {
                        int alt141=3;
                        int LA141_0 = input.LA(1);

                        if ( LA141_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                            alt141=1;
                        }
                        else if ( LA141_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                            alt141=1;
                        }
                        else if ( (LA141_0==LeftSquareBracket) ) {
                            int LA141_4 = input.LA(2);

                            if ( synpred241_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                                alt141=1;
                            }
                            else if ( synpred247_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                                alt141=2;
                            }


                        }
                        else if ( (LA141_0==RULE_NEWLINE) ) {
                            int LA141_5 = input.LA(2);

                            if ( synpred241_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                                alt141=1;
                            }
                            else if ( synpred247_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                                alt141=2;
                            }


                        }
                        else if ( LA141_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                            alt141=2;
                        }
                        else if ( LA141_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                            alt141=2;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:7582:6: ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:7582:6: ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:7583:7: {...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:7583:122: ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) )
                    	    // InternalGitHubActionsParser.g:7584:8: ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0);
                    	    // InternalGitHubActionsParser.g:7587:11: ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) )
                    	    // InternalGitHubActionsParser.g:7587:12: {...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:7587:21: ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? )
                    	    // InternalGitHubActionsParser.g:7587:22: ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )?
                    	    {
                    	    // InternalGitHubActionsParser.g:7587:22: ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) )
                    	    int alt132=3;
                    	    switch ( input.LA(1) ) {
                    	    case TagsIgnore:
                    	    case Tags:
                    	        {
                    	        alt132=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt132=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt132=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 132, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt132) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:7588:12: ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:7588:12: ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:7589:13: (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7589:13: (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) )
                    	            int alt129=2;
                    	            int LA129_0 = input.LA(1);

                    	            if ( (LA129_0==Tags) ) {
                    	                alt129=1;
                    	            }
                    	            else if ( (LA129_0==TagsIgnore) ) {
                    	                alt129=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 129, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt129) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:7590:14: otherlv_110= Tags
                    	                    {
                    	                    otherlv_110=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(otherlv_110, grammarAccess.getOptionedPushTriggerAccess().getTagsKeyword_3_2_0_0_0_0_0_0());
                    	                      													
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:7595:14: ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7595:14: ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:7596:15: (lv_ignoreSpecifiedTags_111_0= TagsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7596:15: (lv_ignoreSpecifiedTags_111_0= TagsIgnore )
                    	                    // InternalGitHubActionsParser.g:7597:16: lv_ignoreSpecifiedTags_111_0= TagsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedTags_111_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      																newLeafNode(lv_ignoreSpecifiedTags_111_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedTagsTagsIgnoreKeyword_3_2_0_0_0_0_0_1_0());
                    	                      															
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      																if (current==null) {
                    	                      																	current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      																}
                    	                      																setWithLastConsumed(current, "ignoreSpecifiedTags", lv_ignoreSpecifiedTags_111_0 != null, "tags-ignore");
                    	                      															
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_112=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_112, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_2_0_0_0_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:7614:13: ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7615:14: ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:7615:14: ( (lv_tags_113_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7616:15: (lv_tags_113_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7616:15: (lv_tags_113_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7617:16: lv_tags_113_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_tags_113_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"tags",
                    	              																	lv_tags_113_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_114=(Token)match(input,RULE_NEWLINE,FOLLOW_58); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_114, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:7641:12: (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7641:12: (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7642:13: otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE
                    	            {
                    	            otherlv_115=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_115, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_2_0_0_0_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:7646:13: ( (lv_tags_116_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7647:14: (lv_tags_116_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7647:14: (lv_tags_116_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7648:15: lv_tags_116_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_tags_116_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"tags",
                    	              																lv_tags_116_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:7665:13: (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )*
                    	            loop130:
                    	            do {
                    	                int alt130=2;
                    	                int LA130_0 = input.LA(1);

                    	                if ( (LA130_0==Comma) ) {
                    	                    alt130=1;
                    	                }


                    	                switch (alt130) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7666:14: otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_117=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_117, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_2_0_0_0_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7670:14: ( (lv_tags_118_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7671:15: (lv_tags_118_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7671:15: (lv_tags_118_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7672:16: lv_tags_118_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_tags_118_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"tags",
                    	            	      																	lv_tags_118_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop130;
                    	                }
                    	            } while (true);

                    	            otherlv_119=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_119, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_2_0_0_0_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_120=(Token)match(input,RULE_NEWLINE,FOLLOW_58); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_120, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:7700:12: (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:7700:12: (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END )
                    	            // InternalGitHubActionsParser.g:7701:13: this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END
                    	            {
                    	            this_NEWLINE_121=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_121, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_122=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_122, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:7709:13: (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+
                    	            int cnt131=0;
                    	            loop131:
                    	            do {
                    	                int alt131=2;
                    	                int LA131_0 = input.LA(1);

                    	                if ( (LA131_0==HyphenMinus) ) {
                    	                    alt131=1;
                    	                }


                    	                switch (alt131) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7710:14: otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_123=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_123, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_2_0_0_0_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7714:14: ( (lv_tags_124_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7715:15: (lv_tags_124_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7715:15: (lv_tags_124_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7716:16: lv_tags_124_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_tags_124_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"tags",
                    	            	      																	lv_tags_124_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_125=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_125, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt131 >= 1 ) break loop131;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(131, input);
                    	                        throw eee;
                    	                }
                    	                cnt131++;
                    	            } while (true);

                    	            this_END_126=(Token)match(input,RULE_END,FOLLOW_58); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_126, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    // InternalGitHubActionsParser.g:7744:11: ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )?
                    	    int alt136=4;
                    	    alt136 = dfa136.predict(input);
                    	    switch (alt136) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:7745:12: ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:7745:12: ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:7746:13: (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7746:13: (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) )
                    	            int alt133=2;
                    	            int LA133_0 = input.LA(1);

                    	            if ( (LA133_0==Branches) ) {
                    	                alt133=1;
                    	            }
                    	            else if ( (LA133_0==BranchesIgnore) ) {
                    	                alt133=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 133, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt133) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:7747:14: otherlv_127= Branches
                    	                    {
                    	                    otherlv_127=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      														newLeafNode(otherlv_127, grammarAccess.getOptionedPushTriggerAccess().getBranchesKeyword_3_2_0_0_1_0_0_0());
                    	                      													
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:7752:14: ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7752:14: ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) )
                    	                    // InternalGitHubActionsParser.g:7753:15: (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7753:15: (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore )
                    	                    // InternalGitHubActionsParser.g:7754:16: lv_ignoreSpecifiedBranches_128_0= BranchesIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedBranches_128_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      																newLeafNode(lv_ignoreSpecifiedBranches_128_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_2_0_0_1_0_0_1_0());
                    	                      															
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      																if (current==null) {
                    	                      																	current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      																}
                    	                      																setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_128_0 != null, "branches-ignore");
                    	                      															
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_129=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_129, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_2_0_0_1_0_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:7771:13: ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7772:14: ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:7772:14: ( (lv_branches_130_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7773:15: (lv_branches_130_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7773:15: (lv_branches_130_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7774:16: lv_branches_130_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_0_2_0_0());
                    	              															
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_branches_130_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              																if (current==null) {
                    	              																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              																}
                    	              																add(
                    	              																	current,
                    	              																	"branches",
                    	              																	lv_branches_130_0,
                    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              																afterParserOrEnumRuleCall();
                    	              															
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_131=(Token)match(input,RULE_NEWLINE,FOLLOW_59); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														newLeafNode(this_NEWLINE_131, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_0_2_1());
                    	              													
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:7798:12: (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7798:12: (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7799:13: otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE
                    	            {
                    	            otherlv_132=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_132, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_2_0_0_1_1_0());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:7803:13: ( (lv_branches_133_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7804:14: (lv_branches_133_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7804:14: (lv_branches_133_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7805:15: lv_branches_133_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_1_1_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_branches_133_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"branches",
                    	              																lv_branches_133_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:7822:13: (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )*
                    	            loop134:
                    	            do {
                    	                int alt134=2;
                    	                int LA134_0 = input.LA(1);

                    	                if ( (LA134_0==Comma) ) {
                    	                    alt134=1;
                    	                }


                    	                switch (alt134) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7823:14: otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_134=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_134, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_2_0_0_1_1_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7827:14: ( (lv_branches_135_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7828:15: (lv_branches_135_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7828:15: (lv_branches_135_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7829:16: lv_branches_135_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_1_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_branches_135_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"branches",
                    	            	      																	lv_branches_135_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop134;
                    	                }
                    	            } while (true);

                    	            otherlv_136=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(otherlv_136, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_2_0_0_1_1_3());
                    	              												
                    	            }
                    	            this_NEWLINE_137=(Token)match(input,RULE_NEWLINE,FOLLOW_59); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_137, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_1_4());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:7857:12: (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:7857:12: (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END )
                    	            // InternalGitHubActionsParser.g:7858:13: this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END
                    	            {
                    	            this_NEWLINE_138=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_138, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_0());
                    	              												
                    	            }
                    	            this_BEGIN_139=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_BEGIN_139, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_1_2_1());
                    	              												
                    	            }
                    	            // InternalGitHubActionsParser.g:7866:13: (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+
                    	            int cnt135=0;
                    	            loop135:
                    	            do {
                    	                int alt135=2;
                    	                int LA135_0 = input.LA(1);

                    	                if ( (LA135_0==HyphenMinus) ) {
                    	                    alt135=1;
                    	                }


                    	                switch (alt135) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7867:14: otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_140=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(otherlv_140, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_2_0_0_1_2_2_0());
                    	            	      													
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7871:14: ( (lv_branches_141_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7872:15: (lv_branches_141_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7872:15: (lv_branches_141_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7873:16: lv_branches_141_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_2_2_1_0());
                    	            	      															
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_branches_141_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																if (current==null) {
                    	            	      																	current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      																}
                    	            	      																add(
                    	            	      																	current,
                    	            	      																	"branches",
                    	            	      																	lv_branches_141_0,
                    	            	      																	"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																afterParserOrEnumRuleCall();
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_142=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newLeafNode(this_NEWLINE_142, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2_2_2());
                    	            	      													
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt135 >= 1 ) break loop135;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(135, input);
                    	                        throw eee;
                    	                }
                    	                cnt135++;
                    	            } while (true);

                    	            this_END_143=(Token)match(input,RULE_END,FOLLOW_59); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_END_143, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_0_1_2_3());
                    	              												
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:7907:6: ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:7907:6: ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:7908:7: {...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:7908:122: ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:7909:8: ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1);
                    	    // InternalGitHubActionsParser.g:7912:11: ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:7912:12: {...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:7912:21: ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) )
                    	    int alt140=3;
                    	    switch ( input.LA(1) ) {
                    	    case PathsIgnore:
                    	    case Paths:
                    	        {
                    	        alt140=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt140=2;
                    	        }
                    	        break;
                    	    case RULE_NEWLINE:
                    	        {
                    	        alt140=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 140, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt140) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:7912:22: ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:7912:22: ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:7913:12: (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7913:12: (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) )
                    	            int alt137=2;
                    	            int LA137_0 = input.LA(1);

                    	            if ( (LA137_0==Paths) ) {
                    	                alt137=1;
                    	            }
                    	            else if ( (LA137_0==PathsIgnore) ) {
                    	                alt137=2;
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 137, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt137) {
                    	                case 1 :
                    	                    // InternalGitHubActionsParser.g:7914:13: otherlv_144= Paths
                    	                    {
                    	                    otherlv_144=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      													newLeafNode(otherlv_144, grammarAccess.getOptionedPushTriggerAccess().getPathsKeyword_3_2_0_1_0_0_0());
                    	                      												
                    	                    }

                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // InternalGitHubActionsParser.g:7919:13: ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7919:13: ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) )
                    	                    // InternalGitHubActionsParser.g:7920:14: (lv_ignoreSpecifiedPaths_145_0= PathsIgnore )
                    	                    {
                    	                    // InternalGitHubActionsParser.g:7920:14: (lv_ignoreSpecifiedPaths_145_0= PathsIgnore )
                    	                    // InternalGitHubActionsParser.g:7921:15: lv_ignoreSpecifiedPaths_145_0= PathsIgnore
                    	                    {
                    	                    lv_ignoreSpecifiedPaths_145_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
                    	                    if ( state.backtracking==0 ) {

                    	                      															newLeafNode(lv_ignoreSpecifiedPaths_145_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_2_0_1_0_0_1_0());
                    	                      														
                    	                    }
                    	                    if ( state.backtracking==0 ) {

                    	                      															if (current==null) {
                    	                      																current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
                    	                      															}
                    	                      															setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_145_0 != null, "paths-ignore");
                    	                      														
                    	                    }

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            otherlv_146=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_146, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_2_0_1_0_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7938:12: ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7939:13: ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:7939:13: ( (lv_paths_147_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7940:14: (lv_paths_147_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7940:14: (lv_paths_147_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7941:15: lv_paths_147_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_0_2_0_0());
                    	              														
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_paths_147_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              															if (current==null) {
                    	              																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              															}
                    	              															add(
                    	              																current,
                    	              																"paths",
                    	              																lv_paths_147_0,
                    	              																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              															afterParserOrEnumRuleCall();
                    	              														
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_148=(Token)match(input,RULE_NEWLINE,FOLLOW_59); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													newLeafNode(this_NEWLINE_148, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_0_2_1());
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:7965:11: (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:7965:11: (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:7966:12: otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE
                    	            {
                    	            otherlv_149=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_149, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_2_0_1_1_0());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:7970:12: ( (lv_paths_150_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:7971:13: (lv_paths_150_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:7971:13: (lv_paths_150_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:7972:14: lv_paths_150_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_1_1_0());
                    	              													
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_paths_150_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              														if (current==null) {
                    	              															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	              														}
                    	              														add(
                    	              															current,
                    	              															"paths",
                    	              															lv_paths_150_0,
                    	              															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              														afterParserOrEnumRuleCall();
                    	              													
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:7989:12: (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )*
                    	            loop138:
                    	            do {
                    	                int alt138=2;
                    	                int LA138_0 = input.LA(1);

                    	                if ( (LA138_0==Comma) ) {
                    	                    alt138=1;
                    	                }


                    	                switch (alt138) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:7990:13: otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_151=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_151, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_2_0_1_1_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:7994:13: ( (lv_paths_152_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:7995:14: (lv_paths_152_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:7995:14: (lv_paths_152_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:7996:15: lv_paths_152_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_1_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_paths_152_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"paths",
                    	            	      																lv_paths_152_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop138;
                    	                }
                    	            } while (true);

                    	            otherlv_153=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_153, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_2_0_1_1_3());
                    	              											
                    	            }
                    	            this_NEWLINE_154=(Token)match(input,RULE_NEWLINE,FOLLOW_59); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_154, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_1_4());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:8024:11: (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:8024:11: (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END )
                    	            // InternalGitHubActionsParser.g:8025:12: this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END
                    	            {
                    	            this_NEWLINE_155=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_155, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0());
                    	              											
                    	            }
                    	            this_BEGIN_156=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_156, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_2_1());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:8033:12: (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+
                    	            int cnt139=0;
                    	            loop139:
                    	            do {
                    	                int alt139=2;
                    	                int LA139_0 = input.LA(1);

                    	                if ( (LA139_0==HyphenMinus) ) {
                    	                    alt139=1;
                    	                }


                    	                switch (alt139) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:8034:13: otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_157=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(otherlv_157, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_2_0_1_2_2_0());
                    	            	      												
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:8038:13: ( (lv_paths_158_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:8039:14: (lv_paths_158_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:8039:14: (lv_paths_158_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:8040:15: lv_paths_158_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_2_2_1_0());
                    	            	      														
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_paths_158_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															if (current==null) {
                    	            	      																current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
                    	            	      															}
                    	            	      															add(
                    	            	      																current,
                    	            	      																"paths",
                    	            	      																lv_paths_158_0,
                    	            	      																"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      															afterParserOrEnumRuleCall();
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_159=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newLeafNode(this_NEWLINE_159, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_2_2());
                    	            	      												
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt139 >= 1 ) break loop139;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(139, input);
                    	                        throw eee;
                    	                }
                    	                cnt139++;
                    	            } while (true);

                    	            this_END_160=(Token)match(input,RULE_END,FOLLOW_59); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_160, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_1_2_3());
                    	              											
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt141 >= 1 ) break loop141;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(141, input);
                                throw eee;
                        }
                        cnt141++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0());

                    }

                    this_END_161=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_161, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_1());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOptionedPushTrigger"


    // $ANTLR start "entryRuleOptionedScheduleTrigger"
    // InternalGitHubActionsParser.g:8094:1: entryRuleOptionedScheduleTrigger returns [EObject current=null] : iv_ruleOptionedScheduleTrigger= ruleOptionedScheduleTrigger EOF ;
    public final EObject entryRuleOptionedScheduleTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedScheduleTrigger = null;


        try {
            // InternalGitHubActionsParser.g:8094:64: (iv_ruleOptionedScheduleTrigger= ruleOptionedScheduleTrigger EOF )
            // InternalGitHubActionsParser.g:8095:2: iv_ruleOptionedScheduleTrigger= ruleOptionedScheduleTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedScheduleTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedScheduleTrigger=ruleOptionedScheduleTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedScheduleTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedScheduleTrigger"


    // $ANTLR start "ruleOptionedScheduleTrigger"
    // InternalGitHubActionsParser.g:8101:1: ruleOptionedScheduleTrigger returns [EObject current=null] : (otherlv_0= Schedule otherlv_1= Colon (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+ this_END_9= RULE_END ) ) ;
    public final EObject ruleOptionedScheduleTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token this_END_9=null;
        EObject lv_crons_7_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8107:2: ( (otherlv_0= Schedule otherlv_1= Colon (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+ this_END_9= RULE_END ) ) )
            // InternalGitHubActionsParser.g:8108:2: (otherlv_0= Schedule otherlv_1= Colon (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+ this_END_9= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:8108:2: (otherlv_0= Schedule otherlv_1= Colon (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+ this_END_9= RULE_END ) )
            // InternalGitHubActionsParser.g:8109:3: otherlv_0= Schedule otherlv_1= Colon (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+ this_END_9= RULE_END )
            {
            otherlv_0=(Token)match(input,Schedule,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOptionedScheduleTriggerAccess().getScheduleKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedScheduleTriggerAccess().getColonKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:8117:3: (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+ this_END_9= RULE_END )
            // InternalGitHubActionsParser.g:8118:4: this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+ this_END_9= RULE_END
            {
            this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_NEWLINE_2, grammarAccess.getOptionedScheduleTriggerAccess().getNEWLINETerminalRuleCall_2_0());
              			
            }
            this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_BEGIN_3, grammarAccess.getOptionedScheduleTriggerAccess().getBEGINTerminalRuleCall_2_1());
              			
            }
            // InternalGitHubActionsParser.g:8126:4: (otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )+
            int cnt143=0;
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==HyphenMinus) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8127:5: otherlv_4= HyphenMinus otherlv_5= Cron otherlv_6= Colon ( (lv_crons_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	    {
            	    otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_60); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_4, grammarAccess.getOptionedScheduleTriggerAccess().getHyphenMinusKeyword_2_2_0());
            	      				
            	    }
            	    otherlv_5=(Token)match(input,Cron,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_5, grammarAccess.getOptionedScheduleTriggerAccess().getCronKeyword_2_2_1());
            	      				
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_6, grammarAccess.getOptionedScheduleTriggerAccess().getColonKeyword_2_2_2());
            	      				
            	    }
            	    // InternalGitHubActionsParser.g:8139:5: ( (lv_crons_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:8140:6: (lv_crons_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:8140:6: (lv_crons_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:8141:7: lv_crons_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getOptionedScheduleTriggerAccess().getCronsExpressionParserRuleCall_2_2_3_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_crons_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getOptionedScheduleTriggerRule());
            	      							}
            	      							add(
            	      								current,
            	      								"crons",
            	      								lv_crons_7_0,
            	      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }

            	    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(this_NEWLINE_8, grammarAccess.getOptionedScheduleTriggerAccess().getNEWLINETerminalRuleCall_2_2_4());
            	      				
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);

            this_END_9=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_END_9, grammarAccess.getOptionedScheduleTriggerAccess().getENDTerminalRuleCall_2_3());
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedScheduleTrigger"


    // $ANTLR start "entryRuleOptionedWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:8172:1: entryRuleOptionedWorkflowCallTrigger returns [EObject current=null] : iv_ruleOptionedWorkflowCallTrigger= ruleOptionedWorkflowCallTrigger EOF ;
    public final EObject entryRuleOptionedWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedWorkflowCallTrigger = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0()
        	);

        try {
            // InternalGitHubActionsParser.g:8178:2: (iv_ruleOptionedWorkflowCallTrigger= ruleOptionedWorkflowCallTrigger EOF )
            // InternalGitHubActionsParser.g:8179:2: iv_ruleOptionedWorkflowCallTrigger= ruleOptionedWorkflowCallTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedWorkflowCallTrigger=ruleOptionedWorkflowCallTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedWorkflowCallTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedWorkflowCallTrigger"


    // $ANTLR start "ruleOptionedWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:8188:1: ruleOptionedWorkflowCallTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_call otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END ) ) ) ;
    public final EObject ruleOptionedWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_8=null;
        Token this_BEGIN_9=null;
        Token this_END_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_14=null;
        Token this_BEGIN_15=null;
        Token this_END_17=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_20=null;
        Token this_BEGIN_21=null;
        Token this_END_23=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token this_NEWLINE_27=null;
        Token this_BEGIN_28=null;
        Token this_END_30=null;
        Token otherlv_31=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_BEGIN_34=null;
        Token this_END_36=null;
        Token otherlv_37=null;
        Token otherlv_38=null;
        Token this_NEWLINE_39=null;
        Token this_BEGIN_40=null;
        Token this_END_42=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_58=null;
        Token this_BEGIN_59=null;
        Token this_END_61=null;
        Token this_END_62=null;
        EObject lv_inputs_10_0 = null;

        EObject lv_outputs_16_0 = null;

        EObject lv_secrets_22_0 = null;

        EObject lv_outputs_29_0 = null;

        EObject lv_inputs_35_0 = null;

        EObject lv_secrets_41_0 = null;

        EObject lv_secrets_48_0 = null;

        EObject lv_inputs_54_0 = null;

        EObject lv_outputs_60_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0()
        	);

        try {
            // InternalGitHubActionsParser.g:8199:2: ( ( () otherlv_1= Workflow_call otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END ) ) ) )
            // InternalGitHubActionsParser.g:8200:2: ( () otherlv_1= Workflow_call otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END ) ) )
            {
            // InternalGitHubActionsParser.g:8200:2: ( () otherlv_1= Workflow_call otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END ) ) )
            // InternalGitHubActionsParser.g:8201:3: () otherlv_1= Workflow_call otherlv_2= Colon ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:8201:3: ()
            // InternalGitHubActionsParser.g:8202:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedWorkflowCallTriggerAccess().getWorkflowCallTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_call,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedWorkflowCallTriggerAccess().getWorkflow_callKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:8219:3: ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END ) )
            int alt159=3;
            switch ( input.LA(1) ) {
            case RULE_NEWLINE:
                {
                alt159=1;
                }
                break;
            case Outputs:
                {
                int LA159_2 = input.LA(2);

                if ( (synpred262_InternalGitHubActionsParser()) ) {
                    alt159=2;
                }
                else if ( (true) ) {
                    alt159=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 2, input);

                    throw nvae;
                }
                }
                break;
            case Secrets:
                {
                int LA159_3 = input.LA(2);

                if ( (synpred262_InternalGitHubActionsParser()) ) {
                    alt159=2;
                }
                else if ( (true) ) {
                    alt159=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // InternalGitHubActionsParser.g:8220:4: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) )
                    {
                    // InternalGitHubActionsParser.g:8220:4: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) ) )
                    // InternalGitHubActionsParser.g:8221:5: this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) )
                    {
                    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_3, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_0());
                      				
                    }
                    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_62); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_4, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:8229:5: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:8230:6: ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:8230:6: ( ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:8231:7: ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2());
                    // InternalGitHubActionsParser.g:8234:7: ( ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:8235:8: ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:8235:8: ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )+
                    int cnt148=0;
                    loop148:
                    do {
                        int alt148=3;
                        int LA148_0 = input.LA(1);

                        if ( LA148_0 == Inputs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                            alt148=1;
                        }
                        else if ( LA148_0 == Secrets && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                            alt148=2;
                        }


                        switch (alt148) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:8236:6: ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:8236:6: ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:8237:7: {...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:8237:130: ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) )
                    	    // InternalGitHubActionsParser.g:8238:8: ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 0);
                    	    // InternalGitHubActionsParser.g:8241:11: ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) )
                    	    // InternalGitHubActionsParser.g:8241:12: {...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:8241:21: ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? )
                    	    // InternalGitHubActionsParser.g:8241:22: (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )?
                    	    {
                    	    // InternalGitHubActionsParser.g:8241:22: (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END )
                    	    // InternalGitHubActionsParser.g:8242:12: otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END
                    	    {
                    	    otherlv_6=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(otherlv_6, grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsKeyword_3_0_2_0_0_0());
                    	      											
                    	    }
                    	    otherlv_7=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(otherlv_7, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_2_0_0_1());
                    	      											
                    	    }
                    	    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(this_NEWLINE_8, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2());
                    	      											
                    	    }
                    	    this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(this_BEGIN_9, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_3());
                    	      											
                    	    }
                    	    // InternalGitHubActionsParser.g:8258:12: ( (lv_inputs_10_0= ruleInput ) )+
                    	    int cnt144=0;
                    	    loop144:
                    	    do {
                    	        int alt144=2;
                    	        int LA144_0 = input.LA(1);

                    	        if ( (LA144_0==Required||LA144_0==Default||LA144_0==Options||LA144_0==Type||LA144_0==LeftSquareBracket||LA144_0==RULE_NEWLINE||LA144_0==RULE_ID) ) {
                    	            alt144=1;
                    	        }


                    	        switch (alt144) {
                    	    	case 1 :
                    	    	    // InternalGitHubActionsParser.g:8259:13: (lv_inputs_10_0= ruleInput )
                    	    	    {
                    	    	    // InternalGitHubActionsParser.g:8259:13: (lv_inputs_10_0= ruleInput )
                    	    	    // InternalGitHubActionsParser.g:8260:14: lv_inputs_10_0= ruleInput
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_0_2_0_0_4_0());
                    	    	      													
                    	    	    }
                    	    	    pushFollow(FOLLOW_64);
                    	    	    lv_inputs_10_0=ruleInput();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      														if (current==null) {
                    	    	      															current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	    	      														}
                    	    	      														add(
                    	    	      															current,
                    	    	      															"inputs",
                    	    	      															lv_inputs_10_0,
                    	    	      															"d.fe.up.pt.cicd.gha.GitHubActions.Input");
                    	    	      														afterParserOrEnumRuleCall();
                    	    	      													
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt144 >= 1 ) break loop144;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(144, input);
                    	                throw eee;
                    	        }
                    	        cnt144++;
                    	    } while (true);

                    	    this_END_11=(Token)match(input,RULE_END,FOLLOW_65); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(this_END_11, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_5());
                    	      											
                    	    }

                    	    }

                    	    // InternalGitHubActionsParser.g:8282:11: (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )?
                    	    int alt146=2;
                    	    int LA146_0 = input.LA(1);

                    	    if ( (LA146_0==Outputs) ) {
                    	        alt146=1;
                    	    }
                    	    switch (alt146) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:8283:12: otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END
                    	            {
                    	            otherlv_12=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_12, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_0_2_0_1_0());
                    	              											
                    	            }
                    	            otherlv_13=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_13, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_2_0_1_1());
                    	              											
                    	            }
                    	            this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_14, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_1_2());
                    	              											
                    	            }
                    	            this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_66); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_15, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_1_3());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:8299:12: ( (lv_outputs_16_0= ruleOutput ) )+
                    	            int cnt145=0;
                    	            loop145:
                    	            do {
                    	                int alt145=2;
                    	                int LA145_0 = input.LA(1);

                    	                if ( (LA145_0==Value||LA145_0==RULE_ID) ) {
                    	                    alt145=1;
                    	                }


                    	                switch (alt145) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:8300:13: (lv_outputs_16_0= ruleOutput )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:8300:13: (lv_outputs_16_0= ruleOutput )
                    	            	    // InternalGitHubActionsParser.g:8301:14: lv_outputs_16_0= ruleOutput
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_0_2_0_1_4_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_67);
                    	            	    lv_outputs_16_0=ruleOutput();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"outputs",
                    	            	      															lv_outputs_16_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Output");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt145 >= 1 ) break loop145;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(145, input);
                    	                        throw eee;
                    	                }
                    	                cnt145++;
                    	            } while (true);

                    	            this_END_17=(Token)match(input,RULE_END,FOLLOW_68); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_17, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_0_2_0_1_5());
                    	              											
                    	            }

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:8329:6: ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:8329:6: ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:8330:7: {...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:8330:130: ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:8331:8: ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 1);
                    	    // InternalGitHubActionsParser.g:8334:11: ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) )
                    	    // InternalGitHubActionsParser.g:8334:12: {...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:8334:21: (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END )
                    	    // InternalGitHubActionsParser.g:8334:22: otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END
                    	    {
                    	    otherlv_18=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(otherlv_18, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_0_2_1_0());
                    	      										
                    	    }
                    	    otherlv_19=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(otherlv_19, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_2_1_1());
                    	      										
                    	    }
                    	    this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_NEWLINE_20, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2());
                    	      										
                    	    }
                    	    this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_BEGIN_21, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_3());
                    	      										
                    	    }
                    	    // InternalGitHubActionsParser.g:8350:11: ( (lv_secrets_22_0= ruleSecret ) )+
                    	    int cnt147=0;
                    	    loop147:
                    	    do {
                    	        int alt147=2;
                    	        int LA147_0 = input.LA(1);

                    	        if ( (LA147_0==Description||LA147_0==Required||LA147_0==RULE_ID) ) {
                    	            alt147=1;
                    	        }


                    	        switch (alt147) {
                    	    	case 1 :
                    	    	    // InternalGitHubActionsParser.g:8351:12: (lv_secrets_22_0= ruleSecret )
                    	    	    {
                    	    	    // InternalGitHubActionsParser.g:8351:12: (lv_secrets_22_0= ruleSecret )
                    	    	    // InternalGitHubActionsParser.g:8352:13: lv_secrets_22_0= ruleSecret
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_0_2_1_4_0());
                    	    	      												
                    	    	    }
                    	    	    pushFollow(FOLLOW_70);
                    	    	    lv_secrets_22_0=ruleSecret();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      													if (current==null) {
                    	    	      														current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	    	      													}
                    	    	      													add(
                    	    	      														current,
                    	    	      														"secrets",
                    	    	      														lv_secrets_22_0,
                    	    	      														"d.fe.up.pt.cicd.gha.GitHubActions.Secret");
                    	    	      													afterParserOrEnumRuleCall();
                    	    	      												
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt147 >= 1 ) break loop147;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(147, input);
                    	                throw eee;
                    	        }
                    	        cnt147++;
                    	    } while (true);

                    	    this_END_23=(Token)match(input,RULE_END,FOLLOW_68); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_END_23, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_0_2_1_5());
                    	      										
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt148 >= 1 ) break loop148;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(148, input);
                                throw eee;
                        }
                        cnt148++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2());

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:8389:4: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) )
                    {
                    // InternalGitHubActionsParser.g:8389:4: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:8390:5: ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:8390:5: ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:8391:6: ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1());
                    // InternalGitHubActionsParser.g:8394:6: ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:8395:7: ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:8395:7: ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+
                    int cnt153=0;
                    loop153:
                    do {
                        int alt153=3;
                        int LA153_0 = input.LA(1);

                        if ( LA153_0 == Outputs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                            alt153=1;
                        }
                        else if ( LA153_0 == Secrets && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                            alt153=2;
                        }


                        switch (alt153) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:8396:5: ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:8396:5: ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:8397:6: {...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:8397:127: ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) )
                    	    // InternalGitHubActionsParser.g:8398:7: ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0);
                    	    // InternalGitHubActionsParser.g:8401:10: ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) )
                    	    // InternalGitHubActionsParser.g:8401:11: {...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:8401:20: ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? )
                    	    // InternalGitHubActionsParser.g:8401:21: (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )?
                    	    {
                    	    // InternalGitHubActionsParser.g:8401:21: (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END )
                    	    // InternalGitHubActionsParser.g:8402:11: otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END
                    	    {
                    	    otherlv_25=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(otherlv_25, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_1_0_0_0());
                    	      										
                    	    }
                    	    otherlv_26=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(otherlv_26, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_0_0_1());
                    	      										
                    	    }
                    	    this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_NEWLINE_27, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2());
                    	      										
                    	    }
                    	    this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_66); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_BEGIN_28, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_3());
                    	      										
                    	    }
                    	    // InternalGitHubActionsParser.g:8418:11: ( (lv_outputs_29_0= ruleOutput ) )+
                    	    int cnt149=0;
                    	    loop149:
                    	    do {
                    	        int alt149=2;
                    	        int LA149_0 = input.LA(1);

                    	        if ( (LA149_0==Value||LA149_0==RULE_ID) ) {
                    	            alt149=1;
                    	        }


                    	        switch (alt149) {
                    	    	case 1 :
                    	    	    // InternalGitHubActionsParser.g:8419:12: (lv_outputs_29_0= ruleOutput )
                    	    	    {
                    	    	    // InternalGitHubActionsParser.g:8419:12: (lv_outputs_29_0= ruleOutput )
                    	    	    // InternalGitHubActionsParser.g:8420:13: lv_outputs_29_0= ruleOutput
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_1_0_0_4_0());
                    	    	      												
                    	    	    }
                    	    	    pushFollow(FOLLOW_67);
                    	    	    lv_outputs_29_0=ruleOutput();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      													if (current==null) {
                    	    	      														current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	    	      													}
                    	    	      													add(
                    	    	      														current,
                    	    	      														"outputs",
                    	    	      														lv_outputs_29_0,
                    	    	      														"d.fe.up.pt.cicd.gha.GitHubActions.Output");
                    	    	      													afterParserOrEnumRuleCall();
                    	    	      												
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt149 >= 1 ) break loop149;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(149, input);
                    	                throw eee;
                    	        }
                    	        cnt149++;
                    	    } while (true);

                    	    this_END_30=(Token)match(input,RULE_END,FOLLOW_65); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_END_30, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_1_0_0_5());
                    	      										
                    	    }

                    	    }

                    	    // InternalGitHubActionsParser.g:8442:10: (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )?
                    	    int alt151=2;
                    	    int LA151_0 = input.LA(1);

                    	    if ( (LA151_0==Inputs) ) {
                    	        alt151=1;
                    	    }
                    	    switch (alt151) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:8443:11: otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END
                    	            {
                    	            otherlv_31=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_31, grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsKeyword_3_1_0_1_0());
                    	              										
                    	            }
                    	            otherlv_32=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_32, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_0_1_1());
                    	              										
                    	            }
                    	            this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_NEWLINE_33, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_1_2());
                    	              										
                    	            }
                    	            this_BEGIN_34=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_BEGIN_34, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_1_0_1_3());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:8459:11: ( (lv_inputs_35_0= ruleInput ) )+
                    	            int cnt150=0;
                    	            loop150:
                    	            do {
                    	                int alt150=2;
                    	                int LA150_0 = input.LA(1);

                    	                if ( (LA150_0==Required||LA150_0==Default||LA150_0==Options||LA150_0==Type||LA150_0==LeftSquareBracket||LA150_0==RULE_NEWLINE||LA150_0==RULE_ID) ) {
                    	                    alt150=1;
                    	                }


                    	                switch (alt150) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:8460:12: (lv_inputs_35_0= ruleInput )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:8460:12: (lv_inputs_35_0= ruleInput )
                    	            	    // InternalGitHubActionsParser.g:8461:13: lv_inputs_35_0= ruleInput
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_1_0_1_4_0());
                    	            	      												
                    	            	    }
                    	            	    pushFollow(FOLLOW_64);
                    	            	    lv_inputs_35_0=ruleInput();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													if (current==null) {
                    	            	      														current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	            	      													}
                    	            	      													add(
                    	            	      														current,
                    	            	      														"inputs",
                    	            	      														lv_inputs_35_0,
                    	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Input");
                    	            	      													afterParserOrEnumRuleCall();
                    	            	      												
                    	            	    }

                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt150 >= 1 ) break loop150;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(150, input);
                    	                        throw eee;
                    	                }
                    	                cnt150++;
                    	            } while (true);

                    	            this_END_36=(Token)match(input,RULE_END,FOLLOW_71); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_END_36, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_1_0_1_5());
                    	              										
                    	            }

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:8489:5: ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:8489:5: ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:8490:6: {...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:8490:127: ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:8491:7: ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1);
                    	    // InternalGitHubActionsParser.g:8494:10: ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) )
                    	    // InternalGitHubActionsParser.g:8494:11: {...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:8494:20: (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END )
                    	    // InternalGitHubActionsParser.g:8494:21: otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END
                    	    {
                    	    otherlv_37=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_37, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_1_1_0());
                    	      									
                    	    }
                    	    otherlv_38=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_38, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_1_1());
                    	      									
                    	    }
                    	    this_NEWLINE_39=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_NEWLINE_39, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2());
                    	      									
                    	    }
                    	    this_BEGIN_40=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_BEGIN_40, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_1_1_3());
                    	      									
                    	    }
                    	    // InternalGitHubActionsParser.g:8510:10: ( (lv_secrets_41_0= ruleSecret ) )+
                    	    int cnt152=0;
                    	    loop152:
                    	    do {
                    	        int alt152=2;
                    	        int LA152_0 = input.LA(1);

                    	        if ( (LA152_0==Description||LA152_0==Required||LA152_0==RULE_ID) ) {
                    	            alt152=1;
                    	        }


                    	        switch (alt152) {
                    	    	case 1 :
                    	    	    // InternalGitHubActionsParser.g:8511:11: (lv_secrets_41_0= ruleSecret )
                    	    	    {
                    	    	    // InternalGitHubActionsParser.g:8511:11: (lv_secrets_41_0= ruleSecret )
                    	    	    // InternalGitHubActionsParser.g:8512:12: lv_secrets_41_0= ruleSecret
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_1_1_4_0());
                    	    	      											
                    	    	    }
                    	    	    pushFollow(FOLLOW_70);
                    	    	    lv_secrets_41_0=ruleSecret();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      												if (current==null) {
                    	    	      													current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	    	      												}
                    	    	      												add(
                    	    	      													current,
                    	    	      													"secrets",
                    	    	      													lv_secrets_41_0,
                    	    	      													"d.fe.up.pt.cicd.gha.GitHubActions.Secret");
                    	    	      												afterParserOrEnumRuleCall();
                    	    	      											
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt152 >= 1 ) break loop152;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(152, input);
                    	                throw eee;
                    	        }
                    	        cnt152++;
                    	    } while (true);

                    	    this_END_42=(Token)match(input,RULE_END,FOLLOW_71); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_END_42, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_1_1_5());
                    	      									
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt153 >= 1 ) break loop153;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(153, input);
                                throw eee;
                        }
                        cnt153++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1());

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:8548:4: ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:8548:4: ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END )
                    // InternalGitHubActionsParser.g:8549:5: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) this_END_62= RULE_END
                    {
                    // InternalGitHubActionsParser.g:8549:5: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:8550:6: ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:8550:6: ( ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:8551:7: ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0());
                    // InternalGitHubActionsParser.g:8554:7: ( ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:8555:8: ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:8555:8: ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )+
                    int cnt158=0;
                    loop158:
                    do {
                        int alt158=3;
                        int LA158_0 = input.LA(1);

                        if ( LA158_0 == Secrets && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                            alt158=1;
                        }
                        else if ( LA158_0 == Outputs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                            alt158=2;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:8556:6: ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:8556:6: ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) )
                    	    // InternalGitHubActionsParser.g:8557:7: {...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:8557:130: ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) )
                    	    // InternalGitHubActionsParser.g:8558:8: ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 0);
                    	    // InternalGitHubActionsParser.g:8561:11: ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) )
                    	    // InternalGitHubActionsParser.g:8561:12: {...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:8561:21: ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? )
                    	    // InternalGitHubActionsParser.g:8561:22: (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )?
                    	    {
                    	    // InternalGitHubActionsParser.g:8561:22: (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END )
                    	    // InternalGitHubActionsParser.g:8562:12: otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END
                    	    {
                    	    otherlv_44=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(otherlv_44, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_2_0_0_0_0());
                    	      											
                    	    }
                    	    otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(otherlv_45, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_0_0_1());
                    	      											
                    	    }
                    	    this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(this_NEWLINE_46, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2());
                    	      											
                    	    }
                    	    this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(this_BEGIN_47, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_3());
                    	      											
                    	    }
                    	    // InternalGitHubActionsParser.g:8578:12: ( (lv_secrets_48_0= ruleSecret ) )+
                    	    int cnt154=0;
                    	    loop154:
                    	    do {
                    	        int alt154=2;
                    	        int LA154_0 = input.LA(1);

                    	        if ( (LA154_0==Description||LA154_0==Required||LA154_0==RULE_ID) ) {
                    	            alt154=1;
                    	        }


                    	        switch (alt154) {
                    	    	case 1 :
                    	    	    // InternalGitHubActionsParser.g:8579:13: (lv_secrets_48_0= ruleSecret )
                    	    	    {
                    	    	    // InternalGitHubActionsParser.g:8579:13: (lv_secrets_48_0= ruleSecret )
                    	    	    // InternalGitHubActionsParser.g:8580:14: lv_secrets_48_0= ruleSecret
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_2_0_0_0_4_0());
                    	    	      													
                    	    	    }
                    	    	    pushFollow(FOLLOW_70);
                    	    	    lv_secrets_48_0=ruleSecret();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      														if (current==null) {
                    	    	      															current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	    	      														}
                    	    	      														add(
                    	    	      															current,
                    	    	      															"secrets",
                    	    	      															lv_secrets_48_0,
                    	    	      															"d.fe.up.pt.cicd.gha.GitHubActions.Secret");
                    	    	      														afterParserOrEnumRuleCall();
                    	    	      													
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt154 >= 1 ) break loop154;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(154, input);
                    	                throw eee;
                    	        }
                    	        cnt154++;
                    	    } while (true);

                    	    this_END_49=(Token)match(input,RULE_END,FOLLOW_72); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												newLeafNode(this_END_49, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_5());
                    	      											
                    	    }

                    	    }

                    	    // InternalGitHubActionsParser.g:8602:11: (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )?
                    	    int alt156=2;
                    	    int LA156_0 = input.LA(1);

                    	    if ( (LA156_0==Inputs) ) {
                    	        alt156=1;
                    	    }
                    	    switch (alt156) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:8603:12: otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END
                    	            {
                    	            otherlv_50=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_50, grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsKeyword_3_2_0_0_1_0());
                    	              											
                    	            }
                    	            otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(otherlv_51, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_0_1_1());
                    	              											
                    	            }
                    	            this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_NEWLINE_52, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_1_2());
                    	              											
                    	            }
                    	            this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_BEGIN_53, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_1_3());
                    	              											
                    	            }
                    	            // InternalGitHubActionsParser.g:8619:12: ( (lv_inputs_54_0= ruleInput ) )+
                    	            int cnt155=0;
                    	            loop155:
                    	            do {
                    	                int alt155=2;
                    	                int LA155_0 = input.LA(1);

                    	                if ( (LA155_0==Required||LA155_0==Default||LA155_0==Options||LA155_0==Type||LA155_0==LeftSquareBracket||LA155_0==RULE_NEWLINE||LA155_0==RULE_ID) ) {
                    	                    alt155=1;
                    	                }


                    	                switch (alt155) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:8620:13: (lv_inputs_54_0= ruleInput )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:8620:13: (lv_inputs_54_0= ruleInput )
                    	            	    // InternalGitHubActionsParser.g:8621:14: lv_inputs_54_0= ruleInput
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_2_0_0_1_4_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_64);
                    	            	    lv_inputs_54_0=ruleInput();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"inputs",
                    	            	      															lv_inputs_54_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Input");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt155 >= 1 ) break loop155;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(155, input);
                    	                        throw eee;
                    	                }
                    	                cnt155++;
                    	            } while (true);

                    	            this_END_55=(Token)match(input,RULE_END,FOLLOW_73); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												newLeafNode(this_END_55, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_0_0_1_5());
                    	              											
                    	            }

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:8649:6: ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:8649:6: ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:8650:7: {...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:8650:130: ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:8651:8: ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 1);
                    	    // InternalGitHubActionsParser.g:8654:11: ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) )
                    	    // InternalGitHubActionsParser.g:8654:12: {...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:8654:21: (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END )
                    	    // InternalGitHubActionsParser.g:8654:22: otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END
                    	    {
                    	    otherlv_56=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(otherlv_56, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_2_0_1_0());
                    	      										
                    	    }
                    	    otherlv_57=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(otherlv_57, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_1_1());
                    	      										
                    	    }
                    	    this_NEWLINE_58=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_NEWLINE_58, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2());
                    	      										
                    	    }
                    	    this_BEGIN_59=(Token)match(input,RULE_BEGIN,FOLLOW_66); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_BEGIN_59, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_3());
                    	      										
                    	    }
                    	    // InternalGitHubActionsParser.g:8670:11: ( (lv_outputs_60_0= ruleOutput ) )+
                    	    int cnt157=0;
                    	    loop157:
                    	    do {
                    	        int alt157=2;
                    	        int LA157_0 = input.LA(1);

                    	        if ( (LA157_0==Value||LA157_0==RULE_ID) ) {
                    	            alt157=1;
                    	        }


                    	        switch (alt157) {
                    	    	case 1 :
                    	    	    // InternalGitHubActionsParser.g:8671:12: (lv_outputs_60_0= ruleOutput )
                    	    	    {
                    	    	    // InternalGitHubActionsParser.g:8671:12: (lv_outputs_60_0= ruleOutput )
                    	    	    // InternalGitHubActionsParser.g:8672:13: lv_outputs_60_0= ruleOutput
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_2_0_1_4_0());
                    	    	      												
                    	    	    }
                    	    	    pushFollow(FOLLOW_67);
                    	    	    lv_outputs_60_0=ruleOutput();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      													if (current==null) {
                    	    	      														current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
                    	    	      													}
                    	    	      													add(
                    	    	      														current,
                    	    	      														"outputs",
                    	    	      														lv_outputs_60_0,
                    	    	      														"d.fe.up.pt.cicd.gha.GitHubActions.Output");
                    	    	      													afterParserOrEnumRuleCall();
                    	    	      												
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt157 >= 1 ) break loop157;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(157, input);
                    	                throw eee;
                    	        }
                    	        cnt157++;
                    	    } while (true);

                    	    this_END_61=(Token)match(input,RULE_END,FOLLOW_73); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											newLeafNode(this_END_61, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_0_1_5());
                    	      										
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt158 >= 1 ) break loop158;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(158, input);
                                throw eee;
                        }
                        cnt158++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0());

                    }

                    this_END_62=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_62, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_1());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOptionedWorkflowCallTrigger"


    // $ANTLR start "entryRuleOptionedWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:8720:1: entryRuleOptionedWorkflowDispatchTrigger returns [EObject current=null] : iv_ruleOptionedWorkflowDispatchTrigger= ruleOptionedWorkflowDispatchTrigger EOF ;
    public final EObject entryRuleOptionedWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedWorkflowDispatchTrigger = null;


        try {
            // InternalGitHubActionsParser.g:8720:72: (iv_ruleOptionedWorkflowDispatchTrigger= ruleOptionedWorkflowDispatchTrigger EOF )
            // InternalGitHubActionsParser.g:8721:2: iv_ruleOptionedWorkflowDispatchTrigger= ruleOptionedWorkflowDispatchTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedWorkflowDispatchTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedWorkflowDispatchTrigger=ruleOptionedWorkflowDispatchTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedWorkflowDispatchTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedWorkflowDispatchTrigger"


    // $ANTLR start "ruleOptionedWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:8727:1: ruleOptionedWorkflowDispatchTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon this_NEWLINE_7= RULE_NEWLINE this_BEGIN_8= RULE_BEGIN ( (lv_inputs_9_0= ruleInput ) )+ this_END_10= RULE_END ) this_END_11= RULE_END ) ;
    public final EObject ruleOptionedWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_7=null;
        Token this_BEGIN_8=null;
        Token this_END_10=null;
        Token this_END_11=null;
        EObject lv_inputs_9_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8733:2: ( ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon this_NEWLINE_7= RULE_NEWLINE this_BEGIN_8= RULE_BEGIN ( (lv_inputs_9_0= ruleInput ) )+ this_END_10= RULE_END ) this_END_11= RULE_END ) )
            // InternalGitHubActionsParser.g:8734:2: ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon this_NEWLINE_7= RULE_NEWLINE this_BEGIN_8= RULE_BEGIN ( (lv_inputs_9_0= ruleInput ) )+ this_END_10= RULE_END ) this_END_11= RULE_END )
            {
            // InternalGitHubActionsParser.g:8734:2: ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon this_NEWLINE_7= RULE_NEWLINE this_BEGIN_8= RULE_BEGIN ( (lv_inputs_9_0= ruleInput ) )+ this_END_10= RULE_END ) this_END_11= RULE_END )
            // InternalGitHubActionsParser.g:8735:3: () otherlv_1= Workflow_dispatch otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon this_NEWLINE_7= RULE_NEWLINE this_BEGIN_8= RULE_BEGIN ( (lv_inputs_9_0= ruleInput ) )+ this_END_10= RULE_END ) this_END_11= RULE_END
            {
            // InternalGitHubActionsParser.g:8735:3: ()
            // InternalGitHubActionsParser.g:8736:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getWorkflowDispatchTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_dispatch,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getWorkflow_dispatchKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getColonKeyword_2());
              		
            }
            this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_3, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getNEWLINETerminalRuleCall_3());
              		
            }
            this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_74); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_4, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getBEGINTerminalRuleCall_4());
              		
            }
            // InternalGitHubActionsParser.g:8761:3: (otherlv_5= Inputs otherlv_6= Colon this_NEWLINE_7= RULE_NEWLINE this_BEGIN_8= RULE_BEGIN ( (lv_inputs_9_0= ruleInput ) )+ this_END_10= RULE_END )
            // InternalGitHubActionsParser.g:8762:4: otherlv_5= Inputs otherlv_6= Colon this_NEWLINE_7= RULE_NEWLINE this_BEGIN_8= RULE_BEGIN ( (lv_inputs_9_0= ruleInput ) )+ this_END_10= RULE_END
            {
            otherlv_5=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_5, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getInputsKeyword_5_0());
              			
            }
            otherlv_6=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_6, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getColonKeyword_5_1());
              			
            }
            this_NEWLINE_7=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_NEWLINE_7, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getNEWLINETerminalRuleCall_5_2());
              			
            }
            this_BEGIN_8=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_BEGIN_8, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getBEGINTerminalRuleCall_5_3());
              			
            }
            // InternalGitHubActionsParser.g:8778:4: ( (lv_inputs_9_0= ruleInput ) )+
            int cnt160=0;
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==Required||LA160_0==Default||LA160_0==Options||LA160_0==Type||LA160_0==LeftSquareBracket||LA160_0==RULE_NEWLINE||LA160_0==RULE_ID) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8779:5: (lv_inputs_9_0= ruleInput )
            	    {
            	    // InternalGitHubActionsParser.g:8779:5: (lv_inputs_9_0= ruleInput )
            	    // InternalGitHubActionsParser.g:8780:6: lv_inputs_9_0= ruleInput
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getInputsInputParserRuleCall_5_4_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_64);
            	    lv_inputs_9_0=ruleInput();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOptionedWorkflowDispatchTriggerRule());
            	      						}
            	      						add(
            	      							current,
            	      							"inputs",
            	      							lv_inputs_9_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.Input");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt160 >= 1 ) break loop160;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(160, input);
                        throw eee;
                }
                cnt160++;
            } while (true);

            this_END_10=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_END_10, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getENDTerminalRuleCall_5_5());
              			
            }

            }

            this_END_11=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_11, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getENDTerminalRuleCall_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedWorkflowDispatchTrigger"


    // $ANTLR start "entryRuleInput"
    // InternalGitHubActionsParser.g:8810:1: entryRuleInput returns [EObject current=null] : iv_ruleInput= ruleInput EOF ;
    public final EObject entryRuleInput() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInput = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getInputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:8814:2: (iv_ruleInput= ruleInput EOF )
            // InternalGitHubActionsParser.g:8815:2: iv_ruleInput= ruleInput EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInputRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInput=ruleInput();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInput; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleInput"


    // $ANTLR start "ruleInput"
    // InternalGitHubActionsParser.g:8824:1: ruleInput returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleInput() throws RecognitionException {
        EObject current = null;

        Token lv_id_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token this_NEWLINE_16=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_NEWLINE_20=null;
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token lv_options_23_0=null;
        Token this_NEWLINE_24=null;
        Token otherlv_25=null;
        Token lv_options_26_0=null;
        Token otherlv_27=null;
        Token lv_options_28_0=null;
        Token otherlv_29=null;
        Token this_NEWLINE_30=null;
        Token this_NEWLINE_31=null;
        Token this_BEGIN_32=null;
        Token otherlv_33=null;
        Token lv_options_34_0=null;
        Token this_NEWLINE_35=null;
        Token this_END_36=null;
        Token this_END_37=null;
        EObject lv_description_7_0 = null;

        EObject lv_default_11_0 = null;

        EObject lv_isRequired_15_0 = null;

        Enumerator lv_type_19_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getInputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:8833:2: ( ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:8834:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:8834:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:8835:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:8835:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:8836:4: ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getInputAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:8839:4: ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:8840:5: ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:8840:5: ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+
            int cnt165=0;
            loop165:
            do {
                int alt165=6;
                alt165 = dfa165.predict(input);
                switch (alt165) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8841:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:8841:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    // InternalGitHubActionsParser.g:8842:4: {...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:8842:99: ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    // InternalGitHubActionsParser.g:8843:5: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:8846:8: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    // InternalGitHubActionsParser.g:8846:9: {...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:8846:18: ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    // InternalGitHubActionsParser.g:8846:19: ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    {
            	    // InternalGitHubActionsParser.g:8846:19: ( (lv_id_1_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:8847:9: (lv_id_1_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:8847:9: (lv_id_1_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:8848:10: lv_id_1_0= RULE_ID
            	    {
            	    lv_id_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_1_0, grammarAccess.getInputAccess().getIdIDTerminalRuleCall_0_0_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getInputRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_1_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getInputAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_3, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_75); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getInputAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:8876:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    int alt161=2;
            	    int LA161_0 = input.LA(1);

            	    if ( (LA161_0==Description) ) {
            	        alt161=1;
            	    }
            	    switch (alt161) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:8877:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	            {
            	            otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getInputAccess().getDescriptionKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getInputAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:8885:9: ( (lv_description_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:8886:10: (lv_description_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:8886:10: (lv_description_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:8887:11: lv_description_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getInputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_description_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getInputRule());
            	              											}
            	              											set(
            	              												current,
            	              												"description",
            	              												lv_description_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_76); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_8, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_0_4_3());
            	              								
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:8915:3: ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:8915:3: ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:8916:4: {...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:8916:99: ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:8917:5: ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:8920:8: ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:8920:9: {...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:8920:18: (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:8920:19: otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
            	    {
            	    otherlv_9=(Token)match(input,Default,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getInputAccess().getDefaultKeyword_1_0());
            	      							
            	    }
            	    otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_10, grammarAccess.getInputAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:8928:8: ( (lv_default_11_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:8929:9: (lv_default_11_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:8929:9: (lv_default_11_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:8930:10: lv_default_11_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getInputAccess().getDefaultExpressionParserRuleCall_1_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_default_11_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getInputRule());
            	      										}
            	      										set(
            	      											current,
            	      											"default",
            	      											lv_default_11_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_76); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_12, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_1_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:8957:3: ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:8957:3: ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:8958:4: {...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:8958:99: ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:8959:5: ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:8962:8: ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:8962:9: {...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:8962:18: (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:8962:19: otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE
            	    {
            	    otherlv_13=(Token)match(input,Required,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_13, grammarAccess.getInputAccess().getRequiredKeyword_2_0());
            	      							
            	    }
            	    otherlv_14=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_14, grammarAccess.getInputAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:8970:8: ( (lv_isRequired_15_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:8971:9: (lv_isRequired_15_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:8971:9: (lv_isRequired_15_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:8972:10: lv_isRequired_15_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getInputAccess().getIsRequiredExpressionParserRuleCall_2_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_isRequired_15_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getInputRule());
            	      										}
            	      										set(
            	      											current,
            	      											"isRequired",
            	      											lv_isRequired_15_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_76); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_16, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_2_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:8999:3: ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:8999:3: ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:9000:4: {...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:9000:99: ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:9001:5: ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:9004:8: ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:9004:9: {...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:9004:18: (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:9004:19: otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE
            	    {
            	    otherlv_17=(Token)match(input,Type,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_17, grammarAccess.getInputAccess().getTypeKeyword_3_0());
            	      							
            	    }
            	    otherlv_18=(Token)match(input,Colon,FOLLOW_77); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_18, grammarAccess.getInputAccess().getColonKeyword_3_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:9012:8: ( (lv_type_19_0= ruleTYPE ) )
            	    // InternalGitHubActionsParser.g:9013:9: (lv_type_19_0= ruleTYPE )
            	    {
            	    // InternalGitHubActionsParser.g:9013:9: (lv_type_19_0= ruleTYPE )
            	    // InternalGitHubActionsParser.g:9014:10: lv_type_19_0= ruleTYPE
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getInputAccess().getTypeTYPEEnumRuleCall_3_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_type_19_0=ruleTYPE();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getInputRule());
            	      										}
            	      										set(
            	      											current,
            	      											"type",
            	      											lv_type_19_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.TYPE");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_76); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_20, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_3_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:9041:3: ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:9041:3: ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:9042:4: {...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:9042:99: ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:9043:5: ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:9046:8: ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) )
            	    // InternalGitHubActionsParser.g:9046:9: {...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:9046:18: ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END )
            	    // InternalGitHubActionsParser.g:9046:19: ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:9046:19: ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) )
            	    int alt164=3;
            	    switch ( input.LA(1) ) {
            	    case Options:
            	        {
            	        alt164=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt164=2;
            	        }
            	        break;
            	    case RULE_NEWLINE:
            	        {
            	        alt164=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 164, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt164) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:9047:9: (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) )
            	            {
            	            // InternalGitHubActionsParser.g:9047:9: (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) )
            	            // InternalGitHubActionsParser.g:9048:10: otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE )
            	            {
            	            otherlv_21=(Token)match(input,Options,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_21, grammarAccess.getInputAccess().getOptionsKeyword_4_0_0_0());
            	              									
            	            }
            	            otherlv_22=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_22, grammarAccess.getInputAccess().getColonKeyword_4_0_0_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:9056:10: ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:9057:11: ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE
            	            {
            	            // InternalGitHubActionsParser.g:9057:11: ( (lv_options_23_0= RULE_STRING ) )
            	            // InternalGitHubActionsParser.g:9058:12: (lv_options_23_0= RULE_STRING )
            	            {
            	            // InternalGitHubActionsParser.g:9058:12: (lv_options_23_0= RULE_STRING )
            	            // InternalGitHubActionsParser.g:9059:13: lv_options_23_0= RULE_STRING
            	            {
            	            lv_options_23_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													newLeafNode(lv_options_23_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_0_2_0_0());
            	              												
            	            }
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElement(grammarAccess.getInputRule());
            	              													}
            	              													addWithLastConsumed(
            	              														current,
            	              														"options",
            	              														lv_options_23_0,
            	              														"org.eclipse.xtext.common.Terminals.STRING");
            	              												
            	            }

            	            }


            	            }

            	            this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_NEWLINE_24, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_0_2_1());
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:9082:9: (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE )
            	            {
            	            // InternalGitHubActionsParser.g:9082:9: (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE )
            	            // InternalGitHubActionsParser.g:9083:10: otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE
            	            {
            	            otherlv_25=(Token)match(input,LeftSquareBracket,FOLLOW_35); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_25, grammarAccess.getInputAccess().getLeftSquareBracketKeyword_4_0_1_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:9087:10: ( (lv_options_26_0= RULE_STRING ) )
            	            // InternalGitHubActionsParser.g:9088:11: (lv_options_26_0= RULE_STRING )
            	            {
            	            // InternalGitHubActionsParser.g:9088:11: (lv_options_26_0= RULE_STRING )
            	            // InternalGitHubActionsParser.g:9089:12: lv_options_26_0= RULE_STRING
            	            {
            	            lv_options_26_0=(Token)match(input,RULE_STRING,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												newLeafNode(lv_options_26_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_1_1_0());
            	              											
            	            }
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElement(grammarAccess.getInputRule());
            	              												}
            	              												addWithLastConsumed(
            	              													current,
            	              													"options",
            	              													lv_options_26_0,
            	              													"org.eclipse.xtext.common.Terminals.STRING");
            	              											
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:9105:10: (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )*
            	            loop162:
            	            do {
            	                int alt162=2;
            	                int LA162_0 = input.LA(1);

            	                if ( (LA162_0==Comma) ) {
            	                    alt162=1;
            	                }


            	                switch (alt162) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:9106:11: otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) )
            	            	    {
            	            	    otherlv_27=(Token)match(input,Comma,FOLLOW_35); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_27, grammarAccess.getInputAccess().getCommaKeyword_4_0_1_2_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:9110:11: ( (lv_options_28_0= RULE_STRING ) )
            	            	    // InternalGitHubActionsParser.g:9111:12: (lv_options_28_0= RULE_STRING )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:9111:12: (lv_options_28_0= RULE_STRING )
            	            	    // InternalGitHubActionsParser.g:9112:13: lv_options_28_0= RULE_STRING
            	            	    {
            	            	    lv_options_28_0=(Token)match(input,RULE_STRING,FOLLOW_9); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													newLeafNode(lv_options_28_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_1_2_1_0());
            	            	      												
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElement(grammarAccess.getInputRule());
            	            	      													}
            	            	      													addWithLastConsumed(
            	            	      														current,
            	            	      														"options",
            	            	      														lv_options_28_0,
            	            	      														"org.eclipse.xtext.common.Terminals.STRING");
            	            	      												
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop162;
            	                }
            	            } while (true);

            	            otherlv_29=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_29, grammarAccess.getInputAccess().getRightSquareBracketKeyword_4_0_1_3());
            	              									
            	            }
            	            this_NEWLINE_30=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_NEWLINE_30, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_1_4());
            	              									
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:9139:9: (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:9139:9: (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END )
            	            // InternalGitHubActionsParser.g:9140:10: this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END
            	            {
            	            this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_NEWLINE_31, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_0());
            	              									
            	            }
            	            this_BEGIN_32=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_BEGIN_32, grammarAccess.getInputAccess().getBEGINTerminalRuleCall_4_0_2_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:9148:10: (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+
            	            int cnt163=0;
            	            loop163:
            	            do {
            	                int alt163=2;
            	                int LA163_0 = input.LA(1);

            	                if ( (LA163_0==HyphenMinus) ) {
            	                    alt163=1;
            	                }


            	                switch (alt163) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:9149:11: otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE
            	            	    {
            	            	    otherlv_33=(Token)match(input,HyphenMinus,FOLLOW_35); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_33, grammarAccess.getInputAccess().getHyphenMinusKeyword_4_0_2_2_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:9153:11: ( (lv_options_34_0= RULE_STRING ) )
            	            	    // InternalGitHubActionsParser.g:9154:12: (lv_options_34_0= RULE_STRING )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:9154:12: (lv_options_34_0= RULE_STRING )
            	            	    // InternalGitHubActionsParser.g:9155:13: lv_options_34_0= RULE_STRING
            	            	    {
            	            	    lv_options_34_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													newLeafNode(lv_options_34_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_2_2_1_0());
            	            	      												
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElement(grammarAccess.getInputRule());
            	            	      													}
            	            	      													addWithLastConsumed(
            	            	      														current,
            	            	      														"options",
            	            	      														lv_options_34_0,
            	            	      														"org.eclipse.xtext.common.Terminals.STRING");
            	            	      												
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_35=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(this_NEWLINE_35, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_2_2());
            	            	      										
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt163 >= 1 ) break loop163;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(163, input);
            	                        throw eee;
            	                }
            	                cnt163++;
            	            } while (true);

            	            this_END_36=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_END_36, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_0_2_3());
            	              									
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    this_END_37=(Token)match(input,RULE_END,FOLLOW_76); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_37, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_1());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt165 >= 1 ) break loop165;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(165, input);
                        throw eee;
                }
                cnt165++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getInputAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleInput"


    // $ANTLR start "entryRuleOutput"
    // InternalGitHubActionsParser.g:9206:1: entryRuleOutput returns [EObject current=null] : iv_ruleOutput= ruleOutput EOF ;
    public final EObject entryRuleOutput() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOutput = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOutputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:9210:2: (iv_ruleOutput= ruleOutput EOF )
            // InternalGitHubActionsParser.g:9211:2: iv_ruleOutput= ruleOutput EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOutputRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOutput=ruleOutput();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOutput; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOutput"


    // $ANTLR start "ruleOutput"
    // InternalGitHubActionsParser.g:9220:1: ruleOutput returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleOutput() throws RecognitionException {
        EObject current = null;

        Token lv_id_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token this_END_13=null;
        EObject lv_description_7_0 = null;

        EObject lv_value_11_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOutputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:9229:2: ( ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:9230:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:9230:2: ( ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:9231:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:9231:3: ( ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:9232:4: ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getOutputAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:9235:4: ( ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:9236:5: ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:9236:5: ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )+
            int cnt167=0;
            loop167:
            do {
                int alt167=3;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==RULE_ID) ) {
                    int LA167_2 = input.LA(2);

                    if ( synpred281_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0) ) {
                        alt167=1;
                    }


                }
                else if ( (LA167_0==Value) ) {
                    int LA167_3 = input.LA(2);

                    if ( synpred282_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1) ) {
                        alt167=2;
                    }


                }


                switch (alt167) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:9237:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:9237:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
            	    // InternalGitHubActionsParser.g:9238:4: {...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:9238:100: ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
            	    // InternalGitHubActionsParser.g:9239:5: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:9242:8: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
            	    // InternalGitHubActionsParser.g:9242:9: {...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:9242:18: ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
            	    // InternalGitHubActionsParser.g:9242:19: ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    {
            	    // InternalGitHubActionsParser.g:9242:19: ( (lv_id_1_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:9243:9: (lv_id_1_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:9243:9: (lv_id_1_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:9244:10: lv_id_1_0= RULE_ID
            	    {
            	    lv_id_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_1_0, grammarAccess.getOutputAccess().getIdIDTerminalRuleCall_0_0_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getOutputRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_1_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getOutputAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_3, grammarAccess.getOutputAccess().getNEWLINETerminalRuleCall_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_78); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getOutputAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:9272:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
            	    int alt166=2;
            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0==Description) ) {
            	        alt166=1;
            	    }
            	    switch (alt166) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:9273:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	            {
            	            otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getOutputAccess().getDescriptionKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getOutputAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:9281:9: ( (lv_description_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:9282:10: (lv_description_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:9282:10: (lv_description_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:9283:11: lv_description_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getOutputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_description_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getOutputRule());
            	              											}
            	              											set(
            	              												current,
            	              												"description",
            	              												lv_description_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_79); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_NEWLINE_8, grammarAccess.getOutputAccess().getNEWLINETerminalRuleCall_0_4_3());
            	              								
            	            }

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOutputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:9311:3: ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:9311:3: ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:9312:4: {...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:9312:100: ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:9313:5: ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:9316:8: ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) )
            	    // InternalGitHubActionsParser.g:9316:9: {...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:9316:18: ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END )
            	    // InternalGitHubActionsParser.g:9316:19: (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:9316:19: (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:9317:9: otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
            	    {
            	    otherlv_9=(Token)match(input,Value,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_9, grammarAccess.getOutputAccess().getValueKeyword_1_0_0());
            	      								
            	    }
            	    otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_10, grammarAccess.getOutputAccess().getColonKeyword_1_0_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:9325:9: ( (lv_value_11_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:9326:10: (lv_value_11_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:9326:10: (lv_value_11_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:9327:11: lv_value_11_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getOutputAccess().getValueExpressionParserRuleCall_1_0_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_value_11_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getOutputRule());
            	      											}
            	      											set(
            	      												current,
            	      												"value",
            	      												lv_value_11_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_12, grammarAccess.getOutputAccess().getNEWLINETerminalRuleCall_1_0_3());
            	      								
            	    }

            	    }

            	    this_END_13=(Token)match(input,RULE_END,FOLLOW_79); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_13, grammarAccess.getOutputAccess().getENDTerminalRuleCall_1_1());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOutputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt167 >= 1 ) break loop167;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(167, input);
                        throw eee;
                }
                cnt167++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOutputAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleOutput", "getUnorderedGroupHelper().canLeave(grammarAccess.getOutputAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getOutputAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOutput"


    // $ANTLR start "entryRuleSecret"
    // InternalGitHubActionsParser.g:9373:1: entryRuleSecret returns [EObject current=null] : iv_ruleSecret= ruleSecret EOF ;
    public final EObject entryRuleSecret() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSecret = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 
        	grammarAccess.getSecretAccess().getUnorderedGroup_1_0()
        	);

        try {
            // InternalGitHubActionsParser.g:9378:2: (iv_ruleSecret= ruleSecret EOF )
            // InternalGitHubActionsParser.g:9379:2: iv_ruleSecret= ruleSecret EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSecretRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSecret=ruleSecret();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSecret; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleSecret"


    // $ANTLR start "ruleSecret"
    // InternalGitHubActionsParser.g:9388:1: ruleSecret returns [EObject current=null] : ( ( ( (lv_id_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_22= RULE_END ) ) ;
    public final EObject ruleSecret() throws RecognitionException {
        EObject current = null;

        Token lv_id_0_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        Token this_END_22=null;
        EObject lv_description_7_0 = null;

        EObject lv_isRequired_11_0 = null;

        EObject lv_isRequired_16_0 = null;

        EObject lv_description_20_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 
        	grammarAccess.getSecretAccess().getUnorderedGroup_1_0()
        	);

        try {
            // InternalGitHubActionsParser.g:9398:2: ( ( ( ( (lv_id_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_22= RULE_END ) ) )
            // InternalGitHubActionsParser.g:9399:2: ( ( ( (lv_id_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_22= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:9399:2: ( ( ( (lv_id_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_22= RULE_END ) )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==RULE_ID) ) {
                alt170=1;
            }
            else if ( (LA170_0==Description||LA170_0==Required) ) {
                alt170=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // InternalGitHubActionsParser.g:9400:3: ( ( (lv_id_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
                    {
                    // InternalGitHubActionsParser.g:9400:3: ( ( (lv_id_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
                    // InternalGitHubActionsParser.g:9401:4: ( (lv_id_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
                    {
                    // InternalGitHubActionsParser.g:9401:4: ( (lv_id_0_0= RULE_ID ) )
                    // InternalGitHubActionsParser.g:9402:5: (lv_id_0_0= RULE_ID )
                    {
                    // InternalGitHubActionsParser.g:9402:5: (lv_id_0_0= RULE_ID )
                    // InternalGitHubActionsParser.g:9403:6: lv_id_0_0= RULE_ID
                    {
                    lv_id_0_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_id_0_0, grammarAccess.getSecretAccess().getIdIDTerminalRuleCall_0_0_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getSecretRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"id",
                      							lv_id_0_0,
                      							"org.eclipse.xtext.common.Terminals.ID");
                      					
                    }

                    }


                    }

                    otherlv_1=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSecretAccess().getColonKeyword_0_1());
                      			
                    }
                    this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_2, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_0_2());
                      			
                    }
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_80); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_3, grammarAccess.getSecretAccess().getBEGINTerminalRuleCall_0_3());
                      			
                    }
                    // InternalGitHubActionsParser.g:9431:4: ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:9432:5: ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:9432:5: ( ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:9433:6: ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getSecretAccess().getUnorderedGroup_0_4());
                    // InternalGitHubActionsParser.g:9436:6: ( ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:9437:7: ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:9437:7: ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+
                    int cnt168=0;
                    loop168:
                    do {
                        int alt168=3;
                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==Required) ) {
                            int LA168_3 = input.LA(2);

                            if ( synpred284_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 1) ) {
                                alt168=2;
                            }


                        }
                        else if ( (LA168_0==Description) ) {
                            int LA168_4 = input.LA(2);

                            if ( synpred283_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 0) ) {
                                alt168=1;
                            }


                        }


                        switch (alt168) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:9438:5: ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:9438:5: ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
                    	    // InternalGitHubActionsParser.g:9439:6: {...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:9439:106: ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
                    	    // InternalGitHubActionsParser.g:9440:7: ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 0);
                    	    // InternalGitHubActionsParser.g:9443:10: ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
                    	    // InternalGitHubActionsParser.g:9443:11: {...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:9443:20: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
                    	    // InternalGitHubActionsParser.g:9443:21: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
                    	    {
                    	    otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_5, grammarAccess.getSecretAccess().getDescriptionKeyword_0_4_0_0());
                    	      									
                    	    }
                    	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_6, grammarAccess.getSecretAccess().getColonKeyword_0_4_0_1());
                    	      									
                    	    }
                    	    // InternalGitHubActionsParser.g:9451:10: ( (lv_description_7_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:9452:11: (lv_description_7_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:9452:11: (lv_description_7_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:9453:12: lv_description_7_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      												newCompositeNode(grammarAccess.getSecretAccess().getDescriptionExpressionParserRuleCall_0_4_0_2_0());
                    	      											
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_description_7_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												if (current==null) {
                    	      													current = createModelElementForParent(grammarAccess.getSecretRule());
                    	      												}
                    	      												set(
                    	      													current,
                    	      													"description",
                    	      													lv_description_7_0,
                    	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      												afterParserOrEnumRuleCall();
                    	      											
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_81); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_NEWLINE_8, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_0_4_0_3());
                    	      									
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSecretAccess().getUnorderedGroup_0_4());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:9480:5: ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:9480:5: ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
                    	    // InternalGitHubActionsParser.g:9481:6: {...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:9481:106: ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
                    	    // InternalGitHubActionsParser.g:9482:7: ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 1);
                    	    // InternalGitHubActionsParser.g:9485:10: ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
                    	    // InternalGitHubActionsParser.g:9485:11: {...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:9485:20: (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
                    	    // InternalGitHubActionsParser.g:9485:21: otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
                    	    {
                    	    otherlv_9=(Token)match(input,Required,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_9, grammarAccess.getSecretAccess().getRequiredKeyword_0_4_1_0());
                    	      									
                    	    }
                    	    otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_10, grammarAccess.getSecretAccess().getColonKeyword_0_4_1_1());
                    	      									
                    	    }
                    	    // InternalGitHubActionsParser.g:9493:10: ( (lv_isRequired_11_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:9494:11: (lv_isRequired_11_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:9494:11: (lv_isRequired_11_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:9495:12: lv_isRequired_11_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      												newCompositeNode(grammarAccess.getSecretAccess().getIsRequiredExpressionParserRuleCall_0_4_1_2_0());
                    	      											
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_isRequired_11_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												if (current==null) {
                    	      													current = createModelElementForParent(grammarAccess.getSecretRule());
                    	      												}
                    	      												set(
                    	      													current,
                    	      													"isRequired",
                    	      													lv_isRequired_11_0,
                    	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      												afterParserOrEnumRuleCall();
                    	      											
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_81); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_NEWLINE_12, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_0_4_1_3());
                    	      									
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSecretAccess().getUnorderedGroup_0_4());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt168 >= 1 ) break loop168;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(168, input);
                                throw eee;
                        }
                        cnt168++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getSecretAccess().getUnorderedGroup_0_4()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canLeave(grammarAccess.getSecretAccess().getUnorderedGroup_0_4())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getSecretAccess().getUnorderedGroup_0_4());

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:9532:3: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_22= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:9532:3: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_22= RULE_END )
                    // InternalGitHubActionsParser.g:9533:4: ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_22= RULE_END
                    {
                    // InternalGitHubActionsParser.g:9533:4: ( ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:9534:5: ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:9534:5: ( ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:9535:6: ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getSecretAccess().getUnorderedGroup_1_0());
                    // InternalGitHubActionsParser.g:9538:6: ( ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:9539:7: ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:9539:7: ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )+
                    int cnt169=0;
                    loop169:
                    do {
                        int alt169=3;
                        int LA169_0 = input.LA(1);

                        if ( LA169_0 == Required && getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 0) ) {
                            alt169=1;
                        }
                        else if ( LA169_0 == Description && getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 1) ) {
                            alt169=2;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:9540:5: ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:9540:5: ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
                    	    // InternalGitHubActionsParser.g:9541:6: {...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:9541:106: ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
                    	    // InternalGitHubActionsParser.g:9542:7: ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 0);
                    	    // InternalGitHubActionsParser.g:9545:10: ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
                    	    // InternalGitHubActionsParser.g:9545:11: {...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:9545:20: (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
                    	    // InternalGitHubActionsParser.g:9545:21: otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
                    	    {
                    	    otherlv_14=(Token)match(input,Required,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_14, grammarAccess.getSecretAccess().getRequiredKeyword_1_0_0_0());
                    	      									
                    	    }
                    	    otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_15, grammarAccess.getSecretAccess().getColonKeyword_1_0_0_1());
                    	      									
                    	    }
                    	    // InternalGitHubActionsParser.g:9553:10: ( (lv_isRequired_16_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:9554:11: (lv_isRequired_16_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:9554:11: (lv_isRequired_16_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:9555:12: lv_isRequired_16_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      												newCompositeNode(grammarAccess.getSecretAccess().getIsRequiredExpressionParserRuleCall_1_0_0_2_0());
                    	      											
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_isRequired_16_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												if (current==null) {
                    	      													current = createModelElementForParent(grammarAccess.getSecretRule());
                    	      												}
                    	      												set(
                    	      													current,
                    	      													"isRequired",
                    	      													lv_isRequired_16_0,
                    	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      												afterParserOrEnumRuleCall();
                    	      											
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_82); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_NEWLINE_17, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_1_0_0_3());
                    	      									
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSecretAccess().getUnorderedGroup_1_0());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:9582:5: ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:9582:5: ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) )
                    	    // InternalGitHubActionsParser.g:9583:6: {...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:9583:106: ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) )
                    	    // InternalGitHubActionsParser.g:9584:7: ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 1);
                    	    // InternalGitHubActionsParser.g:9587:10: ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) )
                    	    // InternalGitHubActionsParser.g:9587:11: {...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleSecret", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:9587:20: (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )
                    	    // InternalGitHubActionsParser.g:9587:21: otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE
                    	    {
                    	    otherlv_18=(Token)match(input,Description,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_18, grammarAccess.getSecretAccess().getDescriptionKeyword_1_0_1_0());
                    	      									
                    	    }
                    	    otherlv_19=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_19, grammarAccess.getSecretAccess().getColonKeyword_1_0_1_1());
                    	      									
                    	    }
                    	    // InternalGitHubActionsParser.g:9595:10: ( (lv_description_20_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:9596:11: (lv_description_20_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:9596:11: (lv_description_20_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:9597:12: lv_description_20_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      												newCompositeNode(grammarAccess.getSecretAccess().getDescriptionExpressionParserRuleCall_1_0_1_2_0());
                    	      											
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_description_20_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												if (current==null) {
                    	      													current = createModelElementForParent(grammarAccess.getSecretRule());
                    	      												}
                    	      												set(
                    	      													current,
                    	      													"description",
                    	      													lv_description_20_0,
                    	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      												afterParserOrEnumRuleCall();
                    	      											
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_82); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_NEWLINE_21, grammarAccess.getSecretAccess().getNEWLINETerminalRuleCall_1_0_1_3());
                    	      									
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSecretAccess().getUnorderedGroup_1_0());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt169 >= 1 ) break loop169;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(169, input);
                                throw eee;
                        }
                        cnt169++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getSecretAccess().getUnorderedGroup_1_0()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canLeave(grammarAccess.getSecretAccess().getUnorderedGroup_1_0())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getSecretAccess().getUnorderedGroup_1_0());

                    }

                    this_END_22=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_22, grammarAccess.getSecretAccess().getENDTerminalRuleCall_1_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleSecret"


    // $ANTLR start "entryRulePermission"
    // InternalGitHubActionsParser.g:9644:1: entryRulePermission returns [EObject current=null] : iv_rulePermission= rulePermission EOF ;
    public final EObject entryRulePermission() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePermission = null;


        try {
            // InternalGitHubActionsParser.g:9644:51: (iv_rulePermission= rulePermission EOF )
            // InternalGitHubActionsParser.g:9645:2: iv_rulePermission= rulePermission EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPermissionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePermission=rulePermission();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePermission; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePermission"


    // $ANTLR start "rulePermission"
    // InternalGitHubActionsParser.g:9651:1: rulePermission returns [EObject current=null] : ( ( (lv_key_0_0= rulePERMISSION_SCOPE ) ) otherlv_1= Colon ( (lv_value_2_0= rulePERMISSION_VALUE ) ) this_NEWLINE_3= RULE_NEWLINE ) ;
    public final EObject rulePermission() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_NEWLINE_3=null;
        Enumerator lv_key_0_0 = null;

        Enumerator lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9657:2: ( ( ( (lv_key_0_0= rulePERMISSION_SCOPE ) ) otherlv_1= Colon ( (lv_value_2_0= rulePERMISSION_VALUE ) ) this_NEWLINE_3= RULE_NEWLINE ) )
            // InternalGitHubActionsParser.g:9658:2: ( ( (lv_key_0_0= rulePERMISSION_SCOPE ) ) otherlv_1= Colon ( (lv_value_2_0= rulePERMISSION_VALUE ) ) this_NEWLINE_3= RULE_NEWLINE )
            {
            // InternalGitHubActionsParser.g:9658:2: ( ( (lv_key_0_0= rulePERMISSION_SCOPE ) ) otherlv_1= Colon ( (lv_value_2_0= rulePERMISSION_VALUE ) ) this_NEWLINE_3= RULE_NEWLINE )
            // InternalGitHubActionsParser.g:9659:3: ( (lv_key_0_0= rulePERMISSION_SCOPE ) ) otherlv_1= Colon ( (lv_value_2_0= rulePERMISSION_VALUE ) ) this_NEWLINE_3= RULE_NEWLINE
            {
            // InternalGitHubActionsParser.g:9659:3: ( (lv_key_0_0= rulePERMISSION_SCOPE ) )
            // InternalGitHubActionsParser.g:9660:4: (lv_key_0_0= rulePERMISSION_SCOPE )
            {
            // InternalGitHubActionsParser.g:9660:4: (lv_key_0_0= rulePERMISSION_SCOPE )
            // InternalGitHubActionsParser.g:9661:5: lv_key_0_0= rulePERMISSION_SCOPE
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPermissionAccess().getKeyPERMISSION_SCOPEEnumRuleCall_0_0());
              				
            }
            pushFollow(FOLLOW_3);
            lv_key_0_0=rulePERMISSION_SCOPE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPermissionRule());
              					}
              					set(
              						current,
              						"key",
              						lv_key_0_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.PERMISSION_SCOPE");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_83); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getPermissionAccess().getColonKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9682:3: ( (lv_value_2_0= rulePERMISSION_VALUE ) )
            // InternalGitHubActionsParser.g:9683:4: (lv_value_2_0= rulePERMISSION_VALUE )
            {
            // InternalGitHubActionsParser.g:9683:4: (lv_value_2_0= rulePERMISSION_VALUE )
            // InternalGitHubActionsParser.g:9684:5: lv_value_2_0= rulePERMISSION_VALUE
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getPermissionAccess().getValuePERMISSION_VALUEEnumRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_value_2_0=rulePERMISSION_VALUE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getPermissionRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.PERMISSION_VALUE");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_3, grammarAccess.getPermissionAccess().getNEWLINETerminalRuleCall_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePermission"


    // $ANTLR start "entryRuleDefaults"
    // InternalGitHubActionsParser.g:9709:1: entryRuleDefaults returns [EObject current=null] : iv_ruleDefaults= ruleDefaults EOF ;
    public final EObject entryRuleDefaults() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDefaults = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getDefaultsAccess().getUnorderedGroup_4()
        	);

        try {
            // InternalGitHubActionsParser.g:9713:2: (iv_ruleDefaults= ruleDefaults EOF )
            // InternalGitHubActionsParser.g:9714:2: iv_ruleDefaults= ruleDefaults EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaults=ruleDefaults();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaults; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleDefaults"


    // $ANTLR start "ruleDefaults"
    // InternalGitHubActionsParser.g:9723:1: ruleDefaults returns [EObject current=null] : (otherlv_0= Run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_13= RULE_END ) ;
    public final EObject ruleDefaults() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token this_END_13=null;
        EObject lv_shell_7_0 = null;

        EObject lv_workingDirectory_11_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getDefaultsAccess().getUnorderedGroup_4()
        	);

        try {
            // InternalGitHubActionsParser.g:9732:2: ( (otherlv_0= Run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_13= RULE_END ) )
            // InternalGitHubActionsParser.g:9733:2: (otherlv_0= Run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_13= RULE_END )
            {
            // InternalGitHubActionsParser.g:9733:2: (otherlv_0= Run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_13= RULE_END )
            // InternalGitHubActionsParser.g:9734:3: otherlv_0= Run otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) this_END_13= RULE_END
            {
            otherlv_0=(Token)match(input,Run,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getDefaultsAccess().getRunKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDefaultsAccess().getColonKeyword_1());
              		
            }
            this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_2, grammarAccess.getDefaultsAccess().getNEWLINETerminalRuleCall_2());
              		
            }
            this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_84); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_3, grammarAccess.getDefaultsAccess().getBEGINTerminalRuleCall_3());
              		
            }
            // InternalGitHubActionsParser.g:9750:3: ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:9751:4: ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:9751:4: ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:9752:5: ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());
            // InternalGitHubActionsParser.g:9755:5: ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:9756:6: ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:9756:6: ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )+
            int cnt171=0;
            loop171:
            do {
                int alt171=3;
                int LA171_0 = input.LA(1);

                if ( LA171_0 == Shell && getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0) ) {
                    alt171=1;
                }
                else if ( LA171_0 == WorkingDirectory && getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1) ) {
                    alt171=2;
                }


                switch (alt171) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:9757:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:9757:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:9758:5: {...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:9758:105: ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:9759:6: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0);
            	    // InternalGitHubActionsParser.g:9762:9: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:9762:10: {...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "true");
            	    }
            	    // InternalGitHubActionsParser.g:9762:19: (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:9762:20: otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
            	    {
            	    otherlv_5=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_5, grammarAccess.getDefaultsAccess().getShellKeyword_4_0_0());
            	      								
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_6, grammarAccess.getDefaultsAccess().getColonKeyword_4_0_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:9770:9: ( (lv_shell_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:9771:10: (lv_shell_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:9771:10: (lv_shell_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:9772:11: lv_shell_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getDefaultsAccess().getShellExpressionParserRuleCall_4_0_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_shell_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getDefaultsRule());
            	      											}
            	      											set(
            	      												current,
            	      												"shell",
            	      												lv_shell_7_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_85); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_8, grammarAccess.getDefaultsAccess().getNEWLINETerminalRuleCall_4_0_3());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:9799:4: ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:9799:4: ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:9800:5: {...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:9800:105: ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:9801:6: ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1);
            	    // InternalGitHubActionsParser.g:9804:9: ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:9804:10: {...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "true");
            	    }
            	    // InternalGitHubActionsParser.g:9804:19: (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:9804:20: otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
            	    {
            	    otherlv_9=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_9, grammarAccess.getDefaultsAccess().getWorkingDirectoryKeyword_4_1_0());
            	      								
            	    }
            	    otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_10, grammarAccess.getDefaultsAccess().getColonKeyword_4_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:9812:9: ( (lv_workingDirectory_11_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:9813:10: (lv_workingDirectory_11_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:9813:10: (lv_workingDirectory_11_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:9814:11: lv_workingDirectory_11_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getDefaultsAccess().getWorkingDirectoryExpressionParserRuleCall_4_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_workingDirectory_11_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getDefaultsRule());
            	      											}
            	      											set(
            	      												current,
            	      												"workingDirectory",
            	      												lv_workingDirectory_11_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }

            	    this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_85); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_NEWLINE_12, grammarAccess.getDefaultsAccess().getNEWLINETerminalRuleCall_4_1_3());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt171 >= 1 ) break loop171;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(171, input);
                        throw eee;
                }
                cnt171++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getDefaultsAccess().getUnorderedGroup_4()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleDefaults", "getUnorderedGroupHelper().canLeave(grammarAccess.getDefaultsAccess().getUnorderedGroup_4())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());

            }

            this_END_13=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_13, grammarAccess.getDefaultsAccess().getENDTerminalRuleCall_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleDefaults"


    // $ANTLR start "entryRuleStagingEnvironment"
    // InternalGitHubActionsParser.g:9860:1: entryRuleStagingEnvironment returns [EObject current=null] : iv_ruleStagingEnvironment= ruleStagingEnvironment EOF ;
    public final EObject entryRuleStagingEnvironment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStagingEnvironment = null;


        try {
            // InternalGitHubActionsParser.g:9860:59: (iv_ruleStagingEnvironment= ruleStagingEnvironment EOF )
            // InternalGitHubActionsParser.g:9861:2: iv_ruleStagingEnvironment= ruleStagingEnvironment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStagingEnvironmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStagingEnvironment=ruleStagingEnvironment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStagingEnvironment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStagingEnvironment"


    // $ANTLR start "ruleStagingEnvironment"
    // InternalGitHubActionsParser.g:9867:1: ruleStagingEnvironment returns [EObject current=null] : ( ( ( (lv_name_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE ) (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )? this_END_12= RULE_END ) ) ;
    public final EObject ruleStagingEnvironment() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_1=null;
        Token this_NEWLINE_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token this_NEWLINE_7=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token this_NEWLINE_11=null;
        Token this_END_12=null;
        EObject lv_name_0_0 = null;

        EObject lv_name_6_0 = null;

        EObject lv_url_10_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9873:2: ( ( ( ( (lv_name_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE ) (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )? this_END_12= RULE_END ) ) )
            // InternalGitHubActionsParser.g:9874:2: ( ( ( (lv_name_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE ) (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )? this_END_12= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:9874:2: ( ( ( (lv_name_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE ) (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )? this_END_12= RULE_END ) )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==DollarSignLeftCurlyBracketLeftCurlyBracket||LA173_0==RULE_STRING) ) {
                alt173=1;
            }
            else if ( (LA173_0==RULE_NEWLINE) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // InternalGitHubActionsParser.g:9875:3: ( ( (lv_name_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE )
                    {
                    // InternalGitHubActionsParser.g:9875:3: ( ( (lv_name_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:9876:4: ( (lv_name_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE
                    {
                    // InternalGitHubActionsParser.g:9876:4: ( (lv_name_0_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:9877:5: (lv_name_0_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:9877:5: (lv_name_0_0= ruleExpression )
                    // InternalGitHubActionsParser.g:9878:6: lv_name_0_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getStagingEnvironmentAccess().getNameExpressionParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_5);
                    lv_name_0_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getStagingEnvironmentRule());
                      						}
                      						set(
                      							current,
                      							"name",
                      							lv_name_0_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    this_NEWLINE_1=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_1, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:9901:3: (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE ) (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )? this_END_12= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:9901:3: (this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE ) (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )? this_END_12= RULE_END )
                    // InternalGitHubActionsParser.g:9902:4: this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE ) (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )? this_END_12= RULE_END
                    {
                    this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_2, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_1_0());
                      			
                    }
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_3, grammarAccess.getStagingEnvironmentAccess().getBEGINTerminalRuleCall_1_1());
                      			
                    }
                    // InternalGitHubActionsParser.g:9910:4: (otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:9911:5: otherlv_4= Name otherlv_5= Colon ( (lv_name_6_0= ruleExpression ) ) this_NEWLINE_7= RULE_NEWLINE
                    {
                    otherlv_4=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getStagingEnvironmentAccess().getNameKeyword_1_2_0());
                      				
                    }
                    otherlv_5=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_5, grammarAccess.getStagingEnvironmentAccess().getColonKeyword_1_2_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:9919:5: ( (lv_name_6_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:9920:6: (lv_name_6_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:9920:6: (lv_name_6_0= ruleExpression )
                    // InternalGitHubActionsParser.g:9921:7: lv_name_6_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getStagingEnvironmentAccess().getNameExpressionParserRuleCall_1_2_2_0());
                      						
                    }
                    pushFollow(FOLLOW_5);
                    lv_name_6_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getStagingEnvironmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_6_0,
                      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    this_NEWLINE_7=(Token)match(input,RULE_NEWLINE,FOLLOW_87); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_7, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_1_2_3());
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:9943:4: (otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE )?
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==Url) ) {
                        alt172=1;
                    }
                    switch (alt172) {
                        case 1 :
                            // InternalGitHubActionsParser.g:9944:5: otherlv_8= Url otherlv_9= Colon ( (lv_url_10_0= ruleExpression ) ) this_NEWLINE_11= RULE_NEWLINE
                            {
                            otherlv_8=(Token)match(input,Url,FOLLOW_3); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_8, grammarAccess.getStagingEnvironmentAccess().getUrlKeyword_1_3_0());
                              				
                            }
                            otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_9, grammarAccess.getStagingEnvironmentAccess().getColonKeyword_1_3_1());
                              				
                            }
                            // InternalGitHubActionsParser.g:9952:5: ( (lv_url_10_0= ruleExpression ) )
                            // InternalGitHubActionsParser.g:9953:6: (lv_url_10_0= ruleExpression )
                            {
                            // InternalGitHubActionsParser.g:9953:6: (lv_url_10_0= ruleExpression )
                            // InternalGitHubActionsParser.g:9954:7: lv_url_10_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getStagingEnvironmentAccess().getUrlExpressionParserRuleCall_1_3_2_0());
                              						
                            }
                            pushFollow(FOLLOW_5);
                            lv_url_10_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getStagingEnvironmentRule());
                              							}
                              							set(
                              								current,
                              								"url",
                              								lv_url_10_0,
                              								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            this_NEWLINE_11=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_NEWLINE_11, grammarAccess.getStagingEnvironmentAccess().getNEWLINETerminalRuleCall_1_3_3());
                              				
                            }

                            }
                            break;

                    }

                    this_END_12=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_12, grammarAccess.getStagingEnvironmentAccess().getENDTerminalRuleCall_1_4());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStagingEnvironment"


    // $ANTLR start "entryRuleStrategy"
    // InternalGitHubActionsParser.g:9985:1: entryRuleStrategy returns [EObject current=null] : iv_ruleStrategy= ruleStrategy EOF ;
    public final EObject entryRuleStrategy() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStrategy = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getStrategyAccess().getUnorderedGroup(), 
        	grammarAccess.getStrategyAccess().getUnorderedGroup_0()
        	);

        try {
            // InternalGitHubActionsParser.g:9990:2: (iv_ruleStrategy= ruleStrategy EOF )
            // InternalGitHubActionsParser.g:9991:2: iv_ruleStrategy= ruleStrategy EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStrategyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStrategy=ruleStrategy();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStrategy; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleStrategy"


    // $ANTLR start "ruleStrategy"
    // InternalGitHubActionsParser.g:10000:1: ruleStrategy returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleStrategy() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_NEWLINE_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_8=null;
        Token this_BEGIN_9=null;
        Token this_END_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_14=null;
        Token this_BEGIN_15=null;
        Token this_END_17=null;
        Token this_BEGIN_18=null;
        Token this_END_20=null;
        Token this_END_21=null;
        Token otherlv_22=null;
        Token otherlv_23=null;
        Token this_NEWLINE_25=null;
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_NEWLINE_29=null;
        EObject lv_includes_10_0 = null;

        EObject lv_excludes_16_0 = null;

        EObject lv_axes_19_0 = null;

        EObject lv_failFast_24_0 = null;

        EObject lv_maxParallel_28_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getStrategyAccess().getUnorderedGroup(), 
        	grammarAccess.getStrategyAccess().getUnorderedGroup_0()
        	);

        try {
            // InternalGitHubActionsParser.g:10010:2: ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:10011:2: ( ( ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:10011:2: ( ( ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:10012:3: ( ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:10012:3: ( ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:10013:4: ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getStrategyAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:10016:4: ( ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:10017:5: ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:10017:5: ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )+
            int cnt177=0;
            loop177:
            do {
                int alt177=4;
                int LA177_0 = input.LA(1);

                if ( LA177_0 == Matrix && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {
                    alt177=1;
                }
                else if ( LA177_0 == Exludes && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {
                    alt177=1;
                }
                else if ( LA177_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {
                    alt177=1;
                }
                else if ( LA177_0 == FailFast && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1) ) {
                    alt177=2;
                }
                else if ( LA177_0 == MaxParalell && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {
                    alt177=3;
                }


                switch (alt177) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:10018:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:10018:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:10019:4: {...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:10019:102: ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    // InternalGitHubActionsParser.g:10020:5: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:10023:8: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    // InternalGitHubActionsParser.g:10023:9: {...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    }
            	    // InternalGitHubActionsParser.g:10023:18: ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) )
            	    // InternalGitHubActionsParser.g:10023:19: ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) )
            	    {
            	    // InternalGitHubActionsParser.g:10023:19: ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) )
            	    // InternalGitHubActionsParser.g:10024:9: ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?)
            	    {
            	    getUnorderedGroupHelper().enter(grammarAccess.getStrategyAccess().getUnorderedGroup_0());
            	    // InternalGitHubActionsParser.g:10027:9: ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?)
            	    // InternalGitHubActionsParser.g:10028:10: ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?
            	    {
            	    // InternalGitHubActionsParser.g:10028:10: ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+
            	    int cnt176=0;
            	    loop176:
            	    do {
            	        int alt176=4;
            	        switch ( input.LA(1) ) {
            	        case Matrix:
            	            {
            	            int LA176_2 = input.LA(2);

            	            if ( synpred293_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0) ) {
            	                alt176=1;
            	            }


            	            }
            	            break;
            	        case Exludes:
            	            {
            	            int LA176_3 = input.LA(2);

            	            if ( synpred294_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1) ) {
            	                alt176=2;
            	            }


            	            }
            	            break;
            	        case RULE_BEGIN:
            	            {
            	            int LA176_4 = input.LA(2);

            	            if ( synpred296_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2) ) {
            	                alt176=3;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt176) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:10029:8: ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:10029:8: ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) )
            	    	    // InternalGitHubActionsParser.g:10030:9: {...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0)");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10030:109: ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) )
            	    	    // InternalGitHubActionsParser.g:10031:10: ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) )
            	    	    {
            	    	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0);
            	    	    // InternalGitHubActionsParser.g:10034:13: ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) )
            	    	    // InternalGitHubActionsParser.g:10034:14: {...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10034:23: (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? )
            	    	    // InternalGitHubActionsParser.g:10034:24: otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )?
            	    	    {
            	    	    otherlv_2=(Token)match(input,Matrix,FOLLOW_3); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(otherlv_2, grammarAccess.getStrategyAccess().getMatrixKeyword_0_0_0());
            	    	      												
            	    	    }
            	    	    otherlv_3=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(otherlv_3, grammarAccess.getStrategyAccess().getColonKeyword_0_0_1());
            	    	      												
            	    	    }
            	    	    this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(this_NEWLINE_4, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_2());
            	    	      												
            	    	    }
            	    	    this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_88); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(this_BEGIN_5, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_3());
            	    	      												
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10050:13: (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )?
            	    	    int alt174=2;
            	    	    int LA174_0 = input.LA(1);

            	    	    if ( (LA174_0==Includes) ) {
            	    	        alt174=1;
            	    	    }
            	    	    switch (alt174) {
            	    	        case 1 :
            	    	            // InternalGitHubActionsParser.g:10051:14: otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END
            	    	            {
            	    	            otherlv_6=(Token)match(input,Includes,FOLLOW_3); if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              														newLeafNode(otherlv_6, grammarAccess.getStrategyAccess().getIncludesKeyword_0_0_4_0());
            	    	              													
            	    	            }
            	    	            otherlv_7=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              														newLeafNode(otherlv_7, grammarAccess.getStrategyAccess().getColonKeyword_0_0_4_1());
            	    	              													
            	    	            }
            	    	            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              														newLeafNode(this_NEWLINE_8, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_4_2());
            	    	              													
            	    	            }
            	    	            this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              														newLeafNode(this_BEGIN_9, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_4_3());
            	    	              													
            	    	            }
            	    	            // InternalGitHubActionsParser.g:10067:14: ( (lv_includes_10_0= ruleMatrixCombination ) )
            	    	            // InternalGitHubActionsParser.g:10068:15: (lv_includes_10_0= ruleMatrixCombination )
            	    	            {
            	    	            // InternalGitHubActionsParser.g:10068:15: (lv_includes_10_0= ruleMatrixCombination )
            	    	            // InternalGitHubActionsParser.g:10069:16: lv_includes_10_0= ruleMatrixCombination
            	    	            {
            	    	            if ( state.backtracking==0 ) {

            	    	              																newCompositeNode(grammarAccess.getStrategyAccess().getIncludesMatrixCombinationParserRuleCall_0_0_4_4_0());
            	    	              															
            	    	            }
            	    	            pushFollow(FOLLOW_19);
            	    	            lv_includes_10_0=ruleMatrixCombination();

            	    	            state._fsp--;
            	    	            if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              																if (current==null) {
            	    	              																	current = createModelElementForParent(grammarAccess.getStrategyRule());
            	    	              																}
            	    	              																add(
            	    	              																	current,
            	    	              																	"includes",
            	    	              																	lv_includes_10_0,
            	    	              																	"d.fe.up.pt.cicd.gha.GitHubActions.MatrixCombination");
            	    	              																afterParserOrEnumRuleCall();
            	    	              															
            	    	            }

            	    	            }


            	    	            }

            	    	            this_END_11=(Token)match(input,RULE_END,FOLLOW_89); if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              														newLeafNode(this_END_11, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_0_4_5());
            	    	              													
            	    	            }

            	    	            }
            	    	            break;

            	    	    }


            	    	    }


            	    	    }

            	    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup_0());

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // InternalGitHubActionsParser.g:10097:8: ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:10097:8: ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) )
            	    	    // InternalGitHubActionsParser.g:10098:9: {...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1)");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10098:109: ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) )
            	    	    // InternalGitHubActionsParser.g:10099:10: ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) )
            	    	    {
            	    	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1);
            	    	    // InternalGitHubActionsParser.g:10102:13: ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) )
            	    	    // InternalGitHubActionsParser.g:10102:14: {...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10102:23: (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END )
            	    	    // InternalGitHubActionsParser.g:10102:24: otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END
            	    	    {
            	    	    otherlv_12=(Token)match(input,Exludes,FOLLOW_3); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(otherlv_12, grammarAccess.getStrategyAccess().getExludesKeyword_0_1_0());
            	    	      												
            	    	    }
            	    	    otherlv_13=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(otherlv_13, grammarAccess.getStrategyAccess().getColonKeyword_0_1_1());
            	    	      												
            	    	    }
            	    	    this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(this_NEWLINE_14, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_1_2());
            	    	      												
            	    	    }
            	    	    this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(this_BEGIN_15, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_1_3());
            	    	      												
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10118:13: ( (lv_excludes_16_0= ruleMatrixCombination ) )
            	    	    // InternalGitHubActionsParser.g:10119:14: (lv_excludes_16_0= ruleMatrixCombination )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:10119:14: (lv_excludes_16_0= ruleMatrixCombination )
            	    	    // InternalGitHubActionsParser.g:10120:15: lv_excludes_16_0= ruleMatrixCombination
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      															newCompositeNode(grammarAccess.getStrategyAccess().getExcludesMatrixCombinationParserRuleCall_0_1_4_0());
            	    	      														
            	    	    }
            	    	    pushFollow(FOLLOW_19);
            	    	    lv_excludes_16_0=ruleMatrixCombination();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      															if (current==null) {
            	    	      																current = createModelElementForParent(grammarAccess.getStrategyRule());
            	    	      															}
            	    	      															add(
            	    	      																current,
            	    	      																"excludes",
            	    	      																lv_excludes_16_0,
            	    	      																"d.fe.up.pt.cicd.gha.GitHubActions.MatrixCombination");
            	    	      															afterParserOrEnumRuleCall();
            	    	      														
            	    	    }

            	    	    }


            	    	    }

            	    	    this_END_17=(Token)match(input,RULE_END,FOLLOW_89); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(this_END_17, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_1_5());
            	    	      												
            	    	    }

            	    	    }


            	    	    }

            	    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup_0());

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 3 :
            	    	    // InternalGitHubActionsParser.g:10147:8: ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:10147:8: ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) )
            	    	    // InternalGitHubActionsParser.g:10148:9: {...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2)");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10148:109: ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
            	    	    // InternalGitHubActionsParser.g:10149:10: ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
            	    	    {
            	    	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2);
            	    	    // InternalGitHubActionsParser.g:10152:13: ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
            	    	    // InternalGitHubActionsParser.g:10152:14: {...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10152:23: ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
            	    	    // InternalGitHubActionsParser.g:10152:24: (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END
            	    	    {
            	    	    // InternalGitHubActionsParser.g:10152:24: (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END )
            	    	    // InternalGitHubActionsParser.g:10153:14: this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END
            	    	    {
            	    	    this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(this_BEGIN_18, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_2_0_0());
            	    	      													
            	    	    }
            	    	    // InternalGitHubActionsParser.g:10157:14: ( (lv_axes_19_0= ruleMatrixAxis ) )+
            	    	    int cnt175=0;
            	    	    loop175:
            	    	    do {
            	    	        int alt175=2;
            	    	        int LA175_0 = input.LA(1);

            	    	        if ( (LA175_0==RULE_ID) ) {
            	    	            alt175=1;
            	    	        }


            	    	        switch (alt175) {
            	    	    	case 1 :
            	    	    	    // InternalGitHubActionsParser.g:10158:15: (lv_axes_19_0= ruleMatrixAxis )
            	    	    	    {
            	    	    	    // InternalGitHubActionsParser.g:10158:15: (lv_axes_19_0= ruleMatrixAxis )
            	    	    	    // InternalGitHubActionsParser.g:10159:16: lv_axes_19_0= ruleMatrixAxis
            	    	    	    {
            	    	    	    if ( state.backtracking==0 ) {

            	    	    	      																newCompositeNode(grammarAccess.getStrategyAccess().getAxesMatrixAxisParserRuleCall_0_2_0_1_0());
            	    	    	      															
            	    	    	    }
            	    	    	    pushFollow(FOLLOW_17);
            	    	    	    lv_axes_19_0=ruleMatrixAxis();

            	    	    	    state._fsp--;
            	    	    	    if (state.failed) return current;
            	    	    	    if ( state.backtracking==0 ) {

            	    	    	      																if (current==null) {
            	    	    	      																	current = createModelElementForParent(grammarAccess.getStrategyRule());
            	    	    	      																}
            	    	    	      																add(
            	    	    	      																	current,
            	    	    	      																	"axes",
            	    	    	      																	lv_axes_19_0,
            	    	    	      																	"d.fe.up.pt.cicd.gha.GitHubActions.MatrixAxis");
            	    	    	      																afterParserOrEnumRuleCall();
            	    	    	      															
            	    	    	    }

            	    	    	    }


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    if ( cnt175 >= 1 ) break loop175;
            	    	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	    	                EarlyExitException eee =
            	    	                    new EarlyExitException(175, input);
            	    	                throw eee;
            	    	        }
            	    	        cnt175++;
            	    	    } while (true);

            	    	    this_END_20=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(this_END_20, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_2_0_2());
            	    	      													
            	    	    }

            	    	    }

            	    	    this_END_21=(Token)match(input,RULE_END,FOLLOW_89); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      													newLeafNode(this_END_21, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_2_1());
            	    	      												
            	    	    }

            	    	    }


            	    	    }

            	    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup_0());

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt176 >= 1 ) break loop176;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(176, input);
            	                throw eee;
            	        }
            	        cnt176++;
            	    } while (true);

            	    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0()) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0())");
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().leave(grammarAccess.getStrategyAccess().getUnorderedGroup_0());

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:10204:3: ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:10204:3: ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:10205:4: {...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:10205:102: ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:10206:5: ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:10209:8: ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:10209:9: {...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    }
            	    // InternalGitHubActionsParser.g:10209:18: (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:10209:19: otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE
            	    {
            	    otherlv_22=(Token)match(input,FailFast,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_22, grammarAccess.getStrategyAccess().getFailFastKeyword_1_0());
            	      							
            	    }
            	    otherlv_23=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_23, grammarAccess.getStrategyAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:10217:8: ( (lv_failFast_24_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:10218:9: (lv_failFast_24_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:10218:9: (lv_failFast_24_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:10219:10: lv_failFast_24_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getStrategyAccess().getFailFastExpressionParserRuleCall_1_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_failFast_24_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getStrategyRule());
            	      										}
            	      										set(
            	      											current,
            	      											"failFast",
            	      											lv_failFast_24_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_89); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_25, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_1_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:10246:3: ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:10246:3: ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) )
            	    // InternalGitHubActionsParser.g:10247:4: {...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:10247:102: ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) )
            	    // InternalGitHubActionsParser.g:10248:5: ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:10251:8: ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) )
            	    // InternalGitHubActionsParser.g:10251:9: {...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    }
            	    // InternalGitHubActionsParser.g:10251:18: (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE )
            	    // InternalGitHubActionsParser.g:10251:19: otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE
            	    {
            	    otherlv_26=(Token)match(input,MaxParalell,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_26, grammarAccess.getStrategyAccess().getMaxParalellKeyword_2_0());
            	      							
            	    }
            	    otherlv_27=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_27, grammarAccess.getStrategyAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:10259:8: ( (lv_maxParallel_28_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:10260:9: (lv_maxParallel_28_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:10260:9: (lv_maxParallel_28_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:10261:10: lv_maxParallel_28_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getStrategyAccess().getMaxParallelExpressionParserRuleCall_2_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_maxParallel_28_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getStrategyRule());
            	      										}
            	      										set(
            	      											current,
            	      											"maxParallel",
            	      											lv_maxParallel_28_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }

            	    this_NEWLINE_29=(Token)match(input,RULE_NEWLINE,FOLLOW_89); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_NEWLINE_29, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_2_3());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt177 >= 1 ) break loop177;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(177, input);
                        throw eee;
                }
                cnt177++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getStrategyAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleStrategy"


    // $ANTLR start "entryRuleMatrixAxis"
    // InternalGitHubActionsParser.g:10302:1: entryRuleMatrixAxis returns [EObject current=null] : iv_ruleMatrixAxis= ruleMatrixAxis EOF ;
    public final EObject entryRuleMatrixAxis() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMatrixAxis = null;


        try {
            // InternalGitHubActionsParser.g:10302:51: (iv_ruleMatrixAxis= ruleMatrixAxis EOF )
            // InternalGitHubActionsParser.g:10303:2: iv_ruleMatrixAxis= ruleMatrixAxis EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMatrixAxisRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMatrixAxis=ruleMatrixAxis();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMatrixAxis; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMatrixAxis"


    // $ANTLR start "ruleMatrixAxis"
    // InternalGitHubActionsParser.g:10309:1: ruleMatrixAxis returns [EObject current=null] : ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE ) | (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END ) ) ) ;
    public final EObject ruleMatrixAxis() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_3=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token this_NEWLINE_9=null;
        Token this_NEWLINE_10=null;
        Token this_BEGIN_11=null;
        Token otherlv_12=null;
        Token this_NEWLINE_14=null;
        Token this_END_15=null;
        EObject lv_cells_2_0 = null;

        EObject lv_cells_5_0 = null;

        EObject lv_cells_7_0 = null;

        EObject lv_cells_13_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:10315:2: ( ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE ) | (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END ) ) ) )
            // InternalGitHubActionsParser.g:10316:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE ) | (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END ) ) )
            {
            // InternalGitHubActionsParser.g:10316:2: ( ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE ) | (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END ) ) )
            // InternalGitHubActionsParser.g:10317:3: ( (lv_name_0_0= RULE_ID ) ) otherlv_1= Colon ( ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE ) | (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:10317:3: ( (lv_name_0_0= RULE_ID ) )
            // InternalGitHubActionsParser.g:10318:4: (lv_name_0_0= RULE_ID )
            {
            // InternalGitHubActionsParser.g:10318:4: (lv_name_0_0= RULE_ID )
            // InternalGitHubActionsParser.g:10319:5: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_0_0, grammarAccess.getMatrixAxisAccess().getNameIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getMatrixAxisRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_0_0,
              						"org.eclipse.xtext.common.Terminals.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_90); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMatrixAxisAccess().getColonKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:10339:3: ( ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE ) | (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END ) )
            int alt180=3;
            switch ( input.LA(1) ) {
            case DollarSignLeftCurlyBracketLeftCurlyBracket:
            case RULE_STRING:
                {
                alt180=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt180=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt180=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    // InternalGitHubActionsParser.g:10340:4: ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE )
                    {
                    // InternalGitHubActionsParser.g:10340:4: ( ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:10341:5: ( (lv_cells_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE
                    {
                    // InternalGitHubActionsParser.g:10341:5: ( (lv_cells_2_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:10342:6: (lv_cells_2_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:10342:6: (lv_cells_2_0= ruleExpression )
                    // InternalGitHubActionsParser.g:10343:7: lv_cells_2_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_2_0_0_0());
                      						
                    }
                    pushFollow(FOLLOW_5);
                    lv_cells_2_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                      							}
                      							add(
                      								current,
                      								"cells",
                      								lv_cells_2_0,
                      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_3, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_0_1());
                      				
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:10366:4: (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE )
                    {
                    // InternalGitHubActionsParser.g:10366:4: (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:10367:5: otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket this_NEWLINE_9= RULE_NEWLINE
                    {
                    otherlv_4=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getMatrixAxisAccess().getLeftSquareBracketKeyword_2_1_0());
                      				
                    }
                    // InternalGitHubActionsParser.g:10371:5: ( (lv_cells_5_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:10372:6: (lv_cells_5_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:10372:6: (lv_cells_5_0= ruleExpression )
                    // InternalGitHubActionsParser.g:10373:7: lv_cells_5_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_2_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_9);
                    lv_cells_5_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                      							}
                      							add(
                      								current,
                      								"cells",
                      								lv_cells_5_0,
                      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalGitHubActionsParser.g:10390:5: (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )*
                    loop178:
                    do {
                        int alt178=2;
                        int LA178_0 = input.LA(1);

                        if ( (LA178_0==Comma) ) {
                            alt178=1;
                        }


                        switch (alt178) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:10391:6: otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) )
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_6, grammarAccess.getMatrixAxisAccess().getCommaKeyword_2_1_2_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:10395:6: ( (lv_cells_7_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:10396:7: (lv_cells_7_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:10396:7: (lv_cells_7_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:10397:8: lv_cells_7_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_2_1_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_9);
                    	    lv_cells_7_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"cells",
                    	      									lv_cells_7_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop178;
                        }
                    } while (true);

                    otherlv_8=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_8, grammarAccess.getMatrixAxisAccess().getRightSquareBracketKeyword_2_1_3());
                      				
                    }
                    this_NEWLINE_9=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_9, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_1_4());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:10425:4: (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:10425:4: (this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END )
                    // InternalGitHubActionsParser.g:10426:5: this_NEWLINE_10= RULE_NEWLINE this_BEGIN_11= RULE_BEGIN (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+ this_END_15= RULE_END
                    {
                    this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_NEWLINE_10, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_2_0());
                      				
                    }
                    this_BEGIN_11=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_11, grammarAccess.getMatrixAxisAccess().getBEGINTerminalRuleCall_2_2_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:10434:5: (otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE )+
                    int cnt179=0;
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==HyphenMinus) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:10435:6: otherlv_12= HyphenMinus ( (lv_cells_13_0= ruleExpression ) ) this_NEWLINE_14= RULE_NEWLINE
                    	    {
                    	    otherlv_12=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_12, grammarAccess.getMatrixAxisAccess().getHyphenMinusKeyword_2_2_2_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:10439:6: ( (lv_cells_13_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:10440:7: (lv_cells_13_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:10440:7: (lv_cells_13_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:10441:8: lv_cells_13_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_2_2_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_cells_13_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"cells",
                    	      									lv_cells_13_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_NEWLINE_14, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_2_2_2_2());
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt179 >= 1 ) break loop179;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(179, input);
                                throw eee;
                        }
                        cnt179++;
                    } while (true);

                    this_END_15=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_15, grammarAccess.getMatrixAxisAccess().getENDTerminalRuleCall_2_2_3());
                      				
                    }

                    }


                    }
                    break;

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMatrixAxis"


    // $ANTLR start "entryRuleMatrixCombination"
    // InternalGitHubActionsParser.g:10473:1: entryRuleMatrixCombination returns [EObject current=null] : iv_ruleMatrixCombination= ruleMatrixCombination EOF ;
    public final EObject entryRuleMatrixCombination() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMatrixCombination = null;


        try {
            // InternalGitHubActionsParser.g:10473:58: (iv_ruleMatrixCombination= ruleMatrixCombination EOF )
            // InternalGitHubActionsParser.g:10474:2: iv_ruleMatrixCombination= ruleMatrixCombination EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMatrixCombinationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMatrixCombination=ruleMatrixCombination();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMatrixCombination; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMatrixCombination"


    // $ANTLR start "ruleMatrixCombination"
    // InternalGitHubActionsParser.g:10480:1: ruleMatrixCombination returns [EObject current=null] : (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN ( (lv_entries_2_0= ruleVariableAssignment ) ) this_END_3= RULE_END ) ;
    public final EObject ruleMatrixCombination() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token this_BEGIN_1=null;
        Token this_END_3=null;
        EObject lv_entries_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:10486:2: ( (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN ( (lv_entries_2_0= ruleVariableAssignment ) ) this_END_3= RULE_END ) )
            // InternalGitHubActionsParser.g:10487:2: (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN ( (lv_entries_2_0= ruleVariableAssignment ) ) this_END_3= RULE_END )
            {
            // InternalGitHubActionsParser.g:10487:2: (otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN ( (lv_entries_2_0= ruleVariableAssignment ) ) this_END_3= RULE_END )
            // InternalGitHubActionsParser.g:10488:3: otherlv_0= HyphenMinus this_BEGIN_1= RULE_BEGIN ( (lv_entries_2_0= ruleVariableAssignment ) ) this_END_3= RULE_END
            {
            otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getMatrixCombinationAccess().getHyphenMinusKeyword_0());
              		
            }
            this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_1, grammarAccess.getMatrixCombinationAccess().getBEGINTerminalRuleCall_1());
              		
            }
            // InternalGitHubActionsParser.g:10496:3: ( (lv_entries_2_0= ruleVariableAssignment ) )
            // InternalGitHubActionsParser.g:10497:4: (lv_entries_2_0= ruleVariableAssignment )
            {
            // InternalGitHubActionsParser.g:10497:4: (lv_entries_2_0= ruleVariableAssignment )
            // InternalGitHubActionsParser.g:10498:5: lv_entries_2_0= ruleVariableAssignment
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMatrixCombinationAccess().getEntriesVariableAssignmentParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_19);
            lv_entries_2_0=ruleVariableAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMatrixCombinationRule());
              					}
              					add(
              						current,
              						"entries",
              						lv_entries_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_END_3=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_3, grammarAccess.getMatrixCombinationAccess().getENDTerminalRuleCall_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMatrixCombination"


    // $ANTLR start "entryRuleContainer"
    // InternalGitHubActionsParser.g:10523:1: entryRuleContainer returns [EObject current=null] : iv_ruleContainer= ruleContainer EOF ;
    public final EObject entryRuleContainer() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleContainer = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getContainerAccess().getUnorderedGroup_1(), 
        	grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0()
        	);

        try {
            // InternalGitHubActionsParser.g:10528:2: (iv_ruleContainer= ruleContainer EOF )
            // InternalGitHubActionsParser.g:10529:2: iv_ruleContainer= ruleContainer EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContainerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContainer=ruleContainer();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContainer; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleContainer"


    // $ANTLR start "ruleContainer"
    // InternalGitHubActionsParser.g:10538:1: ruleContainer returns [EObject current=null] : ( ( ( (lv_image_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | ( ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) ) ;
    public final EObject ruleContainer() throws RecognitionException {
        EObject current = null;

        Token this_NEWLINE_1=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_BEGIN_11=null;
        Token this_END_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token this_NEWLINE_23=null;
        Token this_BEGIN_24=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token this_END_28=null;
        Token otherlv_29=null;
        Token otherlv_30=null;
        Token this_NEWLINE_32=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token this_NEWLINE_38=null;
        Token this_BEGIN_39=null;
        Token otherlv_40=null;
        Token this_NEWLINE_42=null;
        Token this_END_43=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_47=null;
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token this_BEGIN_51=null;
        Token otherlv_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_59=null;
        Token this_END_60=null;
        Token this_END_61=null;
        EObject lv_image_0_0 = null;

        EObject lv_image_7_0 = null;

        EObject lv_environmentVariables_12_0 = null;

        EObject lv_ports_16_0 = null;

        EObject lv_ports_19_0 = null;

        EObject lv_ports_21_0 = null;

        EObject lv_ports_26_0 = null;

        EObject lv_volumes_31_0 = null;

        EObject lv_volumes_34_0 = null;

        EObject lv_volumes_36_0 = null;

        EObject lv_volumes_41_0 = null;

        EObject lv_options_46_0 = null;

        EObject lv_username_54_0 = null;

        EObject lv_password_58_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getContainerAccess().getUnorderedGroup_1(), 
        	grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0()
        	);

        try {
            // InternalGitHubActionsParser.g:10548:2: ( ( ( ( (lv_image_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | ( ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            // InternalGitHubActionsParser.g:10549:2: ( ( ( (lv_image_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | ( ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) )
            {
            // InternalGitHubActionsParser.g:10549:2: ( ( ( (lv_image_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE ) | ( ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) ) ) )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==DollarSignLeftCurlyBracketLeftCurlyBracket||LA191_0==RULE_STRING) ) {
                alt191=1;
            }
            else if ( (LA191_0==Credentials||LA191_0==Password||LA191_0==Options||LA191_0==Volumes||LA191_0==Ports||LA191_0==Env||LA191_0==LeftSquareBracket||(LA191_0>=RULE_BEGIN && LA191_0<=RULE_NEWLINE)) ) {
                alt191=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }
            switch (alt191) {
                case 1 :
                    // InternalGitHubActionsParser.g:10550:3: ( ( (lv_image_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE )
                    {
                    // InternalGitHubActionsParser.g:10550:3: ( ( (lv_image_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE )
                    // InternalGitHubActionsParser.g:10551:4: ( (lv_image_0_0= ruleExpression ) ) this_NEWLINE_1= RULE_NEWLINE
                    {
                    // InternalGitHubActionsParser.g:10551:4: ( (lv_image_0_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:10552:5: (lv_image_0_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:10552:5: (lv_image_0_0= ruleExpression )
                    // InternalGitHubActionsParser.g:10553:6: lv_image_0_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getContainerAccess().getImageExpressionParserRuleCall_0_0_0());
                      					
                    }
                    pushFollow(FOLLOW_5);
                    lv_image_0_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getContainerRule());
                      						}
                      						set(
                      							current,
                      							"image",
                      							lv_image_0_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    this_NEWLINE_1=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_NEWLINE_1, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:10576:3: ( ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) ) )
                    {
                    // InternalGitHubActionsParser.g:10576:3: ( ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) ) )
                    // InternalGitHubActionsParser.g:10577:4: ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) )
                    {
                    // InternalGitHubActionsParser.g:10577:4: ( ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?) )
                    // InternalGitHubActionsParser.g:10578:5: ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?)
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getContainerAccess().getUnorderedGroup_1());
                    // InternalGitHubActionsParser.g:10581:5: ( ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?)
                    // InternalGitHubActionsParser.g:10582:6: ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+ {...}?
                    {
                    // InternalGitHubActionsParser.g:10582:6: ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+
                    int cnt190=0;
                    loop190:
                    do {
                        int alt190=7;
                        alt190 = dfa190.predict(input);
                        switch (alt190) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:10583:4: ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:10583:4: ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:10584:5: {...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:10584:106: ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
                    	    // InternalGitHubActionsParser.g:10585:6: ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 0);
                    	    // InternalGitHubActionsParser.g:10588:9: ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
                    	    // InternalGitHubActionsParser.g:10588:10: {...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:10588:19: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
                    	    // InternalGitHubActionsParser.g:10588:20: this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
                    	    {
                    	    this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(this_NEWLINE_3, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_0_0());
                    	      								
                    	    }
                    	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_91); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(this_BEGIN_4, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_0_1());
                    	      								
                    	    }
                    	    // InternalGitHubActionsParser.g:10596:9: (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
                    	    // InternalGitHubActionsParser.g:10597:10: otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
                    	    {
                    	    otherlv_5=(Token)match(input,Image,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_5, grammarAccess.getContainerAccess().getImageKeyword_1_0_2_0());
                    	      									
                    	    }
                    	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_6, grammarAccess.getContainerAccess().getColonKeyword_1_0_2_1());
                    	      									
                    	    }
                    	    // InternalGitHubActionsParser.g:10605:10: ( (lv_image_7_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:10606:11: (lv_image_7_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:10606:11: (lv_image_7_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:10607:12: lv_image_7_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      												newCompositeNode(grammarAccess.getContainerAccess().getImageExpressionParserRuleCall_1_0_2_2_0());
                    	      											
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_image_7_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												if (current==null) {
                    	      													current = createModelElementForParent(grammarAccess.getContainerRule());
                    	      												}
                    	      												set(
                    	      													current,
                    	      													"image",
                    	      													lv_image_7_0,
                    	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      												afterParserOrEnumRuleCall();
                    	      											
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_92); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_NEWLINE_8, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_0_2_3());
                    	      									
                    	    }

                    	    }


                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:10635:4: ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:10635:4: ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:10636:5: {...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:10636:106: ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:10637:6: ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 1);
                    	    // InternalGitHubActionsParser.g:10640:9: ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) )
                    	    // InternalGitHubActionsParser.g:10640:10: {...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:10640:19: (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END )
                    	    // InternalGitHubActionsParser.g:10640:20: otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END
                    	    {
                    	    otherlv_9=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(otherlv_9, grammarAccess.getContainerAccess().getEnvKeyword_1_1_0());
                    	      								
                    	    }
                    	    otherlv_10=(Token)match(input,Colon,FOLLOW_10); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(otherlv_10, grammarAccess.getContainerAccess().getColonKeyword_1_1_1());
                    	      								
                    	    }
                    	    this_BEGIN_11=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(this_BEGIN_11, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_1_2());
                    	      								
                    	    }
                    	    // InternalGitHubActionsParser.g:10652:9: ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+
                    	    int cnt181=0;
                    	    loop181:
                    	    do {
                    	        int alt181=2;
                    	        int LA181_0 = input.LA(1);

                    	        if ( (LA181_0==RULE_ID) ) {
                    	            alt181=1;
                    	        }


                    	        switch (alt181) {
                    	    	case 1 :
                    	    	    // InternalGitHubActionsParser.g:10653:10: (lv_environmentVariables_12_0= ruleVariableAssignment )
                    	    	    {
                    	    	    // InternalGitHubActionsParser.g:10653:10: (lv_environmentVariables_12_0= ruleVariableAssignment )
                    	    	    // InternalGitHubActionsParser.g:10654:11: lv_environmentVariables_12_0= ruleVariableAssignment
                    	    	    {
                    	    	    if ( state.backtracking==0 ) {

                    	    	      											newCompositeNode(grammarAccess.getContainerAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_1_1_3_0());
                    	    	      										
                    	    	    }
                    	    	    pushFollow(FOLLOW_17);
                    	    	    lv_environmentVariables_12_0=ruleVariableAssignment();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return current;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      											if (current==null) {
                    	    	      												current = createModelElementForParent(grammarAccess.getContainerRule());
                    	    	      											}
                    	    	      											add(
                    	    	      												current,
                    	    	      												"environmentVariables",
                    	    	      												lv_environmentVariables_12_0,
                    	    	      												"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
                    	    	      											afterParserOrEnumRuleCall();
                    	    	      										
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    if ( cnt181 >= 1 ) break loop181;
                    	    	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                EarlyExitException eee =
                    	                    new EarlyExitException(181, input);
                    	                throw eee;
                    	        }
                    	        cnt181++;
                    	    } while (true);

                    	    this_END_13=(Token)match(input,RULE_END,FOLLOW_92); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(this_END_13, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_1_4());
                    	      								
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // InternalGitHubActionsParser.g:10681:4: ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:10681:4: ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:10682:5: {...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2)");
                    	    }
                    	    // InternalGitHubActionsParser.g:10682:106: ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:10683:6: ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2);
                    	    // InternalGitHubActionsParser.g:10686:9: ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:10686:10: {...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:10686:19: ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) )
                    	    int alt184=3;
                    	    switch ( input.LA(1) ) {
                    	    case Ports:
                    	        {
                    	        alt184=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt184=2;
                    	        }
                    	        break;
                    	    case RULE_BEGIN:
                    	        {
                    	        alt184=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 184, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt184) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:10686:20: (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:10686:20: (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:10687:10: otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
                    	            {
                    	            otherlv_14=(Token)match(input,Ports,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_14, grammarAccess.getContainerAccess().getPortsKeyword_1_2_0_0());
                    	              									
                    	            }
                    	            otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_15, grammarAccess.getContainerAccess().getColonKeyword_1_2_0_1());
                    	              									
                    	            }
                    	            // InternalGitHubActionsParser.g:10695:10: ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:10696:11: ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:10696:11: ( (lv_ports_16_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:10697:12: (lv_ports_16_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:10697:12: (lv_ports_16_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:10698:13: lv_ports_16_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              													newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_0_2_0_0());
                    	              												
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_ports_16_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													if (current==null) {
                    	              														current = createModelElementForParent(grammarAccess.getContainerRule());
                    	              													}
                    	              													add(
                    	              														current,
                    	              														"ports",
                    	              														lv_ports_16_0,
                    	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              													afterParserOrEnumRuleCall();
                    	              												
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_92); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_NEWLINE_17, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_0_2_1());
                    	              										
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:10722:9: (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:10722:9: (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:10723:10: otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE
                    	            {
                    	            otherlv_18=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_18, grammarAccess.getContainerAccess().getLeftSquareBracketKeyword_1_2_1_0());
                    	              									
                    	            }
                    	            // InternalGitHubActionsParser.g:10727:10: ( (lv_ports_19_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:10728:11: (lv_ports_19_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:10728:11: (lv_ports_19_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:10729:12: lv_ports_19_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              												newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_1_1_0());
                    	              											
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_ports_19_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												if (current==null) {
                    	              													current = createModelElementForParent(grammarAccess.getContainerRule());
                    	              												}
                    	              												add(
                    	              													current,
                    	              													"ports",
                    	              													lv_ports_19_0,
                    	              													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              												afterParserOrEnumRuleCall();
                    	              											
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:10746:10: (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )*
                    	            loop182:
                    	            do {
                    	                int alt182=2;
                    	                int LA182_0 = input.LA(1);

                    	                if ( (LA182_0==Comma) ) {
                    	                    alt182=1;
                    	                }


                    	                switch (alt182) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:10747:11: otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_20=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      											newLeafNode(otherlv_20, grammarAccess.getContainerAccess().getCommaKeyword_1_2_1_2_0());
                    	            	      										
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:10751:11: ( (lv_ports_21_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:10752:12: (lv_ports_21_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:10752:12: (lv_ports_21_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:10753:13: lv_ports_21_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_1_2_1_0());
                    	            	      												
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_ports_21_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													if (current==null) {
                    	            	      														current = createModelElementForParent(grammarAccess.getContainerRule());
                    	            	      													}
                    	            	      													add(
                    	            	      														current,
                    	            	      														"ports",
                    	            	      														lv_ports_21_0,
                    	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      													afterParserOrEnumRuleCall();
                    	            	      												
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop182;
                    	                }
                    	            } while (true);

                    	            otherlv_22=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_22, grammarAccess.getContainerAccess().getRightSquareBracketKeyword_1_2_1_3());
                    	              									
                    	            }
                    	            this_NEWLINE_23=(Token)match(input,RULE_NEWLINE,FOLLOW_92); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(this_NEWLINE_23, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_1_4());
                    	              									
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:10781:9: (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:10781:9: (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END )
                    	            // InternalGitHubActionsParser.g:10782:10: this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END
                    	            {
                    	            this_BEGIN_24=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(this_BEGIN_24, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_2_2_0());
                    	              									
                    	            }
                    	            // InternalGitHubActionsParser.g:10786:10: (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+
                    	            int cnt183=0;
                    	            loop183:
                    	            do {
                    	                int alt183=2;
                    	                int LA183_0 = input.LA(1);

                    	                if ( (LA183_0==HyphenMinus) ) {
                    	                    alt183=1;
                    	                }


                    	                switch (alt183) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:10787:11: otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_25=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      											newLeafNode(otherlv_25, grammarAccess.getContainerAccess().getHyphenMinusKeyword_1_2_2_1_0());
                    	            	      										
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:10791:11: ( (lv_ports_26_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:10792:12: (lv_ports_26_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:10792:12: (lv_ports_26_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:10793:13: lv_ports_26_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_2_1_1_0());
                    	            	      												
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_ports_26_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													if (current==null) {
                    	            	      														current = createModelElementForParent(grammarAccess.getContainerRule());
                    	            	      													}
                    	            	      													add(
                    	            	      														current,
                    	            	      														"ports",
                    	            	      														lv_ports_26_0,
                    	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      													afterParserOrEnumRuleCall();
                    	            	      												
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      											newLeafNode(this_NEWLINE_27, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_2_2_1_2());
                    	            	      										
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt183 >= 1 ) break loop183;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(183, input);
                    	                        throw eee;
                    	                }
                    	                cnt183++;
                    	            } while (true);

                    	            this_END_28=(Token)match(input,RULE_END,FOLLOW_92); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(this_END_28, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_2_2_2());
                    	              									
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    // InternalGitHubActionsParser.g:10826:4: ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:10826:4: ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:10827:5: {...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3)");
                    	    }
                    	    // InternalGitHubActionsParser.g:10827:106: ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:10828:6: ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3);
                    	    // InternalGitHubActionsParser.g:10831:9: ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:10831:10: {...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:10831:19: ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) )
                    	    int alt187=3;
                    	    switch ( input.LA(1) ) {
                    	    case Volumes:
                    	        {
                    	        alt187=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt187=2;
                    	        }
                    	        break;
                    	    case RULE_BEGIN:
                    	        {
                    	        alt187=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 187, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt187) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:10831:20: (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:10831:20: (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) )
                    	            // InternalGitHubActionsParser.g:10832:10: otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )
                    	            {
                    	            otherlv_29=(Token)match(input,Volumes,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_29, grammarAccess.getContainerAccess().getVolumesKeyword_1_3_0_0());
                    	              									
                    	            }
                    	            otherlv_30=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_30, grammarAccess.getContainerAccess().getColonKeyword_1_3_0_1());
                    	              									
                    	            }
                    	            // InternalGitHubActionsParser.g:10840:10: ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:10841:11: ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE
                    	            {
                    	            // InternalGitHubActionsParser.g:10841:11: ( (lv_volumes_31_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:10842:12: (lv_volumes_31_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:10842:12: (lv_volumes_31_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:10843:13: lv_volumes_31_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              													newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_0_2_0_0());
                    	              												
                    	            }
                    	            pushFollow(FOLLOW_5);
                    	            lv_volumes_31_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													if (current==null) {
                    	              														current = createModelElementForParent(grammarAccess.getContainerRule());
                    	              													}
                    	              													add(
                    	              														current,
                    	              														"volumes",
                    	              														lv_volumes_31_0,
                    	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              													afterParserOrEnumRuleCall();
                    	              												
                    	            }

                    	            }


                    	            }

                    	            this_NEWLINE_32=(Token)match(input,RULE_NEWLINE,FOLLOW_92); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_NEWLINE_32, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_0_2_1());
                    	              										
                    	            }

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:10867:9: (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE )
                    	            {
                    	            // InternalGitHubActionsParser.g:10867:9: (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE )
                    	            // InternalGitHubActionsParser.g:10868:10: otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE
                    	            {
                    	            otherlv_33=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_33, grammarAccess.getContainerAccess().getLeftSquareBracketKeyword_1_3_1_0());
                    	              									
                    	            }
                    	            // InternalGitHubActionsParser.g:10872:10: ( (lv_volumes_34_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:10873:11: (lv_volumes_34_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:10873:11: (lv_volumes_34_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:10874:12: lv_volumes_34_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              												newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_1_1_0());
                    	              											
                    	            }
                    	            pushFollow(FOLLOW_9);
                    	            lv_volumes_34_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              												if (current==null) {
                    	              													current = createModelElementForParent(grammarAccess.getContainerRule());
                    	              												}
                    	              												add(
                    	              													current,
                    	              													"volumes",
                    	              													lv_volumes_34_0,
                    	              													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              												afterParserOrEnumRuleCall();
                    	              											
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:10891:10: (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )*
                    	            loop185:
                    	            do {
                    	                int alt185=2;
                    	                int LA185_0 = input.LA(1);

                    	                if ( (LA185_0==Comma) ) {
                    	                    alt185=1;
                    	                }


                    	                switch (alt185) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:10892:11: otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_35=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      											newLeafNode(otherlv_35, grammarAccess.getContainerAccess().getCommaKeyword_1_3_1_2_0());
                    	            	      										
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:10896:11: ( (lv_volumes_36_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:10897:12: (lv_volumes_36_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:10897:12: (lv_volumes_36_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:10898:13: lv_volumes_36_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_1_2_1_0());
                    	            	      												
                    	            	    }
                    	            	    pushFollow(FOLLOW_9);
                    	            	    lv_volumes_36_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													if (current==null) {
                    	            	      														current = createModelElementForParent(grammarAccess.getContainerRule());
                    	            	      													}
                    	            	      													add(
                    	            	      														current,
                    	            	      														"volumes",
                    	            	      														lv_volumes_36_0,
                    	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      													afterParserOrEnumRuleCall();
                    	            	      												
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop185;
                    	                }
                    	            } while (true);

                    	            otherlv_37=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(otherlv_37, grammarAccess.getContainerAccess().getRightSquareBracketKeyword_1_3_1_3());
                    	              									
                    	            }
                    	            this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_92); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(this_NEWLINE_38, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_1_4());
                    	              									
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:10926:9: (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:10926:9: (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END )
                    	            // InternalGitHubActionsParser.g:10927:10: this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END
                    	            {
                    	            this_BEGIN_39=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(this_BEGIN_39, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_3_2_0());
                    	              									
                    	            }
                    	            // InternalGitHubActionsParser.g:10931:10: (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+
                    	            int cnt186=0;
                    	            loop186:
                    	            do {
                    	                int alt186=2;
                    	                int LA186_0 = input.LA(1);

                    	                if ( (LA186_0==HyphenMinus) ) {
                    	                    alt186=1;
                    	                }


                    	                switch (alt186) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:10932:11: otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_40=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      											newLeafNode(otherlv_40, grammarAccess.getContainerAccess().getHyphenMinusKeyword_1_3_2_1_0());
                    	            	      										
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:10936:11: ( (lv_volumes_41_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:10937:12: (lv_volumes_41_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:10937:12: (lv_volumes_41_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:10938:13: lv_volumes_41_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_2_1_1_0());
                    	            	      												
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_volumes_41_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      													if (current==null) {
                    	            	      														current = createModelElementForParent(grammarAccess.getContainerRule());
                    	            	      													}
                    	            	      													add(
                    	            	      														current,
                    	            	      														"volumes",
                    	            	      														lv_volumes_41_0,
                    	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      													afterParserOrEnumRuleCall();
                    	            	      												
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_42=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      											newLeafNode(this_NEWLINE_42, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_3_2_1_2());
                    	            	      										
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt186 >= 1 ) break loop186;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(186, input);
                    	                        throw eee;
                    	                }
                    	                cnt186++;
                    	            } while (true);

                    	            this_END_43=(Token)match(input,RULE_END,FOLLOW_92); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              										newLeafNode(this_END_43, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_3_2_2());
                    	              									
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 5 :
                    	    // InternalGitHubActionsParser.g:10971:4: ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:10971:4: ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) )
                    	    // InternalGitHubActionsParser.g:10972:5: {...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 4) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 4)");
                    	    }
                    	    // InternalGitHubActionsParser.g:10972:106: ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) )
                    	    // InternalGitHubActionsParser.g:10973:6: ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 4);
                    	    // InternalGitHubActionsParser.g:10976:9: ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) )
                    	    // InternalGitHubActionsParser.g:10976:10: {...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:10976:19: (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE )
                    	    // InternalGitHubActionsParser.g:10976:20: otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE
                    	    {
                    	    otherlv_44=(Token)match(input,Options,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(otherlv_44, grammarAccess.getContainerAccess().getOptionsKeyword_1_4_0());
                    	      								
                    	    }
                    	    otherlv_45=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(otherlv_45, grammarAccess.getContainerAccess().getColonKeyword_1_4_1());
                    	      								
                    	    }
                    	    // InternalGitHubActionsParser.g:10984:9: ( (lv_options_46_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:10985:10: (lv_options_46_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:10985:10: (lv_options_46_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:10986:11: lv_options_46_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      											newCompositeNode(grammarAccess.getContainerAccess().getOptionsExpressionParserRuleCall_1_4_2_0());
                    	      										
                    	    }
                    	    pushFollow(FOLLOW_5);
                    	    lv_options_46_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      											if (current==null) {
                    	      												current = createModelElementForParent(grammarAccess.getContainerRule());
                    	      											}
                    	      											set(
                    	      												current,
                    	      												"options",
                    	      												lv_options_46_0,
                    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      											afterParserOrEnumRuleCall();
                    	      										
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_47=(Token)match(input,RULE_NEWLINE,FOLLOW_92); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(this_NEWLINE_47, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_4_3());
                    	      								
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 6 :
                    	    // InternalGitHubActionsParser.g:11013:4: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:11013:4: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:11014:5: {...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5)");
                    	    }
                    	    // InternalGitHubActionsParser.g:11014:106: ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:11015:6: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5);
                    	    // InternalGitHubActionsParser.g:11018:9: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) )
                    	    // InternalGitHubActionsParser.g:11018:10: {...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:11018:19: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END )
                    	    // InternalGitHubActionsParser.g:11018:20: ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END
                    	    {
                    	    // InternalGitHubActionsParser.g:11018:20: ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )?
                    	    int alt189=2;
                    	    int LA189_0 = input.LA(1);

                    	    if ( (LA189_0==Credentials||LA189_0==Password) ) {
                    	        alt189=1;
                    	    }
                    	    switch (alt189) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:11019:10: ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) )
                    	            {
                    	            // InternalGitHubActionsParser.g:11019:10: ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) )
                    	            // InternalGitHubActionsParser.g:11020:11: ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?)
                    	            {
                    	            getUnorderedGroupHelper().enter(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0());
                    	            // InternalGitHubActionsParser.g:11023:11: ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?)
                    	            // InternalGitHubActionsParser.g:11024:12: ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?
                    	            {
                    	            // InternalGitHubActionsParser.g:11024:12: ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+
                    	            int cnt188=0;
                    	            loop188:
                    	            do {
                    	                int alt188=3;
                    	                int LA188_0 = input.LA(1);

                    	                if ( LA188_0 == Credentials && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0) ) {
                    	                    alt188=1;
                    	                }
                    	                else if ( LA188_0 == Password && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1) ) {
                    	                    alt188=2;
                    	                }


                    	                switch (alt188) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:11025:10: ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:11025:10: ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) )
                    	            	    // InternalGitHubActionsParser.g:11026:11: {...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) )
                    	            	    {
                    	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0) ) {
                    	            	        if (state.backtracking>0) {state.failed=true; return current;}
                    	            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0)");
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:11026:116: ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) )
                    	            	    // InternalGitHubActionsParser.g:11027:12: ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) )
                    	            	    {
                    	            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0);
                    	            	    // InternalGitHubActionsParser.g:11030:15: ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) )
                    	            	    // InternalGitHubActionsParser.g:11030:16: {...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) )
                    	            	    {
                    	            	    if ( !((true)) ) {
                    	            	        if (state.backtracking>0) {state.failed=true; return current;}
                    	            	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:11030:25: (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) )
                    	            	    // InternalGitHubActionsParser.g:11030:26: otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )
                    	            	    {
                    	            	    otherlv_49=(Token)match(input,Credentials,FOLLOW_3); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newLeafNode(otherlv_49, grammarAccess.getContainerAccess().getCredentialsKeyword_1_5_0_0_0());
                    	            	      														
                    	            	    }
                    	            	    otherlv_50=(Token)match(input,Colon,FOLLOW_10); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newLeafNode(otherlv_50, grammarAccess.getContainerAccess().getColonKeyword_1_5_0_0_1());
                    	            	      														
                    	            	    }
                    	            	    this_BEGIN_51=(Token)match(input,RULE_BEGIN,FOLLOW_93); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newLeafNode(this_BEGIN_51, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_5_0_0_2());
                    	            	      														
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:11042:15: (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )
                    	            	    // InternalGitHubActionsParser.g:11043:16: otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_52=(Token)match(input,Username,FOLLOW_3); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newLeafNode(otherlv_52, grammarAccess.getContainerAccess().getUsernameKeyword_1_5_0_0_3_0());
                    	            	      															
                    	            	    }
                    	            	    otherlv_53=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newLeafNode(otherlv_53, grammarAccess.getContainerAccess().getColonKeyword_1_5_0_0_3_1());
                    	            	      															
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:11051:16: ( (lv_username_54_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:11052:17: (lv_username_54_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:11052:17: (lv_username_54_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:11053:18: lv_username_54_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																		newCompositeNode(grammarAccess.getContainerAccess().getUsernameExpressionParserRuleCall_1_5_0_0_3_2_0());
                    	            	      																	
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_username_54_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																		if (current==null) {
                    	            	      																			current = createModelElementForParent(grammarAccess.getContainerRule());
                    	            	      																		}
                    	            	      																		set(
                    	            	      																			current,
                    	            	      																			"username",
                    	            	      																			lv_username_54_0,
                    	            	      																			"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																		afterParserOrEnumRuleCall();
                    	            	      																	
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_94); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newLeafNode(this_NEWLINE_55, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_0_0_3_3());
                    	            	      															
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }

                    	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0());

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;
                    	            	case 2 :
                    	            	    // InternalGitHubActionsParser.g:11081:10: ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:11081:10: ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) )
                    	            	    // InternalGitHubActionsParser.g:11082:11: {...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) )
                    	            	    {
                    	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1) ) {
                    	            	        if (state.backtracking>0) {state.failed=true; return current;}
                    	            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1)");
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:11082:116: ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) )
                    	            	    // InternalGitHubActionsParser.g:11083:12: ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) )
                    	            	    {
                    	            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1);
                    	            	    // InternalGitHubActionsParser.g:11086:15: ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) )
                    	            	    // InternalGitHubActionsParser.g:11086:16: {...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END )
                    	            	    {
                    	            	    if ( !((true)) ) {
                    	            	        if (state.backtracking>0) {state.failed=true; return current;}
                    	            	        throw new FailedPredicateException(input, "ruleContainer", "true");
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:11086:25: ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END )
                    	            	    // InternalGitHubActionsParser.g:11086:26: (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:11086:26: (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE )
                    	            	    // InternalGitHubActionsParser.g:11087:16: otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_56=(Token)match(input,Password,FOLLOW_3); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newLeafNode(otherlv_56, grammarAccess.getContainerAccess().getPasswordKeyword_1_5_0_1_0_0());
                    	            	      															
                    	            	    }
                    	            	    otherlv_57=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newLeafNode(otherlv_57, grammarAccess.getContainerAccess().getColonKeyword_1_5_0_1_0_1());
                    	            	      															
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:11095:16: ( (lv_password_58_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:11096:17: (lv_password_58_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:11096:17: (lv_password_58_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:11097:18: lv_password_58_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																		newCompositeNode(grammarAccess.getContainerAccess().getPasswordExpressionParserRuleCall_1_5_0_1_0_2_0());
                    	            	      																	
                    	            	    }
                    	            	    pushFollow(FOLLOW_5);
                    	            	    lv_password_58_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																		if (current==null) {
                    	            	      																			current = createModelElementForParent(grammarAccess.getContainerRule());
                    	            	      																		}
                    	            	      																		set(
                    	            	      																			current,
                    	            	      																			"password",
                    	            	      																			lv_password_58_0,
                    	            	      																			"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      																		afterParserOrEnumRuleCall();
                    	            	      																	
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_59=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      																newLeafNode(this_NEWLINE_59, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_1_5_0_1_0_3());
                    	            	      															
                    	            	    }

                    	            	    }

                    	            	    this_END_60=(Token)match(input,RULE_END,FOLLOW_94); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      															newLeafNode(this_END_60, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_0_1_1());
                    	            	      														
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0());

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt188 >= 1 ) break loop188;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(188, input);
                    	                        throw eee;
                    	                }
                    	                cnt188++;
                    	            } while (true);

                    	            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0()) ) {
                    	                if (state.backtracking>0) {state.failed=true; return current;}
                    	                throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0())");
                    	            }

                    	            }


                    	            }

                    	            getUnorderedGroupHelper().leave(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0());

                    	            }
                    	            break;

                    	    }

                    	    this_END_61=(Token)match(input,RULE_END,FOLLOW_92); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      									newLeafNode(this_END_61, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1());
                    	      								
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_1());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt190 >= 1 ) break loop190;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(190, input);
                                throw eee;
                        }
                        cnt190++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1()) ) {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1())");
                    }

                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getContainerAccess().getUnorderedGroup_1());

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleContainer"


    // $ANTLR start "entryRuleService"
    // InternalGitHubActionsParser.g:11162:1: entryRuleService returns [EObject current=null] : iv_ruleService= ruleService EOF ;
    public final EObject entryRuleService() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleService = null;


        try {
            // InternalGitHubActionsParser.g:11162:48: (iv_ruleService= ruleService EOF )
            // InternalGitHubActionsParser.g:11163:2: iv_ruleService= ruleService EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getServiceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleService=ruleService();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleService; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleService"


    // $ANTLR start "ruleService"
    // InternalGitHubActionsParser.g:11169:1: ruleService returns [EObject current=null] : ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END ) ;
    public final EObject ruleService() throws RecognitionException {
        EObject current = null;

        Token lv_key_0_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_2=null;
        Token this_BEGIN_3=null;
        Token this_END_5=null;
        EObject lv_value_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11175:2: ( ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END ) )
            // InternalGitHubActionsParser.g:11176:2: ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END )
            {
            // InternalGitHubActionsParser.g:11176:2: ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END )
            // InternalGitHubActionsParser.g:11177:3: ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon this_NEWLINE_2= RULE_NEWLINE this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END
            {
            // InternalGitHubActionsParser.g:11177:3: ( (lv_key_0_0= RULE_ID ) )
            // InternalGitHubActionsParser.g:11178:4: (lv_key_0_0= RULE_ID )
            {
            // InternalGitHubActionsParser.g:11178:4: (lv_key_0_0= RULE_ID )
            // InternalGitHubActionsParser.g:11179:5: lv_key_0_0= RULE_ID
            {
            lv_key_0_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_key_0_0, grammarAccess.getServiceAccess().getKeyIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getServiceRule());
              					}
              					setWithLastConsumed(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.eclipse.xtext.common.Terminals.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getServiceAccess().getColonKeyword_1());
              		
            }
            this_NEWLINE_2=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_2, grammarAccess.getServiceAccess().getNEWLINETerminalRuleCall_2());
              		
            }
            this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_27); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_3, grammarAccess.getServiceAccess().getBEGINTerminalRuleCall_3());
              		
            }
            // InternalGitHubActionsParser.g:11207:3: ( (lv_value_4_0= ruleContainer ) )
            // InternalGitHubActionsParser.g:11208:4: (lv_value_4_0= ruleContainer )
            {
            // InternalGitHubActionsParser.g:11208:4: (lv_value_4_0= ruleContainer )
            // InternalGitHubActionsParser.g:11209:5: lv_value_4_0= ruleContainer
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getServiceAccess().getValueContainerParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_19);
            lv_value_4_0=ruleContainer();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getServiceRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.Container");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_END_5=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_5, grammarAccess.getServiceAccess().getENDTerminalRuleCall_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleService"


    // $ANTLR start "entryRuleVariableAssignment"
    // InternalGitHubActionsParser.g:11234:1: entryRuleVariableAssignment returns [EObject current=null] : iv_ruleVariableAssignment= ruleVariableAssignment EOF ;
    public final EObject entryRuleVariableAssignment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableAssignment = null;


        try {
            // InternalGitHubActionsParser.g:11234:59: (iv_ruleVariableAssignment= ruleVariableAssignment EOF )
            // InternalGitHubActionsParser.g:11235:2: iv_ruleVariableAssignment= ruleVariableAssignment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableAssignment=ruleVariableAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableAssignment"


    // $ANTLR start "ruleVariableAssignment"
    // InternalGitHubActionsParser.g:11241:1: ruleVariableAssignment returns [EObject current=null] : ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) ;
    public final EObject ruleVariableAssignment() throws RecognitionException {
        EObject current = null;

        Token lv_key_0_0=null;
        Token otherlv_1=null;
        Token this_NEWLINE_3=null;
        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11247:2: ( ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE ) )
            // InternalGitHubActionsParser.g:11248:2: ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE )
            {
            // InternalGitHubActionsParser.g:11248:2: ( ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE )
            // InternalGitHubActionsParser.g:11249:3: ( (lv_key_0_0= RULE_ID ) ) otherlv_1= Colon ( (lv_value_2_0= ruleExpression ) ) this_NEWLINE_3= RULE_NEWLINE
            {
            // InternalGitHubActionsParser.g:11249:3: ( (lv_key_0_0= RULE_ID ) )
            // InternalGitHubActionsParser.g:11250:4: (lv_key_0_0= RULE_ID )
            {
            // InternalGitHubActionsParser.g:11250:4: (lv_key_0_0= RULE_ID )
            // InternalGitHubActionsParser.g:11251:5: lv_key_0_0= RULE_ID
            {
            lv_key_0_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_key_0_0, grammarAccess.getVariableAssignmentAccess().getKeyIDTerminalRuleCall_0_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getVariableAssignmentRule());
              					}
              					setWithLastConsumed(
              						current,
              						"key",
              						lv_key_0_0,
              						"org.eclipse.xtext.common.Terminals.ID");
              				
            }

            }


            }

            otherlv_1=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getVariableAssignmentAccess().getColonKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:11271:3: ( (lv_value_2_0= ruleExpression ) )
            // InternalGitHubActionsParser.g:11272:4: (lv_value_2_0= ruleExpression )
            {
            // InternalGitHubActionsParser.g:11272:4: (lv_value_2_0= ruleExpression )
            // InternalGitHubActionsParser.g:11273:5: lv_value_2_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableAssignmentAccess().getValueExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_5);
            lv_value_2_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_NEWLINE_3, grammarAccess.getVariableAssignmentAccess().getNEWLINETerminalRuleCall_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableAssignment"


    // $ANTLR start "entryRuleExpression"
    // InternalGitHubActionsParser.g:11298:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalGitHubActionsParser.g:11298:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalGitHubActionsParser.g:11299:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalGitHubActionsParser.g:11305:1: ruleExpression returns [EObject current=null] : this_Concat_0= ruleConcat ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Concat_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11311:2: (this_Concat_0= ruleConcat )
            // InternalGitHubActionsParser.g:11312:2: this_Concat_0= ruleConcat
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getExpressionAccess().getConcatParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_Concat_0=ruleConcat();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_Concat_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleConcat"
    // InternalGitHubActionsParser.g:11326:1: entryRuleConcat returns [EObject current=null] : iv_ruleConcat= ruleConcat EOF ;
    public final EObject entryRuleConcat() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConcat = null;


        try {
            // InternalGitHubActionsParser.g:11326:47: (iv_ruleConcat= ruleConcat EOF )
            // InternalGitHubActionsParser.g:11327:2: iv_ruleConcat= ruleConcat EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConcatRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConcat=ruleConcat();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConcat; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConcat"


    // $ANTLR start "ruleConcat"
    // InternalGitHubActionsParser.g:11333:1: ruleConcat returns [EObject current=null] : (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* ) ;
    public final EObject ruleConcat() throws RecognitionException {
        EObject current = null;

        EObject this_ConcatExpression_0 = null;

        EObject lv_rhs_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11339:2: ( (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* ) )
            // InternalGitHubActionsParser.g:11340:2: (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* )
            {
            // InternalGitHubActionsParser.g:11340:2: (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* )
            // InternalGitHubActionsParser.g:11341:3: this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConcatAccess().getConcatExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_95);
            this_ConcatExpression_0=ruleConcatExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ConcatExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:11352:3: ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==DollarSignLeftCurlyBracketLeftCurlyBracket||LA192_0==RULE_STRING) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:11353:4: () ( (lv_rhs_2_0= ruleConcatExpression ) )
            	    {
            	    // InternalGitHubActionsParser.g:11353:4: ()
            	    // InternalGitHubActionsParser.g:11354:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getConcatAccess().getConcatLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:11363:4: ( (lv_rhs_2_0= ruleConcatExpression ) )
            	    // InternalGitHubActionsParser.g:11364:5: (lv_rhs_2_0= ruleConcatExpression )
            	    {
            	    // InternalGitHubActionsParser.g:11364:5: (lv_rhs_2_0= ruleConcatExpression )
            	    // InternalGitHubActionsParser.g:11365:6: lv_rhs_2_0= ruleConcatExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getConcatAccess().getRhsConcatExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_95);
            	    lv_rhs_2_0=ruleConcatExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getConcatRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_2_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.ConcatExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConcat"


    // $ANTLR start "entryRuleConcatExpression"
    // InternalGitHubActionsParser.g:11387:1: entryRuleConcatExpression returns [EObject current=null] : iv_ruleConcatExpression= ruleConcatExpression EOF ;
    public final EObject entryRuleConcatExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConcatExpression = null;


        try {
            // InternalGitHubActionsParser.g:11387:57: (iv_ruleConcatExpression= ruleConcatExpression EOF )
            // InternalGitHubActionsParser.g:11388:2: iv_ruleConcatExpression= ruleConcatExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConcatExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConcatExpression=ruleConcatExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConcatExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConcatExpression"


    // $ANTLR start "ruleConcatExpression"
    // InternalGitHubActionsParser.g:11394:1: ruleConcatExpression returns [EObject current=null] : (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral ) ;
    public final EObject ruleConcatExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BracketedExpression_0 = null;

        EObject this_UnbracketedLiteral_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11400:2: ( (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral ) )
            // InternalGitHubActionsParser.g:11401:2: (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral )
            {
            // InternalGitHubActionsParser.g:11401:2: (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral )
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==DollarSignLeftCurlyBracketLeftCurlyBracket) ) {
                alt193=1;
            }
            else if ( (LA193_0==RULE_STRING) ) {
                alt193=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 193, 0, input);

                throw nvae;
            }
            switch (alt193) {
                case 1 :
                    // InternalGitHubActionsParser.g:11402:3: this_BracketedExpression_0= ruleBracketedExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getConcatExpressionAccess().getBracketedExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BracketedExpression_0=ruleBracketedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BracketedExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:11414:3: this_UnbracketedLiteral_1= ruleUnbracketedLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getConcatExpressionAccess().getUnbracketedLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnbracketedLiteral_1=ruleUnbracketedLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnbracketedLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConcatExpression"


    // $ANTLR start "entryRuleBracketedExpression"
    // InternalGitHubActionsParser.g:11429:1: entryRuleBracketedExpression returns [EObject current=null] : iv_ruleBracketedExpression= ruleBracketedExpression EOF ;
    public final EObject entryRuleBracketedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBracketedExpression = null;


        try {
            // InternalGitHubActionsParser.g:11429:60: (iv_ruleBracketedExpression= ruleBracketedExpression EOF )
            // InternalGitHubActionsParser.g:11430:2: iv_ruleBracketedExpression= ruleBracketedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBracketedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBracketedExpression=ruleBracketedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBracketedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBracketedExpression"


    // $ANTLR start "ruleBracketedExpression"
    // InternalGitHubActionsParser.g:11436:1: ruleBracketedExpression returns [EObject current=null] : (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket ) ;
    public final EObject ruleBracketedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_InsideBracketsExpression_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11442:2: ( (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket ) )
            // InternalGitHubActionsParser.g:11443:2: (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket )
            {
            // InternalGitHubActionsParser.g:11443:2: (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket )
            // InternalGitHubActionsParser.g:11444:3: otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket
            {
            otherlv_0=(Token)match(input,DollarSignLeftCurlyBracketLeftCurlyBracket,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getBracketedExpressionAccess().getDollarSignLeftCurlyBracketLeftCurlyBracketKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBracketedExpressionAccess().getInsideBracketsExpressionParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_97);
            this_InsideBracketsExpression_1=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_InsideBracketsExpression_1;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_2=(Token)match(input,RightCurlyBracketRightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getBracketedExpressionAccess().getRightCurlyBracketRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBracketedExpression"


    // $ANTLR start "entryRuleInsideBracketsExpression"
    // InternalGitHubActionsParser.g:11467:1: entryRuleInsideBracketsExpression returns [EObject current=null] : iv_ruleInsideBracketsExpression= ruleInsideBracketsExpression EOF ;
    public final EObject entryRuleInsideBracketsExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInsideBracketsExpression = null;


        try {
            // InternalGitHubActionsParser.g:11467:65: (iv_ruleInsideBracketsExpression= ruleInsideBracketsExpression EOF )
            // InternalGitHubActionsParser.g:11468:2: iv_ruleInsideBracketsExpression= ruleInsideBracketsExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsideBracketsExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsideBracketsExpression=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsideBracketsExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsideBracketsExpression"


    // $ANTLR start "ruleInsideBracketsExpression"
    // InternalGitHubActionsParser.g:11474:1: ruleInsideBracketsExpression returns [EObject current=null] : this_Or_0= ruleOr ;
    public final EObject ruleInsideBracketsExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Or_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11480:2: (this_Or_0= ruleOr )
            // InternalGitHubActionsParser.g:11481:2: this_Or_0= ruleOr
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getInsideBracketsExpressionAccess().getOrParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_Or_0=ruleOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_Or_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsideBracketsExpression"


    // $ANTLR start "entryRuleUnbracketedLiteral"
    // InternalGitHubActionsParser.g:11495:1: entryRuleUnbracketedLiteral returns [EObject current=null] : iv_ruleUnbracketedLiteral= ruleUnbracketedLiteral EOF ;
    public final EObject entryRuleUnbracketedLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnbracketedLiteral = null;


        try {
            // InternalGitHubActionsParser.g:11495:59: (iv_ruleUnbracketedLiteral= ruleUnbracketedLiteral EOF )
            // InternalGitHubActionsParser.g:11496:2: iv_ruleUnbracketedLiteral= ruleUnbracketedLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnbracketedLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnbracketedLiteral=ruleUnbracketedLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnbracketedLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnbracketedLiteral"


    // $ANTLR start "ruleUnbracketedLiteral"
    // InternalGitHubActionsParser.g:11502:1: ruleUnbracketedLiteral returns [EObject current=null] : this_UnbracketedString_0= ruleUnbracketedString ;
    public final EObject ruleUnbracketedLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_UnbracketedString_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11508:2: (this_UnbracketedString_0= ruleUnbracketedString )
            // InternalGitHubActionsParser.g:11509:2: this_UnbracketedString_0= ruleUnbracketedString
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getUnbracketedLiteralAccess().getUnbracketedStringParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_UnbracketedString_0=ruleUnbracketedString();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_UnbracketedString_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnbracketedLiteral"


    // $ANTLR start "entryRuleUnbracketedString"
    // InternalGitHubActionsParser.g:11523:1: entryRuleUnbracketedString returns [EObject current=null] : iv_ruleUnbracketedString= ruleUnbracketedString EOF ;
    public final EObject entryRuleUnbracketedString() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnbracketedString = null;


        try {
            // InternalGitHubActionsParser.g:11523:58: (iv_ruleUnbracketedString= ruleUnbracketedString EOF )
            // InternalGitHubActionsParser.g:11524:2: iv_ruleUnbracketedString= ruleUnbracketedString EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnbracketedStringRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnbracketedString=ruleUnbracketedString();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnbracketedString; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnbracketedString"


    // $ANTLR start "ruleUnbracketedString"
    // InternalGitHubActionsParser.g:11530:1: ruleUnbracketedString returns [EObject current=null] : ( (lv_value_0_0= RULE_STRING ) ) ;
    public final EObject ruleUnbracketedString() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11536:2: ( ( (lv_value_0_0= RULE_STRING ) ) )
            // InternalGitHubActionsParser.g:11537:2: ( (lv_value_0_0= RULE_STRING ) )
            {
            // InternalGitHubActionsParser.g:11537:2: ( (lv_value_0_0= RULE_STRING ) )
            // InternalGitHubActionsParser.g:11538:3: (lv_value_0_0= RULE_STRING )
            {
            // InternalGitHubActionsParser.g:11538:3: (lv_value_0_0= RULE_STRING )
            // InternalGitHubActionsParser.g:11539:4: lv_value_0_0= RULE_STRING
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getUnbracketedStringAccess().getValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getUnbracketedStringRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.xtext.common.Terminals.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnbracketedString"


    // $ANTLR start "entryRuleOr"
    // InternalGitHubActionsParser.g:11558:1: entryRuleOr returns [EObject current=null] : iv_ruleOr= ruleOr EOF ;
    public final EObject entryRuleOr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOr = null;


        try {
            // InternalGitHubActionsParser.g:11558:43: (iv_ruleOr= ruleOr EOF )
            // InternalGitHubActionsParser.g:11559:2: iv_ruleOr= ruleOr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOr=ruleOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOr; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOr"


    // $ANTLR start "ruleOr"
    // InternalGitHubActionsParser.g:11565:1: ruleOr returns [EObject current=null] : (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* ) ;
    public final EObject ruleOr() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_And_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11571:2: ( (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* ) )
            // InternalGitHubActionsParser.g:11572:2: (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* )
            {
            // InternalGitHubActionsParser.g:11572:2: (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* )
            // InternalGitHubActionsParser.g:11573:3: this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_98);
            this_And_0=ruleAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_And_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:11584:3: ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==VerticalLineVerticalLine) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:11585:4: () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) )
            	    {
            	    // InternalGitHubActionsParser.g:11585:4: ()
            	    // InternalGitHubActionsParser.g:11586:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getOrAccess().getOrLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_2=(Token)match(input,VerticalLineVerticalLine,FOLLOW_96); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
            	      			
            	    }
            	    // InternalGitHubActionsParser.g:11599:4: ( (lv_rhs_3_0= ruleAnd ) )
            	    // InternalGitHubActionsParser.g:11600:5: (lv_rhs_3_0= ruleAnd )
            	    {
            	    // InternalGitHubActionsParser.g:11600:5: (lv_rhs_3_0= ruleAnd )
            	    // InternalGitHubActionsParser.g:11601:6: lv_rhs_3_0= ruleAnd
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOrAccess().getRhsAndParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_98);
            	    lv_rhs_3_0=ruleAnd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOrRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.And");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOr"


    // $ANTLR start "entryRuleAnd"
    // InternalGitHubActionsParser.g:11623:1: entryRuleAnd returns [EObject current=null] : iv_ruleAnd= ruleAnd EOF ;
    public final EObject entryRuleAnd() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnd = null;


        try {
            // InternalGitHubActionsParser.g:11623:44: (iv_ruleAnd= ruleAnd EOF )
            // InternalGitHubActionsParser.g:11624:2: iv_ruleAnd= ruleAnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnd=ruleAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnd; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnd"


    // $ANTLR start "ruleAnd"
    // InternalGitHubActionsParser.g:11630:1: ruleAnd returns [EObject current=null] : (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* ) ;
    public final EObject ruleAnd() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_Equality_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11636:2: ( (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* ) )
            // InternalGitHubActionsParser.g:11637:2: (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* )
            {
            // InternalGitHubActionsParser.g:11637:2: (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* )
            // InternalGitHubActionsParser.g:11638:3: this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_99);
            this_Equality_0=ruleEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Equality_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:11649:3: ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==AmpersandAmpersand) ) {
                    alt195=1;
                }


                switch (alt195) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:11650:4: () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) )
            	    {
            	    // InternalGitHubActionsParser.g:11650:4: ()
            	    // InternalGitHubActionsParser.g:11651:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getAndAccess().getAndLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_2=(Token)match(input,AmpersandAmpersand,FOLLOW_96); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
            	      			
            	    }
            	    // InternalGitHubActionsParser.g:11664:4: ( (lv_rhs_3_0= ruleEquality ) )
            	    // InternalGitHubActionsParser.g:11665:5: (lv_rhs_3_0= ruleEquality )
            	    {
            	    // InternalGitHubActionsParser.g:11665:5: (lv_rhs_3_0= ruleEquality )
            	    // InternalGitHubActionsParser.g:11666:6: lv_rhs_3_0= ruleEquality
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAndAccess().getRhsEqualityParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_99);
            	    lv_rhs_3_0=ruleEquality();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAndRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.Equality");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnd"


    // $ANTLR start "entryRuleEquality"
    // InternalGitHubActionsParser.g:11688:1: entryRuleEquality returns [EObject current=null] : iv_ruleEquality= ruleEquality EOF ;
    public final EObject entryRuleEquality() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEquality = null;


        try {
            // InternalGitHubActionsParser.g:11688:49: (iv_ruleEquality= ruleEquality EOF )
            // InternalGitHubActionsParser.g:11689:2: iv_ruleEquality= ruleEquality EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEquality=ruleEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEquality; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEquality"


    // $ANTLR start "ruleEquality"
    // InternalGitHubActionsParser.g:11695:1: ruleEquality returns [EObject current=null] : (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* ) ;
    public final EObject ruleEquality() throws RecognitionException {
        EObject current = null;

        EObject this_Comparison_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11701:2: ( (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* ) )
            // InternalGitHubActionsParser.g:11702:2: (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* )
            {
            // InternalGitHubActionsParser.g:11702:2: (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* )
            // InternalGitHubActionsParser.g:11703:3: this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_100);
            this_Comparison_0=ruleComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Comparison_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:11714:3: ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==ExclamationMarkEqualsSign||LA196_0==EqualsSignEqualsSign) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:11715:4: () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) )
            	    {
            	    // InternalGitHubActionsParser.g:11715:4: ()
            	    // InternalGitHubActionsParser.g:11716:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getEqualityAccess().getEqualityLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:11725:4: ( (lv_op_2_0= ruleEQUALITY_OP ) )
            	    // InternalGitHubActionsParser.g:11726:5: (lv_op_2_0= ruleEQUALITY_OP )
            	    {
            	    // InternalGitHubActionsParser.g:11726:5: (lv_op_2_0= ruleEQUALITY_OP )
            	    // InternalGitHubActionsParser.g:11727:6: lv_op_2_0= ruleEQUALITY_OP
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityAccess().getOpEQUALITY_OPEnumRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_op_2_0=ruleEQUALITY_OP();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityRule());
            	      						}
            	      						set(
            	      							current,
            	      							"op",
            	      							lv_op_2_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.EQUALITY_OP");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalGitHubActionsParser.g:11744:4: ( (lv_rhs_3_0= ruleComparison ) )
            	    // InternalGitHubActionsParser.g:11745:5: (lv_rhs_3_0= ruleComparison )
            	    {
            	    // InternalGitHubActionsParser.g:11745:5: (lv_rhs_3_0= ruleComparison )
            	    // InternalGitHubActionsParser.g:11746:6: lv_rhs_3_0= ruleComparison
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityAccess().getRhsComparisonParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_100);
            	    lv_rhs_3_0=ruleComparison();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.Comparison");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEquality"


    // $ANTLR start "entryRuleComparison"
    // InternalGitHubActionsParser.g:11768:1: entryRuleComparison returns [EObject current=null] : iv_ruleComparison= ruleComparison EOF ;
    public final EObject entryRuleComparison() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparison = null;


        try {
            // InternalGitHubActionsParser.g:11768:51: (iv_ruleComparison= ruleComparison EOF )
            // InternalGitHubActionsParser.g:11769:2: iv_ruleComparison= ruleComparison EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComparison=ruleComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComparison; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComparison"


    // $ANTLR start "ruleComparison"
    // InternalGitHubActionsParser.g:11775:1: ruleComparison returns [EObject current=null] : (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* ) ;
    public final EObject ruleComparison() throws RecognitionException {
        EObject current = null;

        EObject this_UnaryOp_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11781:2: ( (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* ) )
            // InternalGitHubActionsParser.g:11782:2: (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* )
            {
            // InternalGitHubActionsParser.g:11782:2: (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* )
            // InternalGitHubActionsParser.g:11783:3: this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getComparisonAccess().getUnaryOpParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_101);
            this_UnaryOp_0=ruleUnaryOp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryOp_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:11794:3: ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==LessThanSignEqualsSign||LA197_0==GreaterThanSignEqualsSign||(LA197_0>=LessThanSign && LA197_0<=GreaterThanSign)) ) {
                    alt197=1;
                }


                switch (alt197) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:11795:4: () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) )
            	    {
            	    // InternalGitHubActionsParser.g:11795:4: ()
            	    // InternalGitHubActionsParser.g:11796:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getComparisonAccess().getComparisonLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:11805:4: ( (lv_op_2_0= ruleCOMPARISON_OP ) )
            	    // InternalGitHubActionsParser.g:11806:5: (lv_op_2_0= ruleCOMPARISON_OP )
            	    {
            	    // InternalGitHubActionsParser.g:11806:5: (lv_op_2_0= ruleCOMPARISON_OP )
            	    // InternalGitHubActionsParser.g:11807:6: lv_op_2_0= ruleCOMPARISON_OP
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getComparisonAccess().getOpCOMPARISON_OPEnumRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_96);
            	    lv_op_2_0=ruleCOMPARISON_OP();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getComparisonRule());
            	      						}
            	      						set(
            	      							current,
            	      							"op",
            	      							lv_op_2_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.COMPARISON_OP");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalGitHubActionsParser.g:11824:4: ( (lv_rhs_3_0= ruleUnaryOp ) )
            	    // InternalGitHubActionsParser.g:11825:5: (lv_rhs_3_0= ruleUnaryOp )
            	    {
            	    // InternalGitHubActionsParser.g:11825:5: (lv_rhs_3_0= ruleUnaryOp )
            	    // InternalGitHubActionsParser.g:11826:6: lv_rhs_3_0= ruleUnaryOp
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getComparisonAccess().getRhsUnaryOpParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_101);
            	    lv_rhs_3_0=ruleUnaryOp();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getComparisonRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.UnaryOp");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComparison"


    // $ANTLR start "entryRuleUnaryOp"
    // InternalGitHubActionsParser.g:11848:1: entryRuleUnaryOp returns [EObject current=null] : iv_ruleUnaryOp= ruleUnaryOp EOF ;
    public final EObject entryRuleUnaryOp() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnaryOp = null;


        try {
            // InternalGitHubActionsParser.g:11848:48: (iv_ruleUnaryOp= ruleUnaryOp EOF )
            // InternalGitHubActionsParser.g:11849:2: iv_ruleUnaryOp= ruleUnaryOp EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryOpRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryOp=ruleUnaryOp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryOp; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnaryOp"


    // $ANTLR start "ruleUnaryOp"
    // InternalGitHubActionsParser.g:11855:1: ruleUnaryOp returns [EObject current=null] : (this_Not_0= ruleNot | this_Blank_1= ruleBlank ) ;
    public final EObject ruleUnaryOp() throws RecognitionException {
        EObject current = null;

        EObject this_Not_0 = null;

        EObject this_Blank_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11861:2: ( (this_Not_0= ruleNot | this_Blank_1= ruleBlank ) )
            // InternalGitHubActionsParser.g:11862:2: (this_Not_0= ruleNot | this_Blank_1= ruleBlank )
            {
            // InternalGitHubActionsParser.g:11862:2: (this_Not_0= ruleNot | this_Blank_1= ruleBlank )
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==ExclamationMark) ) {
                alt198=1;
            }
            else if ( (LA198_0==StartsWith||LA198_0==Cancelled||LA198_0==HashFiles||LA198_0==Contains||(LA198_0>=EndsWith && LA198_0<=FromJSON)||LA198_0==Strategy||LA198_0==Failure||(LA198_0>=Secrets && LA198_0<=Success)||LA198_0==Always||(LA198_0>=Format && LA198_0<=Github)||LA198_0==Inputs||LA198_0==Matrix||LA198_0==Runner||LA198_0==ToJSON||LA198_0==Needs||LA198_0==Steps||(LA198_0>=Jobs && LA198_0<=Join)||LA198_0==Vars||(LA198_0>=Env && LA198_0<=Job)||LA198_0==LeftParenthesis||(LA198_0>=RULE_INT && LA198_0<=RULE_BOOLEAN)||(LA198_0>=RULE_ID && LA198_0<=RULE_STRING)) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    // InternalGitHubActionsParser.g:11863:3: this_Not_0= ruleNot
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryOpAccess().getNotParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Not_0=ruleNot();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Not_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:11875:3: this_Blank_1= ruleBlank
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryOpAccess().getBlankParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Blank_1=ruleBlank();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Blank_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnaryOp"


    // $ANTLR start "entryRuleNot"
    // InternalGitHubActionsParser.g:11890:1: entryRuleNot returns [EObject current=null] : iv_ruleNot= ruleNot EOF ;
    public final EObject entryRuleNot() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNot = null;


        try {
            // InternalGitHubActionsParser.g:11890:44: (iv_ruleNot= ruleNot EOF )
            // InternalGitHubActionsParser.g:11891:2: iv_ruleNot= ruleNot EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNotRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNot=ruleNot();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNot; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNot"


    // $ANTLR start "ruleNot"
    // InternalGitHubActionsParser.g:11897:1: ruleNot returns [EObject current=null] : (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) ) ;
    public final EObject ruleNot() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_childExpr_1_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11903:2: ( (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) ) )
            // InternalGitHubActionsParser.g:11904:2: (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) )
            {
            // InternalGitHubActionsParser.g:11904:2: (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) )
            // InternalGitHubActionsParser.g:11905:3: otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) )
            {
            otherlv_0=(Token)match(input,ExclamationMark,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNotAccess().getExclamationMarkKeyword_0());
              		
            }
            // InternalGitHubActionsParser.g:11909:3: ( (lv_childExpr_1_0= ruleVariableDereference ) )
            // InternalGitHubActionsParser.g:11910:4: (lv_childExpr_1_0= ruleVariableDereference )
            {
            // InternalGitHubActionsParser.g:11910:4: (lv_childExpr_1_0= ruleVariableDereference )
            // InternalGitHubActionsParser.g:11911:5: lv_childExpr_1_0= ruleVariableDereference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNotAccess().getChildExprVariableDereferenceParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_childExpr_1_0=ruleVariableDereference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNotRule());
              					}
              					set(
              						current,
              						"childExpr",
              						lv_childExpr_1_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.VariableDereference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNot"


    // $ANTLR start "entryRuleBlank"
    // InternalGitHubActionsParser.g:11932:1: entryRuleBlank returns [EObject current=null] : iv_ruleBlank= ruleBlank EOF ;
    public final EObject entryRuleBlank() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBlank = null;


        try {
            // InternalGitHubActionsParser.g:11932:46: (iv_ruleBlank= ruleBlank EOF )
            // InternalGitHubActionsParser.g:11933:2: iv_ruleBlank= ruleBlank EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlankRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlank=ruleBlank();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlank; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBlank"


    // $ANTLR start "ruleBlank"
    // InternalGitHubActionsParser.g:11939:1: ruleBlank returns [EObject current=null] : this_VariableDereference_0= ruleVariableDereference ;
    public final EObject ruleBlank() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDereference_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11945:2: (this_VariableDereference_0= ruleVariableDereference )
            // InternalGitHubActionsParser.g:11946:2: this_VariableDereference_0= ruleVariableDereference
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getBlankAccess().getVariableDereferenceParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_VariableDereference_0=ruleVariableDereference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_VariableDereference_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBlank"


    // $ANTLR start "entryRuleVariableDereference"
    // InternalGitHubActionsParser.g:11960:1: entryRuleVariableDereference returns [EObject current=null] : iv_ruleVariableDereference= ruleVariableDereference EOF ;
    public final EObject entryRuleVariableDereference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDereference = null;


        try {
            // InternalGitHubActionsParser.g:11960:60: (iv_ruleVariableDereference= ruleVariableDereference EOF )
            // InternalGitHubActionsParser.g:11961:2: iv_ruleVariableDereference= ruleVariableDereference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDereferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDereference=ruleVariableDereference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDereference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableDereference"


    // $ANTLR start "ruleVariableDereference"
    // InternalGitHubActionsParser.g:11967:1: ruleVariableDereference returns [EObject current=null] : (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* ) ;
    public final EObject ruleVariableDereference() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_property_3_0=null;
        Token otherlv_4=null;
        Token lv_property_5_0=null;
        Token otherlv_6=null;
        EObject this_Primary_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:11973:2: ( (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* ) )
            // InternalGitHubActionsParser.g:11974:2: (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* )
            {
            // InternalGitHubActionsParser.g:11974:2: (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* )
            // InternalGitHubActionsParser.g:11975:3: this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getVariableDereferenceAccess().getPrimaryParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_102);
            this_Primary_0=rulePrimary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Primary_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:11986:3: ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==FullStop||LA200_0==LeftSquareBracket) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:11987:4: () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) )
            	    {
            	    // InternalGitHubActionsParser.g:11987:4: ()
            	    // InternalGitHubActionsParser.g:11988:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getVariableDereferenceAccess().getVariableDereferenceVariableAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:11997:4: ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) )
            	    int alt199=2;
            	    int LA199_0 = input.LA(1);

            	    if ( (LA199_0==FullStop) ) {
            	        alt199=1;
            	    }
            	    else if ( (LA199_0==LeftSquareBracket) ) {
            	        alt199=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 199, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt199) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:11998:5: (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:11998:5: (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) )
            	            // InternalGitHubActionsParser.g:11999:6: otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) )
            	            {
            	            otherlv_2=(Token)match(input,FullStop,FOLLOW_16); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_2, grammarAccess.getVariableDereferenceAccess().getFullStopKeyword_1_1_0_0());
            	              					
            	            }
            	            // InternalGitHubActionsParser.g:12003:6: ( (lv_property_3_0= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:12004:7: (lv_property_3_0= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:12004:7: (lv_property_3_0= RULE_ID )
            	            // InternalGitHubActionsParser.g:12005:8: lv_property_3_0= RULE_ID
            	            {
            	            lv_property_3_0=(Token)match(input,RULE_ID,FOLLOW_102); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								newLeafNode(lv_property_3_0, grammarAccess.getVariableDereferenceAccess().getPropertyIDTerminalRuleCall_1_1_0_1_0());
            	              							
            	            }
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElement(grammarAccess.getVariableDereferenceRule());
            	              								}
            	              								setWithLastConsumed(
            	              									current,
            	              									"property",
            	              									lv_property_3_0,
            	              									"org.eclipse.xtext.common.Terminals.ID");
            	              							
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:12023:5: (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:12023:5: (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:12024:6: otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket
            	            {
            	            otherlv_4=(Token)match(input,LeftSquareBracket,FOLLOW_16); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_4, grammarAccess.getVariableDereferenceAccess().getLeftSquareBracketKeyword_1_1_1_0());
            	              					
            	            }
            	            // InternalGitHubActionsParser.g:12028:6: ( (lv_property_5_0= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:12029:7: (lv_property_5_0= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:12029:7: (lv_property_5_0= RULE_ID )
            	            // InternalGitHubActionsParser.g:12030:8: lv_property_5_0= RULE_ID
            	            {
            	            lv_property_5_0=(Token)match(input,RULE_ID,FOLLOW_103); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								newLeafNode(lv_property_5_0, grammarAccess.getVariableDereferenceAccess().getPropertyIDTerminalRuleCall_1_1_1_1_0());
            	              							
            	            }
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElement(grammarAccess.getVariableDereferenceRule());
            	              								}
            	              								setWithLastConsumed(
            	              									current,
            	              									"property",
            	              									lv_property_5_0,
            	              									"org.eclipse.xtext.common.Terminals.ID");
            	              							
            	            }

            	            }


            	            }

            	            otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_102); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_6, grammarAccess.getVariableDereferenceAccess().getRightSquareBracketKeyword_1_1_1_2());
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableDereference"


    // $ANTLR start "entryRulePrimary"
    // InternalGitHubActionsParser.g:12057:1: entryRulePrimary returns [EObject current=null] : iv_rulePrimary= rulePrimary EOF ;
    public final EObject entryRulePrimary() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimary = null;


        try {
            // InternalGitHubActionsParser.g:12057:48: (iv_rulePrimary= rulePrimary EOF )
            // InternalGitHubActionsParser.g:12058:2: iv_rulePrimary= rulePrimary EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimary=rulePrimary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimary; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimary"


    // $ANTLR start "rulePrimary"
    // InternalGitHubActionsParser.g:12064:1: rulePrimary returns [EObject current=null] : ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic ) ;
    public final EObject rulePrimary() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_InsideBracketsExpression_1 = null;

        EObject this_CallExpression_3 = null;

        EObject this_Atomic_4 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12070:2: ( ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic ) )
            // InternalGitHubActionsParser.g:12071:2: ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic )
            {
            // InternalGitHubActionsParser.g:12071:2: ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic )
            int alt201=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt201=1;
                }
                break;
            case StartsWith:
            case Cancelled:
            case HashFiles:
            case Contains:
            case EndsWith:
            case FromJSON:
            case Failure:
            case Success:
            case Always:
            case Format:
            case ToJSON:
            case Join:
                {
                alt201=2;
                }
                break;
            case Strategy:
            case Secrets:
            case Github:
            case Inputs:
            case Matrix:
            case Runner:
            case Needs:
            case Steps:
            case Jobs:
            case Vars:
            case Env:
            case Job:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BOOLEAN:
            case RULE_ID:
            case RULE_STRING:
                {
                alt201=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // InternalGitHubActionsParser.g:12072:3: (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis )
                    {
                    // InternalGitHubActionsParser.g:12072:3: (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis )
                    // InternalGitHubActionsParser.g:12073:4: otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis
                    {
                    otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryAccess().getInsideBracketsExpressionParserRuleCall_0_1());
                      			
                    }
                    pushFollow(FOLLOW_104);
                    this_InsideBracketsExpression_1=ruleInsideBracketsExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_InsideBracketsExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:12094:3: this_CallExpression_3= ruleCallExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryAccess().getCallExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CallExpression_3=ruleCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CallExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:12106:3: this_Atomic_4= ruleAtomic
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Atomic_4=ruleAtomic();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Atomic_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimary"


    // $ANTLR start "entryRuleAtomic"
    // InternalGitHubActionsParser.g:12121:1: entryRuleAtomic returns [EObject current=null] : iv_ruleAtomic= ruleAtomic EOF ;
    public final EObject entryRuleAtomic() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAtomic = null;


        try {
            // InternalGitHubActionsParser.g:12121:47: (iv_ruleAtomic= ruleAtomic EOF )
            // InternalGitHubActionsParser.g:12122:2: iv_ruleAtomic= ruleAtomic EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAtomicRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAtomic=ruleAtomic();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAtomic; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAtomic"


    // $ANTLR start "ruleAtomic"
    // InternalGitHubActionsParser.g:12128:1: ruleAtomic returns [EObject current=null] : ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) ) ;
    public final EObject ruleAtomic() throws RecognitionException {
        EObject current = null;

        Token lv_name_3_0=null;
        Token lv_value_5_0=null;
        Token lv_value_7_0=null;
        Token lv_value_9_0=null;
        Token lv_value_11_0=null;
        Enumerator lv_context_1_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12134:2: ( ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) ) )
            // InternalGitHubActionsParser.g:12135:2: ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) )
            {
            // InternalGitHubActionsParser.g:12135:2: ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) )
            int alt202=6;
            switch ( input.LA(1) ) {
            case Strategy:
            case Secrets:
            case Github:
            case Inputs:
            case Matrix:
            case Runner:
            case Needs:
            case Steps:
            case Jobs:
            case Vars:
            case Env:
            case Job:
                {
                alt202=1;
                }
                break;
            case RULE_ID:
                {
                alt202=2;
                }
                break;
            case RULE_INT:
                {
                alt202=3;
                }
                break;
            case RULE_DOUBLE:
                {
                alt202=4;
                }
                break;
            case RULE_BOOLEAN:
                {
                alt202=5;
                }
                break;
            case RULE_STRING:
                {
                alt202=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }

            switch (alt202) {
                case 1 :
                    // InternalGitHubActionsParser.g:12136:3: ( () ( (lv_context_1_0= ruleCONTEXT ) ) )
                    {
                    // InternalGitHubActionsParser.g:12136:3: ( () ( (lv_context_1_0= ruleCONTEXT ) ) )
                    // InternalGitHubActionsParser.g:12137:4: () ( (lv_context_1_0= ruleCONTEXT ) )
                    {
                    // InternalGitHubActionsParser.g:12137:4: ()
                    // InternalGitHubActionsParser.g:12138:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getGitHubContextAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:12147:4: ( (lv_context_1_0= ruleCONTEXT ) )
                    // InternalGitHubActionsParser.g:12148:5: (lv_context_1_0= ruleCONTEXT )
                    {
                    // InternalGitHubActionsParser.g:12148:5: (lv_context_1_0= ruleCONTEXT )
                    // InternalGitHubActionsParser.g:12149:6: lv_context_1_0= ruleCONTEXT
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomicAccess().getContextCONTEXTEnumRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_context_1_0=ruleCONTEXT();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomicRule());
                      						}
                      						set(
                      							current,
                      							"context",
                      							lv_context_1_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.CONTEXT");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:12168:3: ( () ( (lv_name_3_0= RULE_ID ) ) )
                    {
                    // InternalGitHubActionsParser.g:12168:3: ( () ( (lv_name_3_0= RULE_ID ) ) )
                    // InternalGitHubActionsParser.g:12169:4: () ( (lv_name_3_0= RULE_ID ) )
                    {
                    // InternalGitHubActionsParser.g:12169:4: ()
                    // InternalGitHubActionsParser.g:12170:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getVariableAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:12179:4: ( (lv_name_3_0= RULE_ID ) )
                    // InternalGitHubActionsParser.g:12180:5: (lv_name_3_0= RULE_ID )
                    {
                    // InternalGitHubActionsParser.g:12180:5: (lv_name_3_0= RULE_ID )
                    // InternalGitHubActionsParser.g:12181:6: lv_name_3_0= RULE_ID
                    {
                    lv_name_3_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_name_3_0, grammarAccess.getAtomicAccess().getNameIDTerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"name",
                      							lv_name_3_0,
                      							"org.eclipse.xtext.common.Terminals.ID");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:12199:3: ( () ( (lv_value_5_0= RULE_INT ) ) )
                    {
                    // InternalGitHubActionsParser.g:12199:3: ( () ( (lv_value_5_0= RULE_INT ) ) )
                    // InternalGitHubActionsParser.g:12200:4: () ( (lv_value_5_0= RULE_INT ) )
                    {
                    // InternalGitHubActionsParser.g:12200:4: ()
                    // InternalGitHubActionsParser.g:12201:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getIntegerLiteralAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:12210:4: ( (lv_value_5_0= RULE_INT ) )
                    // InternalGitHubActionsParser.g:12211:5: (lv_value_5_0= RULE_INT )
                    {
                    // InternalGitHubActionsParser.g:12211:5: (lv_value_5_0= RULE_INT )
                    // InternalGitHubActionsParser.g:12212:6: lv_value_5_0= RULE_INT
                    {
                    lv_value_5_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_5_0, grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_2_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_5_0,
                      							"org.eclipse.xtext.common.Terminals.INT");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:12230:3: ( () ( (lv_value_7_0= RULE_DOUBLE ) ) )
                    {
                    // InternalGitHubActionsParser.g:12230:3: ( () ( (lv_value_7_0= RULE_DOUBLE ) ) )
                    // InternalGitHubActionsParser.g:12231:4: () ( (lv_value_7_0= RULE_DOUBLE ) )
                    {
                    // InternalGitHubActionsParser.g:12231:4: ()
                    // InternalGitHubActionsParser.g:12232:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getDoubleLiteralAction_3_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:12241:4: ( (lv_value_7_0= RULE_DOUBLE ) )
                    // InternalGitHubActionsParser.g:12242:5: (lv_value_7_0= RULE_DOUBLE )
                    {
                    // InternalGitHubActionsParser.g:12242:5: (lv_value_7_0= RULE_DOUBLE )
                    // InternalGitHubActionsParser.g:12243:6: lv_value_7_0= RULE_DOUBLE
                    {
                    lv_value_7_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_7_0, grammarAccess.getAtomicAccess().getValueDOUBLETerminalRuleCall_3_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_7_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.DOUBLE");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:12261:3: ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) )
                    {
                    // InternalGitHubActionsParser.g:12261:3: ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) )
                    // InternalGitHubActionsParser.g:12262:4: () ( (lv_value_9_0= RULE_BOOLEAN ) )
                    {
                    // InternalGitHubActionsParser.g:12262:4: ()
                    // InternalGitHubActionsParser.g:12263:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getBooleanLiteralAction_4_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:12272:4: ( (lv_value_9_0= RULE_BOOLEAN ) )
                    // InternalGitHubActionsParser.g:12273:5: (lv_value_9_0= RULE_BOOLEAN )
                    {
                    // InternalGitHubActionsParser.g:12273:5: (lv_value_9_0= RULE_BOOLEAN )
                    // InternalGitHubActionsParser.g:12274:6: lv_value_9_0= RULE_BOOLEAN
                    {
                    lv_value_9_0=(Token)match(input,RULE_BOOLEAN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_9_0, grammarAccess.getAtomicAccess().getValueBOOLEANTerminalRuleCall_4_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_9_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.BOOLEAN");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:12292:3: ( () ( (lv_value_11_0= RULE_STRING ) ) )
                    {
                    // InternalGitHubActionsParser.g:12292:3: ( () ( (lv_value_11_0= RULE_STRING ) ) )
                    // InternalGitHubActionsParser.g:12293:4: () ( (lv_value_11_0= RULE_STRING ) )
                    {
                    // InternalGitHubActionsParser.g:12293:4: ()
                    // InternalGitHubActionsParser.g:12294:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getStringLiteralAction_5_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:12303:4: ( (lv_value_11_0= RULE_STRING ) )
                    // InternalGitHubActionsParser.g:12304:5: (lv_value_11_0= RULE_STRING )
                    {
                    // InternalGitHubActionsParser.g:12304:5: (lv_value_11_0= RULE_STRING )
                    // InternalGitHubActionsParser.g:12305:6: lv_value_11_0= RULE_STRING
                    {
                    lv_value_11_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_11_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_5_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_11_0,
                      							"org.eclipse.xtext.common.Terminals.STRING");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAtomic"


    // $ANTLR start "entryRuleCallExpression"
    // InternalGitHubActionsParser.g:12326:1: entryRuleCallExpression returns [EObject current=null] : iv_ruleCallExpression= ruleCallExpression EOF ;
    public final EObject entryRuleCallExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCallExpression = null;


        try {
            // InternalGitHubActionsParser.g:12326:55: (iv_ruleCallExpression= ruleCallExpression EOF )
            // InternalGitHubActionsParser.g:12327:2: iv_ruleCallExpression= ruleCallExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCallExpression=ruleCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCallExpression"


    // $ANTLR start "ruleCallExpression"
    // InternalGitHubActionsParser.g:12333:1: ruleCallExpression returns [EObject current=null] : (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled ) ;
    public final EObject ruleCallExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Contains_0 = null;

        EObject this_StartsWith_1 = null;

        EObject this_EndsWith_2 = null;

        EObject this_Format_3 = null;

        EObject this_Join_4 = null;

        EObject this_ToJSON_5 = null;

        EObject this_FromJSON_6 = null;

        EObject this_HashFiles_7 = null;

        EObject this_Success_8 = null;

        EObject this_Always_9 = null;

        EObject this_Failure_10 = null;

        EObject this_Cancelled_11 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12339:2: ( (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled ) )
            // InternalGitHubActionsParser.g:12340:2: (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled )
            {
            // InternalGitHubActionsParser.g:12340:2: (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled )
            int alt203=12;
            switch ( input.LA(1) ) {
            case Contains:
                {
                alt203=1;
                }
                break;
            case StartsWith:
                {
                alt203=2;
                }
                break;
            case EndsWith:
                {
                alt203=3;
                }
                break;
            case Format:
                {
                alt203=4;
                }
                break;
            case Join:
                {
                alt203=5;
                }
                break;
            case ToJSON:
                {
                alt203=6;
                }
                break;
            case FromJSON:
                {
                alt203=7;
                }
                break;
            case HashFiles:
                {
                alt203=8;
                }
                break;
            case Success:
                {
                alt203=9;
                }
                break;
            case Always:
                {
                alt203=10;
                }
                break;
            case Failure:
                {
                alt203=11;
                }
                break;
            case Cancelled:
                {
                alt203=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;
            }

            switch (alt203) {
                case 1 :
                    // InternalGitHubActionsParser.g:12341:3: this_Contains_0= ruleContains
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getContainsParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Contains_0=ruleContains();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Contains_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:12353:3: this_StartsWith_1= ruleStartsWith
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getStartsWithParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StartsWith_1=ruleStartsWith();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StartsWith_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:12365:3: this_EndsWith_2= ruleEndsWith
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getEndsWithParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EndsWith_2=ruleEndsWith();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EndsWith_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:12377:3: this_Format_3= ruleFormat
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getFormatParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Format_3=ruleFormat();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Format_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:12389:3: this_Join_4= ruleJoin
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getJoinParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Join_4=ruleJoin();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Join_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:12401:3: this_ToJSON_5= ruleToJSON
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getToJSONParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ToJSON_5=ruleToJSON();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ToJSON_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:12413:3: this_FromJSON_6= ruleFromJSON
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getFromJSONParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FromJSON_6=ruleFromJSON();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FromJSON_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:12425:3: this_HashFiles_7= ruleHashFiles
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getHashFilesParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_HashFiles_7=ruleHashFiles();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_HashFiles_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:12437:3: this_Success_8= ruleSuccess
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getSuccessParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Success_8=ruleSuccess();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Success_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:12449:3: this_Always_9= ruleAlways
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getAlwaysParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Always_9=ruleAlways();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Always_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:12461:3: this_Failure_10= ruleFailure
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getFailureParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Failure_10=ruleFailure();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Failure_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:12473:3: this_Cancelled_11= ruleCancelled
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getCancelledParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Cancelled_11=ruleCancelled();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Cancelled_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCallExpression"


    // $ANTLR start "entryRuleContains"
    // InternalGitHubActionsParser.g:12488:1: entryRuleContains returns [EObject current=null] : iv_ruleContains= ruleContains EOF ;
    public final EObject entryRuleContains() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleContains = null;


        try {
            // InternalGitHubActionsParser.g:12488:49: (iv_ruleContains= ruleContains EOF )
            // InternalGitHubActionsParser.g:12489:2: iv_ruleContains= ruleContains EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContainsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContains=ruleContains();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContains; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleContains"


    // $ANTLR start "ruleContains"
    // InternalGitHubActionsParser.g:12495:1: ruleContains returns [EObject current=null] : (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleContains() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_search_2_0 = null;

        EObject lv_item_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12501:2: ( (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12502:2: (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12502:2: (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:12503:3: otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Contains,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getContainsKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getContainsAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12511:3: ( (lv_search_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12512:4: (lv_search_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12512:4: (lv_search_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12513:5: lv_search_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getContainsAccess().getSearchInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_106);
            lv_search_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getContainsRule());
              					}
              					set(
              						current,
              						"search",
              						lv_search_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getContainsAccess().getCommaKeyword_3());
              		
            }
            // InternalGitHubActionsParser.g:12534:3: ( (lv_item_4_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12535:4: (lv_item_4_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12535:4: (lv_item_4_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12536:5: lv_item_4_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getContainsAccess().getItemInsideBracketsExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_item_4_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getContainsRule());
              					}
              					set(
              						current,
              						"item",
              						lv_item_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getContainsAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleContains"


    // $ANTLR start "entryRuleStartsWith"
    // InternalGitHubActionsParser.g:12561:1: entryRuleStartsWith returns [EObject current=null] : iv_ruleStartsWith= ruleStartsWith EOF ;
    public final EObject entryRuleStartsWith() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStartsWith = null;


        try {
            // InternalGitHubActionsParser.g:12561:51: (iv_ruleStartsWith= ruleStartsWith EOF )
            // InternalGitHubActionsParser.g:12562:2: iv_ruleStartsWith= ruleStartsWith EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartsWithRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStartsWith=ruleStartsWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStartsWith; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStartsWith"


    // $ANTLR start "ruleStartsWith"
    // InternalGitHubActionsParser.g:12568:1: ruleStartsWith returns [EObject current=null] : (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleStartsWith() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_searchString_2_0 = null;

        EObject lv_searchValue_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12574:2: ( (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12575:2: (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12575:2: (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:12576:3: otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,StartsWith,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStartsWithAccess().getStartsWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStartsWithAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12584:3: ( (lv_searchString_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12585:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12585:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12586:5: lv_searchString_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartsWithAccess().getSearchStringInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_106);
            lv_searchString_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartsWithRule());
              					}
              					set(
              						current,
              						"searchString",
              						lv_searchString_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getStartsWithAccess().getCommaKeyword_3());
              		
            }
            // InternalGitHubActionsParser.g:12607:3: ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12608:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12608:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12609:5: lv_searchValue_4_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartsWithAccess().getSearchValueInsideBracketsExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_searchValue_4_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartsWithRule());
              					}
              					set(
              						current,
              						"searchValue",
              						lv_searchValue_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getStartsWithAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStartsWith"


    // $ANTLR start "entryRuleEndsWith"
    // InternalGitHubActionsParser.g:12634:1: entryRuleEndsWith returns [EObject current=null] : iv_ruleEndsWith= ruleEndsWith EOF ;
    public final EObject entryRuleEndsWith() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEndsWith = null;


        try {
            // InternalGitHubActionsParser.g:12634:49: (iv_ruleEndsWith= ruleEndsWith EOF )
            // InternalGitHubActionsParser.g:12635:2: iv_ruleEndsWith= ruleEndsWith EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEndsWithRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEndsWith=ruleEndsWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEndsWith; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEndsWith"


    // $ANTLR start "ruleEndsWith"
    // InternalGitHubActionsParser.g:12641:1: ruleEndsWith returns [EObject current=null] : (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleEndsWith() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_searchString_2_0 = null;

        EObject lv_searchValue_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12647:2: ( (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12648:2: (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12648:2: (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:12649:3: otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,EndsWith,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getEndsWithAccess().getEndsWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEndsWithAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12657:3: ( (lv_searchString_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12658:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12658:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12659:5: lv_searchString_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getEndsWithAccess().getSearchStringInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_106);
            lv_searchString_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getEndsWithRule());
              					}
              					set(
              						current,
              						"searchString",
              						lv_searchString_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getEndsWithAccess().getCommaKeyword_3());
              		
            }
            // InternalGitHubActionsParser.g:12680:3: ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12681:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12681:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12682:5: lv_searchValue_4_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getEndsWithAccess().getSearchValueInsideBracketsExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_searchValue_4_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getEndsWithRule());
              					}
              					set(
              						current,
              						"searchValue",
              						lv_searchValue_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getEndsWithAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEndsWith"


    // $ANTLR start "entryRuleFormat"
    // InternalGitHubActionsParser.g:12707:1: entryRuleFormat returns [EObject current=null] : iv_ruleFormat= ruleFormat EOF ;
    public final EObject entryRuleFormat() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFormat = null;


        try {
            // InternalGitHubActionsParser.g:12707:47: (iv_ruleFormat= ruleFormat EOF )
            // InternalGitHubActionsParser.g:12708:2: iv_ruleFormat= ruleFormat EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormatRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFormat=ruleFormat();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormat; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFormat"


    // $ANTLR start "ruleFormat"
    // InternalGitHubActionsParser.g:12714:1: ruleFormat returns [EObject current=null] : (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis ) ;
    public final EObject ruleFormat() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_string_2_0 = null;

        EObject lv_replaceValues_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12720:2: ( (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12721:2: (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12721:2: (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:12722:3: otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Format,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFormatAccess().getFormatKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFormatAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12730:3: ( (lv_string_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12731:4: (lv_string_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12731:4: (lv_string_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12732:5: lv_string_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFormatAccess().getStringInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_string_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFormatRule());
              					}
              					set(
              						current,
              						"string",
              						lv_string_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalGitHubActionsParser.g:12749:3: (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==Comma) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:12750:4: otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getFormatAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalGitHubActionsParser.g:12754:4: ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) )
            	    // InternalGitHubActionsParser.g:12755:5: (lv_replaceValues_4_0= ruleInsideBracketsExpression )
            	    {
            	    // InternalGitHubActionsParser.g:12755:5: (lv_replaceValues_4_0= ruleInsideBracketsExpression )
            	    // InternalGitHubActionsParser.g:12756:6: lv_replaceValues_4_0= ruleInsideBracketsExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFormatAccess().getReplaceValuesInsideBracketsExpressionParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_107);
            	    lv_replaceValues_4_0=ruleInsideBracketsExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFormatRule());
            	      						}
            	      						add(
            	      							current,
            	      							"replaceValues",
            	      							lv_replaceValues_4_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getFormatAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFormat"


    // $ANTLR start "entryRuleJoin"
    // InternalGitHubActionsParser.g:12782:1: entryRuleJoin returns [EObject current=null] : iv_ruleJoin= ruleJoin EOF ;
    public final EObject entryRuleJoin() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJoin = null;


        try {
            // InternalGitHubActionsParser.g:12782:45: (iv_ruleJoin= ruleJoin EOF )
            // InternalGitHubActionsParser.g:12783:2: iv_ruleJoin= ruleJoin EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoin=ruleJoin();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoin; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoin"


    // $ANTLR start "ruleJoin"
    // InternalGitHubActionsParser.g:12789:1: ruleJoin returns [EObject current=null] : (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleJoin() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_array_2_0 = null;

        EObject lv_sep_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12795:2: ( (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12796:2: (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12796:2: (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:12797:3: otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Join,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJoinKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getJoinAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12805:3: ( (lv_array_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12806:4: (lv_array_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12806:4: (lv_array_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12807:5: lv_array_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJoinAccess().getArrayInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_107);
            lv_array_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJoinRule());
              					}
              					set(
              						current,
              						"array",
              						lv_array_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalGitHubActionsParser.g:12824:3: (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==Comma) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // InternalGitHubActionsParser.g:12825:4: otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) )
                    {
                    otherlv_3=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getJoinAccess().getCommaKeyword_3_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:12829:4: ( (lv_sep_4_0= ruleInsideBracketsExpression ) )
                    // InternalGitHubActionsParser.g:12830:5: (lv_sep_4_0= ruleInsideBracketsExpression )
                    {
                    // InternalGitHubActionsParser.g:12830:5: (lv_sep_4_0= ruleInsideBracketsExpression )
                    // InternalGitHubActionsParser.g:12831:6: lv_sep_4_0= ruleInsideBracketsExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getJoinAccess().getSepInsideBracketsExpressionParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_104);
                    lv_sep_4_0=ruleInsideBracketsExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getJoinRule());
                      						}
                      						set(
                      							current,
                      							"sep",
                      							lv_sep_4_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getJoinAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoin"


    // $ANTLR start "entryRuleToJSON"
    // InternalGitHubActionsParser.g:12857:1: entryRuleToJSON returns [EObject current=null] : iv_ruleToJSON= ruleToJSON EOF ;
    public final EObject entryRuleToJSON() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleToJSON = null;


        try {
            // InternalGitHubActionsParser.g:12857:47: (iv_ruleToJSON= ruleToJSON EOF )
            // InternalGitHubActionsParser.g:12858:2: iv_ruleToJSON= ruleToJSON EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getToJSONRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleToJSON=ruleToJSON();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleToJSON; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleToJSON"


    // $ANTLR start "ruleToJSON"
    // InternalGitHubActionsParser.g:12864:1: ruleToJSON returns [EObject current=null] : (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleToJSON() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12870:2: ( (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12871:2: (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12871:2: (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:12872:3: otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,ToJSON,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getToJSONAccess().getToJSONKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getToJSONAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12880:3: ( (lv_value_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12881:4: (lv_value_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12881:4: (lv_value_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12882:5: lv_value_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getToJSONAccess().getValueInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_value_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getToJSONRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getToJSONAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleToJSON"


    // $ANTLR start "entryRuleFromJSON"
    // InternalGitHubActionsParser.g:12907:1: entryRuleFromJSON returns [EObject current=null] : iv_ruleFromJSON= ruleFromJSON EOF ;
    public final EObject entryRuleFromJSON() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromJSON = null;


        try {
            // InternalGitHubActionsParser.g:12907:49: (iv_ruleFromJSON= ruleFromJSON EOF )
            // InternalGitHubActionsParser.g:12908:2: iv_ruleFromJSON= ruleFromJSON EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromJSONRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromJSON=ruleFromJSON();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromJSON; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromJSON"


    // $ANTLR start "ruleFromJSON"
    // InternalGitHubActionsParser.g:12914:1: ruleFromJSON returns [EObject current=null] : (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFromJSON() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12920:2: ( (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12921:2: (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12921:2: (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:12922:3: otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,FromJSON,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFromJSONAccess().getFromJSONKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFromJSONAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12930:3: ( (lv_value_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12931:4: (lv_value_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12931:4: (lv_value_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12932:5: lv_value_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromJSONAccess().getValueInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_value_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromJSONRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFromJSONAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromJSON"


    // $ANTLR start "entryRuleHashFiles"
    // InternalGitHubActionsParser.g:12957:1: entryRuleHashFiles returns [EObject current=null] : iv_ruleHashFiles= ruleHashFiles EOF ;
    public final EObject entryRuleHashFiles() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHashFiles = null;


        try {
            // InternalGitHubActionsParser.g:12957:50: (iv_ruleHashFiles= ruleHashFiles EOF )
            // InternalGitHubActionsParser.g:12958:2: iv_ruleHashFiles= ruleHashFiles EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHashFilesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHashFiles=ruleHashFiles();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHashFiles; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleHashFiles"


    // $ANTLR start "ruleHashFiles"
    // InternalGitHubActionsParser.g:12964:1: ruleHashFiles returns [EObject current=null] : (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleHashFiles() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_path_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:12970:2: ( (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:12971:2: (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:12971:2: (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:12972:3: otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,HashFiles,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getHashFilesAccess().getHashFilesKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_96); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getHashFilesAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:12980:3: ( (lv_path_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:12981:4: (lv_path_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:12981:4: (lv_path_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:12982:5: lv_path_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getHashFilesAccess().getPathInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_104);
            lv_path_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getHashFilesRule());
              					}
              					set(
              						current,
              						"path",
              						lv_path_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getHashFilesAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleHashFiles"


    // $ANTLR start "entryRuleSuccess"
    // InternalGitHubActionsParser.g:13007:1: entryRuleSuccess returns [EObject current=null] : iv_ruleSuccess= ruleSuccess EOF ;
    public final EObject entryRuleSuccess() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSuccess = null;


        try {
            // InternalGitHubActionsParser.g:13007:48: (iv_ruleSuccess= ruleSuccess EOF )
            // InternalGitHubActionsParser.g:13008:2: iv_ruleSuccess= ruleSuccess EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSuccessRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSuccess=ruleSuccess();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSuccess; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSuccess"


    // $ANTLR start "ruleSuccess"
    // InternalGitHubActionsParser.g:13014:1: ruleSuccess returns [EObject current=null] : ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleSuccess() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13020:2: ( ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:13021:2: ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:13021:2: ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:13022:3: () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:13022:3: ()
            // InternalGitHubActionsParser.g:13023:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSuccessAccess().getSuccessAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Success,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSuccessAccess().getSuccessKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getSuccessAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSuccessAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSuccess"


    // $ANTLR start "entryRuleAlways"
    // InternalGitHubActionsParser.g:13048:1: entryRuleAlways returns [EObject current=null] : iv_ruleAlways= ruleAlways EOF ;
    public final EObject entryRuleAlways() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAlways = null;


        try {
            // InternalGitHubActionsParser.g:13048:47: (iv_ruleAlways= ruleAlways EOF )
            // InternalGitHubActionsParser.g:13049:2: iv_ruleAlways= ruleAlways EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAlwaysRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAlways=ruleAlways();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAlways; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAlways"


    // $ANTLR start "ruleAlways"
    // InternalGitHubActionsParser.g:13055:1: ruleAlways returns [EObject current=null] : ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleAlways() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13061:2: ( ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:13062:2: ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:13062:2: ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:13063:3: () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:13063:3: ()
            // InternalGitHubActionsParser.g:13064:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAlwaysAccess().getAlwaysAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Always,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getAlwaysAccess().getAlwaysKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getAlwaysAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getAlwaysAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAlways"


    // $ANTLR start "entryRuleCancelled"
    // InternalGitHubActionsParser.g:13089:1: entryRuleCancelled returns [EObject current=null] : iv_ruleCancelled= ruleCancelled EOF ;
    public final EObject entryRuleCancelled() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCancelled = null;


        try {
            // InternalGitHubActionsParser.g:13089:50: (iv_ruleCancelled= ruleCancelled EOF )
            // InternalGitHubActionsParser.g:13090:2: iv_ruleCancelled= ruleCancelled EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCancelledRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCancelled=ruleCancelled();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCancelled; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCancelled"


    // $ANTLR start "ruleCancelled"
    // InternalGitHubActionsParser.g:13096:1: ruleCancelled returns [EObject current=null] : ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleCancelled() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13102:2: ( ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:13103:2: ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:13103:2: ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:13104:3: () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:13104:3: ()
            // InternalGitHubActionsParser.g:13105:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCancelledAccess().getCancelledAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Cancelled,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCancelledAccess().getCancelledKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCancelledAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getCancelledAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCancelled"


    // $ANTLR start "entryRuleFailure"
    // InternalGitHubActionsParser.g:13130:1: entryRuleFailure returns [EObject current=null] : iv_ruleFailure= ruleFailure EOF ;
    public final EObject entryRuleFailure() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFailure = null;


        try {
            // InternalGitHubActionsParser.g:13130:48: (iv_ruleFailure= ruleFailure EOF )
            // InternalGitHubActionsParser.g:13131:2: iv_ruleFailure= ruleFailure EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFailureRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFailure=ruleFailure();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFailure; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFailure"


    // $ANTLR start "ruleFailure"
    // InternalGitHubActionsParser.g:13137:1: ruleFailure returns [EObject current=null] : ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleFailure() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13143:2: ( ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:13144:2: ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:13144:2: ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:13145:3: () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:13145:3: ()
            // InternalGitHubActionsParser.g:13146:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFailureAccess().getFailureAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Failure,FOLLOW_105); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFailureAccess().getFailureKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_104); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getFailureAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFailureAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFailure"


    // $ANTLR start "ruleCOMPARISON_OP"
    // InternalGitHubActionsParser.g:13171:1: ruleCOMPARISON_OP returns [Enumerator current=null] : ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) ) ;
    public final Enumerator ruleCOMPARISON_OP() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13177:2: ( ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) ) )
            // InternalGitHubActionsParser.g:13178:2: ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) )
            {
            // InternalGitHubActionsParser.g:13178:2: ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) )
            int alt206=4;
            switch ( input.LA(1) ) {
            case GreaterThanSign:
                {
                alt206=1;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt206=2;
                }
                break;
            case LessThanSign:
                {
                alt206=3;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt206=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }

            switch (alt206) {
                case 1 :
                    // InternalGitHubActionsParser.g:13179:3: (enumLiteral_0= GreaterThanSign )
                    {
                    // InternalGitHubActionsParser.g:13179:3: (enumLiteral_0= GreaterThanSign )
                    // InternalGitHubActionsParser.g:13180:4: enumLiteral_0= GreaterThanSign
                    {
                    enumLiteral_0=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getCOMPARISON_OPAccess().getGTEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13187:3: (enumLiteral_1= GreaterThanSignEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:13187:3: (enumLiteral_1= GreaterThanSignEqualsSign )
                    // InternalGitHubActionsParser.g:13188:4: enumLiteral_1= GreaterThanSignEqualsSign
                    {
                    enumLiteral_1=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getGTEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getCOMPARISON_OPAccess().getGTEEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:13195:3: (enumLiteral_2= LessThanSign )
                    {
                    // InternalGitHubActionsParser.g:13195:3: (enumLiteral_2= LessThanSign )
                    // InternalGitHubActionsParser.g:13196:4: enumLiteral_2= LessThanSign
                    {
                    enumLiteral_2=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getLTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getCOMPARISON_OPAccess().getLTEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:13203:3: (enumLiteral_3= LessThanSignEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:13203:3: (enumLiteral_3= LessThanSignEqualsSign )
                    // InternalGitHubActionsParser.g:13204:4: enumLiteral_3= LessThanSignEqualsSign
                    {
                    enumLiteral_3=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getLTEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getCOMPARISON_OPAccess().getLTEEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCOMPARISON_OP"


    // $ANTLR start "ruleEQUALITY_OP"
    // InternalGitHubActionsParser.g:13214:1: ruleEQUALITY_OP returns [Enumerator current=null] : ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) ) ;
    public final Enumerator ruleEQUALITY_OP() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13220:2: ( ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) ) )
            // InternalGitHubActionsParser.g:13221:2: ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) )
            {
            // InternalGitHubActionsParser.g:13221:2: ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==EqualsSignEqualsSign) ) {
                alt207=1;
            }
            else if ( (LA207_0==ExclamationMarkEqualsSign) ) {
                alt207=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    // InternalGitHubActionsParser.g:13222:3: (enumLiteral_0= EqualsSignEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:13222:3: (enumLiteral_0= EqualsSignEqualsSign )
                    // InternalGitHubActionsParser.g:13223:4: enumLiteral_0= EqualsSignEqualsSign
                    {
                    enumLiteral_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEQUALITY_OPAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEQUALITY_OPAccess().getEQUALSEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13230:3: (enumLiteral_1= ExclamationMarkEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:13230:3: (enumLiteral_1= ExclamationMarkEqualsSign )
                    // InternalGitHubActionsParser.g:13231:4: enumLiteral_1= ExclamationMarkEqualsSign
                    {
                    enumLiteral_1=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEQUALITY_OPAccess().getNOT_EQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEQUALITY_OPAccess().getNOT_EQUALSEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEQUALITY_OP"


    // $ANTLR start "ruleCONTEXT"
    // InternalGitHubActionsParser.g:13241:1: ruleCONTEXT returns [Enumerator current=null] : ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) ) ;
    public final Enumerator ruleCONTEXT() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13247:2: ( ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) ) )
            // InternalGitHubActionsParser.g:13248:2: ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) )
            {
            // InternalGitHubActionsParser.g:13248:2: ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) )
            int alt208=12;
            switch ( input.LA(1) ) {
            case Github:
                {
                alt208=1;
                }
                break;
            case Env:
                {
                alt208=2;
                }
                break;
            case Vars:
                {
                alt208=3;
                }
                break;
            case Job:
                {
                alt208=4;
                }
                break;
            case Jobs:
                {
                alt208=5;
                }
                break;
            case Steps:
                {
                alt208=6;
                }
                break;
            case Runner:
                {
                alt208=7;
                }
                break;
            case Secrets:
                {
                alt208=8;
                }
                break;
            case Strategy:
                {
                alt208=9;
                }
                break;
            case Matrix:
                {
                alt208=10;
                }
                break;
            case Needs:
                {
                alt208=11;
                }
                break;
            case Inputs:
                {
                alt208=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // InternalGitHubActionsParser.g:13249:3: (enumLiteral_0= Github )
                    {
                    // InternalGitHubActionsParser.g:13249:3: (enumLiteral_0= Github )
                    // InternalGitHubActionsParser.g:13250:4: enumLiteral_0= Github
                    {
                    enumLiteral_0=(Token)match(input,Github,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getGITHUBEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getCONTEXTAccess().getGITHUBEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13257:3: (enumLiteral_1= Env )
                    {
                    // InternalGitHubActionsParser.g:13257:3: (enumLiteral_1= Env )
                    // InternalGitHubActionsParser.g:13258:4: enumLiteral_1= Env
                    {
                    enumLiteral_1=(Token)match(input,Env,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getENVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getCONTEXTAccess().getENVEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:13265:3: (enumLiteral_2= Vars )
                    {
                    // InternalGitHubActionsParser.g:13265:3: (enumLiteral_2= Vars )
                    // InternalGitHubActionsParser.g:13266:4: enumLiteral_2= Vars
                    {
                    enumLiteral_2=(Token)match(input,Vars,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getVARSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getCONTEXTAccess().getVARSEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:13273:3: (enumLiteral_3= Job )
                    {
                    // InternalGitHubActionsParser.g:13273:3: (enumLiteral_3= Job )
                    // InternalGitHubActionsParser.g:13274:4: enumLiteral_3= Job
                    {
                    enumLiteral_3=(Token)match(input,Job,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getJOBEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getCONTEXTAccess().getJOBEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:13281:3: (enumLiteral_4= Jobs )
                    {
                    // InternalGitHubActionsParser.g:13281:3: (enumLiteral_4= Jobs )
                    // InternalGitHubActionsParser.g:13282:4: enumLiteral_4= Jobs
                    {
                    enumLiteral_4=(Token)match(input,Jobs,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getJOBSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getCONTEXTAccess().getJOBSEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:13289:3: (enumLiteral_5= Steps )
                    {
                    // InternalGitHubActionsParser.g:13289:3: (enumLiteral_5= Steps )
                    // InternalGitHubActionsParser.g:13290:4: enumLiteral_5= Steps
                    {
                    enumLiteral_5=(Token)match(input,Steps,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getSTEPSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getCONTEXTAccess().getSTEPSEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:13297:3: (enumLiteral_6= Runner )
                    {
                    // InternalGitHubActionsParser.g:13297:3: (enumLiteral_6= Runner )
                    // InternalGitHubActionsParser.g:13298:4: enumLiteral_6= Runner
                    {
                    enumLiteral_6=(Token)match(input,Runner,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getRUNNEREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getCONTEXTAccess().getRUNNEREnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:13305:3: (enumLiteral_7= Secrets )
                    {
                    // InternalGitHubActionsParser.g:13305:3: (enumLiteral_7= Secrets )
                    // InternalGitHubActionsParser.g:13306:4: enumLiteral_7= Secrets
                    {
                    enumLiteral_7=(Token)match(input,Secrets,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getSECRETSEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getCONTEXTAccess().getSECRETSEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:13313:3: (enumLiteral_8= Strategy )
                    {
                    // InternalGitHubActionsParser.g:13313:3: (enumLiteral_8= Strategy )
                    // InternalGitHubActionsParser.g:13314:4: enumLiteral_8= Strategy
                    {
                    enumLiteral_8=(Token)match(input,Strategy,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getSTRATEGYEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getCONTEXTAccess().getSTRATEGYEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:13321:3: (enumLiteral_9= Matrix )
                    {
                    // InternalGitHubActionsParser.g:13321:3: (enumLiteral_9= Matrix )
                    // InternalGitHubActionsParser.g:13322:4: enumLiteral_9= Matrix
                    {
                    enumLiteral_9=(Token)match(input,Matrix,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getMATRIXEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getCONTEXTAccess().getMATRIXEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:13329:3: (enumLiteral_10= Needs )
                    {
                    // InternalGitHubActionsParser.g:13329:3: (enumLiteral_10= Needs )
                    // InternalGitHubActionsParser.g:13330:4: enumLiteral_10= Needs
                    {
                    enumLiteral_10=(Token)match(input,Needs,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getNEEDSEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getCONTEXTAccess().getNEEDSEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:13337:3: (enumLiteral_11= Inputs )
                    {
                    // InternalGitHubActionsParser.g:13337:3: (enumLiteral_11= Inputs )
                    // InternalGitHubActionsParser.g:13338:4: enumLiteral_11= Inputs
                    {
                    enumLiteral_11=(Token)match(input,Inputs,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getINPUTSEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getCONTEXTAccess().getINPUTSEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCONTEXT"


    // $ANTLR start "ruleTYPE"
    // InternalGitHubActionsParser.g:13348:1: ruleTYPE returns [Enumerator current=null] : ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) ) ;
    public final Enumerator ruleTYPE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13354:2: ( ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) ) )
            // InternalGitHubActionsParser.g:13355:2: ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) )
            {
            // InternalGitHubActionsParser.g:13355:2: ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) )
            int alt209=5;
            switch ( input.LA(1) ) {
            case Boolean:
                {
                alt209=1;
                }
                break;
            case Number:
                {
                alt209=2;
                }
                break;
            case String:
                {
                alt209=3;
                }
                break;
            case Environment:
                {
                alt209=4;
                }
                break;
            case Choice:
                {
                alt209=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 209, 0, input);

                throw nvae;
            }

            switch (alt209) {
                case 1 :
                    // InternalGitHubActionsParser.g:13356:3: (enumLiteral_0= Boolean )
                    {
                    // InternalGitHubActionsParser.g:13356:3: (enumLiteral_0= Boolean )
                    // InternalGitHubActionsParser.g:13357:4: enumLiteral_0= Boolean
                    {
                    enumLiteral_0=(Token)match(input,Boolean,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getBOOLEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getTYPEAccess().getBOOLEANEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13364:3: (enumLiteral_1= Number )
                    {
                    // InternalGitHubActionsParser.g:13364:3: (enumLiteral_1= Number )
                    // InternalGitHubActionsParser.g:13365:4: enumLiteral_1= Number
                    {
                    enumLiteral_1=(Token)match(input,Number,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getNUMBEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getTYPEAccess().getNUMBEREnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:13372:3: (enumLiteral_2= String )
                    {
                    // InternalGitHubActionsParser.g:13372:3: (enumLiteral_2= String )
                    // InternalGitHubActionsParser.g:13373:4: enumLiteral_2= String
                    {
                    enumLiteral_2=(Token)match(input,String,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getSTRINGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getTYPEAccess().getSTRINGEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:13380:3: (enumLiteral_3= Environment )
                    {
                    // InternalGitHubActionsParser.g:13380:3: (enumLiteral_3= Environment )
                    // InternalGitHubActionsParser.g:13381:4: enumLiteral_3= Environment
                    {
                    enumLiteral_3=(Token)match(input,Environment,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getENVIRONMENTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getTYPEAccess().getENVIRONMENTEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:13388:3: (enumLiteral_4= Choice )
                    {
                    // InternalGitHubActionsParser.g:13388:3: (enumLiteral_4= Choice )
                    // InternalGitHubActionsParser.g:13389:4: enumLiteral_4= Choice
                    {
                    enumLiteral_4=(Token)match(input,Choice,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getCHOICEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getTYPEAccess().getCHOICEEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTYPE"


    // $ANTLR start "ruleWEBHOOK_ACTIVITY_TYPE"
    // InternalGitHubActionsParser.g:13399:1: ruleWEBHOOK_ACTIVITY_TYPE returns [Enumerator current=null] : ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) ) ;
    public final Enumerator ruleWEBHOOK_ACTIVITY_TYPE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13405:2: ( ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) ) )
            // InternalGitHubActionsParser.g:13406:2: ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) )
            {
            // InternalGitHubActionsParser.g:13406:2: ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) )
            int alt210=19;
            switch ( input.LA(1) ) {
            case Assigned:
                {
                alt210=1;
                }
                break;
            case Auto_merge_disabled:
                {
                alt210=2;
                }
                break;
            case Auto_merge_enabled:
                {
                alt210=3;
                }
                break;
            case Closed:
                {
                alt210=4;
                }
                break;
            case Converted_to_draft:
                {
                alt210=5;
                }
                break;
            case Edited:
                {
                alt210=6;
                }
                break;
            case Labeled:
                {
                alt210=7;
                }
                break;
            case Locked:
                {
                alt210=8;
                }
                break;
            case Opened:
                {
                alt210=9;
                }
                break;
            case Ready_for_review:
                {
                alt210=10;
                }
                break;
            case Reopened:
                {
                alt210=11;
                }
                break;
            case Review_request_removed:
                {
                alt210=12;
                }
                break;
            case Review_requested:
                {
                alt210=13;
                }
                break;
            case Synchronize:
                {
                alt210=14;
                }
                break;
            case Unassigned:
                {
                alt210=15;
                }
                break;
            case Unlabeled:
                {
                alt210=16;
                }
                break;
            case Unlocked:
                {
                alt210=17;
                }
                break;
            case Created:
                {
                alt210=18;
                }
                break;
            case Deleted:
                {
                alt210=19;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);

                throw nvae;
            }

            switch (alt210) {
                case 1 :
                    // InternalGitHubActionsParser.g:13407:3: (enumLiteral_0= Assigned )
                    {
                    // InternalGitHubActionsParser.g:13407:3: (enumLiteral_0= Assigned )
                    // InternalGitHubActionsParser.g:13408:4: enumLiteral_0= Assigned
                    {
                    enumLiteral_0=(Token)match(input,Assigned,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getASSIGNEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getASSIGNEDEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13415:3: (enumLiteral_1= Auto_merge_disabled )
                    {
                    // InternalGitHubActionsParser.g:13415:3: (enumLiteral_1= Auto_merge_disabled )
                    // InternalGitHubActionsParser.g:13416:4: enumLiteral_1= Auto_merge_disabled
                    {
                    enumLiteral_1=(Token)match(input,Auto_merge_disabled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_DISABLEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_DISABLEDEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:13423:3: (enumLiteral_2= Auto_merge_enabled )
                    {
                    // InternalGitHubActionsParser.g:13423:3: (enumLiteral_2= Auto_merge_enabled )
                    // InternalGitHubActionsParser.g:13424:4: enumLiteral_2= Auto_merge_enabled
                    {
                    enumLiteral_2=(Token)match(input,Auto_merge_enabled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_ENABLEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_ENABLEDEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:13431:3: (enumLiteral_3= Closed )
                    {
                    // InternalGitHubActionsParser.g:13431:3: (enumLiteral_3= Closed )
                    // InternalGitHubActionsParser.g:13432:4: enumLiteral_3= Closed
                    {
                    enumLiteral_3=(Token)match(input,Closed,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCLOSEDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCLOSEDEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:13439:3: (enumLiteral_4= Converted_to_draft )
                    {
                    // InternalGitHubActionsParser.g:13439:3: (enumLiteral_4= Converted_to_draft )
                    // InternalGitHubActionsParser.g:13440:4: enumLiteral_4= Converted_to_draft
                    {
                    enumLiteral_4=(Token)match(input,Converted_to_draft,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCONVERTED_TO_DRAFTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCONVERTED_TO_DRAFTEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:13447:3: (enumLiteral_5= Edited )
                    {
                    // InternalGitHubActionsParser.g:13447:3: (enumLiteral_5= Edited )
                    // InternalGitHubActionsParser.g:13448:4: enumLiteral_5= Edited
                    {
                    enumLiteral_5=(Token)match(input,Edited,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getEDITEDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getEDITEDEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:13455:3: (enumLiteral_6= Labeled )
                    {
                    // InternalGitHubActionsParser.g:13455:3: (enumLiteral_6= Labeled )
                    // InternalGitHubActionsParser.g:13456:4: enumLiteral_6= Labeled
                    {
                    enumLiteral_6=(Token)match(input,Labeled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLABELEDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLABELEDEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:13463:3: (enumLiteral_7= Locked )
                    {
                    // InternalGitHubActionsParser.g:13463:3: (enumLiteral_7= Locked )
                    // InternalGitHubActionsParser.g:13464:4: enumLiteral_7= Locked
                    {
                    enumLiteral_7=(Token)match(input,Locked,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLOCKEDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLOCKEDEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:13471:3: (enumLiteral_8= Opened )
                    {
                    // InternalGitHubActionsParser.g:13471:3: (enumLiteral_8= Opened )
                    // InternalGitHubActionsParser.g:13472:4: enumLiteral_8= Opened
                    {
                    enumLiteral_8=(Token)match(input,Opened,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getOPENEDEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getOPENEDEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:13479:3: (enumLiteral_9= Ready_for_review )
                    {
                    // InternalGitHubActionsParser.g:13479:3: (enumLiteral_9= Ready_for_review )
                    // InternalGitHubActionsParser.g:13480:4: enumLiteral_9= Ready_for_review
                    {
                    enumLiteral_9=(Token)match(input,Ready_for_review,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREADY_FOR_REVIEWEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREADY_FOR_REVIEWEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:13487:3: (enumLiteral_10= Reopened )
                    {
                    // InternalGitHubActionsParser.g:13487:3: (enumLiteral_10= Reopened )
                    // InternalGitHubActionsParser.g:13488:4: enumLiteral_10= Reopened
                    {
                    enumLiteral_10=(Token)match(input,Reopened,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREOPENEDEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREOPENEDEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:13495:3: (enumLiteral_11= Review_request_removed )
                    {
                    // InternalGitHubActionsParser.g:13495:3: (enumLiteral_11= Review_request_removed )
                    // InternalGitHubActionsParser.g:13496:4: enumLiteral_11= Review_request_removed
                    {
                    enumLiteral_11=(Token)match(input,Review_request_removed,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUEST_REMOVEDEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUEST_REMOVEDEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalGitHubActionsParser.g:13503:3: (enumLiteral_12= Review_requested )
                    {
                    // InternalGitHubActionsParser.g:13503:3: (enumLiteral_12= Review_requested )
                    // InternalGitHubActionsParser.g:13504:4: enumLiteral_12= Review_requested
                    {
                    enumLiteral_12=(Token)match(input,Review_requested,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUESTEDEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUESTEDEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalGitHubActionsParser.g:13511:3: (enumLiteral_13= Synchronize )
                    {
                    // InternalGitHubActionsParser.g:13511:3: (enumLiteral_13= Synchronize )
                    // InternalGitHubActionsParser.g:13512:4: enumLiteral_13= Synchronize
                    {
                    enumLiteral_13=(Token)match(input,Synchronize,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getSYNCHRONIZEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_13, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getSYNCHRONIZEEnumLiteralDeclaration_13());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalGitHubActionsParser.g:13519:3: (enumLiteral_14= Unassigned )
                    {
                    // InternalGitHubActionsParser.g:13519:3: (enumLiteral_14= Unassigned )
                    // InternalGitHubActionsParser.g:13520:4: enumLiteral_14= Unassigned
                    {
                    enumLiteral_14=(Token)match(input,Unassigned,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNASSIGNEDEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_14, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNASSIGNEDEnumLiteralDeclaration_14());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalGitHubActionsParser.g:13527:3: (enumLiteral_15= Unlabeled )
                    {
                    // InternalGitHubActionsParser.g:13527:3: (enumLiteral_15= Unlabeled )
                    // InternalGitHubActionsParser.g:13528:4: enumLiteral_15= Unlabeled
                    {
                    enumLiteral_15=(Token)match(input,Unlabeled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLABELEDEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_15, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLABELEDEnumLiteralDeclaration_15());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalGitHubActionsParser.g:13535:3: (enumLiteral_16= Unlocked )
                    {
                    // InternalGitHubActionsParser.g:13535:3: (enumLiteral_16= Unlocked )
                    // InternalGitHubActionsParser.g:13536:4: enumLiteral_16= Unlocked
                    {
                    enumLiteral_16=(Token)match(input,Unlocked,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLOCKEDEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_16, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLOCKEDEnumLiteralDeclaration_16());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalGitHubActionsParser.g:13543:3: (enumLiteral_17= Created )
                    {
                    // InternalGitHubActionsParser.g:13543:3: (enumLiteral_17= Created )
                    // InternalGitHubActionsParser.g:13544:4: enumLiteral_17= Created
                    {
                    enumLiteral_17=(Token)match(input,Created,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCREATEDEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_17, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCREATEDEnumLiteralDeclaration_17());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalGitHubActionsParser.g:13551:3: (enumLiteral_18= Deleted )
                    {
                    // InternalGitHubActionsParser.g:13551:3: (enumLiteral_18= Deleted )
                    // InternalGitHubActionsParser.g:13552:4: enumLiteral_18= Deleted
                    {
                    enumLiteral_18=(Token)match(input,Deleted,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getDELETEDEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_18, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getDELETEDEnumLiteralDeclaration_18());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWEBHOOK_ACTIVITY_TYPE"


    // $ANTLR start "ruleEVENT"
    // InternalGitHubActionsParser.g:13562:1: ruleEVENT returns [Enumerator current=null] : ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) ) ;
    public final Enumerator ruleEVENT() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;
        Token enumLiteral_20=null;
        Token enumLiteral_21=null;
        Token enumLiteral_22=null;
        Token enumLiteral_23=null;
        Token enumLiteral_24=null;
        Token enumLiteral_25=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13568:2: ( ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) ) )
            // InternalGitHubActionsParser.g:13569:2: ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) )
            {
            // InternalGitHubActionsParser.g:13569:2: ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) )
            int alt211=26;
            switch ( input.LA(1) ) {
            case Branch_protection_rule:
                {
                alt211=1;
                }
                break;
            case Check_run:
                {
                alt211=2;
                }
                break;
            case Check_suite:
                {
                alt211=3;
                }
                break;
            case Create:
                {
                alt211=4;
                }
                break;
            case Delete:
                {
                alt211=5;
                }
                break;
            case Deployment:
                {
                alt211=6;
                }
                break;
            case Deployment_status:
                {
                alt211=7;
                }
                break;
            case Discussion:
                {
                alt211=8;
                }
                break;
            case Fork:
                {
                alt211=9;
                }
                break;
            case Gollum:
                {
                alt211=10;
                }
                break;
            case Issues:
                {
                alt211=11;
                }
                break;
            case Label:
                {
                alt211=12;
                }
                break;
            case Merge_group:
                {
                alt211=13;
                }
                break;
            case Milestone:
                {
                alt211=14;
                }
                break;
            case Page_build:
                {
                alt211=15;
                }
                break;
            case Project:
                {
                alt211=16;
                }
                break;
            case Project_card:
                {
                alt211=17;
                }
                break;
            case Project_column:
                {
                alt211=18;
                }
                break;
            case Public:
                {
                alt211=19;
                }
                break;
            case Pull_request_review:
                {
                alt211=20;
                }
                break;
            case Pull_request_review_comment:
                {
                alt211=21;
                }
                break;
            case Registry_package:
                {
                alt211=22;
                }
                break;
            case Release:
                {
                alt211=23;
                }
                break;
            case Repository_dispatch:
                {
                alt211=24;
                }
                break;
            case Watch:
                {
                alt211=25;
                }
                break;
            case Status:
                {
                alt211=26;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);

                throw nvae;
            }

            switch (alt211) {
                case 1 :
                    // InternalGitHubActionsParser.g:13570:3: (enumLiteral_0= Branch_protection_rule )
                    {
                    // InternalGitHubActionsParser.g:13570:3: (enumLiteral_0= Branch_protection_rule )
                    // InternalGitHubActionsParser.g:13571:4: enumLiteral_0= Branch_protection_rule
                    {
                    enumLiteral_0=(Token)match(input,Branch_protection_rule,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getBRANCH_PROTECTION_RULEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEVENTAccess().getBRANCH_PROTECTION_RULEEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13578:3: (enumLiteral_1= Check_run )
                    {
                    // InternalGitHubActionsParser.g:13578:3: (enumLiteral_1= Check_run )
                    // InternalGitHubActionsParser.g:13579:4: enumLiteral_1= Check_run
                    {
                    enumLiteral_1=(Token)match(input,Check_run,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getCHECK_RUNEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEVENTAccess().getCHECK_RUNEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:13586:3: (enumLiteral_2= Check_suite )
                    {
                    // InternalGitHubActionsParser.g:13586:3: (enumLiteral_2= Check_suite )
                    // InternalGitHubActionsParser.g:13587:4: enumLiteral_2= Check_suite
                    {
                    enumLiteral_2=(Token)match(input,Check_suite,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getCHECK_SUITEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEVENTAccess().getCHECK_SUITEEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:13594:3: (enumLiteral_3= Create )
                    {
                    // InternalGitHubActionsParser.g:13594:3: (enumLiteral_3= Create )
                    // InternalGitHubActionsParser.g:13595:4: enumLiteral_3= Create
                    {
                    enumLiteral_3=(Token)match(input,Create,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getCREATEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEVENTAccess().getCREATEEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:13602:3: (enumLiteral_4= Delete )
                    {
                    // InternalGitHubActionsParser.g:13602:3: (enumLiteral_4= Delete )
                    // InternalGitHubActionsParser.g:13603:4: enumLiteral_4= Delete
                    {
                    enumLiteral_4=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDELETEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getEVENTAccess().getDELETEEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:13610:3: (enumLiteral_5= Deployment )
                    {
                    // InternalGitHubActionsParser.g:13610:3: (enumLiteral_5= Deployment )
                    // InternalGitHubActionsParser.g:13611:4: enumLiteral_5= Deployment
                    {
                    enumLiteral_5=(Token)match(input,Deployment,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDEPLOYMENTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getEVENTAccess().getDEPLOYMENTEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:13618:3: (enumLiteral_6= Deployment_status )
                    {
                    // InternalGitHubActionsParser.g:13618:3: (enumLiteral_6= Deployment_status )
                    // InternalGitHubActionsParser.g:13619:4: enumLiteral_6= Deployment_status
                    {
                    enumLiteral_6=(Token)match(input,Deployment_status,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDEPLOYMENT_STATUSEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getEVENTAccess().getDEPLOYMENT_STATUSEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:13626:3: (enumLiteral_7= Discussion )
                    {
                    // InternalGitHubActionsParser.g:13626:3: (enumLiteral_7= Discussion )
                    // InternalGitHubActionsParser.g:13627:4: enumLiteral_7= Discussion
                    {
                    enumLiteral_7=(Token)match(input,Discussion,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDISCUSSIONEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getEVENTAccess().getDISCUSSIONEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:13634:3: (enumLiteral_8= Fork )
                    {
                    // InternalGitHubActionsParser.g:13634:3: (enumLiteral_8= Fork )
                    // InternalGitHubActionsParser.g:13635:4: enumLiteral_8= Fork
                    {
                    enumLiteral_8=(Token)match(input,Fork,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getFORKEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getEVENTAccess().getFORKEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:13642:3: (enumLiteral_9= Gollum )
                    {
                    // InternalGitHubActionsParser.g:13642:3: (enumLiteral_9= Gollum )
                    // InternalGitHubActionsParser.g:13643:4: enumLiteral_9= Gollum
                    {
                    enumLiteral_9=(Token)match(input,Gollum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getGOLLUMEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getEVENTAccess().getGOLLUMEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:13650:3: (enumLiteral_10= Issues )
                    {
                    // InternalGitHubActionsParser.g:13650:3: (enumLiteral_10= Issues )
                    // InternalGitHubActionsParser.g:13651:4: enumLiteral_10= Issues
                    {
                    enumLiteral_10=(Token)match(input,Issues,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getISSUESEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getEVENTAccess().getISSUESEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:13658:3: (enumLiteral_11= Label )
                    {
                    // InternalGitHubActionsParser.g:13658:3: (enumLiteral_11= Label )
                    // InternalGitHubActionsParser.g:13659:4: enumLiteral_11= Label
                    {
                    enumLiteral_11=(Token)match(input,Label,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getLABELEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getEVENTAccess().getLABELEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalGitHubActionsParser.g:13666:3: (enumLiteral_12= Merge_group )
                    {
                    // InternalGitHubActionsParser.g:13666:3: (enumLiteral_12= Merge_group )
                    // InternalGitHubActionsParser.g:13667:4: enumLiteral_12= Merge_group
                    {
                    enumLiteral_12=(Token)match(input,Merge_group,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getMERGE_GROUPEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getEVENTAccess().getMERGE_GROUPEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalGitHubActionsParser.g:13674:3: (enumLiteral_13= Milestone )
                    {
                    // InternalGitHubActionsParser.g:13674:3: (enumLiteral_13= Milestone )
                    // InternalGitHubActionsParser.g:13675:4: enumLiteral_13= Milestone
                    {
                    enumLiteral_13=(Token)match(input,Milestone,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getMILESTONEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_13, grammarAccess.getEVENTAccess().getMILESTONEEnumLiteralDeclaration_13());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalGitHubActionsParser.g:13682:3: (enumLiteral_14= Page_build )
                    {
                    // InternalGitHubActionsParser.g:13682:3: (enumLiteral_14= Page_build )
                    // InternalGitHubActionsParser.g:13683:4: enumLiteral_14= Page_build
                    {
                    enumLiteral_14=(Token)match(input,Page_build,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPAGE_BUILDEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_14, grammarAccess.getEVENTAccess().getPAGE_BUILDEnumLiteralDeclaration_14());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalGitHubActionsParser.g:13690:3: (enumLiteral_15= Project )
                    {
                    // InternalGitHubActionsParser.g:13690:3: (enumLiteral_15= Project )
                    // InternalGitHubActionsParser.g:13691:4: enumLiteral_15= Project
                    {
                    enumLiteral_15=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPROJECTEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_15, grammarAccess.getEVENTAccess().getPROJECTEnumLiteralDeclaration_15());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalGitHubActionsParser.g:13698:3: (enumLiteral_16= Project_card )
                    {
                    // InternalGitHubActionsParser.g:13698:3: (enumLiteral_16= Project_card )
                    // InternalGitHubActionsParser.g:13699:4: enumLiteral_16= Project_card
                    {
                    enumLiteral_16=(Token)match(input,Project_card,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPROJECT_CARDEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_16, grammarAccess.getEVENTAccess().getPROJECT_CARDEnumLiteralDeclaration_16());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalGitHubActionsParser.g:13706:3: (enumLiteral_17= Project_column )
                    {
                    // InternalGitHubActionsParser.g:13706:3: (enumLiteral_17= Project_column )
                    // InternalGitHubActionsParser.g:13707:4: enumLiteral_17= Project_column
                    {
                    enumLiteral_17=(Token)match(input,Project_column,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPROJECT_COLUMNEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_17, grammarAccess.getEVENTAccess().getPROJECT_COLUMNEnumLiteralDeclaration_17());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalGitHubActionsParser.g:13714:3: (enumLiteral_18= Public )
                    {
                    // InternalGitHubActionsParser.g:13714:3: (enumLiteral_18= Public )
                    // InternalGitHubActionsParser.g:13715:4: enumLiteral_18= Public
                    {
                    enumLiteral_18=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPUBLICEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_18, grammarAccess.getEVENTAccess().getPUBLICEnumLiteralDeclaration_18());
                      			
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalGitHubActionsParser.g:13722:3: (enumLiteral_19= Pull_request_review )
                    {
                    // InternalGitHubActionsParser.g:13722:3: (enumLiteral_19= Pull_request_review )
                    // InternalGitHubActionsParser.g:13723:4: enumLiteral_19= Pull_request_review
                    {
                    enumLiteral_19=(Token)match(input,Pull_request_review,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEWEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_19, grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEWEnumLiteralDeclaration_19());
                      			
                    }

                    }


                    }
                    break;
                case 21 :
                    // InternalGitHubActionsParser.g:13730:3: (enumLiteral_20= Pull_request_review_comment )
                    {
                    // InternalGitHubActionsParser.g:13730:3: (enumLiteral_20= Pull_request_review_comment )
                    // InternalGitHubActionsParser.g:13731:4: enumLiteral_20= Pull_request_review_comment
                    {
                    enumLiteral_20=(Token)match(input,Pull_request_review_comment,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_20, grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_20());
                      			
                    }

                    }


                    }
                    break;
                case 22 :
                    // InternalGitHubActionsParser.g:13738:3: (enumLiteral_21= Registry_package )
                    {
                    // InternalGitHubActionsParser.g:13738:3: (enumLiteral_21= Registry_package )
                    // InternalGitHubActionsParser.g:13739:4: enumLiteral_21= Registry_package
                    {
                    enumLiteral_21=(Token)match(input,Registry_package,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getREGISTRY_PACKAGEEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_21, grammarAccess.getEVENTAccess().getREGISTRY_PACKAGEEnumLiteralDeclaration_21());
                      			
                    }

                    }


                    }
                    break;
                case 23 :
                    // InternalGitHubActionsParser.g:13746:3: (enumLiteral_22= Release )
                    {
                    // InternalGitHubActionsParser.g:13746:3: (enumLiteral_22= Release )
                    // InternalGitHubActionsParser.g:13747:4: enumLiteral_22= Release
                    {
                    enumLiteral_22=(Token)match(input,Release,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getRELEASEEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_22, grammarAccess.getEVENTAccess().getRELEASEEnumLiteralDeclaration_22());
                      			
                    }

                    }


                    }
                    break;
                case 24 :
                    // InternalGitHubActionsParser.g:13754:3: (enumLiteral_23= Repository_dispatch )
                    {
                    // InternalGitHubActionsParser.g:13754:3: (enumLiteral_23= Repository_dispatch )
                    // InternalGitHubActionsParser.g:13755:4: enumLiteral_23= Repository_dispatch
                    {
                    enumLiteral_23=(Token)match(input,Repository_dispatch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getREPOSITORY_DISPATCHEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_23, grammarAccess.getEVENTAccess().getREPOSITORY_DISPATCHEnumLiteralDeclaration_23());
                      			
                    }

                    }


                    }
                    break;
                case 25 :
                    // InternalGitHubActionsParser.g:13762:3: (enumLiteral_24= Watch )
                    {
                    // InternalGitHubActionsParser.g:13762:3: (enumLiteral_24= Watch )
                    // InternalGitHubActionsParser.g:13763:4: enumLiteral_24= Watch
                    {
                    enumLiteral_24=(Token)match(input,Watch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getWATCHEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_24, grammarAccess.getEVENTAccess().getWATCHEnumLiteralDeclaration_24());
                      			
                    }

                    }


                    }
                    break;
                case 26 :
                    // InternalGitHubActionsParser.g:13770:3: (enumLiteral_25= Status )
                    {
                    // InternalGitHubActionsParser.g:13770:3: (enumLiteral_25= Status )
                    // InternalGitHubActionsParser.g:13771:4: enumLiteral_25= Status
                    {
                    enumLiteral_25=(Token)match(input,Status,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getSTATUSEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_25, grammarAccess.getEVENTAccess().getSTATUSEnumLiteralDeclaration_25());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEVENT"


    // $ANTLR start "rulePERMISSION_SCOPE"
    // InternalGitHubActionsParser.g:13781:1: rulePERMISSION_SCOPE returns [Enumerator current=null] : ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) ) ;
    public final Enumerator rulePERMISSION_SCOPE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13787:2: ( ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) ) )
            // InternalGitHubActionsParser.g:13788:2: ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) )
            {
            // InternalGitHubActionsParser.g:13788:2: ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) )
            int alt212=13;
            switch ( input.LA(1) ) {
            case Actions:
                {
                alt212=1;
                }
                break;
            case Checks:
                {
                alt212=2;
                }
                break;
            case Contents:
                {
                alt212=3;
                }
                break;
            case Deployments:
                {
                alt212=4;
                }
                break;
            case Discussions:
                {
                alt212=5;
                }
                break;
            case IdToken:
                {
                alt212=6;
                }
                break;
            case Issues:
                {
                alt212=7;
                }
                break;
            case Packages:
                {
                alt212=8;
                }
                break;
            case Pages:
                {
                alt212=9;
                }
                break;
            case Pull_requests:
                {
                alt212=10;
                }
                break;
            case Repository_projects:
                {
                alt212=11;
                }
                break;
            case Security_events:
                {
                alt212=12;
                }
                break;
            case Statuses:
                {
                alt212=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }

            switch (alt212) {
                case 1 :
                    // InternalGitHubActionsParser.g:13789:3: (enumLiteral_0= Actions )
                    {
                    // InternalGitHubActionsParser.g:13789:3: (enumLiteral_0= Actions )
                    // InternalGitHubActionsParser.g:13790:4: enumLiteral_0= Actions
                    {
                    enumLiteral_0=(Token)match(input,Actions,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getACTIONSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPERMISSION_SCOPEAccess().getACTIONSEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13797:3: (enumLiteral_1= Checks )
                    {
                    // InternalGitHubActionsParser.g:13797:3: (enumLiteral_1= Checks )
                    // InternalGitHubActionsParser.g:13798:4: enumLiteral_1= Checks
                    {
                    enumLiteral_1=(Token)match(input,Checks,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getCHECKSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPERMISSION_SCOPEAccess().getCHECKSEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:13805:3: (enumLiteral_2= Contents )
                    {
                    // InternalGitHubActionsParser.g:13805:3: (enumLiteral_2= Contents )
                    // InternalGitHubActionsParser.g:13806:4: enumLiteral_2= Contents
                    {
                    enumLiteral_2=(Token)match(input,Contents,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getCONTENTSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getPERMISSION_SCOPEAccess().getCONTENTSEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:13813:3: (enumLiteral_3= Deployments )
                    {
                    // InternalGitHubActionsParser.g:13813:3: (enumLiteral_3= Deployments )
                    // InternalGitHubActionsParser.g:13814:4: enumLiteral_3= Deployments
                    {
                    enumLiteral_3=(Token)match(input,Deployments,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getDEPLOYMENTSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getPERMISSION_SCOPEAccess().getDEPLOYMENTSEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:13821:3: (enumLiteral_4= Discussions )
                    {
                    // InternalGitHubActionsParser.g:13821:3: (enumLiteral_4= Discussions )
                    // InternalGitHubActionsParser.g:13822:4: enumLiteral_4= Discussions
                    {
                    enumLiteral_4=(Token)match(input,Discussions,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getDISCUSSIONSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getPERMISSION_SCOPEAccess().getDISCUSSIONSEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:13829:3: (enumLiteral_5= IdToken )
                    {
                    // InternalGitHubActionsParser.g:13829:3: (enumLiteral_5= IdToken )
                    // InternalGitHubActionsParser.g:13830:4: enumLiteral_5= IdToken
                    {
                    enumLiteral_5=(Token)match(input,IdToken,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getID_TOKENEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getPERMISSION_SCOPEAccess().getID_TOKENEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:13837:3: (enumLiteral_6= Issues )
                    {
                    // InternalGitHubActionsParser.g:13837:3: (enumLiteral_6= Issues )
                    // InternalGitHubActionsParser.g:13838:4: enumLiteral_6= Issues
                    {
                    enumLiteral_6=(Token)match(input,Issues,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getISSUESEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getPERMISSION_SCOPEAccess().getISSUESEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:13845:3: (enumLiteral_7= Packages )
                    {
                    // InternalGitHubActionsParser.g:13845:3: (enumLiteral_7= Packages )
                    // InternalGitHubActionsParser.g:13846:4: enumLiteral_7= Packages
                    {
                    enumLiteral_7=(Token)match(input,Packages,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getPACKAGESEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getPERMISSION_SCOPEAccess().getPACKAGESEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:13853:3: (enumLiteral_8= Pages )
                    {
                    // InternalGitHubActionsParser.g:13853:3: (enumLiteral_8= Pages )
                    // InternalGitHubActionsParser.g:13854:4: enumLiteral_8= Pages
                    {
                    enumLiteral_8=(Token)match(input,Pages,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getPAGESEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getPERMISSION_SCOPEAccess().getPAGESEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:13861:3: (enumLiteral_9= Pull_requests )
                    {
                    // InternalGitHubActionsParser.g:13861:3: (enumLiteral_9= Pull_requests )
                    // InternalGitHubActionsParser.g:13862:4: enumLiteral_9= Pull_requests
                    {
                    enumLiteral_9=(Token)match(input,Pull_requests,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getPULL_REQUESTSEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getPERMISSION_SCOPEAccess().getPULL_REQUESTSEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:13869:3: (enumLiteral_10= Repository_projects )
                    {
                    // InternalGitHubActionsParser.g:13869:3: (enumLiteral_10= Repository_projects )
                    // InternalGitHubActionsParser.g:13870:4: enumLiteral_10= Repository_projects
                    {
                    enumLiteral_10=(Token)match(input,Repository_projects,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getREPOSITORY_PROJECTSEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getPERMISSION_SCOPEAccess().getREPOSITORY_PROJECTSEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:13877:3: (enumLiteral_11= Security_events )
                    {
                    // InternalGitHubActionsParser.g:13877:3: (enumLiteral_11= Security_events )
                    // InternalGitHubActionsParser.g:13878:4: enumLiteral_11= Security_events
                    {
                    enumLiteral_11=(Token)match(input,Security_events,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getSECURITY_EVENTSEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getPERMISSION_SCOPEAccess().getSECURITY_EVENTSEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalGitHubActionsParser.g:13885:3: (enumLiteral_12= Statuses )
                    {
                    // InternalGitHubActionsParser.g:13885:3: (enumLiteral_12= Statuses )
                    // InternalGitHubActionsParser.g:13886:4: enumLiteral_12= Statuses
                    {
                    enumLiteral_12=(Token)match(input,Statuses,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getSTATUSESEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getPERMISSION_SCOPEAccess().getSTATUSESEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePERMISSION_SCOPE"


    // $ANTLR start "rulePERMISSION_VALUE"
    // InternalGitHubActionsParser.g:13896:1: rulePERMISSION_VALUE returns [Enumerator current=null] : ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) ) ;
    public final Enumerator rulePERMISSION_VALUE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:13902:2: ( ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) ) )
            // InternalGitHubActionsParser.g:13903:2: ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) )
            {
            // InternalGitHubActionsParser.g:13903:2: ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) )
            int alt213=3;
            switch ( input.LA(1) ) {
            case Read:
                {
                alt213=1;
                }
                break;
            case Write:
                {
                alt213=2;
                }
                break;
            case None:
                {
                alt213=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }

            switch (alt213) {
                case 1 :
                    // InternalGitHubActionsParser.g:13904:3: (enumLiteral_0= Read )
                    {
                    // InternalGitHubActionsParser.g:13904:3: (enumLiteral_0= Read )
                    // InternalGitHubActionsParser.g:13905:4: enumLiteral_0= Read
                    {
                    enumLiteral_0=(Token)match(input,Read,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_VALUEAccess().getREADEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPERMISSION_VALUEAccess().getREADEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:13912:3: (enumLiteral_1= Write )
                    {
                    // InternalGitHubActionsParser.g:13912:3: (enumLiteral_1= Write )
                    // InternalGitHubActionsParser.g:13913:4: enumLiteral_1= Write
                    {
                    enumLiteral_1=(Token)match(input,Write,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_VALUEAccess().getWRITEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPERMISSION_VALUEAccess().getWRITEEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:13920:3: (enumLiteral_2= None )
                    {
                    // InternalGitHubActionsParser.g:13920:3: (enumLiteral_2= None )
                    // InternalGitHubActionsParser.g:13921:4: enumLiteral_2= None
                    {
                    enumLiteral_2=(Token)match(input,None,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_VALUEAccess().getNONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getPERMISSION_VALUEAccess().getNONEEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePERMISSION_VALUE"

    // $ANTLR start synpred1_InternalGitHubActionsParser
    public final void synpred1_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_NEWLINE_4=null;
        EObject lv_name_3_0 = null;


        // InternalGitHubActionsParser.g:97:4: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:97:4: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:97:4: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:98:5: {...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred1_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 0)");
        }
        // InternalGitHubActionsParser.g:98:105: ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:99:6: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 0);
        // InternalGitHubActionsParser.g:102:9: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:102:10: {...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred1_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:102:19: (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:102:20: otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE
        {
        otherlv_1=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:110:9: ( (lv_name_3_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:111:10: (lv_name_3_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:111:10: (lv_name_3_0= ruleExpression )
        // InternalGitHubActionsParser.g:112:11: lv_name_3_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getWorkflowAccess().getNameExpressionParserRuleCall_0_0_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_name_3_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred1_InternalGitHubActionsParser

    // $ANTLR start synpred2_InternalGitHubActionsParser
    public final void synpred2_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_runName_7_0 = null;


        // InternalGitHubActionsParser.g:139:4: ( ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:139:4: ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:139:4: ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:140:5: {...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 1)");
        }
        // InternalGitHubActionsParser.g:140:105: ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:141:6: ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 1);
        // InternalGitHubActionsParser.g:144:9: ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:144:10: {...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:144:19: (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:144:20: otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
        {
        otherlv_5=(Token)match(input,RunName,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:152:9: ( (lv_runName_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:153:10: (lv_runName_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:153:10: (lv_runName_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:154:11: lv_runName_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getWorkflowAccess().getRunNameExpressionParserRuleCall_0_1_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_runName_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred2_InternalGitHubActionsParser

    // $ANTLR start synpred9_InternalGitHubActionsParser
    public final void synpred9_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token this_NEWLINE_18=null;
        Token this_NEWLINE_19=null;
        Token this_BEGIN_20=null;
        Token otherlv_21=null;
        Token this_NEWLINE_23=null;
        Token this_END_24=null;
        EObject lv_triggers_11_0 = null;

        EObject lv_triggers_14_0 = null;

        EObject lv_triggers_16_0 = null;

        EObject lv_triggers_22_0 = null;

        EObject lv_triggers_25_0 = null;


        // InternalGitHubActionsParser.g:181:4: ( ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) )
        // InternalGitHubActionsParser.g:181:4: ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:181:4: ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:182:5: {...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 2)");
        }
        // InternalGitHubActionsParser.g:182:105: ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:183:6: ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 2);
        // InternalGitHubActionsParser.g:186:9: ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) )
        // InternalGitHubActionsParser.g:186:10: {...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:186:19: (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) )
        // InternalGitHubActionsParser.g:186:20: otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ )
        {
        otherlv_9=(Token)match(input,On,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_7); if (state.failed) return ;
        // InternalGitHubActionsParser.g:194:9: ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ )
        int alt219=4;
        switch ( input.LA(1) ) {
        case Pull_request_review_comment:
        case Branch_protection_rule:
        case Pull_request_review:
        case Pull_request_target:
        case Repository_dispatch:
        case Deployment_status:
        case Workflow_dispatch:
        case Registry_package:
        case Project_column:
        case Workflow_call:
        case Project_card:
        case Pull_request:
        case Check_suite:
        case Merge_group:
        case Deployment:
        case Discussion:
        case Page_build:
        case Check_run:
        case Milestone:
        case Project:
        case Release:
        case Create:
        case Delete:
        case Gollum:
        case Issues:
        case Public:
        case Status:
        case Label:
        case Watch:
        case Fork:
        case Push:
            {
            alt219=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt219=2;
            }
            break;
        case RULE_NEWLINE:
            {
            int LA219_3 = input.LA(2);

            if ( (LA219_3==RULE_BEGIN) ) {
                int LA219_4 = input.LA(3);

                if ( (LA219_4==HyphenMinus) ) {
                    alt219=3;
                }
                else if ( ((LA219_4>=Pull_request_review_comment && LA219_4<=Branch_protection_rule)||(LA219_4>=Pull_request_review && LA219_4<=Repository_dispatch)||(LA219_4>=Deployment_status && LA219_4<=Workflow_dispatch)||LA219_4==Registry_package||LA219_4==Project_column||LA219_4==Workflow_call||(LA219_4>=Project_card && LA219_4<=Check_suite)||LA219_4==Merge_group||(LA219_4>=Deployment && LA219_4<=Discussion)||LA219_4==Page_build||LA219_4==Check_run||LA219_4==Milestone||LA219_4==Schedule||(LA219_4>=Project && LA219_4<=Release)||(LA219_4>=Create && LA219_4<=Delete)||LA219_4==Gollum||LA219_4==Issues||LA219_4==Public||LA219_4==Status||LA219_4==Label||LA219_4==Watch||LA219_4==Fork||LA219_4==Push||LA219_4==LeftSquareBracket||LA219_4==RULE_NEWLINE) ) {
                    alt219=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 4, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 3, input);

                throw nvae;
            }
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 219, 0, input);

            throw nvae;
        }

        switch (alt219) {
            case 1 :
                // InternalGitHubActionsParser.g:195:10: ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:195:10: ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:196:11: ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:196:11: ( (lv_triggers_11_0= ruleSimpleTrigger ) )
                // InternalGitHubActionsParser.g:197:12: (lv_triggers_11_0= ruleSimpleTrigger )
                {
                // InternalGitHubActionsParser.g:197:12: (lv_triggers_11_0= ruleSimpleTrigger )
                // InternalGitHubActionsParser.g:198:13: lv_triggers_11_0= ruleSimpleTrigger
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_0_0_0());
                  												
                }
                pushFollow(FOLLOW_5);
                lv_triggers_11_0=ruleSimpleTrigger();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:221:10: (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:221:10: (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:222:11: otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE
                {
                otherlv_13=(Token)match(input,LeftSquareBracket,FOLLOW_8); if (state.failed) return ;
                // InternalGitHubActionsParser.g:226:11: ( (lv_triggers_14_0= ruleSimpleTrigger ) )
                // InternalGitHubActionsParser.g:227:12: (lv_triggers_14_0= ruleSimpleTrigger )
                {
                // InternalGitHubActionsParser.g:227:12: (lv_triggers_14_0= ruleSimpleTrigger )
                // InternalGitHubActionsParser.g:228:13: lv_triggers_14_0= ruleSimpleTrigger
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_1_1_0());
                  												
                }
                pushFollow(FOLLOW_9);
                lv_triggers_14_0=ruleSimpleTrigger();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:245:11: (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )*
                loop216:
                do {
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==Comma) ) {
                        alt216=1;
                    }


                    switch (alt216) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:246:12: otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) )
                	    {
                	    otherlv_15=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:250:12: ( (lv_triggers_16_0= ruleSimpleTrigger ) )
                	    // InternalGitHubActionsParser.g:251:13: (lv_triggers_16_0= ruleSimpleTrigger )
                	    {
                	    // InternalGitHubActionsParser.g:251:13: (lv_triggers_16_0= ruleSimpleTrigger )
                	    // InternalGitHubActionsParser.g:252:14: lv_triggers_16_0= ruleSimpleTrigger
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_triggers_16_0=ruleSimpleTrigger();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop216;
                    }
                } while (true);

                otherlv_17=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:280:10: (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END )
                {
                // InternalGitHubActionsParser.g:280:10: (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END )
                // InternalGitHubActionsParser.g:281:11: this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END
                {
                this_NEWLINE_19=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_20=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:289:11: (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+
                int cnt217=0;
                loop217:
                do {
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==HyphenMinus) ) {
                        alt217=1;
                    }


                    switch (alt217) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:290:12: otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE
                	    {
                	    otherlv_21=(Token)match(input,HyphenMinus,FOLLOW_8); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:294:12: ( (lv_triggers_22_0= ruleSimpleTrigger ) )
                	    // InternalGitHubActionsParser.g:295:13: (lv_triggers_22_0= ruleSimpleTrigger )
                	    {
                	    // InternalGitHubActionsParser.g:295:13: (lv_triggers_22_0= ruleSimpleTrigger )
                	    // InternalGitHubActionsParser.g:296:14: lv_triggers_22_0= ruleSimpleTrigger
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_0_2_2_2_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_triggers_22_0=ruleSimpleTrigger();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_23=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt217 >= 1 ) break loop217;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(217, input);
                            throw eee;
                    }
                    cnt217++;
                } while (true);

                this_END_24=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 4 :
                // InternalGitHubActionsParser.g:324:10: ( (lv_triggers_25_0= ruleOptionedTrigger ) )+
                {
                // InternalGitHubActionsParser.g:324:10: ( (lv_triggers_25_0= ruleOptionedTrigger ) )+
                int cnt218=0;
                loop218:
                do {
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==RULE_NEWLINE) ) {
                        alt218=1;
                    }


                    switch (alt218) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:325:11: (lv_triggers_25_0= ruleOptionedTrigger )
                	    {
                	    // InternalGitHubActionsParser.g:325:11: (lv_triggers_25_0= ruleOptionedTrigger )
                	    // InternalGitHubActionsParser.g:326:12: lv_triggers_25_0= ruleOptionedTrigger
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersOptionedTriggerParserRuleCall_0_2_2_3_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_108);
                	    lv_triggers_25_0=ruleOptionedTrigger();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt218 >= 1 ) break loop218;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(218, input);
                            throw eee;
                    }
                    cnt218++;
                } while (true);


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred9_InternalGitHubActionsParser

    // $ANTLR start synpred11_InternalGitHubActionsParser
    public final void synpred11_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_NEWLINE_28=null;
        Token this_BEGIN_29=null;
        Token this_END_31=null;
        EObject lv_permissions_30_0 = null;


        // InternalGitHubActionsParser.g:350:4: ( ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:350:4: ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:350:4: ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:351:5: {...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred11_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 3)");
        }
        // InternalGitHubActionsParser.g:351:105: ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) )
        // InternalGitHubActionsParser.g:352:6: ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 3);
        // InternalGitHubActionsParser.g:355:9: ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) )
        // InternalGitHubActionsParser.g:355:10: {...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred11_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:355:19: (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END )
        // InternalGitHubActionsParser.g:355:20: otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END
        {
        otherlv_26=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return ;
        otherlv_27=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_28=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_29=(Token)match(input,RULE_BEGIN,FOLLOW_14); if (state.failed) return ;
        // InternalGitHubActionsParser.g:371:9: ( (lv_permissions_30_0= rulePermission ) )+
        int cnt220=0;
        loop220:
        do {
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==Repository_projects||LA220_0==Security_events||LA220_0==Pull_requests||LA220_0==Deployments||LA220_0==Discussions||LA220_0==Contents||LA220_0==IdToken||LA220_0==Packages||LA220_0==Statuses||LA220_0==Actions||LA220_0==Checks||LA220_0==Issues||LA220_0==Pages) ) {
                alt220=1;
            }


            switch (alt220) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:372:10: (lv_permissions_30_0= rulePermission )
        	    {
        	    // InternalGitHubActionsParser.g:372:10: (lv_permissions_30_0= rulePermission )
        	    // InternalGitHubActionsParser.g:373:11: lv_permissions_30_0= rulePermission
        	    {
        	    if ( state.backtracking==0 ) {

        	      											newCompositeNode(grammarAccess.getWorkflowAccess().getPermissionsPermissionParserRuleCall_0_3_4_0());
        	      										
        	    }
        	    pushFollow(FOLLOW_15);
        	    lv_permissions_30_0=rulePermission();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt220 >= 1 ) break loop220;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(220, input);
                    throw eee;
            }
            cnt220++;
        } while (true);

        this_END_31=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred11_InternalGitHubActionsParser

    // $ANTLR start synpred13_InternalGitHubActionsParser
    public final void synpred13_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token this_END_37=null;
        EObject lv_environmentVariables_36_0 = null;


        // InternalGitHubActionsParser.g:400:4: ( ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:400:4: ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:400:4: ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:401:5: {...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred13_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 4)");
        }
        // InternalGitHubActionsParser.g:401:105: ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
        // InternalGitHubActionsParser.g:402:6: ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 4);
        // InternalGitHubActionsParser.g:405:9: ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
        // InternalGitHubActionsParser.g:405:10: {...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred13_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:405:19: (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
        // InternalGitHubActionsParser.g:405:20: otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END
        {
        otherlv_32=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_33=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:421:9: ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
        int cnt221=0;
        loop221:
        do {
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==RULE_ID) ) {
                alt221=1;
            }


            switch (alt221) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:422:10: (lv_environmentVariables_36_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:422:10: (lv_environmentVariables_36_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:423:11: lv_environmentVariables_36_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      											newCompositeNode(grammarAccess.getWorkflowAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_0_4_4_0());
        	      										
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_environmentVariables_36_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt221 >= 1 ) break loop221;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(221, input);
                    throw eee;
            }
            cnt221++;
        } while (true);

        this_END_37=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred13_InternalGitHubActionsParser

    // $ANTLR start synpred14_InternalGitHubActionsParser
    public final void synpred14_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_NEWLINE_40=null;
        Token this_BEGIN_41=null;
        Token this_END_43=null;
        EObject lv_defaults_42_0 = null;


        // InternalGitHubActionsParser.g:450:4: ( ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:450:4: ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:450:4: ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:451:5: {...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred14_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 5)");
        }
        // InternalGitHubActionsParser.g:451:105: ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) )
        // InternalGitHubActionsParser.g:452:6: ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 5);
        // InternalGitHubActionsParser.g:455:9: ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) )
        // InternalGitHubActionsParser.g:455:10: {...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred14_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:455:19: (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END )
        // InternalGitHubActionsParser.g:455:20: otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END
        {
        otherlv_38=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return ;
        otherlv_39=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_40=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_41=(Token)match(input,RULE_BEGIN,FOLLOW_18); if (state.failed) return ;
        // InternalGitHubActionsParser.g:471:9: ( (lv_defaults_42_0= ruleDefaults ) )
        // InternalGitHubActionsParser.g:472:10: (lv_defaults_42_0= ruleDefaults )
        {
        // InternalGitHubActionsParser.g:472:10: (lv_defaults_42_0= ruleDefaults )
        // InternalGitHubActionsParser.g:473:11: lv_defaults_42_0= ruleDefaults
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getWorkflowAccess().getDefaultsDefaultsParserRuleCall_0_5_4_0());
          										
        }
        pushFollow(FOLLOW_19);
        lv_defaults_42_0=ruleDefaults();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_43=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred14_InternalGitHubActionsParser

    // $ANTLR start synpred15_InternalGitHubActionsParser
    public final void synpred15_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        EObject lv_concurrencyGroup_48_0 = null;


        // InternalGitHubActionsParser.g:500:4: ( ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:500:4: ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:500:4: ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:501:5: {...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 6)");
        }
        // InternalGitHubActionsParser.g:501:105: ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) )
        // InternalGitHubActionsParser.g:502:6: ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 6);
        // InternalGitHubActionsParser.g:505:9: ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) )
        // InternalGitHubActionsParser.g:505:10: {...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:505:19: (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END )
        // InternalGitHubActionsParser.g:505:20: otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END
        {
        otherlv_44=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return ;
        otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_20); if (state.failed) return ;
        // InternalGitHubActionsParser.g:521:9: ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) )
        // InternalGitHubActionsParser.g:522:10: (lv_concurrencyGroup_48_0= ruleConcurrencyGroup )
        {
        // InternalGitHubActionsParser.g:522:10: (lv_concurrencyGroup_48_0= ruleConcurrencyGroup )
        // InternalGitHubActionsParser.g:523:11: lv_concurrencyGroup_48_0= ruleConcurrencyGroup
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getWorkflowAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_0_6_4_0());
          										
        }
        pushFollow(FOLLOW_19);
        lv_concurrencyGroup_48_0=ruleConcurrencyGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_49=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred15_InternalGitHubActionsParser

    // $ANTLR start synpred16_InternalGitHubActionsParser
    public final void synpred16_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_jobs_54_0 = null;


        // InternalGitHubActionsParser.g:572:10: ( (lv_jobs_54_0= ruleJob ) )
        // InternalGitHubActionsParser.g:572:10: (lv_jobs_54_0= ruleJob )
        {
        // InternalGitHubActionsParser.g:572:10: (lv_jobs_54_0= ruleJob )
        // InternalGitHubActionsParser.g:573:11: lv_jobs_54_0= ruleJob
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getWorkflowAccess().getJobsJobParserRuleCall_0_7_4_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_jobs_54_0=ruleJob();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred16_InternalGitHubActionsParser

    // $ANTLR start synpred17_InternalGitHubActionsParser
    public final void synpred17_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        EObject lv_jobs_54_0 = null;


        // InternalGitHubActionsParser.g:550:4: ( ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:550:4: ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:550:4: ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:551:5: {...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 7)");
        }
        // InternalGitHubActionsParser.g:551:105: ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) )
        // InternalGitHubActionsParser.g:552:6: ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 7);
        // InternalGitHubActionsParser.g:555:9: ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) )
        // InternalGitHubActionsParser.g:555:10: {...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:555:19: (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END )
        // InternalGitHubActionsParser.g:555:20: otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END
        {
        otherlv_50=(Token)match(input,Jobs,FOLLOW_3); if (state.failed) return ;
        otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_21); if (state.failed) return ;
        // InternalGitHubActionsParser.g:571:9: ( (lv_jobs_54_0= ruleJob ) )+
        int cnt222=0;
        loop222:
        do {
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==RULE_END) ) {
                int LA222_1 = input.LA(2);

                if ( (LA222_1==ContinueOnError||LA222_1==TimeoutMinutes||LA222_1==Concurrency||LA222_1==Environment||LA222_1==Permissions||LA222_1==Container||LA222_1==Defaults||LA222_1==Services||LA222_1==Strategy||(LA222_1>=RunsOn && LA222_1<=Secrets)||LA222_1==Needs||LA222_1==Steps||LA222_1==Uses||LA222_1==With||LA222_1==Env||LA222_1==If||LA222_1==LeftSquareBracket||(LA222_1>=RULE_END && LA222_1<=RULE_NEWLINE)||LA222_1==RULE_ID) ) {
                    alt222=1;
                }


            }
            else if ( (LA222_0==ContinueOnError||LA222_0==TimeoutMinutes||LA222_0==Concurrency||LA222_0==Environment||LA222_0==Permissions||LA222_0==Container||LA222_0==Defaults||LA222_0==Services||LA222_0==Strategy||(LA222_0>=RunsOn && LA222_0<=Secrets)||LA222_0==Needs||LA222_0==Steps||LA222_0==Uses||LA222_0==With||LA222_0==Env||LA222_0==If||LA222_0==LeftSquareBracket||LA222_0==RULE_NEWLINE||LA222_0==RULE_ID) ) {
                alt222=1;
            }


            switch (alt222) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:572:10: (lv_jobs_54_0= ruleJob )
        	    {
        	    // InternalGitHubActionsParser.g:572:10: (lv_jobs_54_0= ruleJob )
        	    // InternalGitHubActionsParser.g:573:11: lv_jobs_54_0= ruleJob
        	    {
        	    if ( state.backtracking==0 ) {

        	      											newCompositeNode(grammarAccess.getWorkflowAccess().getJobsJobParserRuleCall_0_7_4_0());
        	      										
        	    }
        	    pushFollow(FOLLOW_21);
        	    lv_jobs_54_0=ruleJob();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt222 >= 1 ) break loop222;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(222, input);
                    throw eee;
            }
            cnt222++;
        } while (true);

        this_END_55=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred17_InternalGitHubActionsParser

    // $ANTLR start synpred19_InternalGitHubActionsParser
    public final void synpred19_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject this_ScriptJob_0 = null;


        // InternalGitHubActionsParser.g:637:3: (this_ScriptJob_0= ruleScriptJob )
        // InternalGitHubActionsParser.g:637:3: this_ScriptJob_0= ruleScriptJob
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ScriptJob_0=ruleScriptJob();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred19_InternalGitHubActionsParser

    // $ANTLR start synpred21_InternalGitHubActionsParser
    public final void synpred21_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_jobName_7_0 = null;


        // InternalGitHubActionsParser.g:695:3: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) )
        // InternalGitHubActionsParser.g:695:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:695:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        // InternalGitHubActionsParser.g:696:4: {...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred21_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:696:103: ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        // InternalGitHubActionsParser.g:697:5: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:700:8: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        // InternalGitHubActionsParser.g:700:9: {...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred21_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:700:18: ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        // InternalGitHubActionsParser.g:700:19: ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        {
        // InternalGitHubActionsParser.g:700:19: ( (lv_name_1_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:701:9: (lv_name_1_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:701:9: (lv_name_1_0= RULE_ID )
        // InternalGitHubActionsParser.g:702:10: lv_name_1_0= RULE_ID
        {
        lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_109); if (state.failed) return ;
        // InternalGitHubActionsParser.g:730:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        int alt223=2;
        int LA223_0 = input.LA(1);

        if ( (LA223_0==Name) ) {
            alt223=1;
        }
        switch (alt223) {
            case 1 :
                // InternalGitHubActionsParser.g:731:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
                {
                otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:739:9: ( (lv_jobName_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:740:10: (lv_jobName_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:740:10: (lv_jobName_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:741:11: lv_jobName_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getScriptJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_jobName_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred21_InternalGitHubActionsParser

    // $ANTLR start synpred23_InternalGitHubActionsParser
    public final void synpred23_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_11=null;
        Token this_BEGIN_12=null;
        Token this_END_14=null;
        EObject lv_permissions_13_0 = null;


        // InternalGitHubActionsParser.g:769:3: ( ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:769:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:769:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:770:4: {...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred23_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:770:103: ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
        // InternalGitHubActionsParser.g:771:5: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:774:8: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
        // InternalGitHubActionsParser.g:774:9: {...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred23_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:774:18: (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
        // InternalGitHubActionsParser.g:774:19: otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END
        {
        otherlv_9=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_11=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_14); if (state.failed) return ;
        // InternalGitHubActionsParser.g:790:8: ( (lv_permissions_13_0= rulePermission ) )+
        int cnt224=0;
        loop224:
        do {
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==Repository_projects||LA224_0==Security_events||LA224_0==Pull_requests||LA224_0==Deployments||LA224_0==Discussions||LA224_0==Contents||LA224_0==IdToken||LA224_0==Packages||LA224_0==Statuses||LA224_0==Actions||LA224_0==Checks||LA224_0==Issues||LA224_0==Pages) ) {
                alt224=1;
            }


            switch (alt224) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:791:9: (lv_permissions_13_0= rulePermission )
        	    {
        	    // InternalGitHubActionsParser.g:791:9: (lv_permissions_13_0= rulePermission )
        	    // InternalGitHubActionsParser.g:792:10: lv_permissions_13_0= rulePermission
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getPermissionsPermissionParserRuleCall_1_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_15);
        	    lv_permissions_13_0=rulePermission();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt224 >= 1 ) break loop224;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(224, input);
                    throw eee;
            }
            cnt224++;
        } while (true);

        this_END_14=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred23_InternalGitHubActionsParser

    // $ANTLR start synpred28_InternalGitHubActionsParser
    public final void synpred28_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_18=null;
        Token otherlv_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token otherlv_23=null;
        Token this_NEWLINE_24=null;
        Token this_NEWLINE_25=null;
        Token this_BEGIN_26=null;
        Token otherlv_27=null;
        Token otherlv_28=null;
        Token this_NEWLINE_29=null;
        Token this_END_30=null;

        // InternalGitHubActionsParser.g:819:3: ( ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:819:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:819:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:820:4: {...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred28_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:820:103: ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:821:5: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:824:8: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
        // InternalGitHubActionsParser.g:824:9: {...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred28_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:824:18: ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
        int alt228=3;
        switch ( input.LA(1) ) {
        case Needs:
            {
            alt228=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt228=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt228=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 228, 0, input);

            throw nvae;
        }

        switch (alt228) {
            case 1 :
                // InternalGitHubActionsParser.g:824:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:824:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:825:9: otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
                {
                otherlv_15=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return ;
                otherlv_16=(Token)match(input,Colon,FOLLOW_16); if (state.failed) return ;
                // InternalGitHubActionsParser.g:833:9: ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:834:10: ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:834:10: ( (otherlv_17= RULE_ID ) )
                // InternalGitHubActionsParser.g:835:11: (otherlv_17= RULE_ID )
                {
                // InternalGitHubActionsParser.g:835:11: (otherlv_17= RULE_ID )
                // InternalGitHubActionsParser.g:836:12: otherlv_17= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  												/* */
                  											
                }
                otherlv_17=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return ;

                }


                }

                this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:857:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:857:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:858:9: otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE
                {
                otherlv_19=(Token)match(input,LeftSquareBracket,FOLLOW_16); if (state.failed) return ;
                // InternalGitHubActionsParser.g:862:9: ( (otherlv_20= RULE_ID ) )
                // InternalGitHubActionsParser.g:863:10: (otherlv_20= RULE_ID )
                {
                // InternalGitHubActionsParser.g:863:10: (otherlv_20= RULE_ID )
                // InternalGitHubActionsParser.g:864:11: otherlv_20= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  											/* */
                  										
                }
                otherlv_20=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:878:9: (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )*
                loop226:
                do {
                    int alt226=2;
                    int LA226_0 = input.LA(1);

                    if ( (LA226_0==Comma) ) {
                        alt226=1;
                    }


                    switch (alt226) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:879:10: otherlv_21= Comma ( (otherlv_22= RULE_ID ) )
                	    {
                	    otherlv_21=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:883:10: ( (otherlv_22= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:884:11: (otherlv_22= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:884:11: (otherlv_22= RULE_ID )
                	    // InternalGitHubActionsParser.g:885:12: otherlv_22= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_22=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop226;
                    }
                } while (true);

                otherlv_23=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:910:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
                {
                // InternalGitHubActionsParser.g:910:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
                // InternalGitHubActionsParser.g:911:9: this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END
                {
                this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_26=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:919:9: (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+
                int cnt227=0;
                loop227:
                do {
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==HyphenMinus) ) {
                        alt227=1;
                    }


                    switch (alt227) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:920:10: otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE
                	    {
                	    otherlv_27=(Token)match(input,HyphenMinus,FOLLOW_16); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:924:10: ( (otherlv_28= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:925:11: (otherlv_28= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:925:11: (otherlv_28= RULE_ID )
                	    // InternalGitHubActionsParser.g:926:12: otherlv_28= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_28=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_29=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt227 >= 1 ) break loop227;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(227, input);
                            throw eee;
                    }
                    cnt227++;
                } while (true);

                this_END_30=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred28_InternalGitHubActionsParser

    // $ANTLR start synpred29_InternalGitHubActionsParser
    public final void synpred29_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_31_0 = null;


        // InternalGitHubActionsParser.g:956:3: ( ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:956:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:956:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:957:4: {...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred29_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:957:103: ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:958:5: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:961:8: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:961:9: {...}? => ( (lv_if_31_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred29_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:961:18: ( (lv_if_31_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:961:19: (lv_if_31_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:961:19: (lv_if_31_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:962:9: lv_if_31_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getScriptJobAccess().getIfIfStatementParserRuleCall_3_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_31_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred29_InternalGitHubActionsParser

    // $ANTLR start synpred30_InternalGitHubActionsParser
    public final void synpred30_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_32=null;
        Token otherlv_33=null;
        EObject lv_agent_34_0 = null;


        // InternalGitHubActionsParser.g:984:3: ( ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:984:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:984:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
        // InternalGitHubActionsParser.g:985:4: {...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred30_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:985:103: ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
        // InternalGitHubActionsParser.g:986:5: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:989:8: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
        // InternalGitHubActionsParser.g:989:9: {...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred30_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:989:18: (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
        // InternalGitHubActionsParser.g:989:19: otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) )
        {
        otherlv_32=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return ;
        otherlv_33=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return ;
        // InternalGitHubActionsParser.g:997:8: ( (lv_agent_34_0= ruleAgent ) )
        // InternalGitHubActionsParser.g:998:9: (lv_agent_34_0= ruleAgent )
        {
        // InternalGitHubActionsParser.g:998:9: (lv_agent_34_0= ruleAgent )
        // InternalGitHubActionsParser.g:999:10: lv_agent_34_0= ruleAgent
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getAgentAgentParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_agent_34_0=ruleAgent();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred30_InternalGitHubActionsParser

    // $ANTLR start synpred31_InternalGitHubActionsParser
    public final void synpred31_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_35=null;
        Token otherlv_36=null;
        EObject lv_stagingEnvironment_37_0 = null;


        // InternalGitHubActionsParser.g:1022:3: ( ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1022:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1022:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1023:4: {...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred31_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:1023:103: ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
        // InternalGitHubActionsParser.g:1024:5: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:1027:8: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
        // InternalGitHubActionsParser.g:1027:9: {...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred31_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1027:18: (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
        // InternalGitHubActionsParser.g:1027:19: otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
        {
        otherlv_35=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return ;
        otherlv_36=(Token)match(input,Colon,FOLLOW_25); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1035:8: ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
        // InternalGitHubActionsParser.g:1036:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
        {
        // InternalGitHubActionsParser.g:1036:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
        // InternalGitHubActionsParser.g:1037:10: lv_stagingEnvironment_37_0= ruleStagingEnvironment
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_stagingEnvironment_37_0=ruleStagingEnvironment();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred31_InternalGitHubActionsParser

    // $ANTLR start synpred32_InternalGitHubActionsParser
    public final void synpred32_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_NEWLINE_40=null;
        Token this_BEGIN_41=null;
        Token this_END_43=null;
        EObject lv_concurrencyGroup_42_0 = null;


        // InternalGitHubActionsParser.g:1060:3: ( ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1060:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1060:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1061:4: {...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred32_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:1061:103: ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1062:5: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:1065:8: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
        // InternalGitHubActionsParser.g:1065:9: {...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred32_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1065:18: (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
        // InternalGitHubActionsParser.g:1065:19: otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END
        {
        otherlv_38=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return ;
        otherlv_39=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_40=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_41=(Token)match(input,RULE_BEGIN,FOLLOW_20); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1081:8: ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) )
        // InternalGitHubActionsParser.g:1082:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
        {
        // InternalGitHubActionsParser.g:1082:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
        // InternalGitHubActionsParser.g:1083:10: lv_concurrencyGroup_42_0= ruleConcurrencyGroup
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_4_0());
          									
        }
        pushFollow(FOLLOW_19);
        lv_concurrencyGroup_42_0=ruleConcurrencyGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_43=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred32_InternalGitHubActionsParser

    // $ANTLR start synpred34_InternalGitHubActionsParser
    public final void synpred34_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        EObject lv_environmentVariables_48_0 = null;


        // InternalGitHubActionsParser.g:1110:3: ( ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1110:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1110:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1111:4: {...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred34_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:1111:103: ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1112:5: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:1115:8: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
        // InternalGitHubActionsParser.g:1115:9: {...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred34_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1115:18: (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
        // InternalGitHubActionsParser.g:1115:19: otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END
        {
        otherlv_44=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1131:8: ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+
        int cnt229=0;
        loop229:
        do {
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==RULE_ID) ) {
                alt229=1;
            }


            switch (alt229) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1132:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:1132:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:1133:10: lv_environmentVariables_48_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_environmentVariables_48_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt229 >= 1 ) break loop229;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(229, input);
                    throw eee;
            }
            cnt229++;
        } while (true);

        this_END_49=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred34_InternalGitHubActionsParser

    // $ANTLR start synpred35_InternalGitHubActionsParser
    public final void synpred35_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        EObject lv_defaults_54_0 = null;


        // InternalGitHubActionsParser.g:1160:3: ( ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1160:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1160:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1161:4: {...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred35_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8)");
        }
        // InternalGitHubActionsParser.g:1161:103: ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1162:5: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8);
        // InternalGitHubActionsParser.g:1165:8: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
        // InternalGitHubActionsParser.g:1165:9: {...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred35_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1165:18: (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
        // InternalGitHubActionsParser.g:1165:19: otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END
        {
        otherlv_50=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return ;
        otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_18); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1181:8: ( (lv_defaults_54_0= ruleDefaults ) )
        // InternalGitHubActionsParser.g:1182:9: (lv_defaults_54_0= ruleDefaults )
        {
        // InternalGitHubActionsParser.g:1182:9: (lv_defaults_54_0= ruleDefaults )
        // InternalGitHubActionsParser.g:1183:10: lv_defaults_54_0= ruleDefaults
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getDefaultsDefaultsParserRuleCall_8_4_0());
          									
        }
        pushFollow(FOLLOW_19);
        lv_defaults_54_0=ruleDefaults();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_55=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred35_InternalGitHubActionsParser

    // $ANTLR start synpred37_InternalGitHubActionsParser
    public final void synpred37_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_58=null;
        Token this_BEGIN_59=null;
        Token this_END_61=null;
        EObject lv_steps_60_0 = null;


        // InternalGitHubActionsParser.g:1210:3: ( ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1210:3: ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1210:3: ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1211:4: {...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred37_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9)");
        }
        // InternalGitHubActionsParser.g:1211:103: ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1212:5: ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9);
        // InternalGitHubActionsParser.g:1215:8: ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) )
        // InternalGitHubActionsParser.g:1215:9: {...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred37_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1215:18: (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END )
        // InternalGitHubActionsParser.g:1215:19: otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END
        {
        otherlv_56=(Token)match(input,Steps,FOLLOW_3); if (state.failed) return ;
        otherlv_57=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_58=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_59=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1231:8: ( (lv_steps_60_0= ruleStep ) )+
        int cnt230=0;
        loop230:
        do {
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==HyphenMinus) ) {
                alt230=1;
            }


            switch (alt230) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1232:9: (lv_steps_60_0= ruleStep )
        	    {
        	    // InternalGitHubActionsParser.g:1232:9: (lv_steps_60_0= ruleStep )
        	    // InternalGitHubActionsParser.g:1233:10: lv_steps_60_0= ruleStep
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStepsStepParserRuleCall_9_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_12);
        	    lv_steps_60_0=ruleStep();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt230 >= 1 ) break loop230;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(230, input);
                    throw eee;
            }
            cnt230++;
        } while (true);

        this_END_61=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred37_InternalGitHubActionsParser

    // $ANTLR start synpred38_InternalGitHubActionsParser
    public final void synpred38_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_62=null;
        Token otherlv_63=null;
        Token this_NEWLINE_64=null;
        Token this_BEGIN_65=null;
        Token this_END_67=null;
        EObject lv_strategy_66_0 = null;


        // InternalGitHubActionsParser.g:1260:3: ( ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1260:3: ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1260:3: ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1261:4: {...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred38_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10)");
        }
        // InternalGitHubActionsParser.g:1261:104: ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1262:5: ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10);
        // InternalGitHubActionsParser.g:1265:8: ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) )
        // InternalGitHubActionsParser.g:1265:9: {...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred38_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1265:18: (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END )
        // InternalGitHubActionsParser.g:1265:19: otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END
        {
        otherlv_62=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return ;
        otherlv_63=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_64=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_65=(Token)match(input,RULE_BEGIN,FOLLOW_26); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1281:8: ( (lv_strategy_66_0= ruleStrategy ) )
        // InternalGitHubActionsParser.g:1282:9: (lv_strategy_66_0= ruleStrategy )
        {
        // InternalGitHubActionsParser.g:1282:9: (lv_strategy_66_0= ruleStrategy )
        // InternalGitHubActionsParser.g:1283:10: lv_strategy_66_0= ruleStrategy
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getStrategyStrategyParserRuleCall_10_4_0());
          									
        }
        pushFollow(FOLLOW_19);
        lv_strategy_66_0=ruleStrategy();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_67=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred38_InternalGitHubActionsParser

    // $ANTLR start synpred39_InternalGitHubActionsParser
    public final void synpred39_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_68=null;
        Token otherlv_69=null;
        EObject lv_container_70_0 = null;


        // InternalGitHubActionsParser.g:1310:3: ( ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1310:3: ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1310:3: ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1311:4: {...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred39_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11)");
        }
        // InternalGitHubActionsParser.g:1311:104: ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) )
        // InternalGitHubActionsParser.g:1312:5: ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11);
        // InternalGitHubActionsParser.g:1315:8: ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) )
        // InternalGitHubActionsParser.g:1315:9: {...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred39_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1315:18: (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) )
        // InternalGitHubActionsParser.g:1315:19: otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) )
        {
        otherlv_68=(Token)match(input,Container,FOLLOW_3); if (state.failed) return ;
        otherlv_69=(Token)match(input,Colon,FOLLOW_27); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1323:8: ( (lv_container_70_0= ruleContainer ) )
        // InternalGitHubActionsParser.g:1324:9: (lv_container_70_0= ruleContainer )
        {
        // InternalGitHubActionsParser.g:1324:9: (lv_container_70_0= ruleContainer )
        // InternalGitHubActionsParser.g:1325:10: lv_container_70_0= ruleContainer
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getContainerContainerParserRuleCall_11_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_container_70_0=ruleContainer();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred39_InternalGitHubActionsParser

    // $ANTLR start synpred41_InternalGitHubActionsParser
    public final void synpred41_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_71=null;
        Token otherlv_72=null;
        Token this_NEWLINE_73=null;
        Token this_BEGIN_74=null;
        Token this_END_76=null;
        EObject lv_services_75_0 = null;


        // InternalGitHubActionsParser.g:1348:3: ( ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1348:3: ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1348:3: ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1349:4: {...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred41_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12)");
        }
        // InternalGitHubActionsParser.g:1349:104: ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1350:5: ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12);
        // InternalGitHubActionsParser.g:1353:8: ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) )
        // InternalGitHubActionsParser.g:1353:9: {...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred41_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1353:18: (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END )
        // InternalGitHubActionsParser.g:1353:19: otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END
        {
        otherlv_71=(Token)match(input,Services,FOLLOW_3); if (state.failed) return ;
        otherlv_72=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_74=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1369:8: ( (lv_services_75_0= ruleService ) )+
        int cnt231=0;
        loop231:
        do {
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==RULE_ID) ) {
                alt231=1;
            }


            switch (alt231) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1370:9: (lv_services_75_0= ruleService )
        	    {
        	    // InternalGitHubActionsParser.g:1370:9: (lv_services_75_0= ruleService )
        	    // InternalGitHubActionsParser.g:1371:10: lv_services_75_0= ruleService
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getServicesServiceParserRuleCall_12_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_services_75_0=ruleService();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt231 >= 1 ) break loop231;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(231, input);
                    throw eee;
            }
            cnt231++;
        } while (true);

        this_END_76=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred41_InternalGitHubActionsParser

    // $ANTLR start synpred42_InternalGitHubActionsParser
    public final void synpred42_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_77=null;
        Token otherlv_78=null;
        Token this_NEWLINE_80=null;
        EObject lv_continueOnError_79_0 = null;


        // InternalGitHubActionsParser.g:1398:3: ( ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:1398:3: ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:1398:3: ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:1399:4: {...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred42_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13)");
        }
        // InternalGitHubActionsParser.g:1399:104: ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:1400:5: ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13);
        // InternalGitHubActionsParser.g:1403:8: ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:1403:9: {...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred42_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1403:18: (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:1403:19: otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE
        {
        otherlv_77=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_78=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1411:8: ( (lv_continueOnError_79_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:1412:9: (lv_continueOnError_79_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:1412:9: (lv_continueOnError_79_0= ruleExpression )
        // InternalGitHubActionsParser.g:1413:10: lv_continueOnError_79_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getContinueOnErrorExpressionParserRuleCall_13_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_continueOnError_79_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_80=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred42_InternalGitHubActionsParser

    // $ANTLR start synpred44_InternalGitHubActionsParser
    public final void synpred44_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_81=null;
        Token otherlv_82=null;
        Token this_NEWLINE_84=null;
        Token this_END_85=null;
        EObject lv_timeoutMinutes_83_0 = null;


        // InternalGitHubActionsParser.g:1440:3: ( ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1440:3: ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1440:3: ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1441:4: {...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred44_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14)");
        }
        // InternalGitHubActionsParser.g:1441:104: ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1442:5: ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14);
        // InternalGitHubActionsParser.g:1445:8: ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) )
        // InternalGitHubActionsParser.g:1445:9: {...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred44_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1445:18: ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END )
        // InternalGitHubActionsParser.g:1445:19: (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END
        {
        // InternalGitHubActionsParser.g:1445:19: (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )?
        int alt232=2;
        int LA232_0 = input.LA(1);

        if ( (LA232_0==TimeoutMinutes) ) {
            alt232=1;
        }
        switch (alt232) {
            case 1 :
                // InternalGitHubActionsParser.g:1446:9: otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE
                {
                otherlv_81=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_82=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1454:9: ( (lv_timeoutMinutes_83_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:1455:10: (lv_timeoutMinutes_83_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:1455:10: (lv_timeoutMinutes_83_0= ruleExpression )
                // InternalGitHubActionsParser.g:1456:11: lv_timeoutMinutes_83_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getScriptJobAccess().getTimeoutMinutesExpressionParserRuleCall_14_0_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_timeoutMinutes_83_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_84=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return ;

                }
                break;

        }

        this_END_85=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred44_InternalGitHubActionsParser

    // $ANTLR start synpred46_InternalGitHubActionsParser
    public final void synpred46_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_jobName_7_0 = null;


        // InternalGitHubActionsParser.g:1533:3: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) )
        // InternalGitHubActionsParser.g:1533:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:1533:3: ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        // InternalGitHubActionsParser.g:1534:4: {...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred46_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:1534:110: ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        // InternalGitHubActionsParser.g:1535:5: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:1538:8: ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        // InternalGitHubActionsParser.g:1538:9: {...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred46_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1538:18: ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        // InternalGitHubActionsParser.g:1538:19: ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        {
        // InternalGitHubActionsParser.g:1538:19: ( (lv_name_1_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:1539:9: (lv_name_1_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:1539:9: (lv_name_1_0= RULE_ID )
        // InternalGitHubActionsParser.g:1540:10: lv_name_1_0= RULE_ID
        {
        lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_109); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1568:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        int alt233=2;
        int LA233_0 = input.LA(1);

        if ( (LA233_0==Name) ) {
            alt233=1;
        }
        switch (alt233) {
            case 1 :
                // InternalGitHubActionsParser.g:1569:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
                {
                otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1577:9: ( (lv_jobName_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:1578:10: (lv_jobName_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:1578:10: (lv_jobName_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:1579:11: lv_jobName_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_jobName_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred46_InternalGitHubActionsParser

    // $ANTLR start synpred48_InternalGitHubActionsParser
    public final void synpred48_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_11=null;
        Token this_BEGIN_12=null;
        Token this_END_14=null;
        EObject lv_permissions_13_0 = null;


        // InternalGitHubActionsParser.g:1607:3: ( ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1607:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1607:3: ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1608:4: {...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred48_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:1608:110: ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1609:5: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:1612:8: ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) )
        // InternalGitHubActionsParser.g:1612:9: {...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred48_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1612:18: (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END )
        // InternalGitHubActionsParser.g:1612:19: otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END
        {
        otherlv_9=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_11=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_14); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1628:8: ( (lv_permissions_13_0= rulePermission ) )+
        int cnt234=0;
        loop234:
        do {
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==Repository_projects||LA234_0==Security_events||LA234_0==Pull_requests||LA234_0==Deployments||LA234_0==Discussions||LA234_0==Contents||LA234_0==IdToken||LA234_0==Packages||LA234_0==Statuses||LA234_0==Actions||LA234_0==Checks||LA234_0==Issues||LA234_0==Pages) ) {
                alt234=1;
            }


            switch (alt234) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1629:9: (lv_permissions_13_0= rulePermission )
        	    {
        	    // InternalGitHubActionsParser.g:1629:9: (lv_permissions_13_0= rulePermission )
        	    // InternalGitHubActionsParser.g:1630:10: lv_permissions_13_0= rulePermission
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getPermissionsPermissionParserRuleCall_1_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_15);
        	    lv_permissions_13_0=rulePermission();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt234 >= 1 ) break loop234;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(234, input);
                    throw eee;
            }
            cnt234++;
        } while (true);

        this_END_14=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred48_InternalGitHubActionsParser

    // $ANTLR start synpred53_InternalGitHubActionsParser
    public final void synpred53_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_18=null;
        Token otherlv_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token otherlv_23=null;
        Token this_NEWLINE_24=null;
        Token this_NEWLINE_25=null;
        Token this_BEGIN_26=null;
        Token otherlv_27=null;
        Token otherlv_28=null;
        Token this_NEWLINE_29=null;
        Token this_END_30=null;

        // InternalGitHubActionsParser.g:1657:3: ( ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1657:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1657:3: ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1658:4: {...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred53_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:1658:110: ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1659:5: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:1662:8: ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1662:9: {...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred53_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1662:18: ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) )
        int alt238=3;
        switch ( input.LA(1) ) {
        case Needs:
            {
            alt238=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt238=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt238=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 238, 0, input);

            throw nvae;
        }

        switch (alt238) {
            case 1 :
                // InternalGitHubActionsParser.g:1662:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:1662:19: (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:1663:9: otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
                {
                otherlv_15=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return ;
                otherlv_16=(Token)match(input,Colon,FOLLOW_16); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1671:9: ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:1672:10: ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:1672:10: ( (otherlv_17= RULE_ID ) )
                // InternalGitHubActionsParser.g:1673:11: (otherlv_17= RULE_ID )
                {
                // InternalGitHubActionsParser.g:1673:11: (otherlv_17= RULE_ID )
                // InternalGitHubActionsParser.g:1674:12: otherlv_17= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  												/* */
                  											
                }
                otherlv_17=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return ;

                }


                }

                this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:1695:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:1695:8: (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:1696:9: otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE
                {
                otherlv_19=(Token)match(input,LeftSquareBracket,FOLLOW_16); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1700:9: ( (otherlv_20= RULE_ID ) )
                // InternalGitHubActionsParser.g:1701:10: (otherlv_20= RULE_ID )
                {
                // InternalGitHubActionsParser.g:1701:10: (otherlv_20= RULE_ID )
                // InternalGitHubActionsParser.g:1702:11: otherlv_20= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  											/* */
                  										
                }
                otherlv_20=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:1716:9: (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )*
                loop236:
                do {
                    int alt236=2;
                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==Comma) ) {
                        alt236=1;
                    }


                    switch (alt236) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:1717:10: otherlv_21= Comma ( (otherlv_22= RULE_ID ) )
                	    {
                	    otherlv_21=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:1721:10: ( (otherlv_22= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:1722:11: (otherlv_22= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:1722:11: (otherlv_22= RULE_ID )
                	    // InternalGitHubActionsParser.g:1723:12: otherlv_22= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_22=(Token)match(input,RULE_ID,FOLLOW_9); if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop236;
                    }
                } while (true);

                otherlv_23=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:1748:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
                {
                // InternalGitHubActionsParser.g:1748:8: (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END )
                // InternalGitHubActionsParser.g:1749:9: this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END
                {
                this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_26=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1757:9: (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+
                int cnt237=0;
                loop237:
                do {
                    int alt237=2;
                    int LA237_0 = input.LA(1);

                    if ( (LA237_0==HyphenMinus) ) {
                        alt237=1;
                    }


                    switch (alt237) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:1758:10: otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE
                	    {
                	    otherlv_27=(Token)match(input,HyphenMinus,FOLLOW_16); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:1762:10: ( (otherlv_28= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:1763:11: (otherlv_28= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:1763:11: (otherlv_28= RULE_ID )
                	    // InternalGitHubActionsParser.g:1764:12: otherlv_28= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_28=(Token)match(input,RULE_ID,FOLLOW_5); if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_29=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt237 >= 1 ) break loop237;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(237, input);
                            throw eee;
                    }
                    cnt237++;
                } while (true);

                this_END_30=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred53_InternalGitHubActionsParser

    // $ANTLR start synpred54_InternalGitHubActionsParser
    public final void synpred54_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_31_0 = null;


        // InternalGitHubActionsParser.g:1794:3: ( ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1794:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1794:3: ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:1795:4: {...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred54_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:1795:110: ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:1796:5: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:1799:8: ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:1799:9: {...}? => ( (lv_if_31_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred54_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1799:18: ( (lv_if_31_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:1799:19: (lv_if_31_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:1799:19: (lv_if_31_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:1800:9: lv_if_31_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getIfIfStatementParserRuleCall_3_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_31_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred54_InternalGitHubActionsParser

    // $ANTLR start synpred55_InternalGitHubActionsParser
    public final void synpred55_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_32=null;
        Token otherlv_33=null;
        EObject lv_agent_34_0 = null;


        // InternalGitHubActionsParser.g:1822:3: ( ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1822:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1822:3: ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1823:4: {...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred55_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:1823:110: ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) )
        // InternalGitHubActionsParser.g:1824:5: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:1827:8: ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) )
        // InternalGitHubActionsParser.g:1827:9: {...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred55_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1827:18: (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) )
        // InternalGitHubActionsParser.g:1827:19: otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) )
        {
        otherlv_32=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return ;
        otherlv_33=(Token)match(input,Colon,FOLLOW_24); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1835:8: ( (lv_agent_34_0= ruleAgent ) )
        // InternalGitHubActionsParser.g:1836:9: (lv_agent_34_0= ruleAgent )
        {
        // InternalGitHubActionsParser.g:1836:9: (lv_agent_34_0= ruleAgent )
        // InternalGitHubActionsParser.g:1837:10: lv_agent_34_0= ruleAgent
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getAgentAgentParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_agent_34_0=ruleAgent();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred55_InternalGitHubActionsParser

    // $ANTLR start synpred56_InternalGitHubActionsParser
    public final void synpred56_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_35=null;
        Token otherlv_36=null;
        EObject lv_stagingEnvironment_37_0 = null;


        // InternalGitHubActionsParser.g:1860:3: ( ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1860:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1860:3: ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1861:4: {...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred56_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:1861:110: ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) )
        // InternalGitHubActionsParser.g:1862:5: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:1865:8: ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) )
        // InternalGitHubActionsParser.g:1865:9: {...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred56_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1865:18: (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) )
        // InternalGitHubActionsParser.g:1865:19: otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
        {
        otherlv_35=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return ;
        otherlv_36=(Token)match(input,Colon,FOLLOW_25); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1873:8: ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) )
        // InternalGitHubActionsParser.g:1874:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
        {
        // InternalGitHubActionsParser.g:1874:9: (lv_stagingEnvironment_37_0= ruleStagingEnvironment )
        // InternalGitHubActionsParser.g:1875:10: lv_stagingEnvironment_37_0= ruleStagingEnvironment
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_stagingEnvironment_37_0=ruleStagingEnvironment();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred56_InternalGitHubActionsParser

    // $ANTLR start synpred57_InternalGitHubActionsParser
    public final void synpred57_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_NEWLINE_40=null;
        Token this_BEGIN_41=null;
        Token this_END_43=null;
        EObject lv_concurrencyGroup_42_0 = null;


        // InternalGitHubActionsParser.g:1898:3: ( ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1898:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1898:3: ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1899:4: {...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred57_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:1899:110: ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1900:5: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:1903:8: ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) )
        // InternalGitHubActionsParser.g:1903:9: {...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred57_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1903:18: (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END )
        // InternalGitHubActionsParser.g:1903:19: otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END
        {
        otherlv_38=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return ;
        otherlv_39=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_40=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_41=(Token)match(input,RULE_BEGIN,FOLLOW_20); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1919:8: ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) )
        // InternalGitHubActionsParser.g:1920:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
        {
        // InternalGitHubActionsParser.g:1920:9: (lv_concurrencyGroup_42_0= ruleConcurrencyGroup )
        // InternalGitHubActionsParser.g:1921:10: lv_concurrencyGroup_42_0= ruleConcurrencyGroup
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_4_0());
          									
        }
        pushFollow(FOLLOW_19);
        lv_concurrencyGroup_42_0=ruleConcurrencyGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_43=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred57_InternalGitHubActionsParser

    // $ANTLR start synpred59_InternalGitHubActionsParser
    public final void synpred59_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        EObject lv_environmentVariables_48_0 = null;


        // InternalGitHubActionsParser.g:1948:3: ( ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1948:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1948:3: ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1949:4: {...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred59_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:1949:110: ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1950:5: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:1953:8: ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) )
        // InternalGitHubActionsParser.g:1953:9: {...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred59_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1953:18: (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END )
        // InternalGitHubActionsParser.g:1953:19: otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END
        {
        otherlv_44=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1969:8: ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+
        int cnt239=0;
        loop239:
        do {
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==RULE_ID) ) {
                alt239=1;
            }


            switch (alt239) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1970:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:1970:9: (lv_environmentVariables_48_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:1971:10: lv_environmentVariables_48_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_environmentVariables_48_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt239 >= 1 ) break loop239;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(239, input);
                    throw eee;
            }
            cnt239++;
        } while (true);

        this_END_49=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred59_InternalGitHubActionsParser

    // $ANTLR start synpred60_InternalGitHubActionsParser
    public final void synpred60_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        EObject lv_defaults_54_0 = null;


        // InternalGitHubActionsParser.g:1998:3: ( ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1998:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1998:3: ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1999:4: {...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred60_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8)");
        }
        // InternalGitHubActionsParser.g:1999:110: ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2000:5: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8);
        // InternalGitHubActionsParser.g:2003:8: ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) )
        // InternalGitHubActionsParser.g:2003:9: {...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred60_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2003:18: (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END )
        // InternalGitHubActionsParser.g:2003:19: otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END
        {
        otherlv_50=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return ;
        otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_18); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2019:8: ( (lv_defaults_54_0= ruleDefaults ) )
        // InternalGitHubActionsParser.g:2020:9: (lv_defaults_54_0= ruleDefaults )
        {
        // InternalGitHubActionsParser.g:2020:9: (lv_defaults_54_0= ruleDefaults )
        // InternalGitHubActionsParser.g:2021:10: lv_defaults_54_0= ruleDefaults
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getDefaultsDefaultsParserRuleCall_8_4_0());
          									
        }
        pushFollow(FOLLOW_19);
        lv_defaults_54_0=ruleDefaults();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_55=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred60_InternalGitHubActionsParser

    // $ANTLR start synpred61_InternalGitHubActionsParser
    public final void synpred61_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_58=null;
        Token this_BEGIN_59=null;
        Token this_END_61=null;
        EObject lv_strategy_60_0 = null;


        // InternalGitHubActionsParser.g:2048:3: ( ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2048:3: ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:2048:3: ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2049:4: {...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred61_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9)");
        }
        // InternalGitHubActionsParser.g:2049:110: ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2050:5: ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9);
        // InternalGitHubActionsParser.g:2053:8: ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) )
        // InternalGitHubActionsParser.g:2053:9: {...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred61_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2053:18: (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END )
        // InternalGitHubActionsParser.g:2053:19: otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END
        {
        otherlv_56=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return ;
        otherlv_57=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_58=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_59=(Token)match(input,RULE_BEGIN,FOLLOW_26); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2069:8: ( (lv_strategy_60_0= ruleStrategy ) )
        // InternalGitHubActionsParser.g:2070:9: (lv_strategy_60_0= ruleStrategy )
        {
        // InternalGitHubActionsParser.g:2070:9: (lv_strategy_60_0= ruleStrategy )
        // InternalGitHubActionsParser.g:2071:10: lv_strategy_60_0= ruleStrategy
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStrategyStrategyParserRuleCall_9_4_0());
          									
        }
        pushFollow(FOLLOW_19);
        lv_strategy_60_0=ruleStrategy();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_61=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred61_InternalGitHubActionsParser

    // $ANTLR start synpred62_InternalGitHubActionsParser
    public final void synpred62_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_62=null;
        Token otherlv_63=null;
        EObject lv_container_64_0 = null;


        // InternalGitHubActionsParser.g:2098:3: ( ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2098:3: ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2098:3: ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2099:4: {...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred62_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10)");
        }
        // InternalGitHubActionsParser.g:2099:111: ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) )
        // InternalGitHubActionsParser.g:2100:5: ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10);
        // InternalGitHubActionsParser.g:2103:8: ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) )
        // InternalGitHubActionsParser.g:2103:9: {...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred62_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2103:18: (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) )
        // InternalGitHubActionsParser.g:2103:19: otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) )
        {
        otherlv_62=(Token)match(input,Container,FOLLOW_3); if (state.failed) return ;
        otherlv_63=(Token)match(input,Colon,FOLLOW_27); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2111:8: ( (lv_container_64_0= ruleContainer ) )
        // InternalGitHubActionsParser.g:2112:9: (lv_container_64_0= ruleContainer )
        {
        // InternalGitHubActionsParser.g:2112:9: (lv_container_64_0= ruleContainer )
        // InternalGitHubActionsParser.g:2113:10: lv_container_64_0= ruleContainer
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContainerContainerParserRuleCall_10_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_container_64_0=ruleContainer();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred62_InternalGitHubActionsParser

    // $ANTLR start synpred64_InternalGitHubActionsParser
    public final void synpred64_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_65=null;
        Token otherlv_66=null;
        Token this_NEWLINE_67=null;
        Token this_BEGIN_68=null;
        Token this_END_70=null;
        EObject lv_services_69_0 = null;


        // InternalGitHubActionsParser.g:2136:3: ( ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2136:3: ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:2136:3: ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2137:4: {...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred64_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11)");
        }
        // InternalGitHubActionsParser.g:2137:111: ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2138:5: ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11);
        // InternalGitHubActionsParser.g:2141:8: ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) )
        // InternalGitHubActionsParser.g:2141:9: {...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred64_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2141:18: (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END )
        // InternalGitHubActionsParser.g:2141:19: otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END
        {
        otherlv_65=(Token)match(input,Services,FOLLOW_3); if (state.failed) return ;
        otherlv_66=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_67=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_68=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2157:8: ( (lv_services_69_0= ruleService ) )+
        int cnt240=0;
        loop240:
        do {
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==RULE_ID) ) {
                alt240=1;
            }


            switch (alt240) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:2158:9: (lv_services_69_0= ruleService )
        	    {
        	    // InternalGitHubActionsParser.g:2158:9: (lv_services_69_0= ruleService )
        	    // InternalGitHubActionsParser.g:2159:10: lv_services_69_0= ruleService
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getServicesServiceParserRuleCall_11_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_services_69_0=ruleService();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt240 >= 1 ) break loop240;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(240, input);
                    throw eee;
            }
            cnt240++;
        } while (true);

        this_END_70=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred64_InternalGitHubActionsParser

    // $ANTLR start synpred65_InternalGitHubActionsParser
    public final void synpred65_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_71=null;
        Token otherlv_72=null;
        Token this_NEWLINE_74=null;
        EObject lv_workflowPath_73_0 = null;


        // InternalGitHubActionsParser.g:2186:3: ( ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:2186:3: ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:2186:3: ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:2187:4: {...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred65_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12)");
        }
        // InternalGitHubActionsParser.g:2187:111: ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:2188:5: ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12);
        // InternalGitHubActionsParser.g:2191:8: ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:2191:9: {...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred65_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2191:18: (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:2191:19: otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE
        {
        otherlv_71=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return ;
        otherlv_72=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2199:8: ( (lv_workflowPath_73_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2200:9: (lv_workflowPath_73_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2200:9: (lv_workflowPath_73_0= ruleExpression )
        // InternalGitHubActionsParser.g:2201:10: lv_workflowPath_73_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getWorkflowPathExpressionParserRuleCall_12_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_workflowPath_73_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_74=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred65_InternalGitHubActionsParser

    // $ANTLR start synpred67_InternalGitHubActionsParser
    public final void synpred67_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_75=null;
        Token otherlv_76=null;
        Token this_NEWLINE_77=null;
        Token this_BEGIN_78=null;
        Token this_END_80=null;
        EObject lv_args_79_0 = null;


        // InternalGitHubActionsParser.g:2228:3: ( ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2228:3: ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:2228:3: ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2229:4: {...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred67_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13)");
        }
        // InternalGitHubActionsParser.g:2229:111: ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2230:5: ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13);
        // InternalGitHubActionsParser.g:2233:8: ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) )
        // InternalGitHubActionsParser.g:2233:9: {...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred67_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2233:18: (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END )
        // InternalGitHubActionsParser.g:2233:19: otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END
        {
        otherlv_75=(Token)match(input,With,FOLLOW_3); if (state.failed) return ;
        otherlv_76=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_77=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_78=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2249:8: ( (lv_args_79_0= ruleVariableAssignment ) )+
        int cnt241=0;
        loop241:
        do {
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==RULE_ID) ) {
                alt241=1;
            }


            switch (alt241) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:2250:9: (lv_args_79_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:2250:9: (lv_args_79_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:2251:10: lv_args_79_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getArgsVariableAssignmentParserRuleCall_13_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_args_79_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt241 >= 1 ) break loop241;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(241, input);
                    throw eee;
            }
            cnt241++;
        } while (true);

        this_END_80=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred67_InternalGitHubActionsParser

    // $ANTLR start synpred70_InternalGitHubActionsParser
    public final void synpred70_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_81=null;
        Token otherlv_82=null;
        Token lv_inheritSecrets_83_0=null;
        Token this_NEWLINE_84=null;
        Token this_NEWLINE_85=null;
        Token this_BEGIN_86=null;
        Token this_END_88=null;
        EObject lv_secrets_87_0 = null;


        // InternalGitHubActionsParser.g:2278:3: ( ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2278:3: ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2278:3: ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2279:4: {...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred70_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14)");
        }
        // InternalGitHubActionsParser.g:2279:111: ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2280:5: ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14);
        // InternalGitHubActionsParser.g:2283:8: ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2283:9: {...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred70_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2283:18: (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2283:19: otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) )
        {
        otherlv_81=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return ;
        otherlv_82=(Token)match(input,Colon,FOLLOW_30); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2291:8: ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) )
        int alt243=2;
        int LA243_0 = input.LA(1);

        if ( (LA243_0==Inherit) ) {
            alt243=1;
        }
        else if ( (LA243_0==RULE_NEWLINE) ) {
            alt243=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 243, 0, input);

            throw nvae;
        }
        switch (alt243) {
            case 1 :
                // InternalGitHubActionsParser.g:2292:9: ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:2292:9: ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:2293:10: ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:2293:10: ( (lv_inheritSecrets_83_0= Inherit ) )
                // InternalGitHubActionsParser.g:2294:11: (lv_inheritSecrets_83_0= Inherit )
                {
                // InternalGitHubActionsParser.g:2294:11: (lv_inheritSecrets_83_0= Inherit )
                // InternalGitHubActionsParser.g:2295:12: lv_inheritSecrets_83_0= Inherit
                {
                lv_inheritSecrets_83_0=(Token)match(input,Inherit,FOLLOW_5); if (state.failed) return ;

                }


                }

                this_NEWLINE_84=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:2313:9: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END )
                {
                // InternalGitHubActionsParser.g:2313:9: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END )
                // InternalGitHubActionsParser.g:2314:10: this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END
                {
                this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_86=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2322:10: ( (lv_secrets_87_0= ruleVariableAssignment ) )+
                int cnt242=0;
                loop242:
                do {
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==RULE_ID) ) {
                        alt242=1;
                    }


                    switch (alt242) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:2323:11: (lv_secrets_87_0= ruleVariableAssignment )
                	    {
                	    // InternalGitHubActionsParser.g:2323:11: (lv_secrets_87_0= ruleVariableAssignment )
                	    // InternalGitHubActionsParser.g:2324:12: lv_secrets_87_0= ruleVariableAssignment
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getSecretsVariableAssignmentParserRuleCall_14_2_1_2_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_17);
                	    lv_secrets_87_0=ruleVariableAssignment();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt242 >= 1 ) break loop242;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(242, input);
                            throw eee;
                    }
                    cnt242++;
                } while (true);

                this_END_88=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred70_InternalGitHubActionsParser

    // $ANTLR start synpred71_InternalGitHubActionsParser
    public final void synpred71_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_89=null;
        Token otherlv_90=null;
        Token this_NEWLINE_92=null;
        EObject lv_continueOnError_91_0 = null;


        // InternalGitHubActionsParser.g:2353:3: ( ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:2353:3: ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:2353:3: ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:2354:4: {...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred71_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15)");
        }
        // InternalGitHubActionsParser.g:2354:111: ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:2355:5: ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15);
        // InternalGitHubActionsParser.g:2358:8: ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:2358:9: {...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred71_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2358:18: (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:2358:19: otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE
        {
        otherlv_89=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_90=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2366:8: ( (lv_continueOnError_91_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2367:9: (lv_continueOnError_91_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2367:9: (lv_continueOnError_91_0= ruleExpression )
        // InternalGitHubActionsParser.g:2368:10: lv_continueOnError_91_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContinueOnErrorExpressionParserRuleCall_15_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_continueOnError_91_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_92=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred71_InternalGitHubActionsParser

    // $ANTLR start synpred73_InternalGitHubActionsParser
    public final void synpred73_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_93=null;
        Token otherlv_94=null;
        Token this_NEWLINE_96=null;
        Token this_END_97=null;
        EObject lv_timeoutMinutes_95_0 = null;


        // InternalGitHubActionsParser.g:2395:3: ( ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2395:3: ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:2395:3: ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2396:4: {...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred73_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16)");
        }
        // InternalGitHubActionsParser.g:2396:111: ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2397:5: ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16);
        // InternalGitHubActionsParser.g:2400:8: ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) )
        // InternalGitHubActionsParser.g:2400:9: {...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred73_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2400:18: ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END )
        // InternalGitHubActionsParser.g:2400:19: (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END
        {
        // InternalGitHubActionsParser.g:2400:19: (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )?
        int alt244=2;
        int LA244_0 = input.LA(1);

        if ( (LA244_0==TimeoutMinutes) ) {
            alt244=1;
        }
        switch (alt244) {
            case 1 :
                // InternalGitHubActionsParser.g:2401:9: otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE
                {
                otherlv_93=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_94=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2409:9: ( (lv_timeoutMinutes_95_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:2410:10: (lv_timeoutMinutes_95_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:2410:10: (lv_timeoutMinutes_95_0= ruleExpression )
                // InternalGitHubActionsParser.g:2411:11: lv_timeoutMinutes_95_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getTimeoutMinutesExpressionParserRuleCall_16_0_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_timeoutMinutes_95_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_96=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return ;

                }
                break;

        }

        this_END_97=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred73_InternalGitHubActionsParser

    // $ANTLR start synpred90_InternalGitHubActionsParser
    public final void synpred90_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject this_Command_2 = null;


        // InternalGitHubActionsParser.g:3000:4: (this_Command_2= ruleCommand )
        // InternalGitHubActionsParser.g:3000:4: this_Command_2= ruleCommand
        {
        if ( state.backtracking==0 ) {

          				/* */
          			
        }
        pushFollow(FOLLOW_2);
        this_Command_2=ruleCommand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_InternalGitHubActionsParser

    // $ANTLR start synpred91_InternalGitHubActionsParser
    public final void synpred91_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;
        Token this_NEWLINE_4=null;

        // InternalGitHubActionsParser.g:3063:3: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3063:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3063:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3064:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred91_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:3064:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3065:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:3068:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3068:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred91_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3068:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3068:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE
        {
        otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return ;
        otherlv_2=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3076:8: ( (lv_id_3_0= RULE_STRING ) )
        // InternalGitHubActionsParser.g:3077:9: (lv_id_3_0= RULE_STRING )
        {
        // InternalGitHubActionsParser.g:3077:9: (lv_id_3_0= RULE_STRING )
        // InternalGitHubActionsParser.g:3078:10: lv_id_3_0= RULE_STRING
        {
        lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return ;

        }


        }

        this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred91_InternalGitHubActionsParser

    // $ANTLR start synpred92_InternalGitHubActionsParser
    public final void synpred92_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_5_0 = null;


        // InternalGitHubActionsParser.g:3104:3: ( ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3104:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3104:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:3105:4: {...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred92_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:3105:101: ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:3106:5: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:3109:8: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:3109:9: {...}? => ( (lv_if_5_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred92_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3109:18: ( (lv_if_5_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:3109:19: (lv_if_5_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:3109:19: (lv_if_5_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:3110:9: lv_if_5_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getCommandAccess().getIfIfStatementParserRuleCall_1_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_5_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred92_InternalGitHubActionsParser

    // $ANTLR start synpred93_InternalGitHubActionsParser
    public final void synpred93_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_9=null;
        EObject lv_name_8_0 = null;


        // InternalGitHubActionsParser.g:3132:3: ( ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3132:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3132:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3133:4: {...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred93_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:3133:101: ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3134:5: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:3137:8: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3137:9: {...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred93_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3137:18: (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3137:19: otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE
        {
        otherlv_6=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_7=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3145:8: ( (lv_name_8_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3146:9: (lv_name_8_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3146:9: (lv_name_8_0= ruleExpression )
        // InternalGitHubActionsParser.g:3147:10: lv_name_8_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getNameExpressionParserRuleCall_2_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_name_8_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_9=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred93_InternalGitHubActionsParser

    // $ANTLR start synpred94_InternalGitHubActionsParser
    public final void synpred94_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token this_NEWLINE_13=null;
        EObject lv_shell_12_0 = null;


        // InternalGitHubActionsParser.g:3174:3: ( ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3174:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3174:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3175:4: {...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred94_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:3175:101: ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3176:5: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:3179:8: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3179:9: {...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred94_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3179:18: (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3179:19: otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE
        {
        otherlv_10=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return ;
        otherlv_11=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3187:8: ( (lv_shell_12_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3188:9: (lv_shell_12_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3188:9: (lv_shell_12_0= ruleExpression )
        // InternalGitHubActionsParser.g:3189:10: lv_shell_12_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getShellExpressionParserRuleCall_3_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_shell_12_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_13=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred94_InternalGitHubActionsParser

    // $ANTLR start synpred95_InternalGitHubActionsParser
    public final void synpred95_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        EObject lv_workingDirectory_16_0 = null;


        // InternalGitHubActionsParser.g:3216:3: ( ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3216:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3216:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3217:4: {...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:3217:101: ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3218:5: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:3221:8: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3221:9: {...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3221:18: (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3221:19: otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
        {
        otherlv_14=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return ;
        otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3229:8: ( (lv_workingDirectory_16_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3230:9: (lv_workingDirectory_16_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3230:9: (lv_workingDirectory_16_0= ruleExpression )
        // InternalGitHubActionsParser.g:3231:10: lv_workingDirectory_16_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_workingDirectory_16_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred95_InternalGitHubActionsParser

    // $ANTLR start synpred97_InternalGitHubActionsParser
    public final void synpred97_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_20=null;
        Token this_BEGIN_21=null;
        Token this_END_23=null;
        EObject lv_environmentVariables_22_0 = null;


        // InternalGitHubActionsParser.g:3258:3: ( ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:3258:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:3258:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:3259:4: {...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred97_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:3259:101: ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
        // InternalGitHubActionsParser.g:3260:5: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:3263:8: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
        // InternalGitHubActionsParser.g:3263:9: {...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred97_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3263:18: (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
        // InternalGitHubActionsParser.g:3263:19: otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END
        {
        otherlv_18=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_19=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3279:8: ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+
        int cnt256=0;
        loop256:
        do {
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==RULE_ID) ) {
                alt256=1;
            }


            switch (alt256) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:3280:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:3280:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:3281:10: lv_environmentVariables_22_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getCommandAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_environmentVariables_22_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt256 >= 1 ) break loop256;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(256, input);
                    throw eee;
            }
            cnt256++;
        } while (true);

        this_END_23=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred97_InternalGitHubActionsParser

    // $ANTLR start synpred98_InternalGitHubActionsParser
    public final void synpred98_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_24=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        EObject lv_continueOnError_26_0 = null;


        // InternalGitHubActionsParser.g:3308:3: ( ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3308:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3308:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3309:4: {...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred98_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:3309:101: ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3310:5: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:3313:8: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3313:9: {...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred98_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3313:18: (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3313:19: otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
        {
        otherlv_24=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3321:8: ( (lv_continueOnError_26_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3322:9: (lv_continueOnError_26_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3322:9: (lv_continueOnError_26_0= ruleExpression )
        // InternalGitHubActionsParser.g:3323:10: lv_continueOnError_26_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_continueOnError_26_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred98_InternalGitHubActionsParser

    // $ANTLR start synpred100_InternalGitHubActionsParser
    public final void synpred100_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token this_NEWLINE_35=null;
        EObject lv_timeoutMinutes_30_0 = null;

        EObject lv_command_34_0 = null;


        // InternalGitHubActionsParser.g:3350:3: ( ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3350:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3350:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3351:4: {...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred100_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:3351:101: ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3352:5: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:3355:8: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3355:9: {...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred100_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3355:18: ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3355:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
        {
        // InternalGitHubActionsParser.g:3355:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )?
        int alt257=2;
        int LA257_0 = input.LA(1);

        if ( (LA257_0==TimeoutMinutes) ) {
            alt257=1;
        }
        switch (alt257) {
            case 1 :
                // InternalGitHubActionsParser.g:3356:9: otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
                {
                otherlv_28=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_29=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:3364:9: ( (lv_timeoutMinutes_30_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:3365:10: (lv_timeoutMinutes_30_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:3365:10: (lv_timeoutMinutes_30_0= ruleExpression )
                // InternalGitHubActionsParser.g:3366:11: lv_timeoutMinutes_30_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getCommandAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_timeoutMinutes_30_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_18); if (state.failed) return ;

                }
                break;

        }

        // InternalGitHubActionsParser.g:3388:8: (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3389:9: otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE
        {
        otherlv_32=(Token)match(input,Run,FOLLOW_3); if (state.failed) return ;
        otherlv_33=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3397:9: ( (lv_command_34_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3398:10: (lv_command_34_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3398:10: (lv_command_34_0= ruleExpression )
        // InternalGitHubActionsParser.g:3399:11: lv_command_34_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getCommandAccess().getCommandExpressionParserRuleCall_7_1_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_command_34_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_35=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred100_InternalGitHubActionsParser

    // $ANTLR start synpred101_InternalGitHubActionsParser
    public final void synpred101_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;
        Token this_NEWLINE_4=null;

        // InternalGitHubActionsParser.g:3474:3: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3474:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3474:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3475:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred101_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:3475:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3476:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:3479:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3479:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred101_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3479:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3479:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE
        {
        otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return ;
        otherlv_2=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3487:8: ( (lv_id_3_0= RULE_STRING ) )
        // InternalGitHubActionsParser.g:3488:9: (lv_id_3_0= RULE_STRING )
        {
        // InternalGitHubActionsParser.g:3488:9: (lv_id_3_0= RULE_STRING )
        // InternalGitHubActionsParser.g:3489:10: lv_id_3_0= RULE_STRING
        {
        lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return ;

        }


        }

        this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred101_InternalGitHubActionsParser

    // $ANTLR start synpred102_InternalGitHubActionsParser
    public final void synpred102_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_5_0 = null;


        // InternalGitHubActionsParser.g:3515:3: ( ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3515:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3515:3: ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:3516:4: {...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred102_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:3516:101: ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:3517:5: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:3520:8: ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:3520:9: {...}? => ( (lv_if_5_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred102_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3520:18: ( (lv_if_5_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:3520:19: (lv_if_5_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:3520:19: (lv_if_5_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:3521:9: lv_if_5_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getPackageAccess().getIfIfStatementParserRuleCall_1_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_5_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred102_InternalGitHubActionsParser

    // $ANTLR start synpred103_InternalGitHubActionsParser
    public final void synpred103_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_9=null;
        EObject lv_name_8_0 = null;


        // InternalGitHubActionsParser.g:3543:3: ( ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3543:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3543:3: ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3544:4: {...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred103_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:3544:101: ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3545:5: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:3548:8: ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3548:9: {...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred103_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3548:18: (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3548:19: otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE
        {
        otherlv_6=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_7=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3556:8: ( (lv_name_8_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3557:9: (lv_name_8_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3557:9: (lv_name_8_0= ruleExpression )
        // InternalGitHubActionsParser.g:3558:10: lv_name_8_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getNameExpressionParserRuleCall_2_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_name_8_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_9=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred103_InternalGitHubActionsParser

    // $ANTLR start synpred104_InternalGitHubActionsParser
    public final void synpred104_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token this_NEWLINE_13=null;
        EObject lv_shell_12_0 = null;


        // InternalGitHubActionsParser.g:3585:3: ( ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3585:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3585:3: ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3586:4: {...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred104_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:3586:101: ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3587:5: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:3590:8: ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3590:9: {...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred104_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3590:18: (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3590:19: otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE
        {
        otherlv_10=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return ;
        otherlv_11=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3598:8: ( (lv_shell_12_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3599:9: (lv_shell_12_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3599:9: (lv_shell_12_0= ruleExpression )
        // InternalGitHubActionsParser.g:3600:10: lv_shell_12_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getShellExpressionParserRuleCall_3_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_shell_12_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_13=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred104_InternalGitHubActionsParser

    // $ANTLR start synpred105_InternalGitHubActionsParser
    public final void synpred105_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        EObject lv_workingDirectory_16_0 = null;


        // InternalGitHubActionsParser.g:3627:3: ( ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3627:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3627:3: ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3628:4: {...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred105_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:3628:101: ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3629:5: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:3632:8: ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3632:9: {...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred105_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3632:18: (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3632:19: otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
        {
        otherlv_14=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return ;
        otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3640:8: ( (lv_workingDirectory_16_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3641:9: (lv_workingDirectory_16_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3641:9: (lv_workingDirectory_16_0= ruleExpression )
        // InternalGitHubActionsParser.g:3642:10: lv_workingDirectory_16_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_workingDirectory_16_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred105_InternalGitHubActionsParser

    // $ANTLR start synpred107_InternalGitHubActionsParser
    public final void synpred107_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_20=null;
        Token this_BEGIN_21=null;
        Token this_END_23=null;
        EObject lv_environmentVariables_22_0 = null;


        // InternalGitHubActionsParser.g:3669:3: ( ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:3669:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:3669:3: ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:3670:4: {...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred107_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:3670:101: ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) )
        // InternalGitHubActionsParser.g:3671:5: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:3674:8: ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) )
        // InternalGitHubActionsParser.g:3674:9: {...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred107_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3674:18: (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END )
        // InternalGitHubActionsParser.g:3674:19: otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END
        {
        otherlv_18=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_19=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3690:8: ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+
        int cnt258=0;
        loop258:
        do {
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==RULE_ID) ) {
                alt258=1;
            }


            switch (alt258) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:3691:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:3691:9: (lv_environmentVariables_22_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:3692:10: lv_environmentVariables_22_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getPackageAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_4_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_environmentVariables_22_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt258 >= 1 ) break loop258;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(258, input);
                    throw eee;
            }
            cnt258++;
        } while (true);

        this_END_23=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred107_InternalGitHubActionsParser

    // $ANTLR start synpred108_InternalGitHubActionsParser
    public final void synpred108_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_24=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        EObject lv_continueOnError_26_0 = null;


        // InternalGitHubActionsParser.g:3719:3: ( ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3719:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3719:3: ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3720:4: {...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred108_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:3720:101: ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3721:5: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:3724:8: ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3724:9: {...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred108_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3724:18: (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3724:19: otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
        {
        otherlv_24=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3732:8: ( (lv_continueOnError_26_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3733:9: (lv_continueOnError_26_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3733:9: (lv_continueOnError_26_0= ruleExpression )
        // InternalGitHubActionsParser.g:3734:10: lv_continueOnError_26_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_continueOnError_26_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred108_InternalGitHubActionsParser

    // $ANTLR start synpred110_InternalGitHubActionsParser
    public final void synpred110_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token otherlv_32=null;
        Token otherlv_33=null;
        Token this_NEWLINE_35=null;
        EObject lv_timeoutMinutes_30_0 = null;

        EObject lv_uses_34_0 = null;


        // InternalGitHubActionsParser.g:3761:3: ( ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3761:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3761:3: ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3762:4: {...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred110_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:3762:101: ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3763:5: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:3766:8: ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3766:9: {...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred110_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3766:18: ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3766:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
        {
        // InternalGitHubActionsParser.g:3766:19: (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )?
        int alt259=2;
        int LA259_0 = input.LA(1);

        if ( (LA259_0==TimeoutMinutes) ) {
            alt259=1;
        }
        switch (alt259) {
            case 1 :
                // InternalGitHubActionsParser.g:3767:9: otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
                {
                otherlv_28=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_29=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:3775:9: ( (lv_timeoutMinutes_30_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:3776:10: (lv_timeoutMinutes_30_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:3776:10: (lv_timeoutMinutes_30_0= ruleExpression )
                // InternalGitHubActionsParser.g:3777:11: lv_timeoutMinutes_30_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getPackageAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_timeoutMinutes_30_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_38); if (state.failed) return ;

                }
                break;

        }

        // InternalGitHubActionsParser.g:3799:8: (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3800:9: otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE
        {
        otherlv_32=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return ;
        otherlv_33=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3808:9: ( (lv_uses_34_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3809:10: (lv_uses_34_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3809:10: (lv_uses_34_0= ruleExpression )
        // InternalGitHubActionsParser.g:3810:11: lv_uses_34_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getPackageAccess().getUsesExpressionParserRuleCall_7_1_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_uses_34_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_35=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred110_InternalGitHubActionsParser

    // $ANTLR start synpred111_InternalGitHubActionsParser
    public final void synpred111_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_41=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        EObject lv_entrypoint_43_0 = null;


        // InternalGitHubActionsParser.g:3867:10: ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3867:10: ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3867:10: ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3868:11: {...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred111_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0)");
        }
        // InternalGitHubActionsParser.g:3868:114: ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3869:12: ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0);
        // InternalGitHubActionsParser.g:3872:15: ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3872:16: {...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred111_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3872:25: (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3872:26: otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
        {
        otherlv_41=(Token)match(input,Entrypoint,FOLLOW_3); if (state.failed) return ;
        otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3880:15: ( (lv_entrypoint_43_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3881:16: (lv_entrypoint_43_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3881:16: (lv_entrypoint_43_0= ruleExpression )
        // InternalGitHubActionsParser.g:3882:17: lv_entrypoint_43_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																	newCompositeNode(grammarAccess.getPackageAccess().getEntrypointExpressionParserRuleCall_8_0_4_0_2_0());
          																
        }
        pushFollow(FOLLOW_5);
        lv_entrypoint_43_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred111_InternalGitHubActionsParser

    // $ANTLR start synpred112_InternalGitHubActionsParser
    public final void synpred112_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_45=null;
        Token otherlv_46=null;
        Token this_NEWLINE_48=null;
        EObject lv_containerArgs_47_0 = null;


        // InternalGitHubActionsParser.g:3909:10: ( ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:3909:10: ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:3909:10: ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:3910:11: {...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred112_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1)");
        }
        // InternalGitHubActionsParser.g:3910:114: ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:3911:12: ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1);
        // InternalGitHubActionsParser.g:3914:15: ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:3914:16: {...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred112_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3914:25: (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:3914:26: otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE
        {
        otherlv_45=(Token)match(input,Args,FOLLOW_3); if (state.failed) return ;
        otherlv_46=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3922:15: ( (lv_containerArgs_47_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3923:16: (lv_containerArgs_47_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3923:16: (lv_containerArgs_47_0= ruleExpression )
        // InternalGitHubActionsParser.g:3924:17: lv_containerArgs_47_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																	newCompositeNode(grammarAccess.getPackageAccess().getContainerArgsExpressionParserRuleCall_8_0_4_1_2_0());
          																
        }
        pushFollow(FOLLOW_5);
        lv_containerArgs_47_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_48=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred112_InternalGitHubActionsParser

    // $ANTLR start synpred115_InternalGitHubActionsParser
    public final void synpred115_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_36=null;
        Token otherlv_37=null;
        Token this_NEWLINE_38=null;
        Token this_BEGIN_39=null;
        Token otherlv_41=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_46=null;
        Token this_NEWLINE_48=null;
        Token this_END_50=null;
        EObject lv_entrypoint_43_0 = null;

        EObject lv_containerArgs_47_0 = null;

        EObject lv_args_49_0 = null;


        // InternalGitHubActionsParser.g:3838:3: ( ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3838:3: ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3838:3: ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:3839:4: {...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred115_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8)");
        }
        // InternalGitHubActionsParser.g:3839:101: ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:3840:5: ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 8);
        // InternalGitHubActionsParser.g:3843:8: ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) )
        // InternalGitHubActionsParser.g:3843:9: {...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred115_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3843:18: ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) )
        int alt263=2;
        int LA263_0 = input.LA(1);

        if ( (LA263_0==With) ) {
            alt263=1;
        }
        else if ( (LA263_0==RULE_ID) ) {
            alt263=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 263, 0, input);

            throw nvae;
        }
        switch (alt263) {
            case 1 :
                // InternalGitHubActionsParser.g:3843:19: (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
                {
                // InternalGitHubActionsParser.g:3843:19: (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) )
                // InternalGitHubActionsParser.g:3844:9: otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
                {
                otherlv_36=(Token)match(input,With,FOLLOW_3); if (state.failed) return ;
                otherlv_37=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_39=(Token)match(input,RULE_BEGIN,FOLLOW_39); if (state.failed) return ;
                // InternalGitHubActionsParser.g:3860:9: ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) )
                // InternalGitHubActionsParser.g:3861:10: ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) )
                {
                // InternalGitHubActionsParser.g:3861:10: ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) )
                // InternalGitHubActionsParser.g:3862:11: ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?)
                {
                getUnorderedGroupHelper().enter(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4());
                // InternalGitHubActionsParser.g:3865:11: ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?)
                // InternalGitHubActionsParser.g:3866:12: ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?
                {
                // InternalGitHubActionsParser.g:3866:12: ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+
                int cnt261=0;
                loop261:
                do {
                    int alt261=3;
                    int LA261_0 = input.LA(1);

                    if ( LA261_0 == Entrypoint && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0) ) {
                        alt261=1;
                    }
                    else if ( LA261_0 == Args && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1) ) {
                        alt261=2;
                    }


                    switch (alt261) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:3867:10: ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:3867:10: ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) )
                	    // InternalGitHubActionsParser.g:3868:11: {...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred115_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0)");
                	    }
                	    // InternalGitHubActionsParser.g:3868:114: ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) )
                	    // InternalGitHubActionsParser.g:3869:12: ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 0);
                	    // InternalGitHubActionsParser.g:3872:15: ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                	    // InternalGitHubActionsParser.g:3872:16: {...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred115_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:3872:25: (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                	    // InternalGitHubActionsParser.g:3872:26: otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
                	    {
                	    otherlv_41=(Token)match(input,Entrypoint,FOLLOW_3); if (state.failed) return ;
                	    otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:3880:15: ( (lv_entrypoint_43_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:3881:16: (lv_entrypoint_43_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:3881:16: (lv_entrypoint_43_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:3882:17: lv_entrypoint_43_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																	newCompositeNode(grammarAccess.getPackageAccess().getEntrypointExpressionParserRuleCall_8_0_4_0_2_0());
                	      																
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_entrypoint_43_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_110); if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;
                	case 2 :
                	    // InternalGitHubActionsParser.g:3909:10: ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:3909:10: ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) )
                	    // InternalGitHubActionsParser.g:3910:11: {...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred115_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1)");
                	    }
                	    // InternalGitHubActionsParser.g:3910:114: ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) )
                	    // InternalGitHubActionsParser.g:3911:12: ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4(), 1);
                	    // InternalGitHubActionsParser.g:3914:15: ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) )
                	    // InternalGitHubActionsParser.g:3914:16: {...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred115_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:3914:25: (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE )
                	    // InternalGitHubActionsParser.g:3914:26: otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE
                	    {
                	    otherlv_45=(Token)match(input,Args,FOLLOW_3); if (state.failed) return ;
                	    otherlv_46=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:3922:15: ( (lv_containerArgs_47_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:3923:16: (lv_containerArgs_47_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:3923:16: (lv_containerArgs_47_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:3924:17: lv_containerArgs_47_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																	newCompositeNode(grammarAccess.getPackageAccess().getContainerArgsExpressionParserRuleCall_8_0_4_1_2_0());
                	      																
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_containerArgs_47_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_48=(Token)match(input,RULE_NEWLINE,FOLLOW_110); if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt261 >= 1 ) break loop261;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(261, input);
                            throw eee;
                    }
                    cnt261++;
                } while (true);

                if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4()) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred115_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_4())");
                }

                }


                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:3961:8: ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END )
                {
                // InternalGitHubActionsParser.g:3961:8: ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END )
                // InternalGitHubActionsParser.g:3962:9: ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END
                {
                // InternalGitHubActionsParser.g:3962:9: ( (lv_args_49_0= ruleVariableAssignment ) )+
                int cnt262=0;
                loop262:
                do {
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==RULE_ID) ) {
                        alt262=1;
                    }


                    switch (alt262) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:3963:10: (lv_args_49_0= ruleVariableAssignment )
                	    {
                	    // InternalGitHubActionsParser.g:3963:10: (lv_args_49_0= ruleVariableAssignment )
                	    // InternalGitHubActionsParser.g:3964:11: lv_args_49_0= ruleVariableAssignment
                	    {
                	    if ( state.backtracking==0 ) {

                	      											newCompositeNode(grammarAccess.getPackageAccess().getArgsVariableAssignmentParserRuleCall_8_1_0_0());
                	      										
                	    }
                	    pushFollow(FOLLOW_17);
                	    lv_args_49_0=ruleVariableAssignment();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt262 >= 1 ) break loop262;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(262, input);
                            throw eee;
                    }
                    cnt262++;
                } while (true);

                this_END_50=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred115_InternalGitHubActionsParser

    // $ANTLR start synpred116_InternalGitHubActionsParser
    public final void synpred116_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_NEWLINE_4=null;
        EObject lv_name_3_0 = null;


        // InternalGitHubActionsParser.g:4079:3: ( ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:4079:3: ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:4079:3: ({...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:4080:4: {...}? => ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred116_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:4080:110: ( ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:4081:5: ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:4084:8: ({...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:4084:9: {...}? => (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred116_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:4084:18: (otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:4084:19: otherlv_1= Group otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE
        {
        otherlv_1=(Token)match(input,Group,FOLLOW_3); if (state.failed) return ;
        otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:4092:8: ( (lv_name_3_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:4093:9: (lv_name_3_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:4093:9: (lv_name_3_0= ruleExpression )
        // InternalGitHubActionsParser.g:4094:10: lv_name_3_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getNameExpressionParserRuleCall_0_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_name_3_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred116_InternalGitHubActionsParser

    // $ANTLR start synpred117_InternalGitHubActionsParser
    public final void synpred117_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_cancelInProgress_7_0 = null;


        // InternalGitHubActionsParser.g:4121:3: ( ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:4121:3: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:4121:3: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:4122:4: {...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred117_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:4122:110: ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:4123:5: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:4126:8: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:4126:9: {...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred117_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:4126:18: (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:4126:19: otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
        {
        otherlv_5=(Token)match(input,CancelInProgress,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:4134:8: ( (lv_cancelInProgress_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:4135:9: (lv_cancelInProgress_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:4135:9: (lv_cancelInProgress_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:4136:10: lv_cancelInProgress_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getCancelInProgressExpressionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_cancelInProgress_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred117_InternalGitHubActionsParser

    // $ANTLR start synpred146_InternalGitHubActionsParser
    public final void synpred146_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        EObject lv_branches_29_0 = null;

        EObject lv_branches_31_0 = null;


        // InternalGitHubActionsParser.g:5224:12: ( (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        {
        // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:5225:13: otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
        {
        otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5229:13: ( (lv_branches_29_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
        // InternalGitHubActionsParser.g:5231:15: lv_branches_29_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_1_0());
          														
        }
        pushFollow(FOLLOW_9);
        lv_branches_29_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalGitHubActionsParser.g:5248:13: (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )*
        loop269:
        do {
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==Comma) ) {
                alt269=1;
            }


            switch (alt269) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:5249:14: otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) )
        	    {
        	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:5253:14: ( (lv_branches_31_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:5255:16: lv_branches_31_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_9);
        	    lv_branches_31_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop269;
            }
        } while (true);

        otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred146_InternalGitHubActionsParser

    // $ANTLR start synpred148_InternalGitHubActionsParser
    public final void synpred148_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        EObject lv_branches_37_0 = null;


        // InternalGitHubActionsParser.g:5283:12: ( (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )
        // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        {
        // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        // InternalGitHubActionsParser.g:5284:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
        {
        this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5292:13: (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
        int cnt270=0;
        loop270:
        do {
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==HyphenMinus) ) {
                alt270=1;
            }


            switch (alt270) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:5293:14: otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
        	    {
        	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:5297:14: ( (lv_branches_37_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:5299:16: lv_branches_37_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_5);
        	    lv_branches_37_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt270 >= 1 ) break loop270;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(270, input);
                    throw eee;
            }
            cnt270++;
        } while (true);

        this_END_39=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred148_InternalGitHubActionsParser

    // $ANTLR start synpred149_InternalGitHubActionsParser
    public final void synpred149_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token this_NEWLINE_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_NEWLINE_16=null;
        Token this_NEWLINE_17=null;
        Token this_BEGIN_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        Token this_END_22=null;
        Token otherlv_23=null;
        Token lv_ignoreSpecifiedBranches_24_0=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        Enumerator lv_eventTypes_9_0 = null;

        Enumerator lv_eventTypes_12_0 = null;

        Enumerator lv_eventTypes_14_0 = null;

        Enumerator lv_eventTypes_20_0 = null;

        EObject lv_branches_26_0 = null;

        EObject lv_branches_29_0 = null;

        EObject lv_branches_31_0 = null;

        EObject lv_branches_37_0 = null;


        // InternalGitHubActionsParser.g:5025:6: ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:5025:6: ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:5025:6: ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:5026:7: {...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred149_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
        }
        // InternalGitHubActionsParser.g:5026:129: ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:5027:8: ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0);
        // InternalGitHubActionsParser.g:5030:11: ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:5030:12: {...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred149_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5030:21: ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        // InternalGitHubActionsParser.g:5030:22: ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        {
        // InternalGitHubActionsParser.g:5030:22: ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) )
        int alt273=3;
        switch ( input.LA(1) ) {
        case Types:
            {
            alt273=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt273=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt273=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 273, 0, input);

            throw nvae;
        }

        switch (alt273) {
            case 1 :
                // InternalGitHubActionsParser.g:5031:12: (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:5031:12: (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:5032:13: otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE )
                {
                otherlv_7=(Token)match(input,Types,FOLLOW_3); if (state.failed) return ;
                otherlv_8=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5040:13: ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5041:14: ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:5041:14: ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:5042:15: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:5042:15: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:5043:16: lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_eventTypes_9_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_111); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5067:12: (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5067:12: (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5068:13: otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE
                {
                otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5072:13: ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:5073:14: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:5073:14: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:5074:15: lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_eventTypes_12_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5091:13: (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                loop271:
                do {
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==Comma) ) {
                        alt271=1;
                    }


                    switch (alt271) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5092:14: otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    {
                	    otherlv_13=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5096:14: ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:5097:15: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:5097:15: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:5098:16: lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_eventTypes_14_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop271;
                    }
                } while (true);

                otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_111); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5126:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                {
                // InternalGitHubActionsParser.g:5126:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                // InternalGitHubActionsParser.g:5127:13: this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END
                {
                this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5135:13: (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+
                int cnt272=0;
                loop272:
                do {
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==HyphenMinus) ) {
                        alt272=1;
                    }


                    switch (alt272) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5136:14: otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE
                	    {
                	    otherlv_19=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5140:14: ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:5141:15: (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:5141:15: (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:5142:16: lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_eventTypes_20_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt272 >= 1 ) break loop272;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(272, input);
                            throw eee;
                    }
                    cnt272++;
                } while (true);

                this_END_22=(Token)match(input,RULE_END,FOLLOW_111); if (state.failed) return ;

                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:5170:11: ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        int alt277=4;
        switch ( input.LA(1) ) {
            case BranchesIgnore:
            case Branches:
                {
                alt277=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt277=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt277=3;
                }
                break;
        }

        switch (alt277) {
            case 1 :
                // InternalGitHubActionsParser.g:5171:12: ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:5171:12: ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:5172:13: (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5172:13: (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) )
                int alt274=2;
                int LA274_0 = input.LA(1);

                if ( (LA274_0==Branches) ) {
                    alt274=1;
                }
                else if ( (LA274_0==BranchesIgnore) ) {
                    alt274=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 274, 0, input);

                    throw nvae;
                }
                switch (alt274) {
                    case 1 :
                        // InternalGitHubActionsParser.g:5173:14: otherlv_23= Branches
                        {
                        otherlv_23=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:5178:14: ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:5178:14: ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:5179:15: (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:5179:15: (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:5180:16: lv_ignoreSpecifiedBranches_24_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_24_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5197:13: ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5198:14: ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:5198:14: ( (lv_branches_26_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5199:15: (lv_branches_26_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5199:15: (lv_branches_26_0= ruleExpression )
                // InternalGitHubActionsParser.g:5200:16: lv_branches_26_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_branches_26_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5225:13: otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
                {
                otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5229:13: ( (lv_branches_29_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
                // InternalGitHubActionsParser.g:5231:15: lv_branches_29_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_branches_29_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5248:13: (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )*
                loop275:
                do {
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==Comma) ) {
                        alt275=1;
                    }


                    switch (alt275) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5249:14: otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) )
                	    {
                	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5253:14: ( (lv_branches_31_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5255:16: lv_branches_31_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_branches_31_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop275;
                    }
                } while (true);

                otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                {
                // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                // InternalGitHubActionsParser.g:5284:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
                {
                this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5292:13: (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
                int cnt276=0;
                loop276:
                do {
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==HyphenMinus) ) {
                        alt276=1;
                    }


                    switch (alt276) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5293:14: otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
                	    {
                	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5297:14: ( (lv_branches_37_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5299:16: lv_branches_37_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_branches_37_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt276 >= 1 ) break loop276;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(276, input);
                            throw eee;
                    }
                    cnt276++;
                } while (true);

                this_END_39=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred149_InternalGitHubActionsParser

    // $ANTLR start synpred155_InternalGitHubActionsParser
    public final void synpred155_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_40=null;
        Token lv_ignoreSpecifiedPaths_41_0=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token this_NEWLINE_50=null;
        Token this_NEWLINE_51=null;
        Token this_BEGIN_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token this_END_56=null;
        EObject lv_paths_43_0 = null;

        EObject lv_paths_46_0 = null;

        EObject lv_paths_48_0 = null;

        EObject lv_paths_54_0 = null;


        // InternalGitHubActionsParser.g:5333:6: ( ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5333:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:5333:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:5334:7: {...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred155_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
        }
        // InternalGitHubActionsParser.g:5334:129: ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:5335:8: ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1);
        // InternalGitHubActionsParser.g:5338:11: ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        // InternalGitHubActionsParser.g:5338:12: {...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred155_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5338:21: ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        int alt283=3;
        switch ( input.LA(1) ) {
        case PathsIgnore:
        case Paths:
            {
            alt283=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt283=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt283=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 283, 0, input);

            throw nvae;
        }

        switch (alt283) {
            case 1 :
                // InternalGitHubActionsParser.g:5338:22: ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:5338:22: ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:5339:12: (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5339:12: (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) )
                int alt280=2;
                int LA280_0 = input.LA(1);

                if ( (LA280_0==Paths) ) {
                    alt280=1;
                }
                else if ( (LA280_0==PathsIgnore) ) {
                    alt280=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 280, 0, input);

                    throw nvae;
                }
                switch (alt280) {
                    case 1 :
                        // InternalGitHubActionsParser.g:5340:13: otherlv_40= Paths
                        {
                        otherlv_40=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:5345:13: ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:5345:13: ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:5346:14: (lv_ignoreSpecifiedPaths_41_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:5346:14: (lv_ignoreSpecifiedPaths_41_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:5347:15: lv_ignoreSpecifiedPaths_41_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_41_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5364:12: ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5365:13: ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:5365:13: ( (lv_paths_43_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5366:14: (lv_paths_43_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5366:14: (lv_paths_43_0= ruleExpression )
                // InternalGitHubActionsParser.g:5367:15: lv_paths_43_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_paths_43_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5391:11: (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5391:11: (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5392:12: otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE
                {
                otherlv_45=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5396:12: ( (lv_paths_46_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5397:13: (lv_paths_46_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5397:13: (lv_paths_46_0= ruleExpression )
                // InternalGitHubActionsParser.g:5398:14: lv_paths_46_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_paths_46_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5415:12: (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )*
                loop281:
                do {
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==Comma) ) {
                        alt281=1;
                    }


                    switch (alt281) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5416:13: otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) )
                	    {
                	    otherlv_47=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5420:13: ( (lv_paths_48_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5421:14: (lv_paths_48_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5421:14: (lv_paths_48_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5422:15: lv_paths_48_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_paths_48_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop281;
                    }
                } while (true);

                otherlv_49=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_50=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5450:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                {
                // InternalGitHubActionsParser.g:5450:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                // InternalGitHubActionsParser.g:5451:12: this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END
                {
                this_NEWLINE_51=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_52=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5459:12: (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+
                int cnt282=0;
                loop282:
                do {
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==HyphenMinus) ) {
                        alt282=1;
                    }


                    switch (alt282) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5460:13: otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
                	    {
                	    otherlv_53=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5464:13: ( (lv_paths_54_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5465:14: (lv_paths_54_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5465:14: (lv_paths_54_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5466:15: lv_paths_54_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_paths_54_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt282 >= 1 ) break loop282;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(282, input);
                            throw eee;
                    }
                    cnt282++;
                } while (true);

                this_END_56=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred155_InternalGitHubActionsParser

    // $ANTLR start synpred156_InternalGitHubActionsParser
    public final void synpred156_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_NEWLINE_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token this_NEWLINE_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_NEWLINE_16=null;
        Token this_NEWLINE_17=null;
        Token this_BEGIN_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        Token this_END_22=null;
        Token otherlv_23=null;
        Token lv_ignoreSpecifiedBranches_24_0=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        Token otherlv_40=null;
        Token lv_ignoreSpecifiedPaths_41_0=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token this_NEWLINE_50=null;
        Token this_NEWLINE_51=null;
        Token this_BEGIN_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token this_END_56=null;
        Enumerator lv_eventTypes_9_0 = null;

        Enumerator lv_eventTypes_12_0 = null;

        Enumerator lv_eventTypes_14_0 = null;

        Enumerator lv_eventTypes_20_0 = null;

        EObject lv_branches_26_0 = null;

        EObject lv_branches_29_0 = null;

        EObject lv_branches_31_0 = null;

        EObject lv_branches_37_0 = null;

        EObject lv_paths_43_0 = null;

        EObject lv_paths_46_0 = null;

        EObject lv_paths_48_0 = null;

        EObject lv_paths_54_0 = null;


        // InternalGitHubActionsParser.g:5009:4: ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) )
        // InternalGitHubActionsParser.g:5009:4: (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
        {
        // InternalGitHubActionsParser.g:5009:4: (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
        // InternalGitHubActionsParser.g:5010:5: this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
        {
        this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_47); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5018:5: ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
        // InternalGitHubActionsParser.g:5019:6: ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
        {
        // InternalGitHubActionsParser.g:5019:6: ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
        // InternalGitHubActionsParser.g:5020:7: ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
        {
        getUnorderedGroupHelper().enter(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2());
        // InternalGitHubActionsParser.g:5023:7: ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
        // InternalGitHubActionsParser.g:5024:8: ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?
        {
        // InternalGitHubActionsParser.g:5024:8: ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+
        int cnt295=0;
        loop295:
        do {
            int alt295=3;
            alt295 = dfa295.predict(input);
            switch (alt295) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:5025:6: ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:5025:6: ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        	    // InternalGitHubActionsParser.g:5026:7: {...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred156_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
        	    }
        	    // InternalGitHubActionsParser.g:5026:129: ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        	    // InternalGitHubActionsParser.g:5027:8: ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0);
        	    // InternalGitHubActionsParser.g:5030:11: ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        	    // InternalGitHubActionsParser.g:5030:12: {...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred156_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:5030:21: ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        	    // InternalGitHubActionsParser.g:5030:22: ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        	    {
        	    // InternalGitHubActionsParser.g:5030:22: ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) )
        	    int alt286=3;
        	    switch ( input.LA(1) ) {
        	    case Types:
        	        {
        	        alt286=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt286=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt286=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 286, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt286) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:5031:12: (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:5031:12: (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:5032:13: otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE )
        	            {
        	            otherlv_7=(Token)match(input,Types,FOLLOW_3); if (state.failed) return ;
        	            otherlv_8=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5040:13: ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5041:14: ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:5041:14: ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            // InternalGitHubActionsParser.g:5042:15: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            {
        	            // InternalGitHubActionsParser.g:5042:15: (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            // InternalGitHubActionsParser.g:5043:16: lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            {
        	            if ( state.backtracking==0 ) {

        	              																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_0_2_0_0());
        	              															
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_eventTypes_9_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:5067:12: (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5067:12: (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5068:13: otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE
        	            {
        	            otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5072:13: ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            // InternalGitHubActionsParser.g:5073:14: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            {
        	            // InternalGitHubActionsParser.g:5073:14: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            // InternalGitHubActionsParser.g:5074:15: lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_1_1_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_eventTypes_12_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:5091:13: (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
        	            loop284:
        	            do {
        	                int alt284=2;
        	                int LA284_0 = input.LA(1);

        	                if ( (LA284_0==Comma) ) {
        	                    alt284=1;
        	                }


        	                switch (alt284) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5092:14: otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            	    {
        	            	    otherlv_13=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5096:14: ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            	    // InternalGitHubActionsParser.g:5097:15: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5097:15: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    // InternalGitHubActionsParser.g:5098:16: lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_1_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_eventTypes_14_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop284;
        	                }
        	            } while (true);

        	            otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:5126:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:5126:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
        	            // InternalGitHubActionsParser.g:5127:13: this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END
        	            {
        	            this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5135:13: (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+
        	            int cnt285=0;
        	            loop285:
        	            do {
        	                int alt285=2;
        	                int LA285_0 = input.LA(1);

        	                if ( (LA285_0==HyphenMinus) ) {
        	                    alt285=1;
        	                }


        	                switch (alt285) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5136:14: otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE
        	            	    {
        	            	    otherlv_19=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5140:14: ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            	    // InternalGitHubActionsParser.g:5141:15: (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5141:15: (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    // InternalGitHubActionsParser.g:5142:16: lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_2_0_0_2_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_eventTypes_20_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt285 >= 1 ) break loop285;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(285, input);
        	                        throw eee;
        	                }
        	                cnt285++;
        	            } while (true);

        	            this_END_22=(Token)match(input,RULE_END,FOLLOW_48); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }

        	    // InternalGitHubActionsParser.g:5170:11: ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        	    int alt290=4;
        	    alt290 = dfa290.predict(input);
        	    switch (alt290) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:5171:12: ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:5171:12: ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:5172:13: (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5172:13: (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) )
        	            int alt287=2;
        	            int LA287_0 = input.LA(1);

        	            if ( (LA287_0==Branches) ) {
        	                alt287=1;
        	            }
        	            else if ( (LA287_0==BranchesIgnore) ) {
        	                alt287=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 287, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt287) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:5173:14: otherlv_23= Branches
        	                    {
        	                    otherlv_23=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:5178:14: ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:5178:14: ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) )
        	                    // InternalGitHubActionsParser.g:5179:15: (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:5179:15: (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore )
        	                    // InternalGitHubActionsParser.g:5180:16: lv_ignoreSpecifiedBranches_24_0= BranchesIgnore
        	                    {
        	                    lv_ignoreSpecifiedBranches_24_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5197:13: ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5198:14: ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:5198:14: ( (lv_branches_26_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5199:15: (lv_branches_26_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5199:15: (lv_branches_26_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5200:16: lv_branches_26_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_0_2_0_0());
        	              															
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_branches_26_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5224:12: (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5225:13: otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
        	            {
        	            otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5229:13: ( (lv_branches_29_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5230:14: (lv_branches_29_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5231:15: lv_branches_29_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_1_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_branches_29_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:5248:13: (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )*
        	            loop288:
        	            do {
        	                int alt288=2;
        	                int LA288_0 = input.LA(1);

        	                if ( (LA288_0==Comma) ) {
        	                    alt288=1;
        	                }


        	                switch (alt288) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5249:14: otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5253:14: ( (lv_branches_31_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5254:15: (lv_branches_31_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5255:16: lv_branches_31_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_branches_31_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop288;
        	                }
        	            } while (true);

        	            otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:5283:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        	            // InternalGitHubActionsParser.g:5284:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
        	            {
        	            this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5292:13: (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
        	            int cnt289=0;
        	            loop289:
        	            do {
        	                int alt289=2;
        	                int LA289_0 = input.LA(1);

        	                if ( (LA289_0==HyphenMinus) ) {
        	                    alt289=1;
        	                }


        	                switch (alt289) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5293:14: otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
        	            	    {
        	            	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5297:14: ( (lv_branches_37_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5298:15: (lv_branches_37_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5299:16: lv_branches_37_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_branches_37_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt289 >= 1 ) break loop289;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(289, input);
        	                        throw eee;
        	                }
        	                cnt289++;
        	            } while (true);

        	            this_END_39=(Token)match(input,RULE_END,FOLLOW_49); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 2 :
        	    // InternalGitHubActionsParser.g:5333:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:5333:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        	    // InternalGitHubActionsParser.g:5334:7: {...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred156_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
        	    }
        	    // InternalGitHubActionsParser.g:5334:129: ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:5335:8: ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1);
        	    // InternalGitHubActionsParser.g:5338:11: ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:5338:12: {...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred156_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:5338:21: ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        	    int alt294=3;
        	    switch ( input.LA(1) ) {
        	    case PathsIgnore:
        	    case Paths:
        	        {
        	        alt294=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt294=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt294=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 294, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt294) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:5338:22: ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:5338:22: ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:5339:12: (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5339:12: (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) )
        	            int alt291=2;
        	            int LA291_0 = input.LA(1);

        	            if ( (LA291_0==Paths) ) {
        	                alt291=1;
        	            }
        	            else if ( (LA291_0==PathsIgnore) ) {
        	                alt291=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 291, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt291) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:5340:13: otherlv_40= Paths
        	                    {
        	                    otherlv_40=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:5345:13: ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:5345:13: ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) )
        	                    // InternalGitHubActionsParser.g:5346:14: (lv_ignoreSpecifiedPaths_41_0= PathsIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:5346:14: (lv_ignoreSpecifiedPaths_41_0= PathsIgnore )
        	                    // InternalGitHubActionsParser.g:5347:15: lv_ignoreSpecifiedPaths_41_0= PathsIgnore
        	                    {
        	                    lv_ignoreSpecifiedPaths_41_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5364:12: ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5365:13: ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:5365:13: ( (lv_paths_43_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5366:14: (lv_paths_43_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5366:14: (lv_paths_43_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5367:15: lv_paths_43_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_0_2_0_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_paths_43_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:5391:11: (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5391:11: (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5392:12: otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE
        	            {
        	            otherlv_45=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5396:12: ( (lv_paths_46_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5397:13: (lv_paths_46_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5397:13: (lv_paths_46_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5398:14: lv_paths_46_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_1_1_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_paths_46_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:5415:12: (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )*
        	            loop292:
        	            do {
        	                int alt292=2;
        	                int LA292_0 = input.LA(1);

        	                if ( (LA292_0==Comma) ) {
        	                    alt292=1;
        	                }


        	                switch (alt292) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5416:13: otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_47=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5420:13: ( (lv_paths_48_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5421:14: (lv_paths_48_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5421:14: (lv_paths_48_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5422:15: lv_paths_48_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_1_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_paths_48_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop292;
        	                }
        	            } while (true);

        	            otherlv_49=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_50=(Token)match(input,RULE_NEWLINE,FOLLOW_49); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:5450:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:5450:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
        	            // InternalGitHubActionsParser.g:5451:12: this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END
        	            {
        	            this_NEWLINE_51=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_52=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5459:12: (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+
        	            int cnt293=0;
        	            loop293:
        	            do {
        	                int alt293=2;
        	                int LA293_0 = input.LA(1);

        	                if ( (LA293_0==HyphenMinus) ) {
        	                    alt293=1;
        	                }


        	                switch (alt293) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5460:13: otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
        	            	    {
        	            	    otherlv_53=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5464:13: ( (lv_paths_54_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5465:14: (lv_paths_54_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5465:14: (lv_paths_54_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5466:15: lv_paths_54_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_1_2_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_paths_54_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt293 >= 1 ) break loop293;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(293, input);
        	                        throw eee;
        	                }
        	                cnt293++;
        	            } while (true);

        	            this_END_56=(Token)match(input,RULE_END,FOLLOW_49); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt295 >= 1 ) break loop295;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(295, input);
                    throw eee;
            }
            cnt295++;
        } while (true);

        if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2()) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred156_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2())");
        }

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred156_InternalGitHubActionsParser

    // $ANTLR start synpred167_InternalGitHubActionsParser
    public final void synpred167_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_58=null;
        Token lv_ignoreSpecifiedBranches_59_0=null;
        Token otherlv_60=null;
        Token this_NEWLINE_62=null;
        Token otherlv_63=null;
        Token otherlv_65=null;
        Token otherlv_67=null;
        Token this_NEWLINE_68=null;
        Token this_NEWLINE_69=null;
        Token this_BEGIN_70=null;
        Token otherlv_71=null;
        Token this_NEWLINE_73=null;
        Token this_END_74=null;
        Token otherlv_75=null;
        Token otherlv_76=null;
        Token this_NEWLINE_78=null;
        Token otherlv_79=null;
        Token otherlv_81=null;
        Token otherlv_83=null;
        Token this_NEWLINE_84=null;
        Token this_NEWLINE_85=null;
        Token this_BEGIN_86=null;
        Token otherlv_87=null;
        Token this_NEWLINE_89=null;
        Token this_END_90=null;
        EObject lv_branches_61_0 = null;

        EObject lv_branches_64_0 = null;

        EObject lv_branches_66_0 = null;

        EObject lv_branches_72_0 = null;

        Enumerator lv_eventTypes_77_0 = null;

        Enumerator lv_eventTypes_80_0 = null;

        Enumerator lv_eventTypes_82_0 = null;

        Enumerator lv_eventTypes_88_0 = null;


        // InternalGitHubActionsParser.g:5516:5: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:5516:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:5516:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:5517:6: {...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred167_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0)");
        }
        // InternalGitHubActionsParser.g:5517:126: ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:5518:7: ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0);
        // InternalGitHubActionsParser.g:5521:10: ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:5521:11: {...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred167_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5521:20: ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? )
        // InternalGitHubActionsParser.g:5521:21: ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )?
        {
        // InternalGitHubActionsParser.g:5521:21: ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) )
        int alt303=3;
        switch ( input.LA(1) ) {
        case BranchesIgnore:
        case Branches:
            {
            alt303=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt303=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt303=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 303, 0, input);

            throw nvae;
        }

        switch (alt303) {
            case 1 :
                // InternalGitHubActionsParser.g:5522:11: ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:5522:11: ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:5523:12: (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5523:12: (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) )
                int alt300=2;
                int LA300_0 = input.LA(1);

                if ( (LA300_0==Branches) ) {
                    alt300=1;
                }
                else if ( (LA300_0==BranchesIgnore) ) {
                    alt300=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 300, 0, input);

                    throw nvae;
                }
                switch (alt300) {
                    case 1 :
                        // InternalGitHubActionsParser.g:5524:13: otherlv_58= Branches
                        {
                        otherlv_58=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:5529:13: ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:5529:13: ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:5530:14: (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:5530:14: (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:5531:15: lv_ignoreSpecifiedBranches_59_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_59_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5548:12: ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5549:13: ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:5549:13: ( (lv_branches_61_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5550:14: (lv_branches_61_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5550:14: (lv_branches_61_0= ruleExpression )
                // InternalGitHubActionsParser.g:5551:15: lv_branches_61_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_branches_61_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_62=(Token)match(input,RULE_NEWLINE,FOLLOW_112); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5575:11: (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5575:11: (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5576:12: otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE
                {
                otherlv_63=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5580:12: ( (lv_branches_64_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5581:13: (lv_branches_64_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5581:13: (lv_branches_64_0= ruleExpression )
                // InternalGitHubActionsParser.g:5582:14: lv_branches_64_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_branches_64_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5599:12: (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )*
                loop301:
                do {
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==Comma) ) {
                        alt301=1;
                    }


                    switch (alt301) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5600:13: otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) )
                	    {
                	    otherlv_65=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5604:13: ( (lv_branches_66_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5605:14: (lv_branches_66_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5605:14: (lv_branches_66_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5606:15: lv_branches_66_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_branches_66_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop301;
                    }
                } while (true);

                otherlv_67=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_68=(Token)match(input,RULE_NEWLINE,FOLLOW_112); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5634:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                {
                // InternalGitHubActionsParser.g:5634:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                // InternalGitHubActionsParser.g:5635:12: this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END
                {
                this_NEWLINE_69=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_70=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5643:12: (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+
                int cnt302=0;
                loop302:
                do {
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==HyphenMinus) ) {
                        alt302=1;
                    }


                    switch (alt302) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5644:13: otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE
                	    {
                	    otherlv_71=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5648:13: ( (lv_branches_72_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5649:14: (lv_branches_72_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5649:14: (lv_branches_72_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5650:15: lv_branches_72_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_branches_72_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt302 >= 1 ) break loop302;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(302, input);
                            throw eee;
                    }
                    cnt302++;
                } while (true);

                this_END_74=(Token)match(input,RULE_END,FOLLOW_112); if (state.failed) return ;

                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:5678:10: ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )?
        int alt306=4;
        switch ( input.LA(1) ) {
            case Types:
                {
                alt306=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt306=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt306=3;
                }
                break;
        }

        switch (alt306) {
            case 1 :
                // InternalGitHubActionsParser.g:5679:11: (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:5679:11: (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:5680:12: otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE )
                {
                otherlv_75=(Token)match(input,Types,FOLLOW_3); if (state.failed) return ;
                otherlv_76=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5688:12: ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5689:13: ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:5689:13: ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:5690:14: (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:5690:14: (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:5691:15: lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_eventTypes_77_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_78=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5715:11: (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5715:11: (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5716:12: otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE
                {
                otherlv_79=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5720:12: ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:5721:13: (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:5721:13: (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:5722:14: lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_eventTypes_80_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5739:12: (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                loop304:
                do {
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==Comma) ) {
                        alt304=1;
                    }


                    switch (alt304) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5740:13: otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    {
                	    otherlv_81=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5744:13: ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:5745:14: (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:5745:14: (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:5746:15: lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_eventTypes_82_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop304;
                    }
                } while (true);

                otherlv_83=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_84=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5774:11: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END )
                {
                // InternalGitHubActionsParser.g:5774:11: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END )
                // InternalGitHubActionsParser.g:5775:12: this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END
                {
                this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_86=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5783:12: (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+
                int cnt305=0;
                loop305:
                do {
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==HyphenMinus) ) {
                        alt305=1;
                    }


                    switch (alt305) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5784:13: otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE
                	    {
                	    otherlv_87=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5788:13: ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:5789:14: (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:5789:14: (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:5790:15: lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_eventTypes_88_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_89=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt305 >= 1 ) break loop305;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(305, input);
                            throw eee;
                    }
                    cnt305++;
                } while (true);

                this_END_90=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred167_InternalGitHubActionsParser

    // $ANTLR start synpred173_InternalGitHubActionsParser
    public final void synpred173_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_91=null;
        Token lv_ignoreSpecifiedPaths_92_0=null;
        Token otherlv_93=null;
        Token this_NEWLINE_95=null;
        Token otherlv_96=null;
        Token otherlv_98=null;
        Token otherlv_100=null;
        Token this_NEWLINE_101=null;
        Token this_NEWLINE_102=null;
        Token this_BEGIN_103=null;
        Token otherlv_104=null;
        Token this_NEWLINE_106=null;
        Token this_END_107=null;
        EObject lv_paths_94_0 = null;

        EObject lv_paths_97_0 = null;

        EObject lv_paths_99_0 = null;

        EObject lv_paths_105_0 = null;


        // InternalGitHubActionsParser.g:5824:5: ( ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5824:5: ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:5824:5: ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:5825:6: {...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred173_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1)");
        }
        // InternalGitHubActionsParser.g:5825:126: ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:5826:7: ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1);
        // InternalGitHubActionsParser.g:5829:10: ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) )
        // InternalGitHubActionsParser.g:5829:11: {...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred173_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5829:20: ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) )
        int alt312=3;
        switch ( input.LA(1) ) {
        case PathsIgnore:
        case Paths:
            {
            alt312=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt312=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt312=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 312, 0, input);

            throw nvae;
        }

        switch (alt312) {
            case 1 :
                // InternalGitHubActionsParser.g:5829:21: ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:5829:21: ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:5830:11: (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5830:11: (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) )
                int alt309=2;
                int LA309_0 = input.LA(1);

                if ( (LA309_0==Paths) ) {
                    alt309=1;
                }
                else if ( (LA309_0==PathsIgnore) ) {
                    alt309=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 309, 0, input);

                    throw nvae;
                }
                switch (alt309) {
                    case 1 :
                        // InternalGitHubActionsParser.g:5831:12: otherlv_91= Paths
                        {
                        otherlv_91=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:5836:12: ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:5836:12: ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:5837:13: (lv_ignoreSpecifiedPaths_92_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:5837:13: (lv_ignoreSpecifiedPaths_92_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:5838:14: lv_ignoreSpecifiedPaths_92_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_92_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_93=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5855:11: ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5856:12: ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:5856:12: ( (lv_paths_94_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5857:13: (lv_paths_94_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5857:13: (lv_paths_94_0= ruleExpression )
                // InternalGitHubActionsParser.g:5858:14: lv_paths_94_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_0_2_0_0());
                  													
                }
                pushFollow(FOLLOW_5);
                lv_paths_94_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_95=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5882:10: (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:5882:10: (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:5883:11: otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE
                {
                otherlv_96=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5887:11: ( (lv_paths_97_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5888:12: (lv_paths_97_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5888:12: (lv_paths_97_0= ruleExpression )
                // InternalGitHubActionsParser.g:5889:13: lv_paths_97_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_1_0());
                  												
                }
                pushFollow(FOLLOW_9);
                lv_paths_97_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5906:11: (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )*
                loop310:
                do {
                    int alt310=2;
                    int LA310_0 = input.LA(1);

                    if ( (LA310_0==Comma) ) {
                        alt310=1;
                    }


                    switch (alt310) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5907:12: otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) )
                	    {
                	    otherlv_98=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5911:12: ( (lv_paths_99_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5912:13: (lv_paths_99_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5912:13: (lv_paths_99_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5913:14: lv_paths_99_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_paths_99_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop310;
                    }
                } while (true);

                otherlv_100=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_101=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5941:10: (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END )
                {
                // InternalGitHubActionsParser.g:5941:10: (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END )
                // InternalGitHubActionsParser.g:5942:11: this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END
                {
                this_NEWLINE_102=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_103=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5950:11: (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+
                int cnt311=0;
                loop311:
                do {
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( (LA311_0==HyphenMinus) ) {
                        alt311=1;
                    }


                    switch (alt311) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5951:12: otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE
                	    {
                	    otherlv_104=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5955:12: ( (lv_paths_105_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5956:13: (lv_paths_105_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5956:13: (lv_paths_105_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5957:14: lv_paths_105_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_2_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_paths_105_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_106=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt311 >= 1 ) break loop311;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(311, input);
                            throw eee;
                    }
                    cnt311++;
                } while (true);

                this_END_107=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred173_InternalGitHubActionsParser

    // $ANTLR start synpred174_InternalGitHubActionsParser
    public final void synpred174_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_58=null;
        Token lv_ignoreSpecifiedBranches_59_0=null;
        Token otherlv_60=null;
        Token this_NEWLINE_62=null;
        Token otherlv_63=null;
        Token otherlv_65=null;
        Token otherlv_67=null;
        Token this_NEWLINE_68=null;
        Token this_NEWLINE_69=null;
        Token this_BEGIN_70=null;
        Token otherlv_71=null;
        Token this_NEWLINE_73=null;
        Token this_END_74=null;
        Token otherlv_75=null;
        Token otherlv_76=null;
        Token this_NEWLINE_78=null;
        Token otherlv_79=null;
        Token otherlv_81=null;
        Token otherlv_83=null;
        Token this_NEWLINE_84=null;
        Token this_NEWLINE_85=null;
        Token this_BEGIN_86=null;
        Token otherlv_87=null;
        Token this_NEWLINE_89=null;
        Token this_END_90=null;
        Token otherlv_91=null;
        Token lv_ignoreSpecifiedPaths_92_0=null;
        Token otherlv_93=null;
        Token this_NEWLINE_95=null;
        Token otherlv_96=null;
        Token otherlv_98=null;
        Token otherlv_100=null;
        Token this_NEWLINE_101=null;
        Token this_NEWLINE_102=null;
        Token this_BEGIN_103=null;
        Token otherlv_104=null;
        Token this_NEWLINE_106=null;
        Token this_END_107=null;
        EObject lv_branches_61_0 = null;

        EObject lv_branches_64_0 = null;

        EObject lv_branches_66_0 = null;

        EObject lv_branches_72_0 = null;

        Enumerator lv_eventTypes_77_0 = null;

        Enumerator lv_eventTypes_80_0 = null;

        Enumerator lv_eventTypes_82_0 = null;

        Enumerator lv_eventTypes_88_0 = null;

        EObject lv_paths_94_0 = null;

        EObject lv_paths_97_0 = null;

        EObject lv_paths_99_0 = null;

        EObject lv_paths_105_0 = null;


        // InternalGitHubActionsParser.g:5509:4: ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
        // InternalGitHubActionsParser.g:5509:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) )
        {
        // InternalGitHubActionsParser.g:5509:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) )
        // InternalGitHubActionsParser.g:5510:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) )
        {
        // InternalGitHubActionsParser.g:5510:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) )
        // InternalGitHubActionsParser.g:5511:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?)
        {
        getUnorderedGroupHelper().enter(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1());
        // InternalGitHubActionsParser.g:5514:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?)
        // InternalGitHubActionsParser.g:5515:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?
        {
        // InternalGitHubActionsParser.g:5515:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+
        int cnt324=0;
        loop324:
        do {
            int alt324=3;
            int LA324_0 = input.LA(1);

            if ( LA324_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                alt324=1;
            }
            else if ( LA324_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                alt324=1;
            }
            else if ( (LA324_0==LeftSquareBracket) ) {
                int LA324_4 = input.LA(2);

                if ( synpred167_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                    alt324=1;
                }
                else if ( synpred173_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                    alt324=2;
                }


            }
            else if ( (LA324_0==RULE_NEWLINE) ) {
                int LA324_5 = input.LA(2);

                if ( synpred167_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                    alt324=1;
                }
                else if ( synpred173_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                    alt324=2;
                }


            }
            else if ( LA324_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                alt324=2;
            }
            else if ( LA324_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                alt324=2;
            }


            switch (alt324) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:5516:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:5516:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) )
        	    // InternalGitHubActionsParser.g:5517:6: {...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred174_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0)");
        	    }
        	    // InternalGitHubActionsParser.g:5517:126: ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) )
        	    // InternalGitHubActionsParser.g:5518:7: ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0);
        	    // InternalGitHubActionsParser.g:5521:10: ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) )
        	    // InternalGitHubActionsParser.g:5521:11: {...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred174_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:5521:20: ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? )
        	    // InternalGitHubActionsParser.g:5521:21: ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )?
        	    {
        	    // InternalGitHubActionsParser.g:5521:21: ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) )
        	    int alt316=3;
        	    switch ( input.LA(1) ) {
        	    case BranchesIgnore:
        	    case Branches:
        	        {
        	        alt316=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt316=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt316=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 316, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt316) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:5522:11: ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:5522:11: ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:5523:12: (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5523:12: (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) )
        	            int alt313=2;
        	            int LA313_0 = input.LA(1);

        	            if ( (LA313_0==Branches) ) {
        	                alt313=1;
        	            }
        	            else if ( (LA313_0==BranchesIgnore) ) {
        	                alt313=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 313, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt313) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:5524:13: otherlv_58= Branches
        	                    {
        	                    otherlv_58=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:5529:13: ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:5529:13: ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) )
        	                    // InternalGitHubActionsParser.g:5530:14: (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:5530:14: (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore )
        	                    // InternalGitHubActionsParser.g:5531:15: lv_ignoreSpecifiedBranches_59_0= BranchesIgnore
        	                    {
        	                    lv_ignoreSpecifiedBranches_59_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5548:12: ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5549:13: ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:5549:13: ( (lv_branches_61_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5550:14: (lv_branches_61_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5550:14: (lv_branches_61_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5551:15: lv_branches_61_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_0_2_0_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_branches_61_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_62=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:5575:11: (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5575:11: (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5576:12: otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE
        	            {
        	            otherlv_63=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5580:12: ( (lv_branches_64_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5581:13: (lv_branches_64_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5581:13: (lv_branches_64_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5582:14: lv_branches_64_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_1_1_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_branches_64_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:5599:12: (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )*
        	            loop314:
        	            do {
        	                int alt314=2;
        	                int LA314_0 = input.LA(1);

        	                if ( (LA314_0==Comma) ) {
        	                    alt314=1;
        	                }


        	                switch (alt314) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5600:13: otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_65=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5604:13: ( (lv_branches_66_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5605:14: (lv_branches_66_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5605:14: (lv_branches_66_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5606:15: lv_branches_66_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_1_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_branches_66_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop314;
        	                }
        	            } while (true);

        	            otherlv_67=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_68=(Token)match(input,RULE_NEWLINE,FOLLOW_48); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:5634:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:5634:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
        	            // InternalGitHubActionsParser.g:5635:12: this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END
        	            {
        	            this_NEWLINE_69=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_70=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5643:12: (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+
        	            int cnt315=0;
        	            loop315:
        	            do {
        	                int alt315=2;
        	                int LA315_0 = input.LA(1);

        	                if ( (LA315_0==HyphenMinus) ) {
        	                    alt315=1;
        	                }


        	                switch (alt315) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5644:13: otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE
        	            	    {
        	            	    otherlv_71=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5648:13: ( (lv_branches_72_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5649:14: (lv_branches_72_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5649:14: (lv_branches_72_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5650:15: lv_branches_72_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_0_2_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_branches_72_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt315 >= 1 ) break loop315;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(315, input);
        	                        throw eee;
        	                }
        	                cnt315++;
        	            } while (true);

        	            this_END_74=(Token)match(input,RULE_END,FOLLOW_48); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }

        	    // InternalGitHubActionsParser.g:5678:10: ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )?
        	    int alt319=4;
        	    alt319 = dfa319.predict(input);
        	    switch (alt319) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:5679:11: (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:5679:11: (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:5680:12: otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE )
        	            {
        	            otherlv_75=(Token)match(input,Types,FOLLOW_3); if (state.failed) return ;
        	            otherlv_76=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5688:12: ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5689:13: ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:5689:13: ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            // InternalGitHubActionsParser.g:5690:14: (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            {
        	            // InternalGitHubActionsParser.g:5690:14: (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            // InternalGitHubActionsParser.g:5691:15: lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_0_2_0_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_eventTypes_77_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_78=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:5715:11: (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5715:11: (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5716:12: otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE
        	            {
        	            otherlv_79=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5720:12: ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            // InternalGitHubActionsParser.g:5721:13: (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            {
        	            // InternalGitHubActionsParser.g:5721:13: (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            // InternalGitHubActionsParser.g:5722:14: lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_1_1_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_eventTypes_80_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:5739:12: (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
        	            loop317:
        	            do {
        	                int alt317=2;
        	                int LA317_0 = input.LA(1);

        	                if ( (LA317_0==Comma) ) {
        	                    alt317=1;
        	                }


        	                switch (alt317) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5740:13: otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            	    {
        	            	    otherlv_81=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5744:13: ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            	    // InternalGitHubActionsParser.g:5745:14: (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5745:14: (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    // InternalGitHubActionsParser.g:5746:15: lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_1_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_eventTypes_82_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop317;
        	                }
        	            } while (true);

        	            otherlv_83=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_84=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:5774:11: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:5774:11: (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END )
        	            // InternalGitHubActionsParser.g:5775:12: this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END
        	            {
        	            this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_86=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5783:12: (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+
        	            int cnt318=0;
        	            loop318:
        	            do {
        	                int alt318=2;
        	                int LA318_0 = input.LA(1);

        	                if ( (LA318_0==HyphenMinus) ) {
        	                    alt318=1;
        	                }


        	                switch (alt318) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5784:13: otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE
        	            	    {
        	            	    otherlv_87=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5788:13: ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	            	    // InternalGitHubActionsParser.g:5789:14: (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5789:14: (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	            	    // InternalGitHubActionsParser.g:5790:15: lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_1_0_1_2_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_eventTypes_88_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_89=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt318 >= 1 ) break loop318;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(318, input);
        	                        throw eee;
        	                }
        	                cnt318++;
        	            } while (true);

        	            this_END_90=(Token)match(input,RULE_END,FOLLOW_50); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 2 :
        	    // InternalGitHubActionsParser.g:5824:5: ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:5824:5: ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) )
        	    // InternalGitHubActionsParser.g:5825:6: {...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred174_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1)");
        	    }
        	    // InternalGitHubActionsParser.g:5825:126: ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:5826:7: ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1);
        	    // InternalGitHubActionsParser.g:5829:10: ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:5829:11: {...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred174_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:5829:20: ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) )
        	    int alt323=3;
        	    switch ( input.LA(1) ) {
        	    case PathsIgnore:
        	    case Paths:
        	        {
        	        alt323=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt323=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt323=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 323, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt323) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:5829:21: ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:5829:21: ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:5830:11: (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5830:11: (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) )
        	            int alt320=2;
        	            int LA320_0 = input.LA(1);

        	            if ( (LA320_0==Paths) ) {
        	                alt320=1;
        	            }
        	            else if ( (LA320_0==PathsIgnore) ) {
        	                alt320=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 320, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt320) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:5831:12: otherlv_91= Paths
        	                    {
        	                    otherlv_91=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:5836:12: ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:5836:12: ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) )
        	                    // InternalGitHubActionsParser.g:5837:13: (lv_ignoreSpecifiedPaths_92_0= PathsIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:5837:13: (lv_ignoreSpecifiedPaths_92_0= PathsIgnore )
        	                    // InternalGitHubActionsParser.g:5838:14: lv_ignoreSpecifiedPaths_92_0= PathsIgnore
        	                    {
        	                    lv_ignoreSpecifiedPaths_92_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_93=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5855:11: ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5856:12: ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:5856:12: ( (lv_paths_94_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5857:13: (lv_paths_94_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5857:13: (lv_paths_94_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5858:14: lv_paths_94_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_0_2_0_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_paths_94_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_95=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:5882:10: (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:5882:10: (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:5883:11: otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE
        	            {
        	            otherlv_96=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5887:11: ( (lv_paths_97_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:5888:12: (lv_paths_97_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:5888:12: (lv_paths_97_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:5889:13: lv_paths_97_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_1_0());
        	              												
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_paths_97_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:5906:11: (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )*
        	            loop321:
        	            do {
        	                int alt321=2;
        	                int LA321_0 = input.LA(1);

        	                if ( (LA321_0==Comma) ) {
        	                    alt321=1;
        	                }


        	                switch (alt321) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5907:12: otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_98=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5911:12: ( (lv_paths_99_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5912:13: (lv_paths_99_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5912:13: (lv_paths_99_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5913:14: lv_paths_99_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_2_1_0());
        	            	      													
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_paths_99_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop321;
        	                }
        	            } while (true);

        	            otherlv_100=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_101=(Token)match(input,RULE_NEWLINE,FOLLOW_50); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:5941:10: (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:5941:10: (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END )
        	            // InternalGitHubActionsParser.g:5942:11: this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END
        	            {
        	            this_NEWLINE_102=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_103=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:5950:11: (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+
        	            int cnt322=0;
        	            loop322:
        	            do {
        	                int alt322=2;
        	                int LA322_0 = input.LA(1);

        	                if ( (LA322_0==HyphenMinus) ) {
        	                    alt322=1;
        	                }


        	                switch (alt322) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:5951:12: otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE
        	            	    {
        	            	    otherlv_104=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:5955:12: ( (lv_paths_105_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:5956:13: (lv_paths_105_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:5956:13: (lv_paths_105_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:5957:14: lv_paths_105_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_2_2_1_0());
        	            	      													
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_paths_105_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_106=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt322 >= 1 ) break loop322;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(322, input);
        	                        throw eee;
        	                }
        	                cnt322++;
        	            } while (true);

        	            this_END_107=(Token)match(input,RULE_END,FOLLOW_50); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt324 >= 1 ) break loop324;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(324, input);
                    throw eee;
            }
            cnt324++;
        } while (true);

        if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1()) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred174_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1())");
        }

        }


        }


        }


        }
    }
    // $ANTLR end synpred174_InternalGitHubActionsParser

    // $ANTLR start synpred185_InternalGitHubActionsParser
    public final void synpred185_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_109=null;
        Token lv_ignoreSpecifiedPaths_110_0=null;
        Token otherlv_111=null;
        Token this_NEWLINE_113=null;
        Token otherlv_114=null;
        Token otherlv_116=null;
        Token otherlv_118=null;
        Token this_NEWLINE_119=null;
        Token this_NEWLINE_120=null;
        Token this_BEGIN_121=null;
        Token otherlv_122=null;
        Token this_NEWLINE_124=null;
        Token this_END_125=null;
        Token otherlv_126=null;
        Token otherlv_127=null;
        Token this_NEWLINE_129=null;
        Token otherlv_130=null;
        Token otherlv_132=null;
        Token otherlv_134=null;
        Token this_NEWLINE_135=null;
        Token this_NEWLINE_136=null;
        Token this_BEGIN_137=null;
        Token otherlv_138=null;
        Token this_NEWLINE_140=null;
        Token this_END_141=null;
        EObject lv_paths_112_0 = null;

        EObject lv_paths_115_0 = null;

        EObject lv_paths_117_0 = null;

        EObject lv_paths_123_0 = null;

        Enumerator lv_eventTypes_128_0 = null;

        Enumerator lv_eventTypes_131_0 = null;

        Enumerator lv_eventTypes_133_0 = null;

        Enumerator lv_eventTypes_139_0 = null;


        // InternalGitHubActionsParser.g:6007:6: ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:6007:6: ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:6007:6: ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:6008:7: {...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred185_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0)");
        }
        // InternalGitHubActionsParser.g:6008:129: ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:6009:8: ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 0);
        // InternalGitHubActionsParser.g:6012:11: ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:6012:12: {...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred185_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6012:21: ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? )
        // InternalGitHubActionsParser.g:6012:22: ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )?
        {
        // InternalGitHubActionsParser.g:6012:22: ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) )
        int alt332=3;
        switch ( input.LA(1) ) {
        case PathsIgnore:
        case Paths:
            {
            alt332=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt332=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt332=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 332, 0, input);

            throw nvae;
        }

        switch (alt332) {
            case 1 :
                // InternalGitHubActionsParser.g:6013:12: ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:6013:12: ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:6014:13: (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6014:13: (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) )
                int alt329=2;
                int LA329_0 = input.LA(1);

                if ( (LA329_0==Paths) ) {
                    alt329=1;
                }
                else if ( (LA329_0==PathsIgnore) ) {
                    alt329=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 329, 0, input);

                    throw nvae;
                }
                switch (alt329) {
                    case 1 :
                        // InternalGitHubActionsParser.g:6015:14: otherlv_109= Paths
                        {
                        otherlv_109=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:6020:14: ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:6020:14: ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:6021:15: (lv_ignoreSpecifiedPaths_110_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:6021:15: (lv_ignoreSpecifiedPaths_110_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:6022:16: lv_ignoreSpecifiedPaths_110_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_110_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_111=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6039:13: ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6040:14: ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:6040:14: ( (lv_paths_112_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6041:15: (lv_paths_112_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6041:15: (lv_paths_112_0= ruleExpression )
                // InternalGitHubActionsParser.g:6042:16: lv_paths_112_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_paths_112_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_113=(Token)match(input,RULE_NEWLINE,FOLLOW_112); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:6066:12: (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6066:12: (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6067:13: otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE
                {
                otherlv_114=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6071:13: ( (lv_paths_115_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6072:14: (lv_paths_115_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6072:14: (lv_paths_115_0= ruleExpression )
                // InternalGitHubActionsParser.g:6073:15: lv_paths_115_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_paths_115_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:6090:13: (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )*
                loop330:
                do {
                    int alt330=2;
                    int LA330_0 = input.LA(1);

                    if ( (LA330_0==Comma) ) {
                        alt330=1;
                    }


                    switch (alt330) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6091:14: otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) )
                	    {
                	    otherlv_116=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6095:14: ( (lv_paths_117_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6096:15: (lv_paths_117_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6096:15: (lv_paths_117_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6097:16: lv_paths_117_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_paths_117_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop330;
                    }
                } while (true);

                otherlv_118=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_119=(Token)match(input,RULE_NEWLINE,FOLLOW_112); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:6125:12: (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END )
                {
                // InternalGitHubActionsParser.g:6125:12: (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END )
                // InternalGitHubActionsParser.g:6126:13: this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END
                {
                this_NEWLINE_120=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_121=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6134:13: (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+
                int cnt331=0;
                loop331:
                do {
                    int alt331=2;
                    int LA331_0 = input.LA(1);

                    if ( (LA331_0==HyphenMinus) ) {
                        alt331=1;
                    }


                    switch (alt331) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6135:14: otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE
                	    {
                	    otherlv_122=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6139:14: ( (lv_paths_123_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6140:15: (lv_paths_123_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6140:15: (lv_paths_123_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6141:16: lv_paths_123_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_0_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_paths_123_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_124=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt331 >= 1 ) break loop331;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(331, input);
                            throw eee;
                    }
                    cnt331++;
                } while (true);

                this_END_125=(Token)match(input,RULE_END,FOLLOW_112); if (state.failed) return ;

                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:6169:11: ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )?
        int alt335=4;
        switch ( input.LA(1) ) {
            case Types:
                {
                alt335=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt335=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt335=3;
                }
                break;
        }

        switch (alt335) {
            case 1 :
                // InternalGitHubActionsParser.g:6170:12: (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:6170:12: (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:6171:13: otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE )
                {
                otherlv_126=(Token)match(input,Types,FOLLOW_3); if (state.failed) return ;
                otherlv_127=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6179:13: ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6180:14: ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:6180:14: ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:6181:15: (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:6181:15: (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:6182:16: lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_eventTypes_128_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_129=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:6206:12: (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6206:12: (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6207:13: otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE
                {
                otherlv_130=(Token)match(input,LeftSquareBracket,FOLLOW_44); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6211:13: ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:6212:14: (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:6212:14: (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:6213:15: lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_eventTypes_131_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:6230:13: (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                loop333:
                do {
                    int alt333=2;
                    int LA333_0 = input.LA(1);

                    if ( (LA333_0==Comma) ) {
                        alt333=1;
                    }


                    switch (alt333) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6231:14: otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    {
                	    otherlv_132=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6235:14: ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:6236:15: (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:6236:15: (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:6237:16: lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_eventTypes_133_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop333;
                    }
                } while (true);

                otherlv_134=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_135=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:6265:12: (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END )
                {
                // InternalGitHubActionsParser.g:6265:12: (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END )
                // InternalGitHubActionsParser.g:6266:13: this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END
                {
                this_NEWLINE_136=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_137=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6274:13: (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+
                int cnt334=0;
                loop334:
                do {
                    int alt334=2;
                    int LA334_0 = input.LA(1);

                    if ( (LA334_0==HyphenMinus) ) {
                        alt334=1;
                    }


                    switch (alt334) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6275:14: otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE
                	    {
                	    otherlv_138=(Token)match(input,HyphenMinus,FOLLOW_44); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6279:14: ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:6280:15: (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:6280:15: (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:6281:16: lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_2_0_0_1_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_eventTypes_139_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_140=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt334 >= 1 ) break loop334;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(334, input);
                            throw eee;
                    }
                    cnt334++;
                } while (true);

                this_END_141=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred185_InternalGitHubActionsParser

    // $ANTLR start synpred191_InternalGitHubActionsParser
    public final void synpred191_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_142=null;
        Token lv_ignoreSpecifiedBranches_143_0=null;
        Token otherlv_144=null;
        Token this_NEWLINE_146=null;
        Token otherlv_147=null;
        Token otherlv_149=null;
        Token otherlv_151=null;
        Token this_NEWLINE_152=null;
        Token this_NEWLINE_153=null;
        Token this_BEGIN_154=null;
        Token otherlv_155=null;
        Token this_NEWLINE_157=null;
        Token this_END_158=null;
        EObject lv_branches_145_0 = null;

        EObject lv_branches_148_0 = null;

        EObject lv_branches_150_0 = null;

        EObject lv_branches_156_0 = null;


        // InternalGitHubActionsParser.g:6315:6: ( ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6315:6: ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:6315:6: ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:6316:7: {...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred191_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1)");
        }
        // InternalGitHubActionsParser.g:6316:129: ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:6317:8: ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_2_0(), 1);
        // InternalGitHubActionsParser.g:6320:11: ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) )
        // InternalGitHubActionsParser.g:6320:12: {...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred191_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6320:21: ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) )
        int alt341=3;
        switch ( input.LA(1) ) {
        case BranchesIgnore:
        case Branches:
            {
            alt341=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt341=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt341=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 341, 0, input);

            throw nvae;
        }

        switch (alt341) {
            case 1 :
                // InternalGitHubActionsParser.g:6320:22: ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:6320:22: ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:6321:12: (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6321:12: (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) )
                int alt338=2;
                int LA338_0 = input.LA(1);

                if ( (LA338_0==Branches) ) {
                    alt338=1;
                }
                else if ( (LA338_0==BranchesIgnore) ) {
                    alt338=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 338, 0, input);

                    throw nvae;
                }
                switch (alt338) {
                    case 1 :
                        // InternalGitHubActionsParser.g:6322:13: otherlv_142= Branches
                        {
                        otherlv_142=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:6327:13: ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:6327:13: ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:6328:14: (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:6328:14: (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:6329:15: lv_ignoreSpecifiedBranches_143_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_143_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_144=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6346:12: ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6347:13: ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:6347:13: ( (lv_branches_145_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6348:14: (lv_branches_145_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6348:14: (lv_branches_145_0= ruleExpression )
                // InternalGitHubActionsParser.g:6349:15: lv_branches_145_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_branches_145_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_146=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:6373:11: (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6373:11: (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6374:12: otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE
                {
                otherlv_147=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6378:12: ( (lv_branches_148_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6379:13: (lv_branches_148_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6379:13: (lv_branches_148_0= ruleExpression )
                // InternalGitHubActionsParser.g:6380:14: lv_branches_148_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_branches_148_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:6397:12: (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )*
                loop339:
                do {
                    int alt339=2;
                    int LA339_0 = input.LA(1);

                    if ( (LA339_0==Comma) ) {
                        alt339=1;
                    }


                    switch (alt339) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6398:13: otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) )
                	    {
                	    otherlv_149=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6402:13: ( (lv_branches_150_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6403:14: (lv_branches_150_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6403:14: (lv_branches_150_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6404:15: lv_branches_150_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_branches_150_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop339;
                    }
                } while (true);

                otherlv_151=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_152=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:6432:11: (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END )
                {
                // InternalGitHubActionsParser.g:6432:11: (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END )
                // InternalGitHubActionsParser.g:6433:12: this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END
                {
                this_NEWLINE_153=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_154=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6441:12: (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+
                int cnt340=0;
                loop340:
                do {
                    int alt340=2;
                    int LA340_0 = input.LA(1);

                    if ( (LA340_0==HyphenMinus) ) {
                        alt340=1;
                    }


                    switch (alt340) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6442:13: otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE
                	    {
                	    otherlv_155=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6446:13: ( (lv_branches_156_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6447:14: (lv_branches_156_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6447:14: (lv_branches_156_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6448:15: lv_branches_156_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_1_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_branches_156_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_157=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt340 >= 1 ) break loop340;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(340, input);
                            throw eee;
                    }
                    cnt340++;
                } while (true);

                this_END_158=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred191_InternalGitHubActionsParser

    // $ANTLR start synpred200_InternalGitHubActionsParser
    public final void synpred200_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        EObject lv_paths_29_0 = null;

        EObject lv_paths_31_0 = null;


        // InternalGitHubActionsParser.g:6782:12: ( (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        {
        // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:6783:13: otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
        {
        otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6787:13: ( (lv_paths_29_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
        // InternalGitHubActionsParser.g:6789:15: lv_paths_29_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_1_0());
          														
        }
        pushFollow(FOLLOW_9);
        lv_paths_29_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalGitHubActionsParser.g:6806:13: (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )*
        loop345:
        do {
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==Comma) ) {
                alt345=1;
            }


            switch (alt345) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:6807:14: otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) )
        	    {
        	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:6811:14: ( (lv_paths_31_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:6813:16: lv_paths_31_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_9);
        	    lv_paths_31_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop345;
            }
        } while (true);

        otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred200_InternalGitHubActionsParser

    // $ANTLR start synpred202_InternalGitHubActionsParser
    public final void synpred202_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        EObject lv_paths_37_0 = null;


        // InternalGitHubActionsParser.g:6841:12: ( (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )
        // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        {
        // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        // InternalGitHubActionsParser.g:6842:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
        {
        this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6850:13: (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
        int cnt346=0;
        loop346:
        do {
            int alt346=2;
            int LA346_0 = input.LA(1);

            if ( (LA346_0==HyphenMinus) ) {
                alt346=1;
            }


            switch (alt346) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:6851:14: otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
        	    {
        	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:6855:14: ( (lv_paths_37_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:6857:16: lv_paths_37_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_5);
        	    lv_paths_37_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt346 >= 1 ) break loop346;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(346, input);
                    throw eee;
            }
            cnt346++;
        } while (true);

        this_END_39=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred202_InternalGitHubActionsParser

    // $ANTLR start synpred203_InternalGitHubActionsParser
    public final void synpred203_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_6=null;
        Token lv_ignoreSpecifiedBranches_7_0=null;
        Token otherlv_8=null;
        Token this_NEWLINE_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_NEWLINE_16=null;
        Token this_NEWLINE_17=null;
        Token this_BEGIN_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        Token this_END_22=null;
        Token otherlv_23=null;
        Token lv_ignoreSpecifiedPaths_24_0=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        EObject lv_branches_9_0 = null;

        EObject lv_branches_12_0 = null;

        EObject lv_branches_14_0 = null;

        EObject lv_branches_20_0 = null;

        EObject lv_paths_26_0 = null;

        EObject lv_paths_29_0 = null;

        EObject lv_paths_31_0 = null;

        EObject lv_paths_37_0 = null;


        // InternalGitHubActionsParser.g:6566:6: ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:6566:6: ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:6566:6: ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:6567:7: {...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred203_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
        }
        // InternalGitHubActionsParser.g:6567:122: ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:6568:8: ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0);
        // InternalGitHubActionsParser.g:6571:11: ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:6571:12: {...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred203_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6571:21: ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        // InternalGitHubActionsParser.g:6571:22: ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        {
        // InternalGitHubActionsParser.g:6571:22: ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) )
        int alt350=3;
        switch ( input.LA(1) ) {
        case BranchesIgnore:
        case Branches:
            {
            alt350=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt350=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt350=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 350, 0, input);

            throw nvae;
        }

        switch (alt350) {
            case 1 :
                // InternalGitHubActionsParser.g:6572:12: ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:6572:12: ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:6573:13: (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6573:13: (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) )
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==Branches) ) {
                    alt347=1;
                }
                else if ( (LA347_0==BranchesIgnore) ) {
                    alt347=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 347, 0, input);

                    throw nvae;
                }
                switch (alt347) {
                    case 1 :
                        // InternalGitHubActionsParser.g:6574:14: otherlv_6= Branches
                        {
                        otherlv_6=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:6579:14: ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:6579:14: ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:6580:15: (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:6580:15: (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:6581:16: lv_ignoreSpecifiedBranches_7_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_7_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_8=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6598:13: ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6599:14: ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:6599:14: ( (lv_branches_9_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6600:15: (lv_branches_9_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6600:15: (lv_branches_9_0= ruleExpression )
                // InternalGitHubActionsParser.g:6601:16: lv_branches_9_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_branches_9_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_113); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:6625:12: (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6625:12: (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6626:13: otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE
                {
                otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6630:13: ( (lv_branches_12_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6631:14: (lv_branches_12_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6631:14: (lv_branches_12_0= ruleExpression )
                // InternalGitHubActionsParser.g:6632:15: lv_branches_12_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_branches_12_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:6649:13: (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )*
                loop348:
                do {
                    int alt348=2;
                    int LA348_0 = input.LA(1);

                    if ( (LA348_0==Comma) ) {
                        alt348=1;
                    }


                    switch (alt348) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6650:14: otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) )
                	    {
                	    otherlv_13=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6654:14: ( (lv_branches_14_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6655:15: (lv_branches_14_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6655:15: (lv_branches_14_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6656:16: lv_branches_14_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_branches_14_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop348;
                    }
                } while (true);

                otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_113); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:6684:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                {
                // InternalGitHubActionsParser.g:6684:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
                // InternalGitHubActionsParser.g:6685:13: this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END
                {
                this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6693:13: (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+
                int cnt349=0;
                loop349:
                do {
                    int alt349=2;
                    int LA349_0 = input.LA(1);

                    if ( (LA349_0==HyphenMinus) ) {
                        alt349=1;
                    }


                    switch (alt349) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6694:14: otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE
                	    {
                	    otherlv_19=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6698:14: ( (lv_branches_20_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6699:15: (lv_branches_20_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6699:15: (lv_branches_20_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6700:16: lv_branches_20_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_branches_20_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt349 >= 1 ) break loop349;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(349, input);
                            throw eee;
                    }
                    cnt349++;
                } while (true);

                this_END_22=(Token)match(input,RULE_END,FOLLOW_113); if (state.failed) return ;

                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:6728:11: ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        int alt354=4;
        switch ( input.LA(1) ) {
            case PathsIgnore:
            case Paths:
                {
                alt354=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt354=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt354=3;
                }
                break;
        }

        switch (alt354) {
            case 1 :
                // InternalGitHubActionsParser.g:6729:12: ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:6729:12: ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:6730:13: (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6730:13: (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) )
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==Paths) ) {
                    alt351=1;
                }
                else if ( (LA351_0==PathsIgnore) ) {
                    alt351=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 351, 0, input);

                    throw nvae;
                }
                switch (alt351) {
                    case 1 :
                        // InternalGitHubActionsParser.g:6731:14: otherlv_23= Paths
                        {
                        otherlv_23=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:6736:14: ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:6736:14: ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:6737:15: (lv_ignoreSpecifiedPaths_24_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:6737:15: (lv_ignoreSpecifiedPaths_24_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:6738:16: lv_ignoreSpecifiedPaths_24_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_24_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6755:13: ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6756:14: ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:6756:14: ( (lv_paths_26_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6757:15: (lv_paths_26_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6757:15: (lv_paths_26_0= ruleExpression )
                // InternalGitHubActionsParser.g:6758:16: lv_paths_26_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_paths_26_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6783:13: otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
                {
                otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6787:13: ( (lv_paths_29_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
                // InternalGitHubActionsParser.g:6789:15: lv_paths_29_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_paths_29_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:6806:13: (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )*
                loop352:
                do {
                    int alt352=2;
                    int LA352_0 = input.LA(1);

                    if ( (LA352_0==Comma) ) {
                        alt352=1;
                    }


                    switch (alt352) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6807:14: otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) )
                	    {
                	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6811:14: ( (lv_paths_31_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6813:16: lv_paths_31_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_paths_31_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop352;
                    }
                } while (true);

                otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                {
                // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
                // InternalGitHubActionsParser.g:6842:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
                {
                this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6850:13: (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
                int cnt353=0;
                loop353:
                do {
                    int alt353=2;
                    int LA353_0 = input.LA(1);

                    if ( (LA353_0==HyphenMinus) ) {
                        alt353=1;
                    }


                    switch (alt353) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6851:14: otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
                	    {
                	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6855:14: ( (lv_paths_37_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6857:16: lv_paths_37_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_paths_37_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt353 >= 1 ) break loop353;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(353, input);
                            throw eee;
                    }
                    cnt353++;
                } while (true);

                this_END_39=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred203_InternalGitHubActionsParser

    // $ANTLR start synpred209_InternalGitHubActionsParser
    public final void synpred209_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_40=null;
        Token lv_ignoreSpecifiedTags_41_0=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token this_NEWLINE_50=null;
        Token this_NEWLINE_51=null;
        Token this_BEGIN_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token this_END_56=null;
        EObject lv_tags_43_0 = null;

        EObject lv_tags_46_0 = null;

        EObject lv_tags_48_0 = null;

        EObject lv_tags_54_0 = null;


        // InternalGitHubActionsParser.g:6891:6: ( ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6891:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:6891:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:6892:7: {...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
        }
        // InternalGitHubActionsParser.g:6892:122: ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:6893:8: ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1);
        // InternalGitHubActionsParser.g:6896:11: ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        // InternalGitHubActionsParser.g:6896:12: {...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6896:21: ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        int alt360=3;
        switch ( input.LA(1) ) {
        case TagsIgnore:
        case Tags:
            {
            alt360=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt360=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt360=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 360, 0, input);

            throw nvae;
        }

        switch (alt360) {
            case 1 :
                // InternalGitHubActionsParser.g:6896:22: ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:6896:22: ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:6897:12: (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6897:12: (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) )
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==Tags) ) {
                    alt357=1;
                }
                else if ( (LA357_0==TagsIgnore) ) {
                    alt357=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 357, 0, input);

                    throw nvae;
                }
                switch (alt357) {
                    case 1 :
                        // InternalGitHubActionsParser.g:6898:13: otherlv_40= Tags
                        {
                        otherlv_40=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:6903:13: ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:6903:13: ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) )
                        // InternalGitHubActionsParser.g:6904:14: (lv_ignoreSpecifiedTags_41_0= TagsIgnore )
                        {
                        // InternalGitHubActionsParser.g:6904:14: (lv_ignoreSpecifiedTags_41_0= TagsIgnore )
                        // InternalGitHubActionsParser.g:6905:15: lv_ignoreSpecifiedTags_41_0= TagsIgnore
                        {
                        lv_ignoreSpecifiedTags_41_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6922:12: ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6923:13: ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:6923:13: ( (lv_tags_43_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6924:14: (lv_tags_43_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6924:14: (lv_tags_43_0= ruleExpression )
                // InternalGitHubActionsParser.g:6925:15: lv_tags_43_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_tags_43_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:6949:11: (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:6949:11: (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:6950:12: otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE
                {
                otherlv_45=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6954:12: ( (lv_tags_46_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6955:13: (lv_tags_46_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6955:13: (lv_tags_46_0= ruleExpression )
                // InternalGitHubActionsParser.g:6956:14: lv_tags_46_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_tags_46_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:6973:12: (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )*
                loop358:
                do {
                    int alt358=2;
                    int LA358_0 = input.LA(1);

                    if ( (LA358_0==Comma) ) {
                        alt358=1;
                    }


                    switch (alt358) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6974:13: otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) )
                	    {
                	    otherlv_47=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6978:13: ( (lv_tags_48_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:6979:14: (lv_tags_48_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:6979:14: (lv_tags_48_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:6980:15: lv_tags_48_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_tags_48_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop358;
                    }
                } while (true);

                otherlv_49=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_50=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7008:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                {
                // InternalGitHubActionsParser.g:7008:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
                // InternalGitHubActionsParser.g:7009:12: this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END
                {
                this_NEWLINE_51=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_52=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7017:12: (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+
                int cnt359=0;
                loop359:
                do {
                    int alt359=2;
                    int LA359_0 = input.LA(1);

                    if ( (LA359_0==HyphenMinus) ) {
                        alt359=1;
                    }


                    switch (alt359) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7018:13: otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
                	    {
                	    otherlv_53=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7022:13: ( (lv_tags_54_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7023:14: (lv_tags_54_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7023:14: (lv_tags_54_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7024:15: lv_tags_54_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_tags_54_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt359 >= 1 ) break loop359;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(359, input);
                            throw eee;
                    }
                    cnt359++;
                } while (true);

                this_END_56=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred209_InternalGitHubActionsParser

    // $ANTLR start synpred210_InternalGitHubActionsParser
    public final void synpred210_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_6=null;
        Token lv_ignoreSpecifiedBranches_7_0=null;
        Token otherlv_8=null;
        Token this_NEWLINE_10=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_NEWLINE_16=null;
        Token this_NEWLINE_17=null;
        Token this_BEGIN_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        Token this_END_22=null;
        Token otherlv_23=null;
        Token lv_ignoreSpecifiedPaths_24_0=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_NEWLINE_34=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token this_NEWLINE_38=null;
        Token this_END_39=null;
        Token otherlv_40=null;
        Token lv_ignoreSpecifiedTags_41_0=null;
        Token otherlv_42=null;
        Token this_NEWLINE_44=null;
        Token otherlv_45=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token this_NEWLINE_50=null;
        Token this_NEWLINE_51=null;
        Token this_BEGIN_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token this_END_56=null;
        EObject lv_branches_9_0 = null;

        EObject lv_branches_12_0 = null;

        EObject lv_branches_14_0 = null;

        EObject lv_branches_20_0 = null;

        EObject lv_paths_26_0 = null;

        EObject lv_paths_29_0 = null;

        EObject lv_paths_31_0 = null;

        EObject lv_paths_37_0 = null;

        EObject lv_tags_43_0 = null;

        EObject lv_tags_46_0 = null;

        EObject lv_tags_48_0 = null;

        EObject lv_tags_54_0 = null;


        // InternalGitHubActionsParser.g:6550:4: ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) )
        // InternalGitHubActionsParser.g:6550:4: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
        {
        // InternalGitHubActionsParser.g:6550:4: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
        // InternalGitHubActionsParser.g:6551:5: this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
        {
        this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_54); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6559:5: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) )
        // InternalGitHubActionsParser.g:6560:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
        {
        // InternalGitHubActionsParser.g:6560:6: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) )
        // InternalGitHubActionsParser.g:6561:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
        {
        getUnorderedGroupHelper().enter(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2());
        // InternalGitHubActionsParser.g:6564:7: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?)
        // InternalGitHubActionsParser.g:6565:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?
        {
        // InternalGitHubActionsParser.g:6565:8: ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+
        int cnt373=0;
        loop373:
        do {
            int alt373=3;
            int LA373_0 = input.LA(1);

            if ( LA373_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                alt373=1;
            }
            else if ( LA373_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                alt373=1;
            }
            else if ( (LA373_0==LeftSquareBracket) ) {
                int LA373_4 = input.LA(2);

                if ( synpred203_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                    alt373=1;
                }
                else if ( synpred209_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                    alt373=2;
                }


            }
            else if ( (LA373_0==RULE_NEWLINE) ) {
                int LA373_5 = input.LA(2);

                if ( synpred203_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
                    alt373=1;
                }
                else if ( synpred209_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                    alt373=2;
                }


            }
            else if ( LA373_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                alt373=2;
            }
            else if ( LA373_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
                alt373=2;
            }


            switch (alt373) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:6566:6: ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:6566:6: ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) )
        	    // InternalGitHubActionsParser.g:6567:7: {...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred210_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
        	    }
        	    // InternalGitHubActionsParser.g:6567:122: ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) )
        	    // InternalGitHubActionsParser.g:6568:8: ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0);
        	    // InternalGitHubActionsParser.g:6571:11: ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) )
        	    // InternalGitHubActionsParser.g:6571:12: {...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred210_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:6571:21: ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? )
        	    // InternalGitHubActionsParser.g:6571:22: ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        	    {
        	    // InternalGitHubActionsParser.g:6571:22: ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) )
        	    int alt364=3;
        	    switch ( input.LA(1) ) {
        	    case BranchesIgnore:
        	    case Branches:
        	        {
        	        alt364=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt364=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt364=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 364, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt364) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:6572:12: ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:6572:12: ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:6573:13: (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:6573:13: (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) )
        	            int alt361=2;
        	            int LA361_0 = input.LA(1);

        	            if ( (LA361_0==Branches) ) {
        	                alt361=1;
        	            }
        	            else if ( (LA361_0==BranchesIgnore) ) {
        	                alt361=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 361, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt361) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:6574:14: otherlv_6= Branches
        	                    {
        	                    otherlv_6=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:6579:14: ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:6579:14: ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) )
        	                    // InternalGitHubActionsParser.g:6580:15: (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:6580:15: (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore )
        	                    // InternalGitHubActionsParser.g:6581:16: lv_ignoreSpecifiedBranches_7_0= BranchesIgnore
        	                    {
        	                    lv_ignoreSpecifiedBranches_7_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_8=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6598:13: ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:6599:14: ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:6599:14: ( (lv_branches_9_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:6600:15: (lv_branches_9_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:6600:15: (lv_branches_9_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:6601:16: lv_branches_9_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_0_2_0_0());
        	              															
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_branches_9_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_10=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:6625:12: (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:6625:12: (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:6626:13: otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE
        	            {
        	            otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6630:13: ( (lv_branches_12_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:6631:14: (lv_branches_12_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:6631:14: (lv_branches_12_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:6632:15: lv_branches_12_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_1_1_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_branches_12_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:6649:13: (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )*
        	            loop362:
        	            do {
        	                int alt362=2;
        	                int LA362_0 = input.LA(1);

        	                if ( (LA362_0==Comma) ) {
        	                    alt362=1;
        	                }


        	                switch (alt362) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:6650:14: otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_13=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:6654:14: ( (lv_branches_14_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:6655:15: (lv_branches_14_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:6655:15: (lv_branches_14_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:6656:16: lv_branches_14_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_1_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_branches_14_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop362;
        	                }
        	            } while (true);

        	            otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:6684:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:6684:12: (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END )
        	            // InternalGitHubActionsParser.g:6685:13: this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END
        	            {
        	            this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6693:13: (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+
        	            int cnt363=0;
        	            loop363:
        	            do {
        	                int alt363=2;
        	                int LA363_0 = input.LA(1);

        	                if ( (LA363_0==HyphenMinus) ) {
        	                    alt363=1;
        	                }


        	                switch (alt363) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:6694:14: otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE
        	            	    {
        	            	    otherlv_19=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:6698:14: ( (lv_branches_20_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:6699:15: (lv_branches_20_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:6699:15: (lv_branches_20_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:6700:16: lv_branches_20_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_2_0_0_2_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_branches_20_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt363 >= 1 ) break loop363;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(363, input);
        	                        throw eee;
        	                }
        	                cnt363++;
        	            } while (true);

        	            this_END_22=(Token)match(input,RULE_END,FOLLOW_55); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }

        	    // InternalGitHubActionsParser.g:6728:11: ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?
        	    int alt368=4;
        	    alt368 = dfa368.predict(input);
        	    switch (alt368) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:6729:12: ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:6729:12: ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:6730:13: (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:6730:13: (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) )
        	            int alt365=2;
        	            int LA365_0 = input.LA(1);

        	            if ( (LA365_0==Paths) ) {
        	                alt365=1;
        	            }
        	            else if ( (LA365_0==PathsIgnore) ) {
        	                alt365=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 365, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt365) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:6731:14: otherlv_23= Paths
        	                    {
        	                    otherlv_23=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:6736:14: ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:6736:14: ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) )
        	                    // InternalGitHubActionsParser.g:6737:15: (lv_ignoreSpecifiedPaths_24_0= PathsIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:6737:15: (lv_ignoreSpecifiedPaths_24_0= PathsIgnore )
        	                    // InternalGitHubActionsParser.g:6738:16: lv_ignoreSpecifiedPaths_24_0= PathsIgnore
        	                    {
        	                    lv_ignoreSpecifiedPaths_24_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_25=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6755:13: ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:6756:14: ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:6756:14: ( (lv_paths_26_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:6757:15: (lv_paths_26_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:6757:15: (lv_paths_26_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:6758:16: lv_paths_26_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_0_2_0_0());
        	              															
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_paths_26_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:6782:12: (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:6783:13: otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE
        	            {
        	            otherlv_28=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6787:13: ( (lv_paths_29_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:6788:14: (lv_paths_29_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:6789:15: lv_paths_29_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_1_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_paths_29_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:6806:13: (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )*
        	            loop366:
        	            do {
        	                int alt366=2;
        	                int LA366_0 = input.LA(1);

        	                if ( (LA366_0==Comma) ) {
        	                    alt366=1;
        	                }


        	                switch (alt366) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:6807:14: otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_30=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:6811:14: ( (lv_paths_31_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:6812:15: (lv_paths_31_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:6813:16: lv_paths_31_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_1_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_paths_31_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop366;
        	                }
        	            } while (true);

        	            otherlv_32=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:6841:12: (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END )
        	            // InternalGitHubActionsParser.g:6842:13: this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END
        	            {
        	            this_NEWLINE_34=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6850:13: (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+
        	            int cnt367=0;
        	            loop367:
        	            do {
        	                int alt367=2;
        	                int LA367_0 = input.LA(1);

        	                if ( (LA367_0==HyphenMinus) ) {
        	                    alt367=1;
        	                }


        	                switch (alt367) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:6851:14: otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE
        	            	    {
        	            	    otherlv_36=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:6855:14: ( (lv_paths_37_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:6856:15: (lv_paths_37_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:6857:16: lv_paths_37_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_0_2_0_1_2_2_1_0());
        	            	      															
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_paths_37_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt367 >= 1 ) break loop367;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(367, input);
        	                        throw eee;
        	                }
        	                cnt367++;
        	            } while (true);

        	            this_END_39=(Token)match(input,RULE_END,FOLLOW_56); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 2 :
        	    // InternalGitHubActionsParser.g:6891:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:6891:6: ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) )
        	    // InternalGitHubActionsParser.g:6892:7: {...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred210_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
        	    }
        	    // InternalGitHubActionsParser.g:6892:122: ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:6893:8: ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1);
        	    // InternalGitHubActionsParser.g:6896:11: ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:6896:12: {...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred210_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:6896:21: ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) )
        	    int alt372=3;
        	    switch ( input.LA(1) ) {
        	    case TagsIgnore:
        	    case Tags:
        	        {
        	        alt372=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt372=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt372=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 372, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt372) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:6896:22: ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:6896:22: ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:6897:12: (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:6897:12: (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) )
        	            int alt369=2;
        	            int LA369_0 = input.LA(1);

        	            if ( (LA369_0==Tags) ) {
        	                alt369=1;
        	            }
        	            else if ( (LA369_0==TagsIgnore) ) {
        	                alt369=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 369, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt369) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:6898:13: otherlv_40= Tags
        	                    {
        	                    otherlv_40=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:6903:13: ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:6903:13: ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) )
        	                    // InternalGitHubActionsParser.g:6904:14: (lv_ignoreSpecifiedTags_41_0= TagsIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:6904:14: (lv_ignoreSpecifiedTags_41_0= TagsIgnore )
        	                    // InternalGitHubActionsParser.g:6905:15: lv_ignoreSpecifiedTags_41_0= TagsIgnore
        	                    {
        	                    lv_ignoreSpecifiedTags_41_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6922:12: ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:6923:13: ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:6923:13: ( (lv_tags_43_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:6924:14: (lv_tags_43_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:6924:14: (lv_tags_43_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:6925:15: lv_tags_43_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_0_2_0_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_tags_43_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_44=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:6949:11: (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:6949:11: (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:6950:12: otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE
        	            {
        	            otherlv_45=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6954:12: ( (lv_tags_46_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:6955:13: (lv_tags_46_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:6955:13: (lv_tags_46_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:6956:14: lv_tags_46_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_1_1_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_tags_46_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:6973:12: (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )*
        	            loop370:
        	            do {
        	                int alt370=2;
        	                int LA370_0 = input.LA(1);

        	                if ( (LA370_0==Comma) ) {
        	                    alt370=1;
        	                }


        	                switch (alt370) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:6974:13: otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_47=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:6978:13: ( (lv_tags_48_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:6979:14: (lv_tags_48_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:6979:14: (lv_tags_48_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:6980:15: lv_tags_48_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_1_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_tags_48_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop370;
        	                }
        	            } while (true);

        	            otherlv_49=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_50=(Token)match(input,RULE_NEWLINE,FOLLOW_56); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:7008:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:7008:11: (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END )
        	            // InternalGitHubActionsParser.g:7009:12: this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END
        	            {
        	            this_NEWLINE_51=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_52=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7017:12: (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+
        	            int cnt371=0;
        	            loop371:
        	            do {
        	                int alt371=2;
        	                int LA371_0 = input.LA(1);

        	                if ( (LA371_0==HyphenMinus) ) {
        	                    alt371=1;
        	                }


        	                switch (alt371) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:7018:13: otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
        	            	    {
        	            	    otherlv_53=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:7022:13: ( (lv_tags_54_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:7023:14: (lv_tags_54_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:7023:14: (lv_tags_54_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:7024:15: lv_tags_54_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_0_2_1_2_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_tags_54_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt371 >= 1 ) break loop371;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(371, input);
        	                        throw eee;
        	                }
        	                cnt371++;
        	            } while (true);

        	            this_END_56=(Token)match(input,RULE_END,FOLLOW_56); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt373 >= 1 ) break loop373;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(373, input);
                    throw eee;
            }
            cnt373++;
        } while (true);

        if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2()) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred210_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2())");
        }

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred210_InternalGitHubActionsParser

    // $ANTLR start synpred219_InternalGitHubActionsParser
    public final void synpred219_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_80=null;
        Token otherlv_82=null;
        Token otherlv_84=null;
        Token this_NEWLINE_85=null;
        EObject lv_branches_81_0 = null;

        EObject lv_branches_83_0 = null;


        // InternalGitHubActionsParser.g:7290:11: ( (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
        {
        // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:7291:12: otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE
        {
        otherlv_80=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7295:12: ( (lv_branches_81_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
        // InternalGitHubActionsParser.g:7297:14: lv_branches_81_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_1_0());
          													
        }
        pushFollow(FOLLOW_9);
        lv_branches_81_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalGitHubActionsParser.g:7314:12: (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )*
        loop377:
        do {
            int alt377=2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0==Comma) ) {
                alt377=1;
            }


            switch (alt377) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:7315:13: otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) )
        	    {
        	    otherlv_82=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:7319:13: ( (lv_branches_83_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:7321:15: lv_branches_83_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_2_1_0());
        	      														
        	    }
        	    pushFollow(FOLLOW_9);
        	    lv_branches_83_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop377;
            }
        } while (true);

        otherlv_84=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred219_InternalGitHubActionsParser

    // $ANTLR start synpred221_InternalGitHubActionsParser
    public final void synpred221_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_NEWLINE_86=null;
        Token this_BEGIN_87=null;
        Token otherlv_88=null;
        Token this_NEWLINE_90=null;
        Token this_END_91=null;
        EObject lv_branches_89_0 = null;


        // InternalGitHubActionsParser.g:7349:11: ( (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )
        // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
        {
        // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
        // InternalGitHubActionsParser.g:7350:12: this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END
        {
        this_NEWLINE_86=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_87=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7358:12: (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+
        int cnt378=0;
        loop378:
        do {
            int alt378=2;
            int LA378_0 = input.LA(1);

            if ( (LA378_0==HyphenMinus) ) {
                alt378=1;
            }


            switch (alt378) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:7359:13: otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE
        	    {
        	    otherlv_88=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:7363:13: ( (lv_branches_89_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:7365:15: lv_branches_89_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_2_2_1_0());
        	      														
        	    }
        	    pushFollow(FOLLOW_5);
        	    lv_branches_89_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    this_NEWLINE_90=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt378 >= 1 ) break loop378;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(378, input);
                    throw eee;
            }
            cnt378++;
        } while (true);

        this_END_91=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred221_InternalGitHubActionsParser

    // $ANTLR start synpred222_InternalGitHubActionsParser
    public final void synpred222_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_58=null;
        Token lv_ignoreSpecifiedPaths_59_0=null;
        Token otherlv_60=null;
        Token this_NEWLINE_62=null;
        Token otherlv_63=null;
        Token otherlv_65=null;
        Token otherlv_67=null;
        Token this_NEWLINE_68=null;
        Token this_NEWLINE_69=null;
        Token this_BEGIN_70=null;
        Token otherlv_71=null;
        Token this_NEWLINE_73=null;
        Token this_END_74=null;
        Token otherlv_75=null;
        Token lv_ignoreSpecifiedBranches_76_0=null;
        Token otherlv_77=null;
        Token this_NEWLINE_79=null;
        Token otherlv_80=null;
        Token otherlv_82=null;
        Token otherlv_84=null;
        Token this_NEWLINE_85=null;
        Token this_NEWLINE_86=null;
        Token this_BEGIN_87=null;
        Token otherlv_88=null;
        Token this_NEWLINE_90=null;
        Token this_END_91=null;
        EObject lv_paths_61_0 = null;

        EObject lv_paths_64_0 = null;

        EObject lv_paths_66_0 = null;

        EObject lv_paths_72_0 = null;

        EObject lv_branches_78_0 = null;

        EObject lv_branches_81_0 = null;

        EObject lv_branches_83_0 = null;

        EObject lv_branches_89_0 = null;


        // InternalGitHubActionsParser.g:7074:5: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:7074:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:7074:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:7075:6: {...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred222_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0)");
        }
        // InternalGitHubActionsParser.g:7075:119: ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:7076:7: ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0);
        // InternalGitHubActionsParser.g:7079:10: ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:7079:11: {...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred222_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7079:20: ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? )
        // InternalGitHubActionsParser.g:7079:21: ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?
        {
        // InternalGitHubActionsParser.g:7079:21: ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) )
        int alt382=3;
        switch ( input.LA(1) ) {
        case PathsIgnore:
        case Paths:
            {
            alt382=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt382=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt382=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 382, 0, input);

            throw nvae;
        }

        switch (alt382) {
            case 1 :
                // InternalGitHubActionsParser.g:7080:11: ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:7080:11: ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:7081:12: (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7081:12: (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) )
                int alt379=2;
                int LA379_0 = input.LA(1);

                if ( (LA379_0==Paths) ) {
                    alt379=1;
                }
                else if ( (LA379_0==PathsIgnore) ) {
                    alt379=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 379, 0, input);

                    throw nvae;
                }
                switch (alt379) {
                    case 1 :
                        // InternalGitHubActionsParser.g:7082:13: otherlv_58= Paths
                        {
                        otherlv_58=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:7087:13: ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:7087:13: ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:7088:14: (lv_ignoreSpecifiedPaths_59_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:7088:14: (lv_ignoreSpecifiedPaths_59_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:7089:15: lv_ignoreSpecifiedPaths_59_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_59_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7106:12: ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7107:13: ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:7107:13: ( (lv_paths_61_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7108:14: (lv_paths_61_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7108:14: (lv_paths_61_0= ruleExpression )
                // InternalGitHubActionsParser.g:7109:15: lv_paths_61_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_paths_61_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_62=(Token)match(input,RULE_NEWLINE,FOLLOW_111); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7133:11: (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7133:11: (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7134:12: otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE
                {
                otherlv_63=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7138:12: ( (lv_paths_64_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7139:13: (lv_paths_64_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7139:13: (lv_paths_64_0= ruleExpression )
                // InternalGitHubActionsParser.g:7140:14: lv_paths_64_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_paths_64_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7157:12: (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )*
                loop380:
                do {
                    int alt380=2;
                    int LA380_0 = input.LA(1);

                    if ( (LA380_0==Comma) ) {
                        alt380=1;
                    }


                    switch (alt380) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7158:13: otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) )
                	    {
                	    otherlv_65=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7162:13: ( (lv_paths_66_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7163:14: (lv_paths_66_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7163:14: (lv_paths_66_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7164:15: lv_paths_66_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_paths_66_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop380;
                    }
                } while (true);

                otherlv_67=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_68=(Token)match(input,RULE_NEWLINE,FOLLOW_111); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7192:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                {
                // InternalGitHubActionsParser.g:7192:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
                // InternalGitHubActionsParser.g:7193:12: this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END
                {
                this_NEWLINE_69=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_70=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7201:12: (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+
                int cnt381=0;
                loop381:
                do {
                    int alt381=2;
                    int LA381_0 = input.LA(1);

                    if ( (LA381_0==HyphenMinus) ) {
                        alt381=1;
                    }


                    switch (alt381) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7202:13: otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE
                	    {
                	    otherlv_71=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7206:13: ( (lv_paths_72_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7207:14: (lv_paths_72_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7207:14: (lv_paths_72_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7208:15: lv_paths_72_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_paths_72_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt381 >= 1 ) break loop381;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(381, input);
                            throw eee;
                    }
                    cnt381++;
                } while (true);

                this_END_74=(Token)match(input,RULE_END,FOLLOW_111); if (state.failed) return ;

                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:7236:10: ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?
        int alt386=4;
        switch ( input.LA(1) ) {
            case BranchesIgnore:
            case Branches:
                {
                alt386=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt386=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt386=3;
                }
                break;
        }

        switch (alt386) {
            case 1 :
                // InternalGitHubActionsParser.g:7237:11: ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:7237:11: ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:7238:12: (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7238:12: (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) )
                int alt383=2;
                int LA383_0 = input.LA(1);

                if ( (LA383_0==Branches) ) {
                    alt383=1;
                }
                else if ( (LA383_0==BranchesIgnore) ) {
                    alt383=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 383, 0, input);

                    throw nvae;
                }
                switch (alt383) {
                    case 1 :
                        // InternalGitHubActionsParser.g:7239:13: otherlv_75= Branches
                        {
                        otherlv_75=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:7244:13: ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:7244:13: ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:7245:14: (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:7245:14: (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:7246:15: lv_ignoreSpecifiedBranches_76_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_76_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_77=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7263:12: ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7264:13: ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:7264:13: ( (lv_branches_78_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7265:14: (lv_branches_78_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7265:14: (lv_branches_78_0= ruleExpression )
                // InternalGitHubActionsParser.g:7266:15: lv_branches_78_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_branches_78_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_79=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7291:12: otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE
                {
                otherlv_80=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7295:12: ( (lv_branches_81_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
                // InternalGitHubActionsParser.g:7297:14: lv_branches_81_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_branches_81_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7314:12: (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )*
                loop384:
                do {
                    int alt384=2;
                    int LA384_0 = input.LA(1);

                    if ( (LA384_0==Comma) ) {
                        alt384=1;
                    }


                    switch (alt384) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7315:13: otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) )
                	    {
                	    otherlv_82=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7319:13: ( (lv_branches_83_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7321:15: lv_branches_83_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_branches_83_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop384;
                    }
                } while (true);

                otherlv_84=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
                {
                // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
                // InternalGitHubActionsParser.g:7350:12: this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END
                {
                this_NEWLINE_86=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_87=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7358:12: (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+
                int cnt385=0;
                loop385:
                do {
                    int alt385=2;
                    int LA385_0 = input.LA(1);

                    if ( (LA385_0==HyphenMinus) ) {
                        alt385=1;
                    }


                    switch (alt385) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7359:13: otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE
                	    {
                	    otherlv_88=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7363:13: ( (lv_branches_89_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7365:15: lv_branches_89_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_branches_89_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_90=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt385 >= 1 ) break loop385;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(385, input);
                            throw eee;
                    }
                    cnt385++;
                } while (true);

                this_END_91=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred222_InternalGitHubActionsParser

    // $ANTLR start synpred228_InternalGitHubActionsParser
    public final void synpred228_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_92=null;
        Token lv_ignoreSpecifiedTags_93_0=null;
        Token otherlv_94=null;
        Token this_NEWLINE_96=null;
        Token otherlv_97=null;
        Token otherlv_99=null;
        Token otherlv_101=null;
        Token this_NEWLINE_102=null;
        Token this_NEWLINE_103=null;
        Token this_BEGIN_104=null;
        Token otherlv_105=null;
        Token this_NEWLINE_107=null;
        Token this_END_108=null;
        EObject lv_tags_95_0 = null;

        EObject lv_tags_98_0 = null;

        EObject lv_tags_100_0 = null;

        EObject lv_tags_106_0 = null;


        // InternalGitHubActionsParser.g:7399:5: ( ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7399:5: ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:7399:5: ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:7400:6: {...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred228_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1)");
        }
        // InternalGitHubActionsParser.g:7400:119: ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:7401:7: ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1);
        // InternalGitHubActionsParser.g:7404:10: ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) )
        // InternalGitHubActionsParser.g:7404:11: {...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred228_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7404:20: ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) )
        int alt392=3;
        switch ( input.LA(1) ) {
        case TagsIgnore:
        case Tags:
            {
            alt392=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt392=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt392=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 392, 0, input);

            throw nvae;
        }

        switch (alt392) {
            case 1 :
                // InternalGitHubActionsParser.g:7404:21: ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:7404:21: ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:7405:11: (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7405:11: (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) )
                int alt389=2;
                int LA389_0 = input.LA(1);

                if ( (LA389_0==Tags) ) {
                    alt389=1;
                }
                else if ( (LA389_0==TagsIgnore) ) {
                    alt389=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 389, 0, input);

                    throw nvae;
                }
                switch (alt389) {
                    case 1 :
                        // InternalGitHubActionsParser.g:7406:12: otherlv_92= Tags
                        {
                        otherlv_92=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:7411:12: ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:7411:12: ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) )
                        // InternalGitHubActionsParser.g:7412:13: (lv_ignoreSpecifiedTags_93_0= TagsIgnore )
                        {
                        // InternalGitHubActionsParser.g:7412:13: (lv_ignoreSpecifiedTags_93_0= TagsIgnore )
                        // InternalGitHubActionsParser.g:7413:14: lv_ignoreSpecifiedTags_93_0= TagsIgnore
                        {
                        lv_ignoreSpecifiedTags_93_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_94=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7430:11: ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7431:12: ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:7431:12: ( (lv_tags_95_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7432:13: (lv_tags_95_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7432:13: (lv_tags_95_0= ruleExpression )
                // InternalGitHubActionsParser.g:7433:14: lv_tags_95_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_0_2_0_0());
                  													
                }
                pushFollow(FOLLOW_5);
                lv_tags_95_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_96=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7457:10: (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7457:10: (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7458:11: otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE
                {
                otherlv_97=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7462:11: ( (lv_tags_98_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7463:12: (lv_tags_98_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7463:12: (lv_tags_98_0= ruleExpression )
                // InternalGitHubActionsParser.g:7464:13: lv_tags_98_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_1_1_0());
                  												
                }
                pushFollow(FOLLOW_9);
                lv_tags_98_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7481:11: (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )*
                loop390:
                do {
                    int alt390=2;
                    int LA390_0 = input.LA(1);

                    if ( (LA390_0==Comma) ) {
                        alt390=1;
                    }


                    switch (alt390) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7482:12: otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) )
                	    {
                	    otherlv_99=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7486:12: ( (lv_tags_100_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7487:13: (lv_tags_100_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7487:13: (lv_tags_100_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7488:14: lv_tags_100_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_tags_100_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop390;
                    }
                } while (true);

                otherlv_101=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_102=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7516:10: (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END )
                {
                // InternalGitHubActionsParser.g:7516:10: (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END )
                // InternalGitHubActionsParser.g:7517:11: this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END
                {
                this_NEWLINE_103=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_104=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7525:11: (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+
                int cnt391=0;
                loop391:
                do {
                    int alt391=2;
                    int LA391_0 = input.LA(1);

                    if ( (LA391_0==HyphenMinus) ) {
                        alt391=1;
                    }


                    switch (alt391) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7526:12: otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE
                	    {
                	    otherlv_105=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7530:12: ( (lv_tags_106_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7531:13: (lv_tags_106_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7531:13: (lv_tags_106_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7532:14: lv_tags_106_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_2_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_tags_106_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_107=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt391 >= 1 ) break loop391;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(391, input);
                            throw eee;
                    }
                    cnt391++;
                } while (true);

                this_END_108=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred228_InternalGitHubActionsParser

    // $ANTLR start synpred229_InternalGitHubActionsParser
    public final void synpred229_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_58=null;
        Token lv_ignoreSpecifiedPaths_59_0=null;
        Token otherlv_60=null;
        Token this_NEWLINE_62=null;
        Token otherlv_63=null;
        Token otherlv_65=null;
        Token otherlv_67=null;
        Token this_NEWLINE_68=null;
        Token this_NEWLINE_69=null;
        Token this_BEGIN_70=null;
        Token otherlv_71=null;
        Token this_NEWLINE_73=null;
        Token this_END_74=null;
        Token otherlv_75=null;
        Token lv_ignoreSpecifiedBranches_76_0=null;
        Token otherlv_77=null;
        Token this_NEWLINE_79=null;
        Token otherlv_80=null;
        Token otherlv_82=null;
        Token otherlv_84=null;
        Token this_NEWLINE_85=null;
        Token this_NEWLINE_86=null;
        Token this_BEGIN_87=null;
        Token otherlv_88=null;
        Token this_NEWLINE_90=null;
        Token this_END_91=null;
        Token otherlv_92=null;
        Token lv_ignoreSpecifiedTags_93_0=null;
        Token otherlv_94=null;
        Token this_NEWLINE_96=null;
        Token otherlv_97=null;
        Token otherlv_99=null;
        Token otherlv_101=null;
        Token this_NEWLINE_102=null;
        Token this_NEWLINE_103=null;
        Token this_BEGIN_104=null;
        Token otherlv_105=null;
        Token this_NEWLINE_107=null;
        Token this_END_108=null;
        EObject lv_paths_61_0 = null;

        EObject lv_paths_64_0 = null;

        EObject lv_paths_66_0 = null;

        EObject lv_paths_72_0 = null;

        EObject lv_branches_78_0 = null;

        EObject lv_branches_81_0 = null;

        EObject lv_branches_83_0 = null;

        EObject lv_branches_89_0 = null;

        EObject lv_tags_95_0 = null;

        EObject lv_tags_98_0 = null;

        EObject lv_tags_100_0 = null;

        EObject lv_tags_106_0 = null;


        // InternalGitHubActionsParser.g:7067:4: ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
        // InternalGitHubActionsParser.g:7067:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) )
        {
        // InternalGitHubActionsParser.g:7067:4: ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) )
        // InternalGitHubActionsParser.g:7068:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) )
        {
        // InternalGitHubActionsParser.g:7068:5: ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) )
        // InternalGitHubActionsParser.g:7069:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?)
        {
        getUnorderedGroupHelper().enter(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1());
        // InternalGitHubActionsParser.g:7072:6: ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?)
        // InternalGitHubActionsParser.g:7073:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?
        {
        // InternalGitHubActionsParser.g:7073:7: ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+
        int cnt405=0;
        loop405:
        do {
            int alt405=3;
            int LA405_0 = input.LA(1);

            if ( LA405_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                alt405=1;
            }
            else if ( LA405_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                alt405=1;
            }
            else if ( (LA405_0==LeftSquareBracket) ) {
                int LA405_4 = input.LA(2);

                if ( synpred222_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                    alt405=1;
                }
                else if ( synpred228_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                    alt405=2;
                }


            }
            else if ( (LA405_0==RULE_NEWLINE) ) {
                int LA405_5 = input.LA(2);

                if ( synpred222_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                    alt405=1;
                }
                else if ( synpred228_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                    alt405=2;
                }


            }
            else if ( LA405_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                alt405=2;
            }
            else if ( LA405_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                alt405=2;
            }


            switch (alt405) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:7074:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:7074:5: ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) )
        	    // InternalGitHubActionsParser.g:7075:6: {...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred229_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0)");
        	    }
        	    // InternalGitHubActionsParser.g:7075:119: ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) )
        	    // InternalGitHubActionsParser.g:7076:7: ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0);
        	    // InternalGitHubActionsParser.g:7079:10: ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) )
        	    // InternalGitHubActionsParser.g:7079:11: {...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred229_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:7079:20: ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? )
        	    // InternalGitHubActionsParser.g:7079:21: ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?
        	    {
        	    // InternalGitHubActionsParser.g:7079:21: ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) )
        	    int alt396=3;
        	    switch ( input.LA(1) ) {
        	    case PathsIgnore:
        	    case Paths:
        	        {
        	        alt396=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt396=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt396=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 396, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt396) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:7080:11: ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:7080:11: ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:7081:12: (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:7081:12: (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) )
        	            int alt393=2;
        	            int LA393_0 = input.LA(1);

        	            if ( (LA393_0==Paths) ) {
        	                alt393=1;
        	            }
        	            else if ( (LA393_0==PathsIgnore) ) {
        	                alt393=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 393, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt393) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:7082:13: otherlv_58= Paths
        	                    {
        	                    otherlv_58=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:7087:13: ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:7087:13: ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) )
        	                    // InternalGitHubActionsParser.g:7088:14: (lv_ignoreSpecifiedPaths_59_0= PathsIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:7088:14: (lv_ignoreSpecifiedPaths_59_0= PathsIgnore )
        	                    // InternalGitHubActionsParser.g:7089:15: lv_ignoreSpecifiedPaths_59_0= PathsIgnore
        	                    {
        	                    lv_ignoreSpecifiedPaths_59_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7106:12: ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:7107:13: ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:7107:13: ( (lv_paths_61_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:7108:14: (lv_paths_61_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:7108:14: (lv_paths_61_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:7109:15: lv_paths_61_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_0_2_0_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_paths_61_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_62=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:7133:11: (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:7133:11: (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:7134:12: otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE
        	            {
        	            otherlv_63=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7138:12: ( (lv_paths_64_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:7139:13: (lv_paths_64_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:7139:13: (lv_paths_64_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:7140:14: lv_paths_64_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_1_1_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_paths_64_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:7157:12: (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )*
        	            loop394:
        	            do {
        	                int alt394=2;
        	                int LA394_0 = input.LA(1);

        	                if ( (LA394_0==Comma) ) {
        	                    alt394=1;
        	                }


        	                switch (alt394) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:7158:13: otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_65=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:7162:13: ( (lv_paths_66_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:7163:14: (lv_paths_66_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:7163:14: (lv_paths_66_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:7164:15: lv_paths_66_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_1_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_paths_66_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop394;
        	                }
        	            } while (true);

        	            otherlv_67=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_68=(Token)match(input,RULE_NEWLINE,FOLLOW_55); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:7192:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:7192:11: (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END )
        	            // InternalGitHubActionsParser.g:7193:12: this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END
        	            {
        	            this_NEWLINE_69=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_70=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7201:12: (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+
        	            int cnt395=0;
        	            loop395:
        	            do {
        	                int alt395=2;
        	                int LA395_0 = input.LA(1);

        	                if ( (LA395_0==HyphenMinus) ) {
        	                    alt395=1;
        	                }


        	                switch (alt395) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:7202:13: otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE
        	            	    {
        	            	    otherlv_71=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:7206:13: ( (lv_paths_72_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:7207:14: (lv_paths_72_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:7207:14: (lv_paths_72_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:7208:15: lv_paths_72_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_0_2_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_paths_72_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_73=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt395 >= 1 ) break loop395;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(395, input);
        	                        throw eee;
        	                }
        	                cnt395++;
        	            } while (true);

        	            this_END_74=(Token)match(input,RULE_END,FOLLOW_55); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }

        	    // InternalGitHubActionsParser.g:7236:10: ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?
        	    int alt400=4;
        	    alt400 = dfa400.predict(input);
        	    switch (alt400) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:7237:11: ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:7237:11: ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:7238:12: (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:7238:12: (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) )
        	            int alt397=2;
        	            int LA397_0 = input.LA(1);

        	            if ( (LA397_0==Branches) ) {
        	                alt397=1;
        	            }
        	            else if ( (LA397_0==BranchesIgnore) ) {
        	                alt397=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 397, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt397) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:7239:13: otherlv_75= Branches
        	                    {
        	                    otherlv_75=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:7244:13: ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:7244:13: ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) )
        	                    // InternalGitHubActionsParser.g:7245:14: (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:7245:14: (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore )
        	                    // InternalGitHubActionsParser.g:7246:15: lv_ignoreSpecifiedBranches_76_0= BranchesIgnore
        	                    {
        	                    lv_ignoreSpecifiedBranches_76_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_77=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7263:12: ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:7264:13: ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:7264:13: ( (lv_branches_78_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:7265:14: (lv_branches_78_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:7265:14: (lv_branches_78_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:7266:15: lv_branches_78_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_0_2_0_0());
        	              														
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_branches_78_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_79=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:7290:11: (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:7291:12: otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE
        	            {
        	            otherlv_80=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7295:12: ( (lv_branches_81_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:7296:13: (lv_branches_81_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:7297:14: lv_branches_81_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_1_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_branches_81_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:7314:12: (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )*
        	            loop398:
        	            do {
        	                int alt398=2;
        	                int LA398_0 = input.LA(1);

        	                if ( (LA398_0==Comma) ) {
        	                    alt398=1;
        	                }


        	                switch (alt398) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:7315:13: otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_82=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:7319:13: ( (lv_branches_83_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:7320:14: (lv_branches_83_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:7321:15: lv_branches_83_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_1_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_branches_83_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop398;
        	                }
        	            } while (true);

        	            otherlv_84=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_85=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:7349:11: (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END )
        	            // InternalGitHubActionsParser.g:7350:12: this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END
        	            {
        	            this_NEWLINE_86=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_87=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7358:12: (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+
        	            int cnt399=0;
        	            loop399:
        	            do {
        	                int alt399=2;
        	                int LA399_0 = input.LA(1);

        	                if ( (LA399_0==HyphenMinus) ) {
        	                    alt399=1;
        	                }


        	                switch (alt399) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:7359:13: otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE
        	            	    {
        	            	    otherlv_88=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:7363:13: ( (lv_branches_89_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:7364:14: (lv_branches_89_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:7365:15: lv_branches_89_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_1_2_2_1_0());
        	            	      														
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_branches_89_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_90=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt399 >= 1 ) break loop399;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(399, input);
        	                        throw eee;
        	                }
        	                cnt399++;
        	            } while (true);

        	            this_END_91=(Token)match(input,RULE_END,FOLLOW_57); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 2 :
        	    // InternalGitHubActionsParser.g:7399:5: ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:7399:5: ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) )
        	    // InternalGitHubActionsParser.g:7400:6: {...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred229_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1)");
        	    }
        	    // InternalGitHubActionsParser.g:7400:119: ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:7401:7: ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1);
        	    // InternalGitHubActionsParser.g:7404:10: ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:7404:11: {...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred229_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:7404:20: ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) )
        	    int alt404=3;
        	    switch ( input.LA(1) ) {
        	    case TagsIgnore:
        	    case Tags:
        	        {
        	        alt404=1;
        	        }
        	        break;
        	    case LeftSquareBracket:
        	        {
        	        alt404=2;
        	        }
        	        break;
        	    case RULE_NEWLINE:
        	        {
        	        alt404=3;
        	        }
        	        break;
        	    default:
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 404, 0, input);

        	        throw nvae;
        	    }

        	    switch (alt404) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:7404:21: ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) )
        	            {
        	            // InternalGitHubActionsParser.g:7404:21: ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) )
        	            // InternalGitHubActionsParser.g:7405:11: (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:7405:11: (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) )
        	            int alt401=2;
        	            int LA401_0 = input.LA(1);

        	            if ( (LA401_0==Tags) ) {
        	                alt401=1;
        	            }
        	            else if ( (LA401_0==TagsIgnore) ) {
        	                alt401=2;
        	            }
        	            else {
        	                if (state.backtracking>0) {state.failed=true; return ;}
        	                NoViableAltException nvae =
        	                    new NoViableAltException("", 401, 0, input);

        	                throw nvae;
        	            }
        	            switch (alt401) {
        	                case 1 :
        	                    // InternalGitHubActionsParser.g:7406:12: otherlv_92= Tags
        	                    {
        	                    otherlv_92=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return ;

        	                    }
        	                    break;
        	                case 2 :
        	                    // InternalGitHubActionsParser.g:7411:12: ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) )
        	                    {
        	                    // InternalGitHubActionsParser.g:7411:12: ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) )
        	                    // InternalGitHubActionsParser.g:7412:13: (lv_ignoreSpecifiedTags_93_0= TagsIgnore )
        	                    {
        	                    // InternalGitHubActionsParser.g:7412:13: (lv_ignoreSpecifiedTags_93_0= TagsIgnore )
        	                    // InternalGitHubActionsParser.g:7413:14: lv_ignoreSpecifiedTags_93_0= TagsIgnore
        	                    {
        	                    lv_ignoreSpecifiedTags_93_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return ;

        	                    }


        	                    }


        	                    }
        	                    break;

        	            }

        	            otherlv_94=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7430:11: ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:7431:12: ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE
        	            {
        	            // InternalGitHubActionsParser.g:7431:12: ( (lv_tags_95_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:7432:13: (lv_tags_95_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:7432:13: (lv_tags_95_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:7433:14: lv_tags_95_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_0_2_0_0());
        	              													
        	            }
        	            pushFollow(FOLLOW_5);
        	            lv_tags_95_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_NEWLINE_96=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;
        	        case 2 :
        	            // InternalGitHubActionsParser.g:7457:10: (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE )
        	            {
        	            // InternalGitHubActionsParser.g:7457:10: (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE )
        	            // InternalGitHubActionsParser.g:7458:11: otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE
        	            {
        	            otherlv_97=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7462:11: ( (lv_tags_98_0= ruleExpression ) )
        	            // InternalGitHubActionsParser.g:7463:12: (lv_tags_98_0= ruleExpression )
        	            {
        	            // InternalGitHubActionsParser.g:7463:12: (lv_tags_98_0= ruleExpression )
        	            // InternalGitHubActionsParser.g:7464:13: lv_tags_98_0= ruleExpression
        	            {
        	            if ( state.backtracking==0 ) {

        	              													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_1_1_0());
        	              												
        	            }
        	            pushFollow(FOLLOW_9);
        	            lv_tags_98_0=ruleExpression();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            // InternalGitHubActionsParser.g:7481:11: (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )*
        	            loop402:
        	            do {
        	                int alt402=2;
        	                int LA402_0 = input.LA(1);

        	                if ( (LA402_0==Comma) ) {
        	                    alt402=1;
        	                }


        	                switch (alt402) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:7482:12: otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) )
        	            	    {
        	            	    otherlv_99=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:7486:12: ( (lv_tags_100_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:7487:13: (lv_tags_100_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:7487:13: (lv_tags_100_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:7488:14: lv_tags_100_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_1_2_1_0());
        	            	      													
        	            	    }
        	            	    pushFollow(FOLLOW_9);
        	            	    lv_tags_100_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    break loop402;
        	                }
        	            } while (true);

        	            otherlv_101=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_102=(Token)match(input,RULE_NEWLINE,FOLLOW_57); if (state.failed) return ;

        	            }


        	            }
        	            break;
        	        case 3 :
        	            // InternalGitHubActionsParser.g:7516:10: (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END )
        	            {
        	            // InternalGitHubActionsParser.g:7516:10: (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END )
        	            // InternalGitHubActionsParser.g:7517:11: this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END
        	            {
        	            this_NEWLINE_103=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_104=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:7525:11: (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+
        	            int cnt403=0;
        	            loop403:
        	            do {
        	                int alt403=2;
        	                int LA403_0 = input.LA(1);

        	                if ( (LA403_0==HyphenMinus) ) {
        	                    alt403=1;
        	                }


        	                switch (alt403) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:7526:12: otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE
        	            	    {
        	            	    otherlv_105=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	            	    // InternalGitHubActionsParser.g:7530:12: ( (lv_tags_106_0= ruleExpression ) )
        	            	    // InternalGitHubActionsParser.g:7531:13: (lv_tags_106_0= ruleExpression )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:7531:13: (lv_tags_106_0= ruleExpression )
        	            	    // InternalGitHubActionsParser.g:7532:14: lv_tags_106_0= ruleExpression
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_1_1_2_2_1_0());
        	            	      													
        	            	    }
        	            	    pushFollow(FOLLOW_5);
        	            	    lv_tags_106_0=ruleExpression();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }

        	            	    this_NEWLINE_107=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt403 >= 1 ) break loop403;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(403, input);
        	                        throw eee;
        	                }
        	                cnt403++;
        	            } while (true);

        	            this_END_108=(Token)match(input,RULE_END,FOLLOW_57); if (state.failed) return ;

        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt405 >= 1 ) break loop405;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(405, input);
                    throw eee;
            }
            cnt405++;
        } while (true);

        if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1()) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred229_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1())");
        }

        }


        }


        }


        }
    }
    // $ANTLR end synpred229_InternalGitHubActionsParser

    // $ANTLR start synpred238_InternalGitHubActionsParser
    public final void synpred238_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_132=null;
        Token otherlv_134=null;
        Token otherlv_136=null;
        Token this_NEWLINE_137=null;
        EObject lv_branches_133_0 = null;

        EObject lv_branches_135_0 = null;


        // InternalGitHubActionsParser.g:7798:12: ( (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:7798:12: (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE )
        {
        // InternalGitHubActionsParser.g:7798:12: (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:7799:13: otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE
        {
        otherlv_132=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7803:13: ( (lv_branches_133_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:7804:14: (lv_branches_133_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:7804:14: (lv_branches_133_0= ruleExpression )
        // InternalGitHubActionsParser.g:7805:15: lv_branches_133_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_1_1_0());
          														
        }
        pushFollow(FOLLOW_9);
        lv_branches_133_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalGitHubActionsParser.g:7822:13: (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )*
        loop409:
        do {
            int alt409=2;
            int LA409_0 = input.LA(1);

            if ( (LA409_0==Comma) ) {
                alt409=1;
            }


            switch (alt409) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:7823:14: otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) )
        	    {
        	    otherlv_134=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:7827:14: ( (lv_branches_135_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:7828:15: (lv_branches_135_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:7828:15: (lv_branches_135_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:7829:16: lv_branches_135_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_1_2_1_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_9);
        	    lv_branches_135_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop409;
            }
        } while (true);

        otherlv_136=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_137=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred238_InternalGitHubActionsParser

    // $ANTLR start synpred240_InternalGitHubActionsParser
    public final void synpred240_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_NEWLINE_138=null;
        Token this_BEGIN_139=null;
        Token otherlv_140=null;
        Token this_NEWLINE_142=null;
        Token this_END_143=null;
        EObject lv_branches_141_0 = null;


        // InternalGitHubActionsParser.g:7857:12: ( (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )
        // InternalGitHubActionsParser.g:7857:12: (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END )
        {
        // InternalGitHubActionsParser.g:7857:12: (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END )
        // InternalGitHubActionsParser.g:7858:13: this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END
        {
        this_NEWLINE_138=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_139=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7866:13: (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+
        int cnt410=0;
        loop410:
        do {
            int alt410=2;
            int LA410_0 = input.LA(1);

            if ( (LA410_0==HyphenMinus) ) {
                alt410=1;
            }


            switch (alt410) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:7867:14: otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE
        	    {
        	    otherlv_140=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:7871:14: ( (lv_branches_141_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:7872:15: (lv_branches_141_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:7872:15: (lv_branches_141_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:7873:16: lv_branches_141_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_2_2_1_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_5);
        	    lv_branches_141_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    this_NEWLINE_142=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt410 >= 1 ) break loop410;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(410, input);
                    throw eee;
            }
            cnt410++;
        } while (true);

        this_END_143=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred240_InternalGitHubActionsParser

    // $ANTLR start synpred241_InternalGitHubActionsParser
    public final void synpred241_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_110=null;
        Token lv_ignoreSpecifiedTags_111_0=null;
        Token otherlv_112=null;
        Token this_NEWLINE_114=null;
        Token otherlv_115=null;
        Token otherlv_117=null;
        Token otherlv_119=null;
        Token this_NEWLINE_120=null;
        Token this_NEWLINE_121=null;
        Token this_BEGIN_122=null;
        Token otherlv_123=null;
        Token this_NEWLINE_125=null;
        Token this_END_126=null;
        Token otherlv_127=null;
        Token lv_ignoreSpecifiedBranches_128_0=null;
        Token otherlv_129=null;
        Token this_NEWLINE_131=null;
        Token otherlv_132=null;
        Token otherlv_134=null;
        Token otherlv_136=null;
        Token this_NEWLINE_137=null;
        Token this_NEWLINE_138=null;
        Token this_BEGIN_139=null;
        Token otherlv_140=null;
        Token this_NEWLINE_142=null;
        Token this_END_143=null;
        EObject lv_tags_113_0 = null;

        EObject lv_tags_116_0 = null;

        EObject lv_tags_118_0 = null;

        EObject lv_tags_124_0 = null;

        EObject lv_branches_130_0 = null;

        EObject lv_branches_133_0 = null;

        EObject lv_branches_135_0 = null;

        EObject lv_branches_141_0 = null;


        // InternalGitHubActionsParser.g:7582:6: ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:7582:6: ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:7582:6: ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:7583:7: {...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred241_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0)");
        }
        // InternalGitHubActionsParser.g:7583:122: ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:7584:8: ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 0);
        // InternalGitHubActionsParser.g:7587:11: ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:7587:12: {...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred241_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7587:21: ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? )
        // InternalGitHubActionsParser.g:7587:22: ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )?
        {
        // InternalGitHubActionsParser.g:7587:22: ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) )
        int alt414=3;
        switch ( input.LA(1) ) {
        case TagsIgnore:
        case Tags:
            {
            alt414=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt414=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt414=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 414, 0, input);

            throw nvae;
        }

        switch (alt414) {
            case 1 :
                // InternalGitHubActionsParser.g:7588:12: ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:7588:12: ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:7589:13: (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7589:13: (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) )
                int alt411=2;
                int LA411_0 = input.LA(1);

                if ( (LA411_0==Tags) ) {
                    alt411=1;
                }
                else if ( (LA411_0==TagsIgnore) ) {
                    alt411=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 411, 0, input);

                    throw nvae;
                }
                switch (alt411) {
                    case 1 :
                        // InternalGitHubActionsParser.g:7590:14: otherlv_110= Tags
                        {
                        otherlv_110=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:7595:14: ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:7595:14: ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) )
                        // InternalGitHubActionsParser.g:7596:15: (lv_ignoreSpecifiedTags_111_0= TagsIgnore )
                        {
                        // InternalGitHubActionsParser.g:7596:15: (lv_ignoreSpecifiedTags_111_0= TagsIgnore )
                        // InternalGitHubActionsParser.g:7597:16: lv_ignoreSpecifiedTags_111_0= TagsIgnore
                        {
                        lv_ignoreSpecifiedTags_111_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_112=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7614:13: ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7615:14: ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:7615:14: ( (lv_tags_113_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7616:15: (lv_tags_113_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7616:15: (lv_tags_113_0= ruleExpression )
                // InternalGitHubActionsParser.g:7617:16: lv_tags_113_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_tags_113_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_114=(Token)match(input,RULE_NEWLINE,FOLLOW_111); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7641:12: (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7641:12: (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7642:13: otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE
                {
                otherlv_115=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7646:13: ( (lv_tags_116_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7647:14: (lv_tags_116_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7647:14: (lv_tags_116_0= ruleExpression )
                // InternalGitHubActionsParser.g:7648:15: lv_tags_116_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_tags_116_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7665:13: (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )*
                loop412:
                do {
                    int alt412=2;
                    int LA412_0 = input.LA(1);

                    if ( (LA412_0==Comma) ) {
                        alt412=1;
                    }


                    switch (alt412) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7666:14: otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) )
                	    {
                	    otherlv_117=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7670:14: ( (lv_tags_118_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7671:15: (lv_tags_118_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7671:15: (lv_tags_118_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7672:16: lv_tags_118_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_tags_118_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop412;
                    }
                } while (true);

                otherlv_119=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_120=(Token)match(input,RULE_NEWLINE,FOLLOW_111); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7700:12: (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END )
                {
                // InternalGitHubActionsParser.g:7700:12: (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END )
                // InternalGitHubActionsParser.g:7701:13: this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END
                {
                this_NEWLINE_121=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_122=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7709:13: (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+
                int cnt413=0;
                loop413:
                do {
                    int alt413=2;
                    int LA413_0 = input.LA(1);

                    if ( (LA413_0==HyphenMinus) ) {
                        alt413=1;
                    }


                    switch (alt413) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7710:14: otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE
                	    {
                	    otherlv_123=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7714:14: ( (lv_tags_124_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7715:15: (lv_tags_124_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7715:15: (lv_tags_124_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7716:16: lv_tags_124_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_0_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_tags_124_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_125=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt413 >= 1 ) break loop413;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(413, input);
                            throw eee;
                    }
                    cnt413++;
                } while (true);

                this_END_126=(Token)match(input,RULE_END,FOLLOW_111); if (state.failed) return ;

                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:7744:11: ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )?
        int alt418=4;
        switch ( input.LA(1) ) {
            case BranchesIgnore:
            case Branches:
                {
                alt418=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt418=2;
                }
                break;
            case RULE_NEWLINE:
                {
                alt418=3;
                }
                break;
        }

        switch (alt418) {
            case 1 :
                // InternalGitHubActionsParser.g:7745:12: ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:7745:12: ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:7746:13: (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7746:13: (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) )
                int alt415=2;
                int LA415_0 = input.LA(1);

                if ( (LA415_0==Branches) ) {
                    alt415=1;
                }
                else if ( (LA415_0==BranchesIgnore) ) {
                    alt415=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 415, 0, input);

                    throw nvae;
                }
                switch (alt415) {
                    case 1 :
                        // InternalGitHubActionsParser.g:7747:14: otherlv_127= Branches
                        {
                        otherlv_127=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:7752:14: ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:7752:14: ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:7753:15: (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:7753:15: (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:7754:16: lv_ignoreSpecifiedBranches_128_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_128_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_129=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7771:13: ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7772:14: ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:7772:14: ( (lv_branches_130_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7773:15: (lv_branches_130_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7773:15: (lv_branches_130_0= ruleExpression )
                // InternalGitHubActionsParser.g:7774:16: lv_branches_130_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_0_2_0_0());
                  															
                }
                pushFollow(FOLLOW_5);
                lv_branches_130_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_131=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7798:12: (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7798:12: (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7799:13: otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE
                {
                otherlv_132=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7803:13: ( (lv_branches_133_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7804:14: (lv_branches_133_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7804:14: (lv_branches_133_0= ruleExpression )
                // InternalGitHubActionsParser.g:7805:15: lv_branches_133_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_1_1_0());
                  														
                }
                pushFollow(FOLLOW_9);
                lv_branches_133_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7822:13: (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )*
                loop416:
                do {
                    int alt416=2;
                    int LA416_0 = input.LA(1);

                    if ( (LA416_0==Comma) ) {
                        alt416=1;
                    }


                    switch (alt416) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7823:14: otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) )
                	    {
                	    otherlv_134=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7827:14: ( (lv_branches_135_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7828:15: (lv_branches_135_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7828:15: (lv_branches_135_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7829:16: lv_branches_135_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_1_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_branches_135_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop416;
                    }
                } while (true);

                otherlv_136=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_137=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7857:12: (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END )
                {
                // InternalGitHubActionsParser.g:7857:12: (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END )
                // InternalGitHubActionsParser.g:7858:13: this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END
                {
                this_NEWLINE_138=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_139=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7866:13: (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+
                int cnt417=0;
                loop417:
                do {
                    int alt417=2;
                    int LA417_0 = input.LA(1);

                    if ( (LA417_0==HyphenMinus) ) {
                        alt417=1;
                    }


                    switch (alt417) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7867:14: otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE
                	    {
                	    otherlv_140=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7871:14: ( (lv_branches_141_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7872:15: (lv_branches_141_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7872:15: (lv_branches_141_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7873:16: lv_branches_141_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_2_0_0_1_2_2_1_0());
                	      															
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_branches_141_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_142=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt417 >= 1 ) break loop417;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(417, input);
                            throw eee;
                    }
                    cnt417++;
                } while (true);

                this_END_143=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred241_InternalGitHubActionsParser

    // $ANTLR start synpred247_InternalGitHubActionsParser
    public final void synpred247_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_144=null;
        Token lv_ignoreSpecifiedPaths_145_0=null;
        Token otherlv_146=null;
        Token this_NEWLINE_148=null;
        Token otherlv_149=null;
        Token otherlv_151=null;
        Token otherlv_153=null;
        Token this_NEWLINE_154=null;
        Token this_NEWLINE_155=null;
        Token this_BEGIN_156=null;
        Token otherlv_157=null;
        Token this_NEWLINE_159=null;
        Token this_END_160=null;
        EObject lv_paths_147_0 = null;

        EObject lv_paths_150_0 = null;

        EObject lv_paths_152_0 = null;

        EObject lv_paths_158_0 = null;


        // InternalGitHubActionsParser.g:7907:6: ( ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7907:6: ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:7907:6: ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:7908:7: {...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred247_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1)");
        }
        // InternalGitHubActionsParser.g:7908:122: ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:7909:8: ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_2_0(), 1);
        // InternalGitHubActionsParser.g:7912:11: ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) )
        // InternalGitHubActionsParser.g:7912:12: {...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred247_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7912:21: ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) )
        int alt424=3;
        switch ( input.LA(1) ) {
        case PathsIgnore:
        case Paths:
            {
            alt424=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt424=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt424=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 424, 0, input);

            throw nvae;
        }

        switch (alt424) {
            case 1 :
                // InternalGitHubActionsParser.g:7912:22: ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:7912:22: ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:7913:12: (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7913:12: (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) )
                int alt421=2;
                int LA421_0 = input.LA(1);

                if ( (LA421_0==Paths) ) {
                    alt421=1;
                }
                else if ( (LA421_0==PathsIgnore) ) {
                    alt421=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 421, 0, input);

                    throw nvae;
                }
                switch (alt421) {
                    case 1 :
                        // InternalGitHubActionsParser.g:7914:13: otherlv_144= Paths
                        {
                        otherlv_144=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:7919:13: ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:7919:13: ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:7920:14: (lv_ignoreSpecifiedPaths_145_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:7920:14: (lv_ignoreSpecifiedPaths_145_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:7921:15: lv_ignoreSpecifiedPaths_145_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_145_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_146=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7938:12: ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7939:13: ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:7939:13: ( (lv_paths_147_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7940:14: (lv_paths_147_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7940:14: (lv_paths_147_0= ruleExpression )
                // InternalGitHubActionsParser.g:7941:15: lv_paths_147_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_0_2_0_0());
                  														
                }
                pushFollow(FOLLOW_5);
                lv_paths_147_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_148=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7965:11: (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:7965:11: (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:7966:12: otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE
                {
                otherlv_149=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7970:12: ( (lv_paths_150_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7971:13: (lv_paths_150_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7971:13: (lv_paths_150_0= ruleExpression )
                // InternalGitHubActionsParser.g:7972:14: lv_paths_150_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_1_1_0());
                  													
                }
                pushFollow(FOLLOW_9);
                lv_paths_150_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7989:12: (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )*
                loop422:
                do {
                    int alt422=2;
                    int LA422_0 = input.LA(1);

                    if ( (LA422_0==Comma) ) {
                        alt422=1;
                    }


                    switch (alt422) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7990:13: otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) )
                	    {
                	    otherlv_151=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7994:13: ( (lv_paths_152_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7995:14: (lv_paths_152_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7995:14: (lv_paths_152_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7996:15: lv_paths_152_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_1_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_paths_152_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop422;
                    }
                } while (true);

                otherlv_153=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_154=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:8024:11: (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END )
                {
                // InternalGitHubActionsParser.g:8024:11: (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END )
                // InternalGitHubActionsParser.g:8025:12: this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END
                {
                this_NEWLINE_155=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_156=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:8033:12: (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+
                int cnt423=0;
                loop423:
                do {
                    int alt423=2;
                    int LA423_0 = input.LA(1);

                    if ( (LA423_0==HyphenMinus) ) {
                        alt423=1;
                    }


                    switch (alt423) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:8034:13: otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE
                	    {
                	    otherlv_157=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:8038:13: ( (lv_paths_158_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:8039:14: (lv_paths_158_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:8039:14: (lv_paths_158_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:8040:15: lv_paths_158_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      															newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_2_2_1_0());
                	      														
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_paths_158_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_159=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt423 >= 1 ) break loop423;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(423, input);
                            throw eee;
                    }
                    cnt423++;
                } while (true);

                this_END_160=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred247_InternalGitHubActionsParser

    // $ANTLR start synpred252_InternalGitHubActionsParser
    public final void synpred252_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_8=null;
        Token this_BEGIN_9=null;
        Token this_END_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_14=null;
        Token this_BEGIN_15=null;
        Token this_END_17=null;
        EObject lv_inputs_10_0 = null;

        EObject lv_outputs_16_0 = null;


        // InternalGitHubActionsParser.g:8236:6: ( ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) ) )
        // InternalGitHubActionsParser.g:8236:6: ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:8236:6: ({...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) ) )
        // InternalGitHubActionsParser.g:8237:7: {...}? => ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred252_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 0)");
        }
        // InternalGitHubActionsParser.g:8237:130: ( ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) ) )
        // InternalGitHubActionsParser.g:8238:8: ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 0);
        // InternalGitHubActionsParser.g:8241:11: ({...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? ) )
        // InternalGitHubActionsParser.g:8241:12: {...}? => ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred252_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8241:21: ( (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )? )
        // InternalGitHubActionsParser.g:8241:22: (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END ) (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )?
        {
        // InternalGitHubActionsParser.g:8241:22: (otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END )
        // InternalGitHubActionsParser.g:8242:12: otherlv_6= Inputs otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_inputs_10_0= ruleInput ) )+ this_END_11= RULE_END
        {
        otherlv_6=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return ;
        otherlv_7=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8258:12: ( (lv_inputs_10_0= ruleInput ) )+
        int cnt426=0;
        loop426:
        do {
            int alt426=2;
            int LA426_0 = input.LA(1);

            if ( (LA426_0==Required||LA426_0==Default||LA426_0==Options||LA426_0==Type||LA426_0==LeftSquareBracket||LA426_0==RULE_NEWLINE||LA426_0==RULE_ID) ) {
                alt426=1;
            }


            switch (alt426) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:8259:13: (lv_inputs_10_0= ruleInput )
        	    {
        	    // InternalGitHubActionsParser.g:8259:13: (lv_inputs_10_0= ruleInput )
        	    // InternalGitHubActionsParser.g:8260:14: lv_inputs_10_0= ruleInput
        	    {
        	    if ( state.backtracking==0 ) {

        	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_0_2_0_0_4_0());
        	      													
        	    }
        	    pushFollow(FOLLOW_64);
        	    lv_inputs_10_0=ruleInput();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt426 >= 1 ) break loop426;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(426, input);
                    throw eee;
            }
            cnt426++;
        } while (true);

        this_END_11=(Token)match(input,RULE_END,FOLLOW_114); if (state.failed) return ;

        }

        // InternalGitHubActionsParser.g:8282:11: (otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END )?
        int alt428=2;
        int LA428_0 = input.LA(1);

        if ( (LA428_0==Outputs) ) {
            alt428=1;
        }
        switch (alt428) {
            case 1 :
                // InternalGitHubActionsParser.g:8283:12: otherlv_12= Outputs otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_outputs_16_0= ruleOutput ) )+ this_END_17= RULE_END
                {
                otherlv_12=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return ;
                otherlv_13=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_66); if (state.failed) return ;
                // InternalGitHubActionsParser.g:8299:12: ( (lv_outputs_16_0= ruleOutput ) )+
                int cnt427=0;
                loop427:
                do {
                    int alt427=2;
                    int LA427_0 = input.LA(1);

                    if ( (LA427_0==Value||LA427_0==RULE_ID) ) {
                        alt427=1;
                    }


                    switch (alt427) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:8300:13: (lv_outputs_16_0= ruleOutput )
                	    {
                	    // InternalGitHubActionsParser.g:8300:13: (lv_outputs_16_0= ruleOutput )
                	    // InternalGitHubActionsParser.g:8301:14: lv_outputs_16_0= ruleOutput
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_0_2_0_1_4_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_67);
                	    lv_outputs_16_0=ruleOutput();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt427 >= 1 ) break loop427;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(427, input);
                            throw eee;
                    }
                    cnt427++;
                } while (true);

                this_END_17=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred252_InternalGitHubActionsParser

    // $ANTLR start synpred254_InternalGitHubActionsParser
    public final void synpred254_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_20=null;
        Token this_BEGIN_21=null;
        Token this_END_23=null;
        EObject lv_secrets_22_0 = null;


        // InternalGitHubActionsParser.g:8329:6: ( ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:8329:6: ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:8329:6: ({...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:8330:7: {...}? => ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred254_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 1)");
        }
        // InternalGitHubActionsParser.g:8330:130: ( ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) ) )
        // InternalGitHubActionsParser.g:8331:8: ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_0_2(), 1);
        // InternalGitHubActionsParser.g:8334:11: ({...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END ) )
        // InternalGitHubActionsParser.g:8334:12: {...}? => (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred254_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8334:21: (otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END )
        // InternalGitHubActionsParser.g:8334:22: otherlv_18= Secrets otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_secrets_22_0= ruleSecret ) )+ this_END_23= RULE_END
        {
        otherlv_18=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return ;
        otherlv_19=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8350:11: ( (lv_secrets_22_0= ruleSecret ) )+
        int cnt429=0;
        loop429:
        do {
            int alt429=2;
            int LA429_0 = input.LA(1);

            if ( (LA429_0==Description||LA429_0==Required||LA429_0==RULE_ID) ) {
                alt429=1;
            }


            switch (alt429) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:8351:12: (lv_secrets_22_0= ruleSecret )
        	    {
        	    // InternalGitHubActionsParser.g:8351:12: (lv_secrets_22_0= ruleSecret )
        	    // InternalGitHubActionsParser.g:8352:13: lv_secrets_22_0= ruleSecret
        	    {
        	    if ( state.backtracking==0 ) {

        	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_0_2_1_4_0());
        	      												
        	    }
        	    pushFollow(FOLLOW_70);
        	    lv_secrets_22_0=ruleSecret();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt429 >= 1 ) break loop429;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(429, input);
                    throw eee;
            }
            cnt429++;
        } while (true);

        this_END_23=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred254_InternalGitHubActionsParser

    // $ANTLR start synpred259_InternalGitHubActionsParser
    public final void synpred259_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token this_NEWLINE_27=null;
        Token this_BEGIN_28=null;
        Token this_END_30=null;
        Token otherlv_31=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_BEGIN_34=null;
        Token this_END_36=null;
        EObject lv_outputs_29_0 = null;

        EObject lv_inputs_35_0 = null;


        // InternalGitHubActionsParser.g:8396:5: ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) )
        // InternalGitHubActionsParser.g:8396:5: ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:8396:5: ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) )
        // InternalGitHubActionsParser.g:8397:6: {...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred259_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0)");
        }
        // InternalGitHubActionsParser.g:8397:127: ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) )
        // InternalGitHubActionsParser.g:8398:7: ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0);
        // InternalGitHubActionsParser.g:8401:10: ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) )
        // InternalGitHubActionsParser.g:8401:11: {...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred259_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8401:20: ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? )
        // InternalGitHubActionsParser.g:8401:21: (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )?
        {
        // InternalGitHubActionsParser.g:8401:21: (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END )
        // InternalGitHubActionsParser.g:8402:11: otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END
        {
        otherlv_25=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return ;
        otherlv_26=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_66); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8418:11: ( (lv_outputs_29_0= ruleOutput ) )+
        int cnt436=0;
        loop436:
        do {
            int alt436=2;
            int LA436_0 = input.LA(1);

            if ( (LA436_0==Value||LA436_0==RULE_ID) ) {
                alt436=1;
            }


            switch (alt436) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:8419:12: (lv_outputs_29_0= ruleOutput )
        	    {
        	    // InternalGitHubActionsParser.g:8419:12: (lv_outputs_29_0= ruleOutput )
        	    // InternalGitHubActionsParser.g:8420:13: lv_outputs_29_0= ruleOutput
        	    {
        	    if ( state.backtracking==0 ) {

        	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_1_0_0_4_0());
        	      												
        	    }
        	    pushFollow(FOLLOW_67);
        	    lv_outputs_29_0=ruleOutput();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt436 >= 1 ) break loop436;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(436, input);
                    throw eee;
            }
            cnt436++;
        } while (true);

        this_END_30=(Token)match(input,RULE_END,FOLLOW_115); if (state.failed) return ;

        }

        // InternalGitHubActionsParser.g:8442:10: (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )?
        int alt438=2;
        int LA438_0 = input.LA(1);

        if ( (LA438_0==Inputs) ) {
            alt438=1;
        }
        switch (alt438) {
            case 1 :
                // InternalGitHubActionsParser.g:8443:11: otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END
                {
                otherlv_31=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return ;
                otherlv_32=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_34=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return ;
                // InternalGitHubActionsParser.g:8459:11: ( (lv_inputs_35_0= ruleInput ) )+
                int cnt437=0;
                loop437:
                do {
                    int alt437=2;
                    int LA437_0 = input.LA(1);

                    if ( (LA437_0==Required||LA437_0==Default||LA437_0==Options||LA437_0==Type||LA437_0==LeftSquareBracket||LA437_0==RULE_NEWLINE||LA437_0==RULE_ID) ) {
                        alt437=1;
                    }


                    switch (alt437) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:8460:12: (lv_inputs_35_0= ruleInput )
                	    {
                	    // InternalGitHubActionsParser.g:8460:12: (lv_inputs_35_0= ruleInput )
                	    // InternalGitHubActionsParser.g:8461:13: lv_inputs_35_0= ruleInput
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_1_0_1_4_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_64);
                	    lv_inputs_35_0=ruleInput();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt437 >= 1 ) break loop437;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(437, input);
                            throw eee;
                    }
                    cnt437++;
                } while (true);

                this_END_36=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred259_InternalGitHubActionsParser

    // $ANTLR start synpred261_InternalGitHubActionsParser
    public final void synpred261_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_37=null;
        Token otherlv_38=null;
        Token this_NEWLINE_39=null;
        Token this_BEGIN_40=null;
        Token this_END_42=null;
        EObject lv_secrets_41_0 = null;


        // InternalGitHubActionsParser.g:8489:5: ( ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:8489:5: ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:8489:5: ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:8490:6: {...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred261_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1)");
        }
        // InternalGitHubActionsParser.g:8490:127: ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) )
        // InternalGitHubActionsParser.g:8491:7: ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1);
        // InternalGitHubActionsParser.g:8494:10: ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) )
        // InternalGitHubActionsParser.g:8494:11: {...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred261_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8494:20: (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END )
        // InternalGitHubActionsParser.g:8494:21: otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END
        {
        otherlv_37=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return ;
        otherlv_38=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_39=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_40=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8510:10: ( (lv_secrets_41_0= ruleSecret ) )+
        int cnt439=0;
        loop439:
        do {
            int alt439=2;
            int LA439_0 = input.LA(1);

            if ( (LA439_0==Description||LA439_0==Required||LA439_0==RULE_ID) ) {
                alt439=1;
            }


            switch (alt439) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:8511:11: (lv_secrets_41_0= ruleSecret )
        	    {
        	    // InternalGitHubActionsParser.g:8511:11: (lv_secrets_41_0= ruleSecret )
        	    // InternalGitHubActionsParser.g:8512:12: lv_secrets_41_0= ruleSecret
        	    {
        	    if ( state.backtracking==0 ) {

        	      												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_1_1_4_0());
        	      											
        	    }
        	    pushFollow(FOLLOW_70);
        	    lv_secrets_41_0=ruleSecret();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt439 >= 1 ) break loop439;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(439, input);
                    throw eee;
            }
            cnt439++;
        } while (true);

        this_END_42=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred261_InternalGitHubActionsParser

    // $ANTLR start synpred262_InternalGitHubActionsParser
    public final void synpred262_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token this_NEWLINE_27=null;
        Token this_BEGIN_28=null;
        Token this_END_30=null;
        Token otherlv_31=null;
        Token otherlv_32=null;
        Token this_NEWLINE_33=null;
        Token this_BEGIN_34=null;
        Token this_END_36=null;
        Token otherlv_37=null;
        Token otherlv_38=null;
        Token this_NEWLINE_39=null;
        Token this_BEGIN_40=null;
        Token this_END_42=null;
        EObject lv_outputs_29_0 = null;

        EObject lv_inputs_35_0 = null;

        EObject lv_secrets_41_0 = null;


        // InternalGitHubActionsParser.g:8389:4: ( ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) )
        // InternalGitHubActionsParser.g:8389:4: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) )
        {
        // InternalGitHubActionsParser.g:8389:4: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) ) )
        // InternalGitHubActionsParser.g:8390:5: ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) )
        {
        // InternalGitHubActionsParser.g:8390:5: ( ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?) )
        // InternalGitHubActionsParser.g:8391:6: ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?)
        {
        getUnorderedGroupHelper().enter(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1());
        // InternalGitHubActionsParser.g:8394:6: ( ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?)
        // InternalGitHubActionsParser.g:8395:7: ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+ {...}?
        {
        // InternalGitHubActionsParser.g:8395:7: ( ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) ) )+
        int cnt444=0;
        loop444:
        do {
            int alt444=3;
            int LA444_0 = input.LA(1);

            if ( LA444_0 == Outputs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
                alt444=1;
            }
            else if ( LA444_0 == Secrets && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
                alt444=2;
            }


            switch (alt444) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:8396:5: ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:8396:5: ({...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) ) )
        	    // InternalGitHubActionsParser.g:8397:6: {...}? => ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred262_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0)");
        	    }
        	    // InternalGitHubActionsParser.g:8397:127: ( ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) ) )
        	    // InternalGitHubActionsParser.g:8398:7: ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 0);
        	    // InternalGitHubActionsParser.g:8401:10: ({...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? ) )
        	    // InternalGitHubActionsParser.g:8401:11: {...}? => ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred262_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:8401:20: ( (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )? )
        	    // InternalGitHubActionsParser.g:8401:21: (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END ) (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )?
        	    {
        	    // InternalGitHubActionsParser.g:8401:21: (otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END )
        	    // InternalGitHubActionsParser.g:8402:11: otherlv_25= Outputs otherlv_26= Colon this_NEWLINE_27= RULE_NEWLINE this_BEGIN_28= RULE_BEGIN ( (lv_outputs_29_0= ruleOutput ) )+ this_END_30= RULE_END
        	    {
        	    otherlv_25=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return ;
        	    otherlv_26=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        	    this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	    this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_66); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:8418:11: ( (lv_outputs_29_0= ruleOutput ) )+
        	    int cnt440=0;
        	    loop440:
        	    do {
        	        int alt440=2;
        	        int LA440_0 = input.LA(1);

        	        if ( (LA440_0==Value||LA440_0==RULE_ID) ) {
        	            alt440=1;
        	        }


        	        switch (alt440) {
        	    	case 1 :
        	    	    // InternalGitHubActionsParser.g:8419:12: (lv_outputs_29_0= ruleOutput )
        	    	    {
        	    	    // InternalGitHubActionsParser.g:8419:12: (lv_outputs_29_0= ruleOutput )
        	    	    // InternalGitHubActionsParser.g:8420:13: lv_outputs_29_0= ruleOutput
        	    	    {
        	    	    if ( state.backtracking==0 ) {

        	    	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_1_0_0_4_0());
        	    	      												
        	    	    }
        	    	    pushFollow(FOLLOW_67);
        	    	    lv_outputs_29_0=ruleOutput();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }


        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt440 >= 1 ) break loop440;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(440, input);
        	                throw eee;
        	        }
        	        cnt440++;
        	    } while (true);

        	    this_END_30=(Token)match(input,RULE_END,FOLLOW_65); if (state.failed) return ;

        	    }

        	    // InternalGitHubActionsParser.g:8442:10: (otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END )?
        	    int alt442=2;
        	    int LA442_0 = input.LA(1);

        	    if ( (LA442_0==Inputs) ) {
        	        alt442=1;
        	    }
        	    switch (alt442) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:8443:11: otherlv_31= Inputs otherlv_32= Colon this_NEWLINE_33= RULE_NEWLINE this_BEGIN_34= RULE_BEGIN ( (lv_inputs_35_0= ruleInput ) )+ this_END_36= RULE_END
        	            {
        	            otherlv_31=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return ;
        	            otherlv_32=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_33=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_34=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:8459:11: ( (lv_inputs_35_0= ruleInput ) )+
        	            int cnt441=0;
        	            loop441:
        	            do {
        	                int alt441=2;
        	                int LA441_0 = input.LA(1);

        	                if ( (LA441_0==Required||LA441_0==Default||LA441_0==Options||LA441_0==Type||LA441_0==LeftSquareBracket||LA441_0==RULE_NEWLINE||LA441_0==RULE_ID) ) {
        	                    alt441=1;
        	                }


        	                switch (alt441) {
        	            	case 1 :
        	            	    // InternalGitHubActionsParser.g:8460:12: (lv_inputs_35_0= ruleInput )
        	            	    {
        	            	    // InternalGitHubActionsParser.g:8460:12: (lv_inputs_35_0= ruleInput )
        	            	    // InternalGitHubActionsParser.g:8461:13: lv_inputs_35_0= ruleInput
        	            	    {
        	            	    if ( state.backtracking==0 ) {

        	            	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_1_0_1_4_0());
        	            	      												
        	            	    }
        	            	    pushFollow(FOLLOW_64);
        	            	    lv_inputs_35_0=ruleInput();

        	            	    state._fsp--;
        	            	    if (state.failed) return ;

        	            	    }


        	            	    }
        	            	    break;

        	            	default :
        	            	    if ( cnt441 >= 1 ) break loop441;
        	            	    if (state.backtracking>0) {state.failed=true; return ;}
        	                        EarlyExitException eee =
        	                            new EarlyExitException(441, input);
        	                        throw eee;
        	                }
        	                cnt441++;
        	            } while (true);

        	            this_END_36=(Token)match(input,RULE_END,FOLLOW_71); if (state.failed) return ;

        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 2 :
        	    // InternalGitHubActionsParser.g:8489:5: ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:8489:5: ({...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:8490:6: {...}? => ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred262_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1)");
        	    }
        	    // InternalGitHubActionsParser.g:8490:127: ( ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:8491:7: ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1(), 1);
        	    // InternalGitHubActionsParser.g:8494:10: ({...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END ) )
        	    // InternalGitHubActionsParser.g:8494:11: {...}? => (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred262_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:8494:20: (otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END )
        	    // InternalGitHubActionsParser.g:8494:21: otherlv_37= Secrets otherlv_38= Colon this_NEWLINE_39= RULE_NEWLINE this_BEGIN_40= RULE_BEGIN ( (lv_secrets_41_0= ruleSecret ) )+ this_END_42= RULE_END
        	    {
        	    otherlv_37=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return ;
        	    otherlv_38=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        	    this_NEWLINE_39=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	    this_BEGIN_40=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:8510:10: ( (lv_secrets_41_0= ruleSecret ) )+
        	    int cnt443=0;
        	    loop443:
        	    do {
        	        int alt443=2;
        	        int LA443_0 = input.LA(1);

        	        if ( (LA443_0==Description||LA443_0==Required||LA443_0==RULE_ID) ) {
        	            alt443=1;
        	        }


        	        switch (alt443) {
        	    	case 1 :
        	    	    // InternalGitHubActionsParser.g:8511:11: (lv_secrets_41_0= ruleSecret )
        	    	    {
        	    	    // InternalGitHubActionsParser.g:8511:11: (lv_secrets_41_0= ruleSecret )
        	    	    // InternalGitHubActionsParser.g:8512:12: lv_secrets_41_0= ruleSecret
        	    	    {
        	    	    if ( state.backtracking==0 ) {

        	    	      												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_1_1_4_0());
        	    	      											
        	    	    }
        	    	    pushFollow(FOLLOW_70);
        	    	    lv_secrets_41_0=ruleSecret();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }


        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt443 >= 1 ) break loop443;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(443, input);
        	                throw eee;
        	        }
        	        cnt443++;
        	    } while (true);

        	    this_END_42=(Token)match(input,RULE_END,FOLLOW_71); if (state.failed) return ;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt444 >= 1 ) break loop444;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(444, input);
                    throw eee;
            }
            cnt444++;
        } while (true);

        if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1()) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred262_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_1())");
        }

        }


        }


        }


        }
    }
    // $ANTLR end synpred262_InternalGitHubActionsParser

    // $ANTLR start synpred266_InternalGitHubActionsParser
    public final void synpred266_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_46=null;
        Token this_BEGIN_47=null;
        Token this_END_49=null;
        Token otherlv_50=null;
        Token otherlv_51=null;
        Token this_NEWLINE_52=null;
        Token this_BEGIN_53=null;
        Token this_END_55=null;
        EObject lv_secrets_48_0 = null;

        EObject lv_inputs_54_0 = null;


        // InternalGitHubActionsParser.g:8556:6: ( ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) ) )
        // InternalGitHubActionsParser.g:8556:6: ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:8556:6: ({...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) ) )
        // InternalGitHubActionsParser.g:8557:7: {...}? => ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred266_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 0)");
        }
        // InternalGitHubActionsParser.g:8557:130: ( ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) ) )
        // InternalGitHubActionsParser.g:8558:8: ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 0);
        // InternalGitHubActionsParser.g:8561:11: ({...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? ) )
        // InternalGitHubActionsParser.g:8561:12: {...}? => ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred266_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8561:21: ( (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )? )
        // InternalGitHubActionsParser.g:8561:22: (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END ) (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )?
        {
        // InternalGitHubActionsParser.g:8561:22: (otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END )
        // InternalGitHubActionsParser.g:8562:12: otherlv_44= Secrets otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_secrets_48_0= ruleSecret ) )+ this_END_49= RULE_END
        {
        otherlv_44=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return ;
        otherlv_45=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_46=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_47=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8578:12: ( (lv_secrets_48_0= ruleSecret ) )+
        int cnt446=0;
        loop446:
        do {
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==Description||LA446_0==Required||LA446_0==RULE_ID) ) {
                alt446=1;
            }


            switch (alt446) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:8579:13: (lv_secrets_48_0= ruleSecret )
        	    {
        	    // InternalGitHubActionsParser.g:8579:13: (lv_secrets_48_0= ruleSecret )
        	    // InternalGitHubActionsParser.g:8580:14: lv_secrets_48_0= ruleSecret
        	    {
        	    if ( state.backtracking==0 ) {

        	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_2_0_0_0_4_0());
        	      													
        	    }
        	    pushFollow(FOLLOW_70);
        	    lv_secrets_48_0=ruleSecret();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt446 >= 1 ) break loop446;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(446, input);
                    throw eee;
            }
            cnt446++;
        } while (true);

        this_END_49=(Token)match(input,RULE_END,FOLLOW_115); if (state.failed) return ;

        }

        // InternalGitHubActionsParser.g:8602:11: (otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END )?
        int alt448=2;
        int LA448_0 = input.LA(1);

        if ( (LA448_0==Inputs) ) {
            alt448=1;
        }
        switch (alt448) {
            case 1 :
                // InternalGitHubActionsParser.g:8603:12: otherlv_50= Inputs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_inputs_54_0= ruleInput ) )+ this_END_55= RULE_END
                {
                otherlv_50=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return ;
                otherlv_51=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_52=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_63); if (state.failed) return ;
                // InternalGitHubActionsParser.g:8619:12: ( (lv_inputs_54_0= ruleInput ) )+
                int cnt447=0;
                loop447:
                do {
                    int alt447=2;
                    int LA447_0 = input.LA(1);

                    if ( (LA447_0==Required||LA447_0==Default||LA447_0==Options||LA447_0==Type||LA447_0==LeftSquareBracket||LA447_0==RULE_NEWLINE||LA447_0==RULE_ID) ) {
                        alt447=1;
                    }


                    switch (alt447) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:8620:13: (lv_inputs_54_0= ruleInput )
                	    {
                	    // InternalGitHubActionsParser.g:8620:13: (lv_inputs_54_0= ruleInput )
                	    // InternalGitHubActionsParser.g:8621:14: lv_inputs_54_0= ruleInput
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_2_0_0_1_4_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_64);
                	    lv_inputs_54_0=ruleInput();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt447 >= 1 ) break loop447;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(447, input);
                            throw eee;
                    }
                    cnt447++;
                } while (true);

                this_END_55=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred266_InternalGitHubActionsParser

    // $ANTLR start synpred268_InternalGitHubActionsParser
    public final void synpred268_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_58=null;
        Token this_BEGIN_59=null;
        Token this_END_61=null;
        EObject lv_outputs_60_0 = null;


        // InternalGitHubActionsParser.g:8649:6: ( ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:8649:6: ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:8649:6: ({...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:8650:7: {...}? => ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred268_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 1)");
        }
        // InternalGitHubActionsParser.g:8650:130: ( ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) ) )
        // InternalGitHubActionsParser.g:8651:8: ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3_2_0(), 1);
        // InternalGitHubActionsParser.g:8654:11: ({...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END ) )
        // InternalGitHubActionsParser.g:8654:12: {...}? => (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred268_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8654:21: (otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END )
        // InternalGitHubActionsParser.g:8654:22: otherlv_56= Outputs otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_outputs_60_0= ruleOutput ) )+ this_END_61= RULE_END
        {
        otherlv_56=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return ;
        otherlv_57=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_58=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_59=(Token)match(input,RULE_BEGIN,FOLLOW_66); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8670:11: ( (lv_outputs_60_0= ruleOutput ) )+
        int cnt449=0;
        loop449:
        do {
            int alt449=2;
            int LA449_0 = input.LA(1);

            if ( (LA449_0==Value||LA449_0==RULE_ID) ) {
                alt449=1;
            }


            switch (alt449) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:8671:12: (lv_outputs_60_0= ruleOutput )
        	    {
        	    // InternalGitHubActionsParser.g:8671:12: (lv_outputs_60_0= ruleOutput )
        	    // InternalGitHubActionsParser.g:8672:13: lv_outputs_60_0= ruleOutput
        	    {
        	    if ( state.backtracking==0 ) {

        	      													newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_2_0_1_4_0());
        	      												
        	    }
        	    pushFollow(FOLLOW_67);
        	    lv_outputs_60_0=ruleOutput();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt449 >= 1 ) break loop449;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(449, input);
                    throw eee;
            }
            cnt449++;
        } while (true);

        this_END_61=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred268_InternalGitHubActionsParser

    // $ANTLR start synpred271_InternalGitHubActionsParser
    public final void synpred271_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token lv_id_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_description_7_0 = null;


        // InternalGitHubActionsParser.g:8841:3: ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) )
        // InternalGitHubActionsParser.g:8841:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:8841:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        // InternalGitHubActionsParser.g:8842:4: {...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred271_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:8842:99: ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        // InternalGitHubActionsParser.g:8843:5: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:8846:8: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        // InternalGitHubActionsParser.g:8846:9: {...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred271_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8846:18: ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        // InternalGitHubActionsParser.g:8846:19: ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        {
        // InternalGitHubActionsParser.g:8846:19: ( (lv_id_1_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:8847:9: (lv_id_1_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:8847:9: (lv_id_1_0= RULE_ID )
        // InternalGitHubActionsParser.g:8848:10: lv_id_1_0= RULE_ID
        {
        lv_id_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_116); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8876:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        int alt450=2;
        int LA450_0 = input.LA(1);

        if ( (LA450_0==Description) ) {
            alt450=1;
        }
        switch (alt450) {
            case 1 :
                // InternalGitHubActionsParser.g:8877:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
                {
                otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:8885:9: ( (lv_description_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:8886:10: (lv_description_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:8886:10: (lv_description_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:8887:11: lv_description_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getInputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_description_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred271_InternalGitHubActionsParser

    // $ANTLR start synpred272_InternalGitHubActionsParser
    public final void synpred272_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        EObject lv_default_11_0 = null;


        // InternalGitHubActionsParser.g:8915:3: ( ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:8915:3: ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:8915:3: ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:8916:4: {...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred272_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:8916:99: ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:8917:5: ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:8920:8: ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:8920:9: {...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred272_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8920:18: (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:8920:19: otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
        {
        otherlv_9=(Token)match(input,Default,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8928:8: ( (lv_default_11_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:8929:9: (lv_default_11_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:8929:9: (lv_default_11_0= ruleExpression )
        // InternalGitHubActionsParser.g:8930:10: lv_default_11_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getInputAccess().getDefaultExpressionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_default_11_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred272_InternalGitHubActionsParser

    // $ANTLR start synpred273_InternalGitHubActionsParser
    public final void synpred273_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token this_NEWLINE_16=null;
        EObject lv_isRequired_15_0 = null;


        // InternalGitHubActionsParser.g:8957:3: ( ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:8957:3: ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:8957:3: ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:8958:4: {...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred273_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:8958:99: ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:8959:5: ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:8962:8: ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:8962:9: {...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred273_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:8962:18: (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:8962:19: otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE
        {
        otherlv_13=(Token)match(input,Required,FOLLOW_3); if (state.failed) return ;
        otherlv_14=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:8970:8: ( (lv_isRequired_15_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:8971:9: (lv_isRequired_15_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:8971:9: (lv_isRequired_15_0= ruleExpression )
        // InternalGitHubActionsParser.g:8972:10: lv_isRequired_15_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getInputAccess().getIsRequiredExpressionParserRuleCall_2_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_isRequired_15_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_16=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred273_InternalGitHubActionsParser

    // $ANTLR start synpred274_InternalGitHubActionsParser
    public final void synpred274_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_NEWLINE_20=null;
        Enumerator lv_type_19_0 = null;


        // InternalGitHubActionsParser.g:8999:3: ( ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:8999:3: ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:8999:3: ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:9000:4: {...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred274_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:9000:99: ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:9001:5: ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:9004:8: ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:9004:9: {...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred274_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9004:18: (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9004:19: otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE
        {
        otherlv_17=(Token)match(input,Type,FOLLOW_3); if (state.failed) return ;
        otherlv_18=(Token)match(input,Colon,FOLLOW_77); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9012:8: ( (lv_type_19_0= ruleTYPE ) )
        // InternalGitHubActionsParser.g:9013:9: (lv_type_19_0= ruleTYPE )
        {
        // InternalGitHubActionsParser.g:9013:9: (lv_type_19_0= ruleTYPE )
        // InternalGitHubActionsParser.g:9014:10: lv_type_19_0= ruleTYPE
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getInputAccess().getTypeTYPEEnumRuleCall_3_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_type_19_0=ruleTYPE();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_20=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred274_InternalGitHubActionsParser

    // $ANTLR start synpred279_InternalGitHubActionsParser
    public final void synpred279_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token lv_options_23_0=null;
        Token this_NEWLINE_24=null;
        Token otherlv_25=null;
        Token lv_options_26_0=null;
        Token otherlv_27=null;
        Token lv_options_28_0=null;
        Token otherlv_29=null;
        Token this_NEWLINE_30=null;
        Token this_NEWLINE_31=null;
        Token this_BEGIN_32=null;
        Token otherlv_33=null;
        Token lv_options_34_0=null;
        Token this_NEWLINE_35=null;
        Token this_END_36=null;
        Token this_END_37=null;

        // InternalGitHubActionsParser.g:9041:3: ( ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:9041:3: ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:9041:3: ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:9042:4: {...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred279_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:9042:99: ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) )
        // InternalGitHubActionsParser.g:9043:5: ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:9046:8: ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) )
        // InternalGitHubActionsParser.g:9046:9: {...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred279_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9046:18: ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END )
        // InternalGitHubActionsParser.g:9046:19: ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END
        {
        // InternalGitHubActionsParser.g:9046:19: ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) )
        int alt454=3;
        switch ( input.LA(1) ) {
        case Options:
            {
            alt454=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt454=2;
            }
            break;
        case RULE_NEWLINE:
            {
            alt454=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 454, 0, input);

            throw nvae;
        }

        switch (alt454) {
            case 1 :
                // InternalGitHubActionsParser.g:9047:9: (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:9047:9: (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:9048:10: otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE )
                {
                otherlv_21=(Token)match(input,Options,FOLLOW_3); if (state.failed) return ;
                otherlv_22=(Token)match(input,Colon,FOLLOW_35); if (state.failed) return ;
                // InternalGitHubActionsParser.g:9056:10: ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:9057:11: ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:9057:11: ( (lv_options_23_0= RULE_STRING ) )
                // InternalGitHubActionsParser.g:9058:12: (lv_options_23_0= RULE_STRING )
                {
                // InternalGitHubActionsParser.g:9058:12: (lv_options_23_0= RULE_STRING )
                // InternalGitHubActionsParser.g:9059:13: lv_options_23_0= RULE_STRING
                {
                lv_options_23_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return ;

                }


                }

                this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:9082:9: (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:9082:9: (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:9083:10: otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE
                {
                otherlv_25=(Token)match(input,LeftSquareBracket,FOLLOW_35); if (state.failed) return ;
                // InternalGitHubActionsParser.g:9087:10: ( (lv_options_26_0= RULE_STRING ) )
                // InternalGitHubActionsParser.g:9088:11: (lv_options_26_0= RULE_STRING )
                {
                // InternalGitHubActionsParser.g:9088:11: (lv_options_26_0= RULE_STRING )
                // InternalGitHubActionsParser.g:9089:12: lv_options_26_0= RULE_STRING
                {
                lv_options_26_0=(Token)match(input,RULE_STRING,FOLLOW_9); if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:9105:10: (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )*
                loop452:
                do {
                    int alt452=2;
                    int LA452_0 = input.LA(1);

                    if ( (LA452_0==Comma) ) {
                        alt452=1;
                    }


                    switch (alt452) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:9106:11: otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) )
                	    {
                	    otherlv_27=(Token)match(input,Comma,FOLLOW_35); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:9110:11: ( (lv_options_28_0= RULE_STRING ) )
                	    // InternalGitHubActionsParser.g:9111:12: (lv_options_28_0= RULE_STRING )
                	    {
                	    // InternalGitHubActionsParser.g:9111:12: (lv_options_28_0= RULE_STRING )
                	    // InternalGitHubActionsParser.g:9112:13: lv_options_28_0= RULE_STRING
                	    {
                	    lv_options_28_0=(Token)match(input,RULE_STRING,FOLLOW_9); if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop452;
                    }
                } while (true);

                otherlv_29=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_30=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:9139:9: (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END )
                {
                // InternalGitHubActionsParser.g:9139:9: (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END )
                // InternalGitHubActionsParser.g:9140:10: this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END
                {
                this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_32=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:9148:10: (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+
                int cnt453=0;
                loop453:
                do {
                    int alt453=2;
                    int LA453_0 = input.LA(1);

                    if ( (LA453_0==HyphenMinus) ) {
                        alt453=1;
                    }


                    switch (alt453) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:9149:11: otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE
                	    {
                	    otherlv_33=(Token)match(input,HyphenMinus,FOLLOW_35); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:9153:11: ( (lv_options_34_0= RULE_STRING ) )
                	    // InternalGitHubActionsParser.g:9154:12: (lv_options_34_0= RULE_STRING )
                	    {
                	    // InternalGitHubActionsParser.g:9154:12: (lv_options_34_0= RULE_STRING )
                	    // InternalGitHubActionsParser.g:9155:13: lv_options_34_0= RULE_STRING
                	    {
                	    lv_options_34_0=(Token)match(input,RULE_STRING,FOLLOW_5); if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_35=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt453 >= 1 ) break loop453;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(453, input);
                            throw eee;
                    }
                    cnt453++;
                } while (true);

                this_END_36=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return ;

                }


                }
                break;

        }

        this_END_37=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred279_InternalGitHubActionsParser

    // $ANTLR start synpred281_InternalGitHubActionsParser
    public final void synpred281_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token lv_id_1_0=null;
        Token otherlv_2=null;
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_description_7_0 = null;


        // InternalGitHubActionsParser.g:9237:3: ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) )
        // InternalGitHubActionsParser.g:9237:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:9237:3: ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) )
        // InternalGitHubActionsParser.g:9238:4: {...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred281_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:9238:100: ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) )
        // InternalGitHubActionsParser.g:9239:5: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:9242:8: ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) )
        // InternalGitHubActionsParser.g:9242:9: {...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred281_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9242:18: ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? )
        // InternalGitHubActionsParser.g:9242:19: ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        {
        // InternalGitHubActionsParser.g:9242:19: ( (lv_id_1_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:9243:9: (lv_id_1_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:9243:9: (lv_id_1_0= RULE_ID )
        // InternalGitHubActionsParser.g:9244:10: lv_id_1_0= RULE_ID
        {
        lv_id_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_2=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_116); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9272:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )?
        int alt455=2;
        int LA455_0 = input.LA(1);

        if ( (LA455_0==Description) ) {
            alt455=1;
        }
        switch (alt455) {
            case 1 :
                // InternalGitHubActionsParser.g:9273:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
                {
                otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:9281:9: ( (lv_description_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:9282:10: (lv_description_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:9282:10: (lv_description_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:9283:11: lv_description_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getOutputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_5);
                lv_description_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred281_InternalGitHubActionsParser

    // $ANTLR start synpred282_InternalGitHubActionsParser
    public final void synpred282_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token this_END_13=null;
        EObject lv_value_11_0 = null;


        // InternalGitHubActionsParser.g:9311:3: ( ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:9311:3: ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:9311:3: ({...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:9312:4: {...}? => ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred282_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:9312:100: ( ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) ) )
        // InternalGitHubActionsParser.g:9313:5: ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:9316:8: ({...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END ) )
        // InternalGitHubActionsParser.g:9316:9: {...}? => ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred282_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9316:18: ( (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END )
        // InternalGitHubActionsParser.g:9316:19: (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) this_END_13= RULE_END
        {
        // InternalGitHubActionsParser.g:9316:19: (otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9317:9: otherlv_9= Value otherlv_10= Colon ( (lv_value_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
        {
        otherlv_9=(Token)match(input,Value,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9325:9: ( (lv_value_11_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:9326:10: (lv_value_11_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:9326:10: (lv_value_11_0= ruleExpression )
        // InternalGitHubActionsParser.g:9327:11: lv_value_11_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getOutputAccess().getValueExpressionParserRuleCall_1_0_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_value_11_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return ;

        }

        this_END_13=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred282_InternalGitHubActionsParser

    // $ANTLR start synpred283_InternalGitHubActionsParser
    public final void synpred283_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_description_7_0 = null;


        // InternalGitHubActionsParser.g:9438:5: ( ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:9438:5: ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:9438:5: ({...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:9439:6: {...}? => ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred283_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 0)");
        }
        // InternalGitHubActionsParser.g:9439:106: ( ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:9440:7: ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 0);
        // InternalGitHubActionsParser.g:9443:10: ({...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:9443:11: {...}? => (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred283_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9443:20: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9443:21: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
        {
        otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9451:10: ( (lv_description_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:9452:11: (lv_description_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:9452:11: (lv_description_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:9453:12: lv_description_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          												newCompositeNode(grammarAccess.getSecretAccess().getDescriptionExpressionParserRuleCall_0_4_0_2_0());
          											
        }
        pushFollow(FOLLOW_5);
        lv_description_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred283_InternalGitHubActionsParser

    // $ANTLR start synpred284_InternalGitHubActionsParser
    public final void synpred284_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        EObject lv_isRequired_11_0 = null;


        // InternalGitHubActionsParser.g:9480:5: ( ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:9480:5: ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:9480:5: ({...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:9481:6: {...}? => ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred284_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 1)");
        }
        // InternalGitHubActionsParser.g:9481:106: ( ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:9482:7: ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_0_4(), 1);
        // InternalGitHubActionsParser.g:9485:10: ({...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:9485:11: {...}? => (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred284_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9485:20: (otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9485:21: otherlv_9= Required otherlv_10= Colon ( (lv_isRequired_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
        {
        otherlv_9=(Token)match(input,Required,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9493:10: ( (lv_isRequired_11_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:9494:11: (lv_isRequired_11_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:9494:11: (lv_isRequired_11_0= ruleExpression )
        // InternalGitHubActionsParser.g:9495:12: lv_isRequired_11_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          												newCompositeNode(grammarAccess.getSecretAccess().getIsRequiredExpressionParserRuleCall_0_4_1_2_0());
          											
        }
        pushFollow(FOLLOW_5);
        lv_isRequired_11_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred284_InternalGitHubActionsParser

    // $ANTLR start synpred286_InternalGitHubActionsParser
    public final void synpred286_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        EObject lv_isRequired_16_0 = null;


        // InternalGitHubActionsParser.g:9540:5: ( ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:9540:5: ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:9540:5: ({...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:9541:6: {...}? => ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred286_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 0)");
        }
        // InternalGitHubActionsParser.g:9541:106: ( ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:9542:7: ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 0);
        // InternalGitHubActionsParser.g:9545:10: ({...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:9545:11: {...}? => (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred286_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9545:20: (otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9545:21: otherlv_14= Required otherlv_15= Colon ( (lv_isRequired_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
        {
        otherlv_14=(Token)match(input,Required,FOLLOW_3); if (state.failed) return ;
        otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9553:10: ( (lv_isRequired_16_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:9554:11: (lv_isRequired_16_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:9554:11: (lv_isRequired_16_0= ruleExpression )
        // InternalGitHubActionsParser.g:9555:12: lv_isRequired_16_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          												newCompositeNode(grammarAccess.getSecretAccess().getIsRequiredExpressionParserRuleCall_1_0_0_2_0());
          											
        }
        pushFollow(FOLLOW_5);
        lv_isRequired_16_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred286_InternalGitHubActionsParser

    // $ANTLR start synpred287_InternalGitHubActionsParser
    public final void synpred287_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_18=null;
        Token otherlv_19=null;
        Token this_NEWLINE_21=null;
        EObject lv_description_20_0 = null;


        // InternalGitHubActionsParser.g:9582:5: ( ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:9582:5: ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:9582:5: ({...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:9583:6: {...}? => ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred287_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 1)");
        }
        // InternalGitHubActionsParser.g:9583:106: ( ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:9584:7: ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup_1_0(), 1);
        // InternalGitHubActionsParser.g:9587:10: ({...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:9587:11: {...}? => (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred287_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9587:20: (otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9587:21: otherlv_18= Description otherlv_19= Colon ( (lv_description_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE
        {
        otherlv_18=(Token)match(input,Description,FOLLOW_3); if (state.failed) return ;
        otherlv_19=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9595:10: ( (lv_description_20_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:9596:11: (lv_description_20_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:9596:11: (lv_description_20_0= ruleExpression )
        // InternalGitHubActionsParser.g:9597:12: lv_description_20_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          												newCompositeNode(grammarAccess.getSecretAccess().getDescriptionExpressionParserRuleCall_1_0_1_2_0());
          											
        }
        pushFollow(FOLLOW_5);
        lv_description_20_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_21=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred287_InternalGitHubActionsParser

    // $ANTLR start synpred288_InternalGitHubActionsParser
    public final void synpred288_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_shell_7_0 = null;


        // InternalGitHubActionsParser.g:9757:4: ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:9757:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:9757:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:9758:5: {...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred288_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0)");
        }
        // InternalGitHubActionsParser.g:9758:105: ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:9759:6: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0);
        // InternalGitHubActionsParser.g:9762:9: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:9762:10: {...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred288_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9762:19: (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9762:20: otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
        {
        otherlv_5=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9770:9: ( (lv_shell_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:9771:10: (lv_shell_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:9771:10: (lv_shell_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:9772:11: lv_shell_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getDefaultsAccess().getShellExpressionParserRuleCall_4_0_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_shell_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred288_InternalGitHubActionsParser

    // $ANTLR start synpred289_InternalGitHubActionsParser
    public final void synpred289_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        EObject lv_workingDirectory_11_0 = null;


        // InternalGitHubActionsParser.g:9799:4: ( ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:9799:4: ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:9799:4: ({...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:9800:5: {...}? => ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred289_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1)");
        }
        // InternalGitHubActionsParser.g:9800:105: ( ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:9801:6: ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1);
        // InternalGitHubActionsParser.g:9804:9: ({...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:9804:10: {...}? => (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred289_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:9804:19: (otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:9804:20: otherlv_9= WorkingDirectory otherlv_10= Colon ( (lv_workingDirectory_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
        {
        otherlv_9=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:9812:9: ( (lv_workingDirectory_11_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:9813:10: (lv_workingDirectory_11_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:9813:10: (lv_workingDirectory_11_0= ruleExpression )
        // InternalGitHubActionsParser.g:9814:11: lv_workingDirectory_11_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getDefaultsAccess().getWorkingDirectoryExpressionParserRuleCall_4_1_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_workingDirectory_11_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred289_InternalGitHubActionsParser

    // $ANTLR start synpred293_InternalGitHubActionsParser
    public final void synpred293_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_NEWLINE_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_8=null;
        Token this_BEGIN_9=null;
        Token this_END_11=null;
        EObject lv_includes_10_0 = null;


        // InternalGitHubActionsParser.g:10029:8: ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) )
        // InternalGitHubActionsParser.g:10029:8: ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:10029:8: ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) )
        // InternalGitHubActionsParser.g:10030:9: {...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred293_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0)");
        }
        // InternalGitHubActionsParser.g:10030:109: ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) )
        // InternalGitHubActionsParser.g:10031:10: ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0);
        // InternalGitHubActionsParser.g:10034:13: ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) )
        // InternalGitHubActionsParser.g:10034:14: {...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred293_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10034:23: (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? )
        // InternalGitHubActionsParser.g:10034:24: otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )?
        {
        otherlv_2=(Token)match(input,Matrix,FOLLOW_3); if (state.failed) return ;
        otherlv_3=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_117); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10050:13: (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )?
        int alt457=2;
        int LA457_0 = input.LA(1);

        if ( (LA457_0==Includes) ) {
            alt457=1;
        }
        switch (alt457) {
            case 1 :
                // InternalGitHubActionsParser.g:10051:14: otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END
                {
                otherlv_6=(Token)match(input,Includes,FOLLOW_3); if (state.failed) return ;
                otherlv_7=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
                this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:10067:14: ( (lv_includes_10_0= ruleMatrixCombination ) )
                // InternalGitHubActionsParser.g:10068:15: (lv_includes_10_0= ruleMatrixCombination )
                {
                // InternalGitHubActionsParser.g:10068:15: (lv_includes_10_0= ruleMatrixCombination )
                // InternalGitHubActionsParser.g:10069:16: lv_includes_10_0= ruleMatrixCombination
                {
                if ( state.backtracking==0 ) {

                  																newCompositeNode(grammarAccess.getStrategyAccess().getIncludesMatrixCombinationParserRuleCall_0_0_4_4_0());
                  															
                }
                pushFollow(FOLLOW_19);
                lv_includes_10_0=ruleMatrixCombination();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_END_11=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred293_InternalGitHubActionsParser

    // $ANTLR start synpred294_InternalGitHubActionsParser
    public final void synpred294_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_14=null;
        Token this_BEGIN_15=null;
        Token this_END_17=null;
        EObject lv_excludes_16_0 = null;


        // InternalGitHubActionsParser.g:10097:8: ( ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:10097:8: ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:10097:8: ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:10098:9: {...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred294_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1)");
        }
        // InternalGitHubActionsParser.g:10098:109: ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) )
        // InternalGitHubActionsParser.g:10099:10: ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1);
        // InternalGitHubActionsParser.g:10102:13: ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) )
        // InternalGitHubActionsParser.g:10102:14: {...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred294_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10102:23: (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END )
        // InternalGitHubActionsParser.g:10102:24: otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END
        {
        otherlv_12=(Token)match(input,Exludes,FOLLOW_3); if (state.failed) return ;
        otherlv_13=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10118:13: ( (lv_excludes_16_0= ruleMatrixCombination ) )
        // InternalGitHubActionsParser.g:10119:14: (lv_excludes_16_0= ruleMatrixCombination )
        {
        // InternalGitHubActionsParser.g:10119:14: (lv_excludes_16_0= ruleMatrixCombination )
        // InternalGitHubActionsParser.g:10120:15: lv_excludes_16_0= ruleMatrixCombination
        {
        if ( state.backtracking==0 ) {

          															newCompositeNode(grammarAccess.getStrategyAccess().getExcludesMatrixCombinationParserRuleCall_0_1_4_0());
          														
        }
        pushFollow(FOLLOW_19);
        lv_excludes_16_0=ruleMatrixCombination();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_17=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred294_InternalGitHubActionsParser

    // $ANTLR start synpred296_InternalGitHubActionsParser
    public final void synpred296_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_18=null;
        Token this_END_20=null;
        Token this_END_21=null;
        EObject lv_axes_19_0 = null;


        // InternalGitHubActionsParser.g:10147:8: ( ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:10147:8: ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:10147:8: ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:10148:9: {...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred296_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2)");
        }
        // InternalGitHubActionsParser.g:10148:109: ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
        // InternalGitHubActionsParser.g:10149:10: ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2);
        // InternalGitHubActionsParser.g:10152:13: ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
        // InternalGitHubActionsParser.g:10152:14: {...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred296_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10152:23: ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
        // InternalGitHubActionsParser.g:10152:24: (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END
        {
        // InternalGitHubActionsParser.g:10152:24: (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END )
        // InternalGitHubActionsParser.g:10153:14: this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END
        {
        this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10157:14: ( (lv_axes_19_0= ruleMatrixAxis ) )+
        int cnt458=0;
        loop458:
        do {
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( (LA458_0==RULE_ID) ) {
                alt458=1;
            }


            switch (alt458) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:10158:15: (lv_axes_19_0= ruleMatrixAxis )
        	    {
        	    // InternalGitHubActionsParser.g:10158:15: (lv_axes_19_0= ruleMatrixAxis )
        	    // InternalGitHubActionsParser.g:10159:16: lv_axes_19_0= ruleMatrixAxis
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getStrategyAccess().getAxesMatrixAxisParserRuleCall_0_2_0_1_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_axes_19_0=ruleMatrixAxis();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt458 >= 1 ) break loop458;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(458, input);
                    throw eee;
            }
            cnt458++;
        } while (true);

        this_END_20=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return ;

        }

        this_END_21=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred296_InternalGitHubActionsParser

    // $ANTLR start synpred297_InternalGitHubActionsParser
    public final void synpred297_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_NEWLINE_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_8=null;
        Token this_BEGIN_9=null;
        Token this_END_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_14=null;
        Token this_BEGIN_15=null;
        Token this_END_17=null;
        Token this_BEGIN_18=null;
        Token this_END_20=null;
        Token this_END_21=null;
        EObject lv_includes_10_0 = null;

        EObject lv_excludes_16_0 = null;

        EObject lv_axes_19_0 = null;


        // InternalGitHubActionsParser.g:10018:3: ( ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:10018:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:10018:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
        // InternalGitHubActionsParser.g:10019:4: {...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:10019:102: ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
        // InternalGitHubActionsParser.g:10020:5: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:10023:8: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) ) )
        // InternalGitHubActionsParser.g:10023:9: {...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10023:18: ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) ) )
        // InternalGitHubActionsParser.g:10023:19: ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) )
        {
        // InternalGitHubActionsParser.g:10023:19: ( ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?) )
        // InternalGitHubActionsParser.g:10024:9: ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?)
        {
        getUnorderedGroupHelper().enter(grammarAccess.getStrategyAccess().getUnorderedGroup_0());
        // InternalGitHubActionsParser.g:10027:9: ( ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?)
        // InternalGitHubActionsParser.g:10028:10: ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+ {...}?
        {
        // InternalGitHubActionsParser.g:10028:10: ( ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) ) )+
        int cnt461=0;
        loop461:
        do {
            int alt461=4;
            int LA461_0 = input.LA(1);

            if ( LA461_0 == Matrix && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0) ) {
                alt461=1;
            }
            else if ( LA461_0 == Exludes && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1) ) {
                alt461=2;
            }
            else if ( LA461_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2) ) {
                alt461=3;
            }


            switch (alt461) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:10029:8: ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:10029:8: ({...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) ) )
        	    // InternalGitHubActionsParser.g:10030:9: {...}? => ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0)");
        	    }
        	    // InternalGitHubActionsParser.g:10030:109: ( ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) ) )
        	    // InternalGitHubActionsParser.g:10031:10: ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 0);
        	    // InternalGitHubActionsParser.g:10034:13: ({...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? ) )
        	    // InternalGitHubActionsParser.g:10034:14: {...}? => (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:10034:23: (otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )? )
        	    // InternalGitHubActionsParser.g:10034:24: otherlv_2= Matrix otherlv_3= Colon this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )?
        	    {
        	    otherlv_2=(Token)match(input,Matrix,FOLLOW_3); if (state.failed) return ;
        	    otherlv_3=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        	    this_NEWLINE_4=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	    this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_118); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:10050:13: (otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END )?
        	    int alt459=2;
        	    int LA459_0 = input.LA(1);

        	    if ( (LA459_0==Includes) ) {
        	        alt459=1;
        	    }
        	    switch (alt459) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:10051:14: otherlv_6= Includes otherlv_7= Colon this_NEWLINE_8= RULE_NEWLINE this_BEGIN_9= RULE_BEGIN ( (lv_includes_10_0= ruleMatrixCombination ) ) this_END_11= RULE_END
        	            {
        	            otherlv_6=(Token)match(input,Includes,FOLLOW_3); if (state.failed) return ;
        	            otherlv_7=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        	            this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	            this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:10067:14: ( (lv_includes_10_0= ruleMatrixCombination ) )
        	            // InternalGitHubActionsParser.g:10068:15: (lv_includes_10_0= ruleMatrixCombination )
        	            {
        	            // InternalGitHubActionsParser.g:10068:15: (lv_includes_10_0= ruleMatrixCombination )
        	            // InternalGitHubActionsParser.g:10069:16: lv_includes_10_0= ruleMatrixCombination
        	            {
        	            if ( state.backtracking==0 ) {

        	              																newCompositeNode(grammarAccess.getStrategyAccess().getIncludesMatrixCombinationParserRuleCall_0_0_4_4_0());
        	              															
        	            }
        	            pushFollow(FOLLOW_19);
        	            lv_includes_10_0=ruleMatrixCombination();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }

        	            this_END_11=(Token)match(input,RULE_END,FOLLOW_119); if (state.failed) return ;

        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 2 :
        	    // InternalGitHubActionsParser.g:10097:8: ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:10097:8: ({...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:10098:9: {...}? => ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1)");
        	    }
        	    // InternalGitHubActionsParser.g:10098:109: ( ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:10099:10: ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 1);
        	    // InternalGitHubActionsParser.g:10102:13: ({...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END ) )
        	    // InternalGitHubActionsParser.g:10102:14: {...}? => (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:10102:23: (otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END )
        	    // InternalGitHubActionsParser.g:10102:24: otherlv_12= Exludes otherlv_13= Colon this_NEWLINE_14= RULE_NEWLINE this_BEGIN_15= RULE_BEGIN ( (lv_excludes_16_0= ruleMatrixCombination ) ) this_END_17= RULE_END
        	    {
        	    otherlv_12=(Token)match(input,Exludes,FOLLOW_3); if (state.failed) return ;
        	    otherlv_13=(Token)match(input,Colon,FOLLOW_5); if (state.failed) return ;
        	    this_NEWLINE_14=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        	    this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:10118:13: ( (lv_excludes_16_0= ruleMatrixCombination ) )
        	    // InternalGitHubActionsParser.g:10119:14: (lv_excludes_16_0= ruleMatrixCombination )
        	    {
        	    // InternalGitHubActionsParser.g:10119:14: (lv_excludes_16_0= ruleMatrixCombination )
        	    // InternalGitHubActionsParser.g:10120:15: lv_excludes_16_0= ruleMatrixCombination
        	    {
        	    if ( state.backtracking==0 ) {

        	      															newCompositeNode(grammarAccess.getStrategyAccess().getExcludesMatrixCombinationParserRuleCall_0_1_4_0());
        	      														
        	    }
        	    pushFollow(FOLLOW_19);
        	    lv_excludes_16_0=ruleMatrixCombination();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    this_END_17=(Token)match(input,RULE_END,FOLLOW_119); if (state.failed) return ;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 3 :
        	    // InternalGitHubActionsParser.g:10147:8: ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:10147:8: ({...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:10148:9: {...}? => ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2)");
        	    }
        	    // InternalGitHubActionsParser.g:10148:109: ( ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:10149:10: ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0(), 2);
        	    // InternalGitHubActionsParser.g:10152:13: ({...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
        	    // InternalGitHubActionsParser.g:10152:14: {...}? => ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:10152:23: ( (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
        	    // InternalGitHubActionsParser.g:10152:24: (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END ) this_END_21= RULE_END
        	    {
        	    // InternalGitHubActionsParser.g:10152:24: (this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END )
        	    // InternalGitHubActionsParser.g:10153:14: this_BEGIN_18= RULE_BEGIN ( (lv_axes_19_0= ruleMatrixAxis ) )+ this_END_20= RULE_END
        	    {
        	    this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:10157:14: ( (lv_axes_19_0= ruleMatrixAxis ) )+
        	    int cnt460=0;
        	    loop460:
        	    do {
        	        int alt460=2;
        	        int LA460_0 = input.LA(1);

        	        if ( (LA460_0==RULE_ID) ) {
        	            alt460=1;
        	        }


        	        switch (alt460) {
        	    	case 1 :
        	    	    // InternalGitHubActionsParser.g:10158:15: (lv_axes_19_0= ruleMatrixAxis )
        	    	    {
        	    	    // InternalGitHubActionsParser.g:10158:15: (lv_axes_19_0= ruleMatrixAxis )
        	    	    // InternalGitHubActionsParser.g:10159:16: lv_axes_19_0= ruleMatrixAxis
        	    	    {
        	    	    if ( state.backtracking==0 ) {

        	    	      																newCompositeNode(grammarAccess.getStrategyAccess().getAxesMatrixAxisParserRuleCall_0_2_0_1_0());
        	    	      															
        	    	    }
        	    	    pushFollow(FOLLOW_17);
        	    	    lv_axes_19_0=ruleMatrixAxis();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }


        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt460 >= 1 ) break loop460;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(460, input);
        	                throw eee;
        	        }
        	        cnt460++;
        	    } while (true);

        	    this_END_20=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return ;

        	    }

        	    this_END_21=(Token)match(input,RULE_END,FOLLOW_119); if (state.failed) return ;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt461 >= 1 ) break loop461;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(461, input);
                    throw eee;
            }
            cnt461++;
        } while (true);

        if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0()) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred297_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0())");
        }

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred297_InternalGitHubActionsParser

    // $ANTLR start synpred298_InternalGitHubActionsParser
    public final void synpred298_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_22=null;
        Token otherlv_23=null;
        Token this_NEWLINE_25=null;
        EObject lv_failFast_24_0 = null;


        // InternalGitHubActionsParser.g:10204:3: ( ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:10204:3: ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:10204:3: ({...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:10205:4: {...}? => ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred298_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:10205:102: ( ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:10206:5: ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:10209:8: ({...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:10209:9: {...}? => (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred298_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10209:18: (otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:10209:19: otherlv_22= FailFast otherlv_23= Colon ( (lv_failFast_24_0= ruleExpression ) ) this_NEWLINE_25= RULE_NEWLINE
        {
        otherlv_22=(Token)match(input,FailFast,FOLLOW_3); if (state.failed) return ;
        otherlv_23=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10217:8: ( (lv_failFast_24_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:10218:9: (lv_failFast_24_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:10218:9: (lv_failFast_24_0= ruleExpression )
        // InternalGitHubActionsParser.g:10219:10: lv_failFast_24_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getStrategyAccess().getFailFastExpressionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_failFast_24_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_25=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred298_InternalGitHubActionsParser

    // $ANTLR start synpred299_InternalGitHubActionsParser
    public final void synpred299_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_NEWLINE_29=null;
        EObject lv_maxParallel_28_0 = null;


        // InternalGitHubActionsParser.g:10246:3: ( ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:10246:3: ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:10246:3: ({...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:10247:4: {...}? => ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred299_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:10247:102: ( ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:10248:5: ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:10251:8: ({...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:10251:9: {...}? => (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred299_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10251:18: (otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:10251:19: otherlv_26= MaxParalell otherlv_27= Colon ( (lv_maxParallel_28_0= ruleExpression ) ) this_NEWLINE_29= RULE_NEWLINE
        {
        otherlv_26=(Token)match(input,MaxParalell,FOLLOW_3); if (state.failed) return ;
        otherlv_27=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10259:8: ( (lv_maxParallel_28_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:10260:9: (lv_maxParallel_28_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:10260:9: (lv_maxParallel_28_0= ruleExpression )
        // InternalGitHubActionsParser.g:10261:10: lv_maxParallel_28_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getStrategyAccess().getMaxParallelExpressionParserRuleCall_2_2_0());
          									
        }
        pushFollow(FOLLOW_5);
        lv_maxParallel_28_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_29=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred299_InternalGitHubActionsParser

    // $ANTLR start synpred305_InternalGitHubActionsParser
    public final void synpred305_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_NEWLINE_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_NEWLINE_8=null;
        EObject lv_image_7_0 = null;


        // InternalGitHubActionsParser.g:10583:4: ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) )
        // InternalGitHubActionsParser.g:10583:4: ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:10583:4: ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:10584:5: {...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred305_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 0)");
        }
        // InternalGitHubActionsParser.g:10584:106: ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:10585:6: ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 0);
        // InternalGitHubActionsParser.g:10588:9: ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:10588:10: {...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred305_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10588:19: (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:10588:20: this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        {
        this_NEWLINE_3=(Token)match(input,RULE_NEWLINE,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_91); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10596:9: (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:10597:10: otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE
        {
        otherlv_5=(Token)match(input,Image,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10605:10: ( (lv_image_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:10606:11: (lv_image_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:10606:11: (lv_image_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:10607:12: lv_image_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          												newCompositeNode(grammarAccess.getContainerAccess().getImageExpressionParserRuleCall_1_0_2_2_0());
          											
        }
        pushFollow(FOLLOW_5);
        lv_image_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_8=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred305_InternalGitHubActionsParser

    // $ANTLR start synpred307_InternalGitHubActionsParser
    public final void synpred307_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_BEGIN_11=null;
        Token this_END_13=null;
        EObject lv_environmentVariables_12_0 = null;


        // InternalGitHubActionsParser.g:10635:4: ( ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:10635:4: ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:10635:4: ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:10636:5: {...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred307_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 1)");
        }
        // InternalGitHubActionsParser.g:10636:106: ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) )
        // InternalGitHubActionsParser.g:10637:6: ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 1);
        // InternalGitHubActionsParser.g:10640:9: ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) )
        // InternalGitHubActionsParser.g:10640:10: {...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred307_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10640:19: (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END )
        // InternalGitHubActionsParser.g:10640:20: otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END
        {
        otherlv_9=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_11=(Token)match(input,RULE_BEGIN,FOLLOW_16); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10652:9: ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+
        int cnt463=0;
        loop463:
        do {
            int alt463=2;
            int LA463_0 = input.LA(1);

            if ( (LA463_0==RULE_ID) ) {
                alt463=1;
            }


            switch (alt463) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:10653:10: (lv_environmentVariables_12_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:10653:10: (lv_environmentVariables_12_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:10654:11: lv_environmentVariables_12_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      											newCompositeNode(grammarAccess.getContainerAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_1_1_3_0());
        	      										
        	    }
        	    pushFollow(FOLLOW_17);
        	    lv_environmentVariables_12_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt463 >= 1 ) break loop463;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(463, input);
                    throw eee;
            }
            cnt463++;
        } while (true);

        this_END_13=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred307_InternalGitHubActionsParser

    // $ANTLR start synpred312_InternalGitHubActionsParser
    public final void synpred312_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token this_NEWLINE_23=null;
        Token this_BEGIN_24=null;
        Token otherlv_25=null;
        Token this_NEWLINE_27=null;
        Token this_END_28=null;
        EObject lv_ports_16_0 = null;

        EObject lv_ports_19_0 = null;

        EObject lv_ports_21_0 = null;

        EObject lv_ports_26_0 = null;


        // InternalGitHubActionsParser.g:10681:4: ( ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:10681:4: ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:10681:4: ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:10682:5: {...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred312_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2)");
        }
        // InternalGitHubActionsParser.g:10682:106: ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:10683:6: ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2);
        // InternalGitHubActionsParser.g:10686:9: ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) )
        // InternalGitHubActionsParser.g:10686:10: {...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred312_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10686:19: ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) )
        int alt467=3;
        switch ( input.LA(1) ) {
        case Ports:
            {
            alt467=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt467=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt467=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 467, 0, input);

            throw nvae;
        }

        switch (alt467) {
            case 1 :
                // InternalGitHubActionsParser.g:10686:20: (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:10686:20: (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:10687:10: otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
                {
                otherlv_14=(Token)match(input,Ports,FOLLOW_3); if (state.failed) return ;
                otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:10695:10: ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:10696:11: ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:10696:11: ( (lv_ports_16_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:10697:12: (lv_ports_16_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:10697:12: (lv_ports_16_0= ruleExpression )
                // InternalGitHubActionsParser.g:10698:13: lv_ports_16_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_0_2_0_0());
                  												
                }
                pushFollow(FOLLOW_5);
                lv_ports_16_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:10722:9: (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:10722:9: (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:10723:10: otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE
                {
                otherlv_18=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:10727:10: ( (lv_ports_19_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:10728:11: (lv_ports_19_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:10728:11: (lv_ports_19_0= ruleExpression )
                // InternalGitHubActionsParser.g:10729:12: lv_ports_19_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  												newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_1_1_0());
                  											
                }
                pushFollow(FOLLOW_9);
                lv_ports_19_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:10746:10: (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )*
                loop465:
                do {
                    int alt465=2;
                    int LA465_0 = input.LA(1);

                    if ( (LA465_0==Comma) ) {
                        alt465=1;
                    }


                    switch (alt465) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:10747:11: otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) )
                	    {
                	    otherlv_20=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:10751:11: ( (lv_ports_21_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:10752:12: (lv_ports_21_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:10752:12: (lv_ports_21_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:10753:13: lv_ports_21_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_1_2_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_ports_21_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop465;
                    }
                } while (true);

                otherlv_22=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_23=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:10781:9: (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END )
                {
                // InternalGitHubActionsParser.g:10781:9: (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END )
                // InternalGitHubActionsParser.g:10782:10: this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END
                {
                this_BEGIN_24=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:10786:10: (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+
                int cnt466=0;
                loop466:
                do {
                    int alt466=2;
                    int LA466_0 = input.LA(1);

                    if ( (LA466_0==HyphenMinus) ) {
                        alt466=1;
                    }


                    switch (alt466) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:10787:11: otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE
                	    {
                	    otherlv_25=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:10791:11: ( (lv_ports_26_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:10792:12: (lv_ports_26_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:10792:12: (lv_ports_26_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:10793:13: lv_ports_26_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_1_2_2_1_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_ports_26_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_27=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt466 >= 1 ) break loop466;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(466, input);
                            throw eee;
                    }
                    cnt466++;
                } while (true);

                this_END_28=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred312_InternalGitHubActionsParser

    // $ANTLR start synpred317_InternalGitHubActionsParser
    public final void synpred317_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_29=null;
        Token otherlv_30=null;
        Token this_NEWLINE_32=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token this_NEWLINE_38=null;
        Token this_BEGIN_39=null;
        Token otherlv_40=null;
        Token this_NEWLINE_42=null;
        Token this_END_43=null;
        EObject lv_volumes_31_0 = null;

        EObject lv_volumes_34_0 = null;

        EObject lv_volumes_36_0 = null;

        EObject lv_volumes_41_0 = null;


        // InternalGitHubActionsParser.g:10826:4: ( ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:10826:4: ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:10826:4: ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:10827:5: {...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred317_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3)");
        }
        // InternalGitHubActionsParser.g:10827:106: ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:10828:6: ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3);
        // InternalGitHubActionsParser.g:10831:9: ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) )
        // InternalGitHubActionsParser.g:10831:10: {...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred317_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10831:19: ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) )
        int alt471=3;
        switch ( input.LA(1) ) {
        case Volumes:
            {
            alt471=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt471=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt471=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 471, 0, input);

            throw nvae;
        }

        switch (alt471) {
            case 1 :
                // InternalGitHubActionsParser.g:10831:20: (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) )
                {
                // InternalGitHubActionsParser.g:10831:20: (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) )
                // InternalGitHubActionsParser.g:10832:10: otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )
                {
                otherlv_29=(Token)match(input,Volumes,FOLLOW_3); if (state.failed) return ;
                otherlv_30=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:10840:10: ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:10841:11: ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE
                {
                // InternalGitHubActionsParser.g:10841:11: ( (lv_volumes_31_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:10842:12: (lv_volumes_31_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:10842:12: (lv_volumes_31_0= ruleExpression )
                // InternalGitHubActionsParser.g:10843:13: lv_volumes_31_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_0_2_0_0());
                  												
                }
                pushFollow(FOLLOW_5);
                lv_volumes_31_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                this_NEWLINE_32=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:10867:9: (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE )
                {
                // InternalGitHubActionsParser.g:10867:9: (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE )
                // InternalGitHubActionsParser.g:10868:10: otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE
                {
                otherlv_33=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:10872:10: ( (lv_volumes_34_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:10873:11: (lv_volumes_34_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:10873:11: (lv_volumes_34_0= ruleExpression )
                // InternalGitHubActionsParser.g:10874:12: lv_volumes_34_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  												newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_1_1_0());
                  											
                }
                pushFollow(FOLLOW_9);
                lv_volumes_34_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:10891:10: (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )*
                loop469:
                do {
                    int alt469=2;
                    int LA469_0 = input.LA(1);

                    if ( (LA469_0==Comma) ) {
                        alt469=1;
                    }


                    switch (alt469) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:10892:11: otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) )
                	    {
                	    otherlv_35=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:10896:11: ( (lv_volumes_36_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:10897:12: (lv_volumes_36_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:10897:12: (lv_volumes_36_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:10898:13: lv_volumes_36_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_1_2_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_9);
                	    lv_volumes_36_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop469;
                    }
                } while (true);

                otherlv_37=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return ;
                this_NEWLINE_38=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:10926:9: (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END )
                {
                // InternalGitHubActionsParser.g:10926:9: (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END )
                // InternalGitHubActionsParser.g:10927:10: this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END
                {
                this_BEGIN_39=(Token)match(input,RULE_BEGIN,FOLLOW_11); if (state.failed) return ;
                // InternalGitHubActionsParser.g:10931:10: (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+
                int cnt470=0;
                loop470:
                do {
                    int alt470=2;
                    int LA470_0 = input.LA(1);

                    if ( (LA470_0==HyphenMinus) ) {
                        alt470=1;
                    }


                    switch (alt470) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:10932:11: otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE
                	    {
                	    otherlv_40=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:10936:11: ( (lv_volumes_41_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:10937:12: (lv_volumes_41_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:10937:12: (lv_volumes_41_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:10938:13: lv_volumes_41_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_1_3_2_1_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_volumes_41_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_42=(Token)match(input,RULE_NEWLINE,FOLLOW_12); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt470 >= 1 ) break loop470;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(470, input);
                            throw eee;
                    }
                    cnt470++;
                } while (true);

                this_END_43=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred317_InternalGitHubActionsParser

    // $ANTLR start synpred318_InternalGitHubActionsParser
    public final void synpred318_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_NEWLINE_47=null;
        EObject lv_options_46_0 = null;


        // InternalGitHubActionsParser.g:10971:4: ( ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:10971:4: ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) )
        {
        // InternalGitHubActionsParser.g:10971:4: ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:10972:5: {...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred318_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 4)");
        }
        // InternalGitHubActionsParser.g:10972:106: ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:10973:6: ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 4);
        // InternalGitHubActionsParser.g:10976:9: ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:10976:10: {...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred318_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:10976:19: (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:10976:20: otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE
        {
        otherlv_44=(Token)match(input,Options,FOLLOW_3); if (state.failed) return ;
        otherlv_45=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:10984:9: ( (lv_options_46_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:10985:10: (lv_options_46_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:10985:10: (lv_options_46_0= ruleExpression )
        // InternalGitHubActionsParser.g:10986:11: lv_options_46_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getContainerAccess().getOptionsExpressionParserRuleCall_1_4_2_0());
          										
        }
        pushFollow(FOLLOW_5);
        lv_options_46_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_47=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred318_InternalGitHubActionsParser

    // $ANTLR start synpred319_InternalGitHubActionsParser
    public final void synpred319_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token this_BEGIN_51=null;
        Token otherlv_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        EObject lv_username_54_0 = null;


        // InternalGitHubActionsParser.g:11025:10: ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) )
        // InternalGitHubActionsParser.g:11025:10: ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:11025:10: ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) )
        // InternalGitHubActionsParser.g:11026:11: {...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred319_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0)");
        }
        // InternalGitHubActionsParser.g:11026:116: ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) )
        // InternalGitHubActionsParser.g:11027:12: ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0);
        // InternalGitHubActionsParser.g:11030:15: ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) )
        // InternalGitHubActionsParser.g:11030:16: {...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred319_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:11030:25: (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) )
        // InternalGitHubActionsParser.g:11030:26: otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )
        {
        otherlv_49=(Token)match(input,Credentials,FOLLOW_3); if (state.failed) return ;
        otherlv_50=(Token)match(input,Colon,FOLLOW_10); if (state.failed) return ;
        this_BEGIN_51=(Token)match(input,RULE_BEGIN,FOLLOW_93); if (state.failed) return ;
        // InternalGitHubActionsParser.g:11042:15: (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:11043:16: otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
        {
        otherlv_52=(Token)match(input,Username,FOLLOW_3); if (state.failed) return ;
        otherlv_53=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:11051:16: ( (lv_username_54_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:11052:17: (lv_username_54_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:11052:17: (lv_username_54_0= ruleExpression )
        // InternalGitHubActionsParser.g:11053:18: lv_username_54_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																		newCompositeNode(grammarAccess.getContainerAccess().getUsernameExpressionParserRuleCall_1_5_0_0_3_2_0());
          																	
        }
        pushFollow(FOLLOW_5);
        lv_username_54_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred319_InternalGitHubActionsParser

    // $ANTLR start synpred320_InternalGitHubActionsParser
    public final void synpred320_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_59=null;
        Token this_END_60=null;
        EObject lv_password_58_0 = null;


        // InternalGitHubActionsParser.g:11081:10: ( ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:11081:10: ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:11081:10: ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:11082:11: {...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred320_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1)");
        }
        // InternalGitHubActionsParser.g:11082:116: ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) )
        // InternalGitHubActionsParser.g:11083:12: ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1);
        // InternalGitHubActionsParser.g:11086:15: ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) )
        // InternalGitHubActionsParser.g:11086:16: {...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred320_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:11086:25: ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END )
        // InternalGitHubActionsParser.g:11086:26: (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END
        {
        // InternalGitHubActionsParser.g:11086:26: (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE )
        // InternalGitHubActionsParser.g:11087:16: otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE
        {
        otherlv_56=(Token)match(input,Password,FOLLOW_3); if (state.failed) return ;
        otherlv_57=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:11095:16: ( (lv_password_58_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:11096:17: (lv_password_58_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:11096:17: (lv_password_58_0= ruleExpression )
        // InternalGitHubActionsParser.g:11097:18: lv_password_58_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																		newCompositeNode(grammarAccess.getContainerAccess().getPasswordExpressionParserRuleCall_1_5_0_1_0_2_0());
          																	
        }
        pushFollow(FOLLOW_5);
        lv_password_58_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_NEWLINE_59=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return ;

        }

        this_END_60=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred320_InternalGitHubActionsParser

    // $ANTLR start synpred322_InternalGitHubActionsParser
    public final void synpred322_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token this_BEGIN_51=null;
        Token otherlv_52=null;
        Token otherlv_53=null;
        Token this_NEWLINE_55=null;
        Token otherlv_56=null;
        Token otherlv_57=null;
        Token this_NEWLINE_59=null;
        Token this_END_60=null;
        Token this_END_61=null;
        EObject lv_username_54_0 = null;

        EObject lv_password_58_0 = null;


        // InternalGitHubActionsParser.g:11013:4: ( ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:11013:4: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:11013:4: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:11014:5: {...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred322_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5)");
        }
        // InternalGitHubActionsParser.g:11014:106: ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) )
        // InternalGitHubActionsParser.g:11015:6: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5);
        // InternalGitHubActionsParser.g:11018:9: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) )
        // InternalGitHubActionsParser.g:11018:10: {...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred322_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:11018:19: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END )
        // InternalGitHubActionsParser.g:11018:20: ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END
        {
        // InternalGitHubActionsParser.g:11018:20: ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )?
        int alt474=2;
        int LA474_0 = input.LA(1);

        if ( (LA474_0==Credentials||LA474_0==Password) ) {
            alt474=1;
        }
        switch (alt474) {
            case 1 :
                // InternalGitHubActionsParser.g:11019:10: ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) )
                {
                // InternalGitHubActionsParser.g:11019:10: ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) )
                // InternalGitHubActionsParser.g:11020:11: ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?)
                {
                getUnorderedGroupHelper().enter(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0());
                // InternalGitHubActionsParser.g:11023:11: ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?)
                // InternalGitHubActionsParser.g:11024:12: ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?
                {
                // InternalGitHubActionsParser.g:11024:12: ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+
                int cnt473=0;
                loop473:
                do {
                    int alt473=3;
                    int LA473_0 = input.LA(1);

                    if ( LA473_0 == Credentials && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0) ) {
                        alt473=1;
                    }
                    else if ( LA473_0 == Password && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1) ) {
                        alt473=2;
                    }


                    switch (alt473) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:11025:10: ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:11025:10: ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) )
                	    // InternalGitHubActionsParser.g:11026:11: {...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred322_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0)");
                	    }
                	    // InternalGitHubActionsParser.g:11026:116: ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) )
                	    // InternalGitHubActionsParser.g:11027:12: ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 0);
                	    // InternalGitHubActionsParser.g:11030:15: ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) )
                	    // InternalGitHubActionsParser.g:11030:16: {...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred322_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:11030:25: (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) )
                	    // InternalGitHubActionsParser.g:11030:26: otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )
                	    {
                	    otherlv_49=(Token)match(input,Credentials,FOLLOW_3); if (state.failed) return ;
                	    otherlv_50=(Token)match(input,Colon,FOLLOW_10); if (state.failed) return ;
                	    this_BEGIN_51=(Token)match(input,RULE_BEGIN,FOLLOW_93); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:11042:15: (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )
                	    // InternalGitHubActionsParser.g:11043:16: otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE
                	    {
                	    otherlv_52=(Token)match(input,Username,FOLLOW_3); if (state.failed) return ;
                	    otherlv_53=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:11051:16: ( (lv_username_54_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:11052:17: (lv_username_54_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:11052:17: (lv_username_54_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:11053:18: lv_username_54_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																		newCompositeNode(grammarAccess.getContainerAccess().getUsernameExpressionParserRuleCall_1_5_0_0_3_2_0());
                	      																	
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_username_54_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_55=(Token)match(input,RULE_NEWLINE,FOLLOW_94); if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;
                	case 2 :
                	    // InternalGitHubActionsParser.g:11081:10: ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:11081:10: ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) )
                	    // InternalGitHubActionsParser.g:11082:11: {...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred322_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1)");
                	    }
                	    // InternalGitHubActionsParser.g:11082:116: ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) )
                	    // InternalGitHubActionsParser.g:11083:12: ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0(), 1);
                	    // InternalGitHubActionsParser.g:11086:15: ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) )
                	    // InternalGitHubActionsParser.g:11086:16: {...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred322_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:11086:25: ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END )
                	    // InternalGitHubActionsParser.g:11086:26: (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END
                	    {
                	    // InternalGitHubActionsParser.g:11086:26: (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE )
                	    // InternalGitHubActionsParser.g:11087:16: otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE
                	    {
                	    otherlv_56=(Token)match(input,Password,FOLLOW_3); if (state.failed) return ;
                	    otherlv_57=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:11095:16: ( (lv_password_58_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:11096:17: (lv_password_58_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:11096:17: (lv_password_58_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:11097:18: lv_password_58_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																		newCompositeNode(grammarAccess.getContainerAccess().getPasswordExpressionParserRuleCall_1_5_0_1_0_2_0());
                	      																	
                	    }
                	    pushFollow(FOLLOW_5);
                	    lv_password_58_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_59=(Token)match(input,RULE_NEWLINE,FOLLOW_19); if (state.failed) return ;

                	    }

                	    this_END_60=(Token)match(input,RULE_END,FOLLOW_94); if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt473 >= 1 ) break loop473;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(473, input);
                            throw eee;
                    }
                    cnt473++;
                } while (true);

                if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0()) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred322_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1_5_0())");
                }

                }


                }


                }
                break;

        }

        this_END_61=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred322_InternalGitHubActionsParser

    // Delegated rules

    public final boolean synpred42_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred115_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred115_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA123 dfa123 = new DFA123(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA190 dfa190 = new DFA190(this);
    protected DFA295 dfa295 = new DFA295(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA319 dfa319 = new DFA319(this);
    protected DFA368 dfa368 = new DFA368(this);
    protected DFA400 dfa400 = new DFA400(this);
    static final String dfa_1s = "\12\uffff";
    static final String dfa_2s = "\1\42\11\uffff";
    static final String dfa_3s = "\1\u00af\11\uffff";
    static final String dfa_4s = "\1\uffff\1\11\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String dfa_5s = "\1\0\11\uffff}>";
    static final String[] dfa_6s = {
            "\1\10\6\uffff\1\5\23\uffff\1\7\10\uffff\1\3\75\uffff\1\11\1\uffff\1\2\11\uffff\1\6\12\uffff\1\4\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "()+ loopback of 96:6: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= RunName otherlv_6= Colon ( (lv_runName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= On otherlv_10= Colon ( ( ( (lv_triggers_11_0= ruleSimpleTrigger ) ) this_NEWLINE_12= RULE_NEWLINE ) | (otherlv_13= LeftSquareBracket ( (lv_triggers_14_0= ruleSimpleTrigger ) ) (otherlv_15= Comma ( (lv_triggers_16_0= ruleSimpleTrigger ) ) )* otherlv_17= RightSquareBracket this_NEWLINE_18= RULE_NEWLINE ) | (this_NEWLINE_19= RULE_NEWLINE this_BEGIN_20= RULE_BEGIN (otherlv_21= HyphenMinus ( (lv_triggers_22_0= ruleSimpleTrigger ) ) this_NEWLINE_23= RULE_NEWLINE )+ this_END_24= RULE_END ) | ( (lv_triggers_25_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Permissions otherlv_27= Colon this_NEWLINE_28= RULE_NEWLINE this_BEGIN_29= RULE_BEGIN ( (lv_permissions_30_0= rulePermission ) )+ this_END_31= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= Env otherlv_33= Colon this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Defaults otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_defaults_42_0= ruleDefaults ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Concurrency otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_concurrencyGroup_48_0= ruleConcurrencyGroup ) ) this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Jobs otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_jobs_54_0= ruleJob ) )+ this_END_55= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_0 = input.LA(1);

                         
                        int index8_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_0==RULE_END_OF_FILE) ) {s = 1;}

                        else if ( LA8_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 0) ) {s = 2;}

                        else if ( LA8_0 == RunName && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 1) ) {s = 3;}

                        else if ( LA8_0 == On && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 2) ) {s = 4;}

                        else if ( LA8_0 == Permissions && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 3) ) {s = 5;}

                        else if ( LA8_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 4) ) {s = 6;}

                        else if ( LA8_0 == Defaults && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 5) ) {s = 7;}

                        else if ( LA8_0 == Concurrency && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 6) ) {s = 8;}

                        else if ( LA8_0 == Jobs && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup_0(), 7) ) {s = 9;}

                         
                        input.seek(index8_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\27\uffff";
    static final String dfa_8s = "\1\17\1\0\25\uffff";
    static final String dfa_9s = "\1\u00b0\1\0\25\uffff";
    static final String dfa_10s = "\2\uffff\1\1\23\uffff\1\2";
    static final String dfa_11s = "\1\uffff\1\0\25\uffff}>";
    static final String[] dfa_12s = {
            "\1\2\10\uffff\1\2\11\uffff\1\2\4\uffff\1\2\1\uffff\1\2\12\uffff\1\2\10\uffff\1\2\12\uffff\1\2\1\uffff\1\2\17\uffff\2\2\33\uffff\1\2\4\uffff\1\2\17\uffff\1\2\1\uffff\1\2\1\uffff\1\2\11\uffff\1\2\14\uffff\1\2\5\uffff\1\1\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "()+ loopback of 571:9: ( (lv_jobs_54_0= ruleJob ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_1 = input.LA(1);

                         
                        int index7_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalGitHubActionsParser()) ) {s = 2;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index7_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\26\uffff";
    static final String dfa_14s = "\1\17\13\0\1\uffff\6\0\3\uffff";
    static final String dfa_15s = "\1\u00b0\13\0\1\uffff\6\0\3\uffff";
    static final String dfa_16s = "\14\uffff\1\1\6\uffff\1\2\2\uffff";
    static final String dfa_17s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\13\1\14\1\15\1\16\1\17\1\20\3\uffff}>";
    static final String[] dfa_18s = {
            "\1\20\10\uffff\1\21\11\uffff\1\11\4\uffff\1\10\1\uffff\1\2\12\uffff\1\16\10\uffff\1\13\12\uffff\1\17\1\uffff\1\15\17\uffff\1\7\1\23\33\uffff\1\3\4\uffff\1\14\17\uffff\1\23\1\uffff\1\23\1\uffff\1\12\11\uffff\1\6\14\uffff\1\4\5\uffff\1\22\1\5\1\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "636:2: (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_1 = input.LA(1);

                         
                        int index9_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_2 = input.LA(1);

                         
                        int index9_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_3 = input.LA(1);

                         
                        int index9_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_4 = input.LA(1);

                         
                        int index9_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_5 = input.LA(1);

                         
                        int index9_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_6 = input.LA(1);

                         
                        int index9_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA9_7 = input.LA(1);

                         
                        int index9_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA9_8 = input.LA(1);

                         
                        int index9_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA9_11 = input.LA(1);

                         
                        int index9_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA9_15 = input.LA(1);

                         
                        int index9_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA9_16 = input.LA(1);

                         
                        int index9_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA9_17 = input.LA(1);

                         
                        int index9_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA9_18 = input.LA(1);

                         
                        int index9_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 19;}

                         
                        input.seek(index9_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_19s = "\43\uffff";
    static final String dfa_20s = "\1\23\42\uffff";
    static final String dfa_21s = "\1\17\22\0\20\uffff";
    static final String dfa_22s = "\1\u00b0\22\0\20\uffff";
    static final String dfa_23s = "\23\uffff\1\20\1\17\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16";
    static final String dfa_24s = "\1\uffff\1\1\1\4\1\17\1\6\1\12\1\2\1\13\1\21\1\15\1\7\1\3\1\11\1\20\1\16\1\5\1\0\1\14\1\10\20\uffff}>";
    static final String[] dfa_25s = {
            "\1\21\10\uffff\1\22\11\uffff\1\12\4\uffff\1\11\1\uffff\1\3\12\uffff\1\17\10\uffff\1\14\12\uffff\1\20\1\uffff\1\16\17\uffff\1\10\1\23\33\uffff\1\4\4\uffff\1\15\17\uffff\1\23\1\uffff\1\23\1\uffff\1\13\11\uffff\1\7\14\uffff\1\5\5\uffff\1\1\1\6\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_19;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "()+ loopback of 694:5: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Steps otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_steps_60_0= ruleStep ) )+ this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Strategy otherlv_63= Colon this_NEWLINE_64= RULE_NEWLINE this_BEGIN_65= RULE_BEGIN ( (lv_strategy_66_0= ruleStrategy ) ) this_END_67= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_68= Container otherlv_69= Colon ( (lv_container_70_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Services otherlv_72= Colon this_NEWLINE_73= RULE_NEWLINE this_BEGIN_74= RULE_BEGIN ( (lv_services_75_0= ruleService ) )+ this_END_76= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_77= ContinueOnError otherlv_78= Colon ( (lv_continueOnError_79_0= ruleExpression ) ) this_NEWLINE_80= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_81= TimeoutMinutes otherlv_82= Colon ( (lv_timeoutMinutes_83_0= ruleExpression ) ) this_NEWLINE_84= RULE_NEWLINE )? this_END_85= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_16 = input.LA(1);

                         
                        int index19_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred41_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12) ) {s = 33;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred44_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {s = 20;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred28_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred34_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7) ) {s = 28;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred21_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0) ) {s = 21;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_15 = input.LA(1);

                         
                        int index19_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred39_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11) ) {s = 32;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_15);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred28_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred32_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6) ) {s = 27;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_18 = input.LA(1);

                         
                        int index19_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred44_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {s = 20;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_12 = input.LA(1);

                         
                        int index19_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred35_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8) ) {s = 29;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred28_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred29_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3) ) {s = 24;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_17 = input.LA(1);

                         
                        int index19_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred42_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13) ) {s = 34;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_17);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_9 = input.LA(1);

                         
                        int index19_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred31_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5) ) {s = 26;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_9);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred38_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10) ) {s = 31;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred23_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1) ) {s = 22;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred37_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9) ) {s = 30;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred30_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4) ) {s = 25;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 19;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_26s = "\47\uffff";
    static final String dfa_27s = "\1\15\46\uffff";
    static final String dfa_28s = "\1\17\14\0\1\uffff\10\0\21\uffff";
    static final String dfa_29s = "\1\u00b0\14\0\1\uffff\10\0\21\uffff";
    static final String dfa_30s = "\15\uffff\1\22\10\uffff\1\21\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\20\1\15\1\16\1\17";
    static final String dfa_31s = "\1\uffff\1\3\1\13\1\14\1\6\1\11\1\2\1\22\1\21\1\15\1\10\1\4\1\12\1\uffff\1\5\1\23\1\17\1\1\1\20\1\16\1\0\1\7\21\uffff}>";
    static final String[] dfa_32s = {
            "\1\21\10\uffff\1\22\11\uffff\1\12\4\uffff\1\11\1\uffff\1\3\12\uffff\1\17\10\uffff\1\14\12\uffff\1\20\1\uffff\1\16\17\uffff\1\10\1\25\33\uffff\1\4\4\uffff\1\15\17\uffff\1\23\1\uffff\1\24\1\uffff\1\13\11\uffff\1\7\14\uffff\1\5\5\uffff\1\1\1\6\1\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final short[] dfa_27 = DFA.unpackEncodedString(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final char[] dfa_29 = DFA.unpackEncodedStringToUnsignedChars(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[][] dfa_32 = unpackEncodedStringArray(dfa_32s);

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = dfa_26;
            this.eof = dfa_27;
            this.min = dfa_28;
            this.max = dfa_29;
            this.accept = dfa_30;
            this.special = dfa_31;
            this.transition = dfa_32;
        }
        public String getDescription() {
            return "()+ loopback of 1532:5: ( ({...}? => ( ({...}? => ( ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Permissions otherlv_10= Colon this_NEWLINE_11= RULE_NEWLINE this_BEGIN_12= RULE_BEGIN ( (lv_permissions_13_0= rulePermission ) )+ this_END_14= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Needs otherlv_16= Colon ( ( (otherlv_17= RULE_ID ) ) this_NEWLINE_18= RULE_NEWLINE ) ) | (otherlv_19= LeftSquareBracket ( (otherlv_20= RULE_ID ) ) (otherlv_21= Comma ( (otherlv_22= RULE_ID ) ) )* otherlv_23= RightSquareBracket this_NEWLINE_24= RULE_NEWLINE ) | (this_NEWLINE_25= RULE_NEWLINE this_BEGIN_26= RULE_BEGIN (otherlv_27= HyphenMinus ( (otherlv_28= RULE_ID ) ) this_NEWLINE_29= RULE_NEWLINE )+ this_END_30= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_31_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_32= RunsOn otherlv_33= Colon ( (lv_agent_34_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_35= Environment otherlv_36= Colon ( (lv_stagingEnvironment_37_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_38= Concurrency otherlv_39= Colon this_NEWLINE_40= RULE_NEWLINE this_BEGIN_41= RULE_BEGIN ( (lv_concurrencyGroup_42_0= ruleConcurrencyGroup ) ) this_END_43= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Env otherlv_45= Colon this_NEWLINE_46= RULE_NEWLINE this_BEGIN_47= RULE_BEGIN ( (lv_environmentVariables_48_0= ruleVariableAssignment ) )+ this_END_49= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Defaults otherlv_51= Colon this_NEWLINE_52= RULE_NEWLINE this_BEGIN_53= RULE_BEGIN ( (lv_defaults_54_0= ruleDefaults ) ) this_END_55= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_56= Strategy otherlv_57= Colon this_NEWLINE_58= RULE_NEWLINE this_BEGIN_59= RULE_BEGIN ( (lv_strategy_60_0= ruleStrategy ) ) this_END_61= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_62= Container otherlv_63= Colon ( (lv_container_64_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_65= Services otherlv_66= Colon this_NEWLINE_67= RULE_NEWLINE this_BEGIN_68= RULE_BEGIN ( (lv_services_69_0= ruleService ) )+ this_END_70= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_71= Uses otherlv_72= Colon ( (lv_workflowPath_73_0= ruleExpression ) ) this_NEWLINE_74= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_75= With otherlv_76= Colon this_NEWLINE_77= RULE_NEWLINE this_BEGIN_78= RULE_BEGIN ( (lv_args_79_0= ruleVariableAssignment ) )+ this_END_80= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_81= Secrets otherlv_82= Colon ( ( ( (lv_inheritSecrets_83_0= Inherit ) ) this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN ( (lv_secrets_87_0= ruleVariableAssignment ) )+ this_END_88= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_89= ContinueOnError otherlv_90= Colon ( (lv_continueOnError_91_0= ruleExpression ) ) this_NEWLINE_92= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_93= TimeoutMinutes otherlv_94= Colon ( (lv_timeoutMinutes_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE )? this_END_97= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred67_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13) ) {s = 37;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_17 = input.LA(1);

                         
                        int index31_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred71_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15) ) {s = 35;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred53_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {s = 25;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_1 = input.LA(1);

                         
                        int index31_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred73_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {s = 22;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred59_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7) ) {s = 30;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred61_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9) ) {s = 32;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred53_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {s = 25;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_21 = input.LA(1);

                         
                        int index31_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred70_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14) ) {s = 38;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_21);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred57_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6) ) {s = 29;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred53_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {s = 25;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred60_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8) ) {s = 31;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred46_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred48_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1) ) {s = 24;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred56_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5) ) {s = 28;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_19 = input.LA(1);

                         
                        int index31_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred65_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12) ) {s = 36;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_16 = input.LA(1);

                         
                        int index31_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred64_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11) ) {s = 34;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_18 = input.LA(1);

                         
                        int index31_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred73_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {s = 22;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred55_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4) ) {s = 27;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred54_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3) ) {s = 26;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred62_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10) ) {s = 33;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 13;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_33s = "\15\uffff";
    static final String dfa_34s = "\1\17\10\0\4\uffff";
    static final String dfa_35s = "\1\u00b0\10\0\4\uffff";
    static final String dfa_36s = "\11\uffff\1\1\1\2\2\uffff";
    static final String dfa_37s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\4\uffff}>";
    static final String[] dfa_38s = {
            "\1\7\2\uffff\1\5\5\uffff\1\10\142\uffff\1\4\12\uffff\1\3\5\uffff\1\12\1\uffff\1\12\1\uffff\1\6\1\uffff\1\11\6\uffff\1\1\1\2\25\uffff\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = dfa_33;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "2999:3: (this_Command_2= ruleCommand | this_Package_3= rulePackage )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_1 = input.LA(1);

                         
                        int index44_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA44_2 = input.LA(1);

                         
                        int index44_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA44_3 = input.LA(1);

                         
                        int index44_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA44_4 = input.LA(1);

                         
                        int index44_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA44_6 = input.LA(1);

                         
                        int index44_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA44_7 = input.LA(1);

                         
                        int index44_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA44_8 = input.LA(1);

                         
                        int index44_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred90_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index44_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_39s = "\13\uffff";
    static final String dfa_40s = "\1\1\12\uffff";
    static final String dfa_41s = "\1\17\12\uffff";
    static final String dfa_42s = "\1\u00ad\12\uffff";
    static final String dfa_43s = "\1\uffff\1\11\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\10";
    static final String dfa_44s = "\1\0\12\uffff}>";
    static final String[] dfa_45s = {
            "\1\10\2\uffff\1\6\5\uffff\1\11\142\uffff\1\5\12\uffff\1\4\11\uffff\1\7\1\uffff\1\12\6\uffff\1\2\1\3\22\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()+ loopback of 3062:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Run otherlv_33= Colon ( (lv_command_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_0 = input.LA(1);

                         
                        int index47_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA47_0==EOF||LA47_0==RULE_END) ) {s = 1;}

                        else if ( LA47_0 == Id && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0) ) {s = 2;}

                        else if ( LA47_0 == If && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1) ) {s = 3;}

                        else if ( LA47_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2) ) {s = 4;}

                        else if ( LA47_0 == Shell && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3) ) {s = 5;}

                        else if ( LA47_0 == WorkingDirectory && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4) ) {s = 6;}

                        else if ( LA47_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5) ) {s = 7;}

                        else if ( LA47_0 == ContinueOnError && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6) ) {s = 8;}

                        else if ( LA47_0 == TimeoutMinutes && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {s = 9;}

                        else if ( LA47_0 == Run && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {s = 10;}

                         
                        input.seek(index47_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_46s = "\1\1\14\uffff";
    static final String dfa_47s = "\1\17\14\uffff";
    static final String dfa_48s = "\1\u00b0\14\uffff";
    static final String dfa_49s = "\1\uffff\1\12\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\10\2\11";
    static final String dfa_50s = "\1\0\14\uffff}>";
    static final String[] dfa_51s = {
            "\1\10\2\uffff\1\6\5\uffff\1\11\142\uffff\1\5\12\uffff\1\4\5\uffff\1\12\1\uffff\1\13\1\uffff\1\7\10\uffff\1\2\1\3\22\uffff\1\1\2\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final char[] dfa_47 = DFA.unpackEncodedStringToUnsignedChars(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[][] dfa_51 = unpackEncodedStringArray(dfa_51s);

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = dfa_33;
            this.eof = dfa_46;
            this.min = dfa_47;
            this.max = dfa_48;
            this.accept = dfa_49;
            this.special = dfa_50;
            this.transition = dfa_51;
        }
        public String getDescription() {
            return "()+ loopback of 3473:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) this_NEWLINE_4= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_5_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_6= Name otherlv_7= Colon ( (lv_name_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= Shell otherlv_11= Colon ( (lv_shell_12_0= ruleExpression ) ) this_NEWLINE_13= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= WorkingDirectory otherlv_15= Colon ( (lv_workingDirectory_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Env otherlv_19= Colon this_NEWLINE_20= RULE_NEWLINE this_BEGIN_21= RULE_BEGIN ( (lv_environmentVariables_22_0= ruleVariableAssignment ) )+ this_END_23= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= ContinueOnError otherlv_25= Colon ( (lv_continueOnError_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_28= TimeoutMinutes otherlv_29= Colon ( (lv_timeoutMinutes_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )? (otherlv_32= Uses otherlv_33= Colon ( (lv_uses_34_0= ruleExpression ) ) this_NEWLINE_35= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_36= With otherlv_37= Colon this_NEWLINE_38= RULE_NEWLINE this_BEGIN_39= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_41= Entrypoint otherlv_42= Colon ( (lv_entrypoint_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_45= Args otherlv_46= Colon ( (lv_containerArgs_47_0= ruleExpression ) ) this_NEWLINE_48= RULE_NEWLINE ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_49_0= ruleVariableAssignment ) )+ this_END_50= RULE_END ) ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_0 = input.LA(1);

                         
                        int index53_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA53_0==EOF||LA53_0==RULE_END) ) {s = 1;}

                        else if ( LA53_0 == Id && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0) ) {s = 2;}

                        else if ( LA53_0 == If && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1) ) {s = 3;}

                        else if ( LA53_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2) ) {s = 4;}

                        else if ( LA53_0 == Shell && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3) ) {s = 5;}

                        else if ( LA53_0 == WorkingDirectory && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4) ) {s = 6;}

                        else if ( LA53_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5) ) {s = 7;}

                        else if ( LA53_0 == ContinueOnError && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6) ) {s = 8;}

                        else if ( LA53_0 == TimeoutMinutes && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {s = 9;}

                        else if ( LA53_0 == Uses && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {s = 10;}

                        else if ( LA53_0 == With && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {s = 11;}

                        else if ( LA53_0 == RULE_ID && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {s = 12;}

                         
                        input.seek(index53_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_52s = "\14\uffff";
    static final String dfa_53s = "\1\4\4\uffff\1\6\1\u00ac\3\uffff\1\u00a2\1\6";
    static final String dfa_54s = "\1\u00ae\4\uffff\1\u00b1\1\u00ac\3\uffff\1\u00a2\1\u00b1";
    static final String dfa_55s = "\1\uffff\1\1\1\2\1\3\1\4\2\uffff\1\5\1\6\1\7\2\uffff";
    static final String dfa_56s = "\14\uffff}>";
    static final String[] dfa_57s = {
            "\2\4\2\uffff\1\4\1\1\1\4\5\uffff\1\4\1\11\2\uffff\1\4\4\uffff\1\4\1\uffff\1\7\2\uffff\1\4\1\1\1\10\1\4\6\uffff\1\4\3\uffff\2\4\1\uffff\1\4\3\uffff\1\4\3\uffff\1\4\17\uffff\1\3\20\uffff\2\4\10\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff\1\4\4\uffff\1\4\10\uffff\1\4\3\uffff\1\4\4\uffff\1\2\36\uffff\1\5\6\uffff\1\6",
            "",
            "",
            "",
            "",
            "\2\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\1\uffff\1\4\24\uffff\1\4\6\uffff\1\4\6\uffff\2\4\12\uffff\1\4\6\uffff\1\4\3\uffff\1\4\1\uffff\1\4\3\uffff\1\4\13\uffff\1\4\2\uffff\1\4\6\uffff\1\4\2\uffff\1\4\40\uffff\1\10\41\uffff\1\10",
            "\1\12",
            "",
            "",
            "",
            "\1\13",
            "\2\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\1\uffff\1\4\24\uffff\1\4\6\uffff\1\4\6\uffff\2\4\12\uffff\1\4\6\uffff\1\4\3\uffff\1\4\1\uffff\1\4\3\uffff\1\4\13\uffff\1\4\2\uffff\1\4\6\uffff\1\4\2\uffff\1\4\40\uffff\1\10\41\uffff\1\10"
    };

    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final char[] dfa_53 = DFA.unpackEncodedStringToUnsignedChars(dfa_53s);
    static final char[] dfa_54 = DFA.unpackEncodedStringToUnsignedChars(dfa_54s);
    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final short[][] dfa_57 = unpackEncodedStringArray(dfa_57s);

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = dfa_52;
            this.eof = dfa_52;
            this.min = dfa_53;
            this.max = dfa_54;
            this.accept = dfa_55;
            this.special = dfa_56;
            this.transition = dfa_57;
        }
        public String getDescription() {
            return "4471:3: (this_OptionedPullRequestTrigger_2= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_3= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_4= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_5= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_6= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_7= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_8= ruleOptionedWorkflowDispatchTrigger )";
        }
    }
    static final String dfa_58s = "\1\26\6\0\3\uffff";
    static final String dfa_59s = "\1\u00ae\6\0\3\uffff";
    static final String dfa_60s = "\7\uffff\1\1\1\2\1\3";
    static final String dfa_61s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\3\uffff}>";
    static final String[] dfa_62s = {
            "\1\3\6\uffff\1\6\34\uffff\1\2\76\uffff\1\5\55\uffff\1\4\6\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_58 = DFA.unpackEncodedStringToUnsignedChars(dfa_58s);
    static final char[] dfa_59 = DFA.unpackEncodedStringToUnsignedChars(dfa_59s);
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final short[][] dfa_62 = unpackEncodedStringArray(dfa_62s);

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_58;
            this.max = dfa_59;
            this.accept = dfa_60;
            this.special = dfa_61;
            this.transition = dfa_62;
        }
        public String getDescription() {
            return "5008:3: ( (this_NEWLINE_4= RULE_NEWLINE this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Branches | ( (lv_ignoreSpecifiedBranches_59_0= BranchesIgnore ) ) ) otherlv_60= Colon ( ( (lv_branches_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_branches_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_branches_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_branches_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_91= Paths | ( (lv_ignoreSpecifiedPaths_92_0= PathsIgnore ) ) ) otherlv_93= Colon ( ( (lv_paths_94_0= ruleExpression ) ) this_NEWLINE_95= RULE_NEWLINE ) ) | (otherlv_96= LeftSquareBracket ( (lv_paths_97_0= ruleExpression ) ) (otherlv_98= Comma ( (lv_paths_99_0= ruleExpression ) ) )* otherlv_100= RightSquareBracket this_NEWLINE_101= RULE_NEWLINE ) | (this_NEWLINE_102= RULE_NEWLINE this_BEGIN_103= RULE_BEGIN (otherlv_104= HyphenMinus ( (lv_paths_105_0= ruleExpression ) ) this_NEWLINE_106= RULE_NEWLINE )+ this_END_107= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_109= Paths | ( (lv_ignoreSpecifiedPaths_110_0= PathsIgnore ) ) ) otherlv_111= Colon ( ( (lv_paths_112_0= ruleExpression ) ) this_NEWLINE_113= RULE_NEWLINE ) ) | (otherlv_114= LeftSquareBracket ( (lv_paths_115_0= ruleExpression ) ) (otherlv_116= Comma ( (lv_paths_117_0= ruleExpression ) ) )* otherlv_118= RightSquareBracket this_NEWLINE_119= RULE_NEWLINE ) | (this_NEWLINE_120= RULE_NEWLINE this_BEGIN_121= RULE_BEGIN (otherlv_122= HyphenMinus ( (lv_paths_123_0= ruleExpression ) ) this_NEWLINE_124= RULE_NEWLINE )+ this_END_125= RULE_END ) ) ( (otherlv_126= Types otherlv_127= Colon ( ( (lv_eventTypes_128_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_129= RULE_NEWLINE ) ) | (otherlv_130= LeftSquareBracket ( (lv_eventTypes_131_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_132= Comma ( (lv_eventTypes_133_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_134= RightSquareBracket this_NEWLINE_135= RULE_NEWLINE ) | (this_NEWLINE_136= RULE_NEWLINE this_BEGIN_137= RULE_BEGIN (otherlv_138= HyphenMinus ( (lv_eventTypes_139_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_140= RULE_NEWLINE )+ this_END_141= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_142= Branches | ( (lv_ignoreSpecifiedBranches_143_0= BranchesIgnore ) ) ) otherlv_144= Colon ( ( (lv_branches_145_0= ruleExpression ) ) this_NEWLINE_146= RULE_NEWLINE ) ) | (otherlv_147= LeftSquareBracket ( (lv_branches_148_0= ruleExpression ) ) (otherlv_149= Comma ( (lv_branches_150_0= ruleExpression ) ) )* otherlv_151= RightSquareBracket this_NEWLINE_152= RULE_NEWLINE ) | (this_NEWLINE_153= RULE_NEWLINE this_BEGIN_154= RULE_BEGIN (otherlv_155= HyphenMinus ( (lv_branches_156_0= ruleExpression ) ) this_NEWLINE_157= RULE_NEWLINE )+ this_END_158= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_159= RULE_END ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_1 = input.LA(1);

                         
                        int index102_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred156_InternalGitHubActionsParser()) ) {s = 7;}

                        else if ( (synpred174_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index102_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA102_2 = input.LA(1);

                         
                        int index102_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index102_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA102_3 = input.LA(1);

                         
                        int index102_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index102_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA102_4 = input.LA(1);

                         
                        int index102_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index102_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA102_5 = input.LA(1);

                         
                        int index102_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index102_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA102_6 = input.LA(1);

                         
                        int index102_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred174_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index102_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_63s = "\63\uffff";
    static final String dfa_64s = "\1\1\62\uffff";
    static final String dfa_65s = "\1\35\2\uffff\1\6\1\u00ac\27\uffff\1\u00a2\1\6\25\uffff";
    static final String dfa_66s = "\1\u00ae\2\uffff\1\u00b1\1\u00ac\27\uffff\1\u00a2\1\u00b1\25\uffff";
    static final String dfa_67s = "\1\uffff\1\3\1\1\2\uffff\2\2\23\1\2\2\2\uffff\23\1\2\2";
    static final String dfa_68s = "\1\1\2\uffff\1\0\31\uffff\1\2\25\uffff}>";
    static final String[] dfa_69s = {
            "\1\6\133\uffff\1\5\3\uffff\1\2\51\uffff\1\3\5\uffff\1\1\1\4",
            "",
            "",
            "\1\22\1\10\4\uffff\1\11\1\uffff\1\13\4\uffff\1\20\1\uffff\1\23\24\uffff\1\24\6\uffff\1\25\6\uffff\1\26\1\7\12\uffff\1\21\6\uffff\1\27\3\uffff\1\30\1\uffff\1\31\3\uffff\1\15\13\uffff\1\12\2\uffff\1\14\6\uffff\1\16\2\uffff\1\17\40\uffff\1\32\41\uffff\1\33",
            "\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35",
            "\1\51\1\37\4\uffff\1\40\1\uffff\1\42\4\uffff\1\47\1\uffff\1\52\24\uffff\1\53\6\uffff\1\54\6\uffff\1\55\1\36\12\uffff\1\50\6\uffff\1\56\3\uffff\1\57\1\uffff\1\60\3\uffff\1\44\13\uffff\1\41\2\uffff\1\43\6\uffff\1\45\2\uffff\1\46\40\uffff\1\61\41\uffff\1\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final char[] dfa_65 = DFA.unpackEncodedStringToUnsignedChars(dfa_65s);
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[][] dfa_69 = unpackEncodedStringArray(dfa_69s);

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = dfa_63;
            this.eof = dfa_64;
            this.min = dfa_65;
            this.max = dfa_66;
            this.accept = dfa_67;
            this.special = dfa_68;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "()+ loopback of 5024:8: ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_3 = input.LA(1);

                         
                        int index77_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA77_3 == Assigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 7;}

                        else if ( LA77_3 == Auto_merge_disabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 8;}

                        else if ( LA77_3 == Auto_merge_enabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 9;}

                        else if ( LA77_3 == Closed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 10;}

                        else if ( LA77_3 == Converted_to_draft && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 11;}

                        else if ( LA77_3 == Edited && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 12;}

                        else if ( LA77_3 == Labeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 13;}

                        else if ( LA77_3 == Locked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 14;}

                        else if ( LA77_3 == Opened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 15;}

                        else if ( LA77_3 == Ready_for_review && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 16;}

                        else if ( LA77_3 == Reopened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 17;}

                        else if ( LA77_3 == Review_request_removed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 18;}

                        else if ( LA77_3 == Review_requested && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 19;}

                        else if ( LA77_3 == Synchronize && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 20;}

                        else if ( LA77_3 == Unassigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 21;}

                        else if ( LA77_3 == Unlabeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 22;}

                        else if ( LA77_3 == Unlocked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 23;}

                        else if ( LA77_3 == Created && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 24;}

                        else if ( LA77_3 == Deleted && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 25;}

                        else if ( LA77_3 == DollarSignLeftCurlyBracketLeftCurlyBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 26;}

                        else if ( LA77_3 == RULE_STRING && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 27;}

                         
                        input.seek(index77_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_0 = input.LA(1);

                         
                        int index77_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA77_0==EOF||LA77_0==RULE_END) ) {s = 1;}

                        else if ( LA77_0 == Types && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 2;}

                        else if ( (LA77_0==LeftSquareBracket) ) {s = 3;}

                        else if ( (LA77_0==RULE_NEWLINE) ) {s = 4;}

                        else if ( LA77_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 5;}

                        else if ( LA77_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 6;}

                         
                        input.seek(index77_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA77_29 = input.LA(1);

                         
                        int index77_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA77_29 == Assigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 30;}

                        else if ( LA77_29 == Auto_merge_disabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 31;}

                        else if ( LA77_29 == Auto_merge_enabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 32;}

                        else if ( LA77_29 == Closed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 33;}

                        else if ( LA77_29 == Converted_to_draft && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 34;}

                        else if ( LA77_29 == Edited && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 35;}

                        else if ( LA77_29 == Labeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 36;}

                        else if ( LA77_29 == Locked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 37;}

                        else if ( LA77_29 == Opened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 38;}

                        else if ( LA77_29 == Ready_for_review && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 39;}

                        else if ( LA77_29 == Reopened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 40;}

                        else if ( LA77_29 == Review_request_removed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 41;}

                        else if ( LA77_29 == Review_requested && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 42;}

                        else if ( LA77_29 == Synchronize && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 43;}

                        else if ( LA77_29 == Unassigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 44;}

                        else if ( LA77_29 == Unlabeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 45;}

                        else if ( LA77_29 == Unlocked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 46;}

                        else if ( LA77_29 == Created && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 47;}

                        else if ( LA77_29 == Deleted && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 48;}

                        else if ( LA77_29 == DollarSignLeftCurlyBracketLeftCurlyBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 49;}

                        else if ( LA77_29 == RULE_STRING && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 50;}

                         
                        input.seek(index77_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_70s = "\1\5\13\uffff";
    static final String dfa_71s = "\1\26\2\uffff\2\0\7\uffff";
    static final String dfa_72s = "\1\u00ae\2\uffff\2\0\7\uffff";
    static final String dfa_73s = "\1\uffff\1\1\3\uffff\1\4\4\uffff\1\2\1\3";
    static final String dfa_74s = "\3\uffff\1\0\1\1\7\uffff}>";
    static final String[] dfa_75s = {
            "\1\1\6\uffff\1\5\34\uffff\1\1\76\uffff\1\5\3\uffff\1\5\51\uffff\1\3\5\uffff\1\5\1\4",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final char[] dfa_72 = DFA.unpackEncodedStringToUnsignedChars(dfa_72s);
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final short[][] dfa_75 = unpackEncodedStringArray(dfa_75s);

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = dfa_52;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "5170:11: ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_3 = input.LA(1);

                         
                        int index72_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA72_4 = input.LA(1);

                         
                        int index72_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_76s = "\1\35\6\0\3\uffff";
    static final String[] dfa_77s = {
            "\1\3\15\uffff\1\6\115\uffff\1\2\20\uffff\1\5\34\uffff\1\4\6\uffff\1\1",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final short[][] dfa_77 = unpackEncodedStringArray(dfa_77s);

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_76;
            this.max = dfa_59;
            this.accept = dfa_60;
            this.special = dfa_61;
            this.transition = dfa_77;
        }
        public String getDescription() {
            return "6549:3: ( (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_6= Branches | ( (lv_ignoreSpecifiedBranches_7_0= BranchesIgnore ) ) ) otherlv_8= Colon ( ( (lv_branches_9_0= ruleExpression ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_branches_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_branches_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_branches_20_0= ruleExpression ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Tags | ( (lv_ignoreSpecifiedTags_41_0= TagsIgnore ) ) ) otherlv_42= Colon ( ( (lv_tags_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_tags_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_tags_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_tags_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+ {...}?) ) ) ) | ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_58= Paths | ( (lv_ignoreSpecifiedPaths_59_0= PathsIgnore ) ) ) otherlv_60= Colon ( ( (lv_paths_61_0= ruleExpression ) ) this_NEWLINE_62= RULE_NEWLINE ) ) | (otherlv_63= LeftSquareBracket ( (lv_paths_64_0= ruleExpression ) ) (otherlv_65= Comma ( (lv_paths_66_0= ruleExpression ) ) )* otherlv_67= RightSquareBracket this_NEWLINE_68= RULE_NEWLINE ) | (this_NEWLINE_69= RULE_NEWLINE this_BEGIN_70= RULE_BEGIN (otherlv_71= HyphenMinus ( (lv_paths_72_0= ruleExpression ) ) this_NEWLINE_73= RULE_NEWLINE )+ this_END_74= RULE_END ) ) ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_92= Tags | ( (lv_ignoreSpecifiedTags_93_0= TagsIgnore ) ) ) otherlv_94= Colon ( ( (lv_tags_95_0= ruleExpression ) ) this_NEWLINE_96= RULE_NEWLINE ) ) | (otherlv_97= LeftSquareBracket ( (lv_tags_98_0= ruleExpression ) ) (otherlv_99= Comma ( (lv_tags_100_0= ruleExpression ) ) )* otherlv_101= RightSquareBracket this_NEWLINE_102= RULE_NEWLINE ) | (this_NEWLINE_103= RULE_NEWLINE this_BEGIN_104= RULE_BEGIN (otherlv_105= HyphenMinus ( (lv_tags_106_0= ruleExpression ) ) this_NEWLINE_107= RULE_NEWLINE )+ this_END_108= RULE_END ) ) ) ) ) )+ {...}?) ) ) | ( ( ( ( ( ({...}? => ( ({...}? => ( ( ( (otherlv_110= Tags | ( (lv_ignoreSpecifiedTags_111_0= TagsIgnore ) ) ) otherlv_112= Colon ( ( (lv_tags_113_0= ruleExpression ) ) this_NEWLINE_114= RULE_NEWLINE ) ) | (otherlv_115= LeftSquareBracket ( (lv_tags_116_0= ruleExpression ) ) (otherlv_117= Comma ( (lv_tags_118_0= ruleExpression ) ) )* otherlv_119= RightSquareBracket this_NEWLINE_120= RULE_NEWLINE ) | (this_NEWLINE_121= RULE_NEWLINE this_BEGIN_122= RULE_BEGIN (otherlv_123= HyphenMinus ( (lv_tags_124_0= ruleExpression ) ) this_NEWLINE_125= RULE_NEWLINE )+ this_END_126= RULE_END ) ) ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_144= Paths | ( (lv_ignoreSpecifiedPaths_145_0= PathsIgnore ) ) ) otherlv_146= Colon ( ( (lv_paths_147_0= ruleExpression ) ) this_NEWLINE_148= RULE_NEWLINE ) ) | (otherlv_149= LeftSquareBracket ( (lv_paths_150_0= ruleExpression ) ) (otherlv_151= Comma ( (lv_paths_152_0= ruleExpression ) ) )* otherlv_153= RightSquareBracket this_NEWLINE_154= RULE_NEWLINE ) | (this_NEWLINE_155= RULE_NEWLINE this_BEGIN_156= RULE_BEGIN (otherlv_157= HyphenMinus ( (lv_paths_158_0= ruleExpression ) ) this_NEWLINE_159= RULE_NEWLINE )+ this_END_160= RULE_END ) ) ) ) ) )+ {...}?) ) ) this_END_161= RULE_END ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA142_1 = input.LA(1);

                         
                        int index142_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_InternalGitHubActionsParser()) ) {s = 7;}

                        else if ( (synpred229_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index142_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA142_2 = input.LA(1);

                         
                        int index142_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index142_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA142_3 = input.LA(1);

                         
                        int index142_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index142_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA142_4 = input.LA(1);

                         
                        int index142_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index142_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA142_5 = input.LA(1);

                         
                        int index142_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index142_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA142_6 = input.LA(1);

                         
                        int index142_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalGitHubActionsParser()) ) {s = 8;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index142_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 142, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_78s = "\1\5\14\uffff";
    static final String dfa_79s = "\1\26\2\uffff\2\0\10\uffff";
    static final String dfa_80s = "\1\u00ae\2\uffff\2\0\10\uffff";
    static final String dfa_81s = "\1\uffff\1\1\3\uffff\1\4\5\uffff\1\2\1\3";
    static final String dfa_82s = "\3\uffff\1\0\1\1\10\uffff}>";
    static final String[] dfa_83s = {
            "\1\5\6\uffff\1\1\15\uffff\1\5\16\uffff\1\5\76\uffff\1\1\20\uffff\1\5\34\uffff\1\3\5\uffff\1\5\1\4",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = dfa_33;
            this.eof = dfa_78;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "6728:11: ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_3 = input.LA(1);

                         
                        int index110_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index110_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA110_4 = input.LA(1);

                         
                        int index110_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index110_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_84s = {
            "\1\1\6\uffff\1\5\15\uffff\1\5\16\uffff\1\1\76\uffff\1\5\20\uffff\1\5\34\uffff\1\3\5\uffff\1\5\1\4",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_84 = unpackEncodedStringArray(dfa_84s);

    class DFA123 extends DFA {

        public DFA123(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 123;
            this.eot = dfa_33;
            this.eof = dfa_78;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_84;
        }
        public String getDescription() {
            return "7236:10: ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA123_3 = input.LA(1);

                         
                        int index123_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA123_4 = input.LA(1);

                         
                        int index123_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalGitHubActionsParser()) ) {s = 12;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index123_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 123, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_85s = {
            "\1\1\6\uffff\1\5\15\uffff\1\5\16\uffff\1\1\76\uffff\1\5\20\uffff\1\5\34\uffff\1\3\5\uffff\1\5\1\4",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_85 = unpackEncodedStringArray(dfa_85s);

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = dfa_52;
            this.eof = dfa_52;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_85;
        }
        public String getDescription() {
            return "7744:11: ( ( (otherlv_127= Branches | ( (lv_ignoreSpecifiedBranches_128_0= BranchesIgnore ) ) ) otherlv_129= Colon ( ( (lv_branches_130_0= ruleExpression ) ) this_NEWLINE_131= RULE_NEWLINE ) ) | (otherlv_132= LeftSquareBracket ( (lv_branches_133_0= ruleExpression ) ) (otherlv_134= Comma ( (lv_branches_135_0= ruleExpression ) ) )* otherlv_136= RightSquareBracket this_NEWLINE_137= RULE_NEWLINE ) | (this_NEWLINE_138= RULE_NEWLINE this_BEGIN_139= RULE_BEGIN (otherlv_140= HyphenMinus ( (lv_branches_141_0= ruleExpression ) ) this_NEWLINE_142= RULE_NEWLINE )+ this_END_143= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_3 = input.LA(1);

                         
                        int index136_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index136_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_4 = input.LA(1);

                         
                        int index136_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index136_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_86s = "\16\uffff";
    static final String dfa_87s = "\1\1\15\uffff";
    static final String dfa_88s = "\1\105\1\uffff\7\0\5\uffff";
    static final String dfa_89s = "\1\u00b0\1\uffff\7\0\5\uffff";
    static final String dfa_90s = "\1\uffff\1\6\7\uffff\1\1\1\2\1\3\1\4\1\5";
    static final String dfa_91s = "\2\uffff\1\0\1\6\1\1\1\4\1\2\1\3\1\5\5\uffff}>";
    static final String[] dfa_92s = {
            "\1\4\12\uffff\1\3\5\uffff\1\6\64\uffff\1\5\33\uffff\1\7\5\uffff\1\1\1\10\1\uffff\1\2",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_86 = DFA.unpackEncodedString(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final char[] dfa_88 = DFA.unpackEncodedStringToUnsignedChars(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final short[][] dfa_92 = unpackEncodedStringArray(dfa_92s);

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = dfa_86;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "()+ loopback of 8840:5: ( ({...}? => ( ({...}? => ( ( (lv_id_1_0= RULE_ID ) ) otherlv_2= Colon this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Default otherlv_10= Colon ( (lv_default_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Required otherlv_14= Colon ( (lv_isRequired_15_0= ruleExpression ) ) this_NEWLINE_16= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Type otherlv_18= Colon ( (lv_type_19_0= ruleTYPE ) ) this_NEWLINE_20= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_21= Options otherlv_22= Colon ( ( (lv_options_23_0= RULE_STRING ) ) this_NEWLINE_24= RULE_NEWLINE ) ) | (otherlv_25= LeftSquareBracket ( (lv_options_26_0= RULE_STRING ) ) (otherlv_27= Comma ( (lv_options_28_0= RULE_STRING ) ) )* otherlv_29= RightSquareBracket this_NEWLINE_30= RULE_NEWLINE ) | (this_NEWLINE_31= RULE_NEWLINE this_BEGIN_32= RULE_BEGIN (otherlv_33= HyphenMinus ( (lv_options_34_0= RULE_STRING ) ) this_NEWLINE_35= RULE_NEWLINE )+ this_END_36= RULE_END ) ) this_END_37= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_2 = input.LA(1);

                         
                        int index165_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred271_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0) ) {s = 9;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index165_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA165_4 = input.LA(1);

                         
                        int index165_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred273_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2) ) {s = 11;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index165_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA165_6 = input.LA(1);

                         
                        int index165_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred279_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {s = 13;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index165_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA165_7 = input.LA(1);

                         
                        int index165_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred279_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {s = 13;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index165_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA165_5 = input.LA(1);

                         
                        int index165_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred274_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3) ) {s = 12;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index165_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA165_8 = input.LA(1);

                         
                        int index165_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred279_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {s = 13;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index165_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA165_3 = input.LA(1);

                         
                        int index165_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred272_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1) ) {s = 10;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index165_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_93s = "\37\uffff";
    static final String dfa_94s = "\1\2\36\uffff";
    static final String dfa_95s = "\1\17\1\0\3\uffff\2\0\4\uffff\1\0\14\uffff\1\0\6\uffff";
    static final String dfa_96s = "\1\u00b0\1\0\3\uffff\2\0\4\uffff\1\0\14\uffff\1\0\6\uffff";
    static final String dfa_97s = "\2\uffff\1\7\24\uffff\1\3\1\uffff\1\4\1\5\2\6\1\1\1\2";
    static final String dfa_98s = "\1\0\1\1\3\uffff\1\2\1\3\4\uffff\1\4\14\uffff\1\5\6\uffff}>";
    static final String[] dfa_99s = {
            "\1\2\10\uffff\1\2\11\uffff\1\2\1\33\3\uffff\1\2\1\uffff\1\2\12\uffff\1\2\10\uffff\1\2\5\uffff\1\34\4\uffff\1\2\1\uffff\1\2\13\uffff\1\32\3\uffff\2\2\1\uffff\1\31\31\uffff\1\2\2\uffff\1\27\1\uffff\1\2\17\uffff\1\2\1\uffff\1\2\1\uffff\1\13\11\uffff\1\2\14\uffff\1\5\4\uffff\1\30\1\1\1\6\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final char[] dfa_95 = DFA.unpackEncodedStringToUnsignedChars(dfa_95s);
    static final char[] dfa_96 = DFA.unpackEncodedStringToUnsignedChars(dfa_96s);
    static final short[] dfa_97 = DFA.unpackEncodedString(dfa_97s);
    static final short[] dfa_98 = DFA.unpackEncodedString(dfa_98s);
    static final short[][] dfa_99 = unpackEncodedStringArray(dfa_99s);

    class DFA190 extends DFA {

        public DFA190(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 190;
            this.eot = dfa_93;
            this.eof = dfa_94;
            this.min = dfa_95;
            this.max = dfa_96;
            this.accept = dfa_97;
            this.special = dfa_98;
            this.transition = dfa_99;
        }
        public String getDescription() {
            return "()+ loopback of 10582:6: ( ({...}? => ( ({...}? => (this_NEWLINE_3= RULE_NEWLINE this_BEGIN_4= RULE_BEGIN (otherlv_5= Image otherlv_6= Colon ( (lv_image_7_0= ruleExpression ) ) this_NEWLINE_8= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Env otherlv_10= Colon this_BEGIN_11= RULE_BEGIN ( (lv_environmentVariables_12_0= ruleVariableAssignment ) )+ this_END_13= RULE_END ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_14= Ports otherlv_15= Colon ( ( (lv_ports_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE ) ) | (otherlv_18= LeftSquareBracket ( (lv_ports_19_0= ruleExpression ) ) (otherlv_20= Comma ( (lv_ports_21_0= ruleExpression ) ) )* otherlv_22= RightSquareBracket this_NEWLINE_23= RULE_NEWLINE ) | (this_BEGIN_24= RULE_BEGIN (otherlv_25= HyphenMinus ( (lv_ports_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE )+ this_END_28= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_29= Volumes otherlv_30= Colon ( ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE ) ) | (otherlv_33= LeftSquareBracket ( (lv_volumes_34_0= ruleExpression ) ) (otherlv_35= Comma ( (lv_volumes_36_0= ruleExpression ) ) )* otherlv_37= RightSquareBracket this_NEWLINE_38= RULE_NEWLINE ) | (this_BEGIN_39= RULE_BEGIN (otherlv_40= HyphenMinus ( (lv_volumes_41_0= ruleExpression ) ) this_NEWLINE_42= RULE_NEWLINE )+ this_END_43= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Options otherlv_45= Colon ( (lv_options_46_0= ruleExpression ) ) this_NEWLINE_47= RULE_NEWLINE ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_49= Credentials otherlv_50= Colon this_BEGIN_51= RULE_BEGIN (otherlv_52= Username otherlv_53= Colon ( (lv_username_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_56= Password otherlv_57= Colon ( (lv_password_58_0= ruleExpression ) ) this_NEWLINE_59= RULE_NEWLINE ) this_END_60= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_61= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA190_0 = input.LA(1);

                         
                        int index190_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA190_0==RULE_END) ) {s = 1;}

                        else if ( (LA190_0==EOF||LA190_0==ContinueOnError||LA190_0==TimeoutMinutes||LA190_0==Concurrency||LA190_0==Environment||LA190_0==Permissions||LA190_0==Container||LA190_0==Defaults||LA190_0==Services||LA190_0==Strategy||(LA190_0>=RunsOn && LA190_0<=Secrets)||LA190_0==Needs||LA190_0==Steps||LA190_0==Uses||LA190_0==With||LA190_0==If||LA190_0==RULE_ID) ) {s = 2;}

                        else if ( (LA190_0==LeftSquareBracket) ) {s = 5;}

                        else if ( (LA190_0==RULE_NEWLINE) ) {s = 6;}

                        else if ( (LA190_0==Env) ) {s = 11;}

                        else if ( LA190_0 == Ports && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2) ) {s = 23;}

                        else if ( (LA190_0==RULE_BEGIN) ) {s = 24;}

                        else if ( LA190_0 == Volumes && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3) ) {s = 25;}

                        else if ( LA190_0 == Options && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 4) ) {s = 26;}

                        else if ( LA190_0 == Credentials && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5) ) {s = 27;}

                        else if ( LA190_0 == Password && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5) ) {s = 28;}

                         
                        input.seek(index190_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA190_1 = input.LA(1);

                         
                        int index190_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred322_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 5) ) {s = 28;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1()) ) {s = 2;}

                         
                        input.seek(index190_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA190_5 = input.LA(1);

                         
                        int index190_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred312_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2) ) {s = 23;}

                        else if ( synpred317_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3) ) {s = 25;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1()) ) {s = 2;}

                         
                        input.seek(index190_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA190_6 = input.LA(1);

                         
                        int index190_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred305_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 0) ) {s = 29;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1()) ) {s = 2;}

                         
                        input.seek(index190_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA190_11 = input.LA(1);

                         
                        int index190_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred307_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 1) ) {s = 30;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_1()) ) {s = 2;}

                         
                        input.seek(index190_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA190_24 = input.LA(1);

                         
                        int index190_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred312_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 2) ) {s = 23;}

                        else if ( synpred317_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_1(), 3) ) {s = 25;}

                         
                        input.seek(index190_24);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 190, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_100s = "\1\uffff\1\3\1\1\2\uffff\2\2\23\1\2\2\2\uffff\2\2\23\1";
    static final String dfa_101s = "\1\0\2\uffff\1\2\31\uffff\1\1\25\uffff}>";
    static final String[] dfa_102s = {
            "\1\6\133\uffff\1\5\3\uffff\1\2\51\uffff\1\3\6\uffff\1\4",
            "",
            "",
            "\1\22\1\10\4\uffff\1\11\1\uffff\1\13\4\uffff\1\20\1\uffff\1\23\24\uffff\1\24\6\uffff\1\25\6\uffff\1\26\1\7\12\uffff\1\21\6\uffff\1\27\3\uffff\1\30\1\uffff\1\31\3\uffff\1\15\13\uffff\1\12\2\uffff\1\14\6\uffff\1\16\2\uffff\1\17\40\uffff\1\32\41\uffff\1\33",
            "\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35",
            "\1\53\1\41\4\uffff\1\42\1\uffff\1\44\4\uffff\1\51\1\uffff\1\54\24\uffff\1\55\6\uffff\1\56\6\uffff\1\57\1\40\12\uffff\1\52\6\uffff\1\60\3\uffff\1\61\1\uffff\1\62\3\uffff\1\46\13\uffff\1\43\2\uffff\1\45\6\uffff\1\47\2\uffff\1\50\40\uffff\1\36\41\uffff\1\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[] dfa_101 = DFA.unpackEncodedString(dfa_101s);
    static final short[][] dfa_102 = unpackEncodedStringArray(dfa_102s);

    class DFA295 extends DFA {

        public DFA295(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 295;
            this.eot = dfa_63;
            this.eof = dfa_64;
            this.min = dfa_65;
            this.max = dfa_66;
            this.accept = dfa_100;
            this.special = dfa_101;
            this.transition = dfa_102;
        }
        public String getDescription() {
            return "()+ loopback of 5024:8: ( ({...}? => ( ({...}? => ( ( (otherlv_7= Types otherlv_8= Colon ( ( (lv_eventTypes_9_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_10= RULE_NEWLINE ) ) | (otherlv_11= LeftSquareBracket ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_13= Comma ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_15= RightSquareBracket this_NEWLINE_16= RULE_NEWLINE ) | (this_NEWLINE_17= RULE_NEWLINE this_BEGIN_18= RULE_BEGIN (otherlv_19= HyphenMinus ( (lv_eventTypes_20_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_21= RULE_NEWLINE )+ this_END_22= RULE_END ) ) ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_40= Paths | ( (lv_ignoreSpecifiedPaths_41_0= PathsIgnore ) ) ) otherlv_42= Colon ( ( (lv_paths_43_0= ruleExpression ) ) this_NEWLINE_44= RULE_NEWLINE ) ) | (otherlv_45= LeftSquareBracket ( (lv_paths_46_0= ruleExpression ) ) (otherlv_47= Comma ( (lv_paths_48_0= ruleExpression ) ) )* otherlv_49= RightSquareBracket this_NEWLINE_50= RULE_NEWLINE ) | (this_NEWLINE_51= RULE_NEWLINE this_BEGIN_52= RULE_BEGIN (otherlv_53= HyphenMinus ( (lv_paths_54_0= ruleExpression ) ) this_NEWLINE_55= RULE_NEWLINE )+ this_END_56= RULE_END ) ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA295_0 = input.LA(1);

                         
                        int index295_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA295_0==EOF) ) {s = 1;}

                        else if ( LA295_0 == Types && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 2;}

                        else if ( (LA295_0==LeftSquareBracket) ) {s = 3;}

                        else if ( (LA295_0==RULE_NEWLINE) ) {s = 4;}

                        else if ( LA295_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 5;}

                        else if ( LA295_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 6;}

                         
                        input.seek(index295_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA295_29 = input.LA(1);

                         
                        int index295_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA295_29 == DollarSignLeftCurlyBracketLeftCurlyBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 30;}

                        else if ( LA295_29 == RULE_STRING && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 31;}

                        else if ( LA295_29 == Assigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 32;}

                        else if ( LA295_29 == Auto_merge_disabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 33;}

                        else if ( LA295_29 == Auto_merge_enabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 34;}

                        else if ( LA295_29 == Closed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 35;}

                        else if ( LA295_29 == Converted_to_draft && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 36;}

                        else if ( LA295_29 == Edited && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 37;}

                        else if ( LA295_29 == Labeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 38;}

                        else if ( LA295_29 == Locked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 39;}

                        else if ( LA295_29 == Opened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 40;}

                        else if ( LA295_29 == Ready_for_review && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 41;}

                        else if ( LA295_29 == Reopened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 42;}

                        else if ( LA295_29 == Review_request_removed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 43;}

                        else if ( LA295_29 == Review_requested && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 44;}

                        else if ( LA295_29 == Synchronize && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 45;}

                        else if ( LA295_29 == Unassigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 46;}

                        else if ( LA295_29 == Unlabeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 47;}

                        else if ( LA295_29 == Unlocked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 48;}

                        else if ( LA295_29 == Created && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 49;}

                        else if ( LA295_29 == Deleted && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 50;}

                         
                        input.seek(index295_29);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA295_3 = input.LA(1);

                         
                        int index295_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA295_3 == Assigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 7;}

                        else if ( LA295_3 == Auto_merge_disabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 8;}

                        else if ( LA295_3 == Auto_merge_enabled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 9;}

                        else if ( LA295_3 == Closed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 10;}

                        else if ( LA295_3 == Converted_to_draft && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 11;}

                        else if ( LA295_3 == Edited && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 12;}

                        else if ( LA295_3 == Labeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 13;}

                        else if ( LA295_3 == Locked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 14;}

                        else if ( LA295_3 == Opened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 15;}

                        else if ( LA295_3 == Ready_for_review && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 16;}

                        else if ( LA295_3 == Reopened && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 17;}

                        else if ( LA295_3 == Review_request_removed && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 18;}

                        else if ( LA295_3 == Review_requested && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 19;}

                        else if ( LA295_3 == Synchronize && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 20;}

                        else if ( LA295_3 == Unassigned && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 21;}

                        else if ( LA295_3 == Unlabeled && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 22;}

                        else if ( LA295_3 == Unlocked && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 23;}

                        else if ( LA295_3 == Created && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 24;}

                        else if ( LA295_3 == Deleted && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 25;}

                        else if ( LA295_3 == DollarSignLeftCurlyBracketLeftCurlyBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 26;}

                        else if ( LA295_3 == RULE_STRING && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 27;}

                         
                        input.seek(index295_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 295, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_103s = "\1\5\12\uffff";
    static final String dfa_104s = "\1\26\2\uffff\2\0\6\uffff";
    static final String dfa_105s = "\1\u00ae\2\uffff\2\0\6\uffff";
    static final String dfa_106s = "\1\uffff\1\1\3\uffff\3\4\1\uffff\1\2\1\3";
    static final String dfa_107s = "\1\0\2\uffff\1\1\1\2\6\uffff}>";
    static final String[] dfa_108s = {
            "\1\1\6\uffff\1\7\34\uffff\1\1\76\uffff\1\7\3\uffff\1\6\51\uffff\1\3\6\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[][] dfa_108 = unpackEncodedStringArray(dfa_108s);

    class DFA290 extends DFA {

        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = dfa_39;
            this.eof = dfa_103;
            this.min = dfa_104;
            this.max = dfa_105;
            this.accept = dfa_106;
            this.special = dfa_107;
            this.transition = dfa_108;
        }
        public String getDescription() {
            return "5170:11: ( ( (otherlv_23= Branches | ( (lv_ignoreSpecifiedBranches_24_0= BranchesIgnore ) ) ) otherlv_25= Colon ( ( (lv_branches_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_branches_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_branches_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_branches_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA290_0 = input.LA(1);

                         
                        int index290_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA290_0==BranchesIgnore||LA290_0==Branches) ) {s = 1;}

                        else if ( (LA290_0==LeftSquareBracket) ) {s = 3;}

                        else if ( (LA290_0==RULE_NEWLINE) ) {s = 4;}

                        else if ( (LA290_0==EOF) ) {s = 5;}

                        else if ( LA290_0 == Types && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 6;}

                        else if ( ( LA290_0 == PathsIgnore || LA290_0 == Paths ) && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 7;}

                         
                        input.seek(index290_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA290_3 = input.LA(1);

                         
                        int index290_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred146_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 7;}

                         
                        input.seek(index290_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA290_4 = input.LA(1);

                         
                        int index290_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 7;}

                         
                        input.seek(index290_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 290, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_109s = "\17\uffff";
    static final String dfa_110s = "\1\4\16\uffff";
    static final String dfa_111s = "\1\26\1\uffff\1\6\1\u00ac\6\uffff\1\u00a2\1\6\3\uffff";
    static final String dfa_112s = "\1\u00ae\1\uffff\1\u00b1\1\u00ac\6\uffff\1\u00a2\1\u00b1\3\uffff";
    static final String dfa_113s = "\1\uffff\1\1\2\uffff\5\4\1\2\2\uffff\1\3\2\4";
    static final String dfa_114s = "\1\0\1\uffff\1\2\10\uffff\1\1\3\uffff}>";
    static final String[] dfa_115s = {
            "\1\5\6\uffff\1\6\34\uffff\1\5\76\uffff\1\6\3\uffff\1\1\51\uffff\1\2\6\uffff\1\3",
            "",
            "\2\11\4\uffff\1\11\1\uffff\1\11\4\uffff\1\11\1\uffff\1\11\24\uffff\1\11\6\uffff\1\11\6\uffff\2\11\12\uffff\1\11\6\uffff\1\11\3\uffff\1\11\1\uffff\1\11\3\uffff\1\11\13\uffff\1\11\2\uffff\1\11\6\uffff\1\11\2\uffff\1\11\40\uffff\1\7\41\uffff\1\10",
            "\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13",
            "\2\14\4\uffff\1\14\1\uffff\1\14\4\uffff\1\14\1\uffff\1\14\24\uffff\1\14\6\uffff\1\14\6\uffff\2\14\12\uffff\1\14\6\uffff\1\14\3\uffff\1\14\1\uffff\1\14\3\uffff\1\14\13\uffff\1\14\2\uffff\1\14\6\uffff\1\14\2\uffff\1\14\40\uffff\1\15\41\uffff\1\16",
            "",
            "",
            ""
    };

    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final short[] dfa_110 = DFA.unpackEncodedString(dfa_110s);
    static final char[] dfa_111 = DFA.unpackEncodedStringToUnsignedChars(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final short[][] dfa_115 = unpackEncodedStringArray(dfa_115s);

    class DFA319 extends DFA {

        public DFA319(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 319;
            this.eot = dfa_109;
            this.eof = dfa_110;
            this.min = dfa_111;
            this.max = dfa_112;
            this.accept = dfa_113;
            this.special = dfa_114;
            this.transition = dfa_115;
        }
        public String getDescription() {
            return "5678:10: ( (otherlv_75= Types otherlv_76= Colon ( ( (lv_eventTypes_77_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_78= RULE_NEWLINE ) ) | (otherlv_79= LeftSquareBracket ( (lv_eventTypes_80_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_81= Comma ( (lv_eventTypes_82_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_83= RightSquareBracket this_NEWLINE_84= RULE_NEWLINE ) | (this_NEWLINE_85= RULE_NEWLINE this_BEGIN_86= RULE_BEGIN (otherlv_87= HyphenMinus ( (lv_eventTypes_88_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_89= RULE_NEWLINE )+ this_END_90= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA319_0 = input.LA(1);

                         
                        int index319_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA319_0==Types) ) {s = 1;}

                        else if ( (LA319_0==LeftSquareBracket) ) {s = 2;}

                        else if ( (LA319_0==RULE_NEWLINE) ) {s = 3;}

                        else if ( (LA319_0==EOF) ) {s = 4;}

                        else if ( ( LA319_0 == BranchesIgnore || LA319_0 == Branches ) && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) {s = 5;}

                        else if ( ( LA319_0 == PathsIgnore || LA319_0 == Paths ) && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) ) {s = 6;}

                         
                        input.seek(index319_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA319_11 = input.LA(1);

                         
                        int index319_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA319_11>=Review_request_removed && LA319_11<=Auto_merge_disabled)||LA319_11==Auto_merge_enabled||LA319_11==Converted_to_draft||LA319_11==Ready_for_review||LA319_11==Review_requested||LA319_11==Synchronize||LA319_11==Unassigned||(LA319_11>=Unlabeled && LA319_11<=Assigned)||LA319_11==Reopened||LA319_11==Unlocked||LA319_11==Created||LA319_11==Deleted||LA319_11==Labeled||LA319_11==Closed||LA319_11==Edited||LA319_11==Locked||LA319_11==Opened) ) {s = 12;}

                        else if ( LA319_11 == DollarSignLeftCurlyBracketLeftCurlyBracket && ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) ) {s = 13;}

                        else if ( LA319_11 == RULE_STRING && ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) ) {s = 14;}

                         
                        input.seek(index319_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA319_2 = input.LA(1);

                         
                        int index319_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA319_2 == DollarSignLeftCurlyBracketLeftCurlyBracket && ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) ) {s = 7;}

                        else if ( LA319_2 == RULE_STRING && ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3_1(), 0) ) ) {s = 8;}

                        else if ( ((LA319_2>=Review_request_removed && LA319_2<=Auto_merge_disabled)||LA319_2==Auto_merge_enabled||LA319_2==Converted_to_draft||LA319_2==Ready_for_review||LA319_2==Review_requested||LA319_2==Synchronize||LA319_2==Unassigned||(LA319_2>=Unlabeled && LA319_2<=Assigned)||LA319_2==Reopened||LA319_2==Unlocked||LA319_2==Created||LA319_2==Deleted||LA319_2==Labeled||LA319_2==Closed||LA319_2==Edited||LA319_2==Locked||LA319_2==Opened) ) {s = 9;}

                         
                        input.seek(index319_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 319, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_116s = "\1\uffff\1\1\3\uffff\2\4\1\uffff\1\4\1\uffff\1\2\1\3";
    static final String dfa_117s = "\1\0\2\uffff\1\1\1\2\7\uffff}>";
    static final String[] dfa_118s = {
            "\1\6\6\uffff\1\1\15\uffff\1\10\16\uffff\1\6\76\uffff\1\1\20\uffff\1\10\34\uffff\1\3\6\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_116 = DFA.unpackEncodedString(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[][] dfa_118 = unpackEncodedStringArray(dfa_118s);

    class DFA368 extends DFA {

        public DFA368(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 368;
            this.eot = dfa_52;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_116;
            this.special = dfa_117;
            this.transition = dfa_118;
        }
        public String getDescription() {
            return "6728:11: ( ( (otherlv_23= Paths | ( (lv_ignoreSpecifiedPaths_24_0= PathsIgnore ) ) ) otherlv_25= Colon ( ( (lv_paths_26_0= ruleExpression ) ) this_NEWLINE_27= RULE_NEWLINE ) ) | (otherlv_28= LeftSquareBracket ( (lv_paths_29_0= ruleExpression ) ) (otherlv_30= Comma ( (lv_paths_31_0= ruleExpression ) ) )* otherlv_32= RightSquareBracket this_NEWLINE_33= RULE_NEWLINE ) | (this_NEWLINE_34= RULE_NEWLINE this_BEGIN_35= RULE_BEGIN (otherlv_36= HyphenMinus ( (lv_paths_37_0= ruleExpression ) ) this_NEWLINE_38= RULE_NEWLINE )+ this_END_39= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA368_0 = input.LA(1);

                         
                        int index368_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA368_0==PathsIgnore||LA368_0==Paths) ) {s = 1;}

                        else if ( (LA368_0==LeftSquareBracket) ) {s = 3;}

                        else if ( (LA368_0==RULE_NEWLINE) ) {s = 4;}

                        else if ( (LA368_0==EOF) ) {s = 5;}

                        else if ( ( LA368_0 == BranchesIgnore || LA368_0 == Branches ) && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) ) {s = 6;}

                        else if ( ( LA368_0 == TagsIgnore || LA368_0 == Tags ) && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 8;}

                         
                        input.seek(index368_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA368_3 = input.LA(1);

                         
                        int index368_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred200_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 8;}

                         
                        input.seek(index368_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA368_4 = input.LA(1);

                         
                        int index368_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred202_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 0) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_0_2(), 1) ) {s = 8;}

                         
                        input.seek(index368_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 368, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_119s = {
            "\1\1\6\uffff\1\6\15\uffff\1\10\16\uffff\1\1\76\uffff\1\6\20\uffff\1\10\34\uffff\1\3\6\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_119 = unpackEncodedStringArray(dfa_119s);

    class DFA400 extends DFA {

        public DFA400(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 400;
            this.eot = dfa_52;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_116;
            this.special = dfa_117;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "7236:10: ( ( (otherlv_75= Branches | ( (lv_ignoreSpecifiedBranches_76_0= BranchesIgnore ) ) ) otherlv_77= Colon ( ( (lv_branches_78_0= ruleExpression ) ) this_NEWLINE_79= RULE_NEWLINE ) ) | (otherlv_80= LeftSquareBracket ( (lv_branches_81_0= ruleExpression ) ) (otherlv_82= Comma ( (lv_branches_83_0= ruleExpression ) ) )* otherlv_84= RightSquareBracket this_NEWLINE_85= RULE_NEWLINE ) | (this_NEWLINE_86= RULE_NEWLINE this_BEGIN_87= RULE_BEGIN (otherlv_88= HyphenMinus ( (lv_branches_89_0= ruleExpression ) ) this_NEWLINE_90= RULE_NEWLINE )+ this_END_91= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA400_0 = input.LA(1);

                         
                        int index400_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA400_0==BranchesIgnore||LA400_0==Branches) ) {s = 1;}

                        else if ( (LA400_0==LeftSquareBracket) ) {s = 3;}

                        else if ( (LA400_0==RULE_NEWLINE) ) {s = 4;}

                        else if ( (LA400_0==EOF) ) {s = 5;}

                        else if ( ( LA400_0 == PathsIgnore || LA400_0 == Paths ) && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {s = 6;}

                        else if ( ( LA400_0 == TagsIgnore || LA400_0 == Tags ) && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) ) {s = 8;}

                         
                        input.seek(index400_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA400_3 = input.LA(1);

                         
                        int index400_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {s = 8;}

                         
                        input.seek(index400_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA400_4 = input.LA(1);

                         
                        int index400_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred221_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 1) || getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3_1(), 0) ) {s = 8;}

                         
                        input.seek(index400_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 400, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000008000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x2000020400000000L,0x0000000000000040L,0x0000800008010050L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0088B102CA130730L,0x8042828C03000000L,0x0000408000000108L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0088B102CA130730L,0x8042828C03000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010200000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200400000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x2088B306CA130730L,0x8042828C03000040L,0x0000C08008010158L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x1000005004800800L,0x0100020080002205L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x1000005004800800L,0x0100020080002205L,0x0000200000000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001200000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000002000L,0x0010000000000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x2010028401008000L,0x108000000C000500L,0x0001608004015000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x2010028401008002L,0x1080000004000500L,0x0001608004010040L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x2010028401008002L,0x1080000004000500L,0x0001608004010000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L,0x0002408000008000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002400000008000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0020000010000000L,0x0000100000040000L,0x0000100000000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000800000000L,0x0400000020400008L,0x0002708000018000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x2010028401008002L,0x008000000C000500L,0x0001608004015040L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x2010028401008002L,0x008000000C000500L,0x0001608004015000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000400000000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L,0x0000608000000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000001048000L,0x0800000000000000L,0x0001000006055040L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000001048002L,0x0800000000000000L,0x0000000006050040L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000001048002L,0x0800000000000000L,0x0001000006015040L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000400001048002L,0x0800000000000000L,0x0001000006015042L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000002002L,0x0010000000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0088B103CA130730L,0x8042828C03000080L,0x0000408000000108L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x03020400002850C0L,0x0000481200228810L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0400000000400000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0400000020400000L,0x0200000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000020000000L,0x2200000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0400000020400002L,0x2200000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000020000002L,0x2200000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0400000020400002L,0x0200000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0400000020400000L,0x2200000000000000L,0x0000608000000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0400000020400000L,0x0200000000000000L,0x0000608000000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000080020000000L,0x0200000000000000L,0x0000408000000400L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0400080000400000L,0x0000000000000000L,0x0000408000000400L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0400080020400002L,0x0200000000000000L,0x0000408000000400L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0400080000400002L,0x0000000000000000L,0x0000408000000400L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000080020000002L,0x0200000000000000L,0x0000408000000400L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0400080020400000L,0x0200000000000000L,0x0000608000000400L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000080020000000L,0x0200000000000000L,0x0000608000000400L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000000008800000L,0x0000400000000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000010008000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000000410020L,0x0001408000000800L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000000410020L,0x0001608000000800L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000002L,0x0000010008800000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0001200000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000002L,0x0000010008000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000020L,0x0001000000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000020L,0x0001200000000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000002L,0x0000000008800000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000010008800000L,0x0000200000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000000008800000L,0x0000200000000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000002000000002L,0x0000000000410020L,0x0001408000000800L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000002L,0x0000000000410020L,0x0001408000000800L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000008000000000L,0x0004200100004000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000002000000002L,0x4000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000020L,0x0000200000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000281L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000040000L,0x0800000000000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000040000L,0x0800000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000080000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0020000010000002L,0x0000100000040002L,0x0000100000000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0020000010000002L,0x0000100000040000L,0x0000100000000000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002408000008000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000800000002L,0x0400000020400008L,0x0000708000010000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L,0x0000200000000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000008000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0xC845000000000000L,0x1089116058080400L,0x00030E00C0032030L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000900000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000006001400000L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0088B102CA130732L,0x8042828C03000000L,0x0000408000000108L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0400000000400002L,0x0000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000020000002L,0x0200000000000000L,0x0000408000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000100000040002L,0x0000100000000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000100000040000L,0x0000100000000000L});

}
