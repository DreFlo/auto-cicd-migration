package d.fe.up.pt.cicd.gha.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.IUnorderedGroupHelper.UnorderedGroupState;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import d.fe.up.pt.cicd.gha.services.GitHubActionsGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalGitHubActionsParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Pull_request_review_comment", "Branch_protection_rule", "Review_request_removed", "Auto_merge_disabled", "Pull_request_review", "Pull_request_target", "Repository_dispatch", "Repository_projects", "Auto_merge_enabled", "CancelInProgress", "Converted_to_draft", "ContinueOnError", "Deployment_status", "Workflow_dispatch", "WorkingDirectory", "Ready_for_review", "Registry_package", "Review_requested", "BranchesIgnore", "Security_events", "TimeoutMinutes", "Project_column", "Pull_requests", "Workflow_call", "MaxParalell", "PathsIgnore", "Project_card", "Pull_request", "Workflow_run", "Check_suite", "Concurrency", "Credentials", "Deployments", "Description", "Discussions", "Environment", "Merge_group", "Permissions", "Synchronize", "TagsIgnore", "Deployment", "Discussion", "Entrypoint", "Page_build", "StartsWith", "Unassigned", "Cancelled", "Check_run", "Container", "FailFast", "HashFiles", "Milestone", "Unlabeled", "Assigned", "Branches", "Contains", "Contents", "Defaults", "EndsWith", "FromJSON", "IdToken", "Includes", "Packages", "Password", "Reopened", "Required", "RunName", "Schedule", "Services", "Statuses", "Strategy", "Unlocked", "Username", "Actions", "Boolean", "Created", "Default", "Deleted", "Exludes", "Failure", "Inherit", "Labeled", "Options", "Outputs", "Project", "Release", "RunsOn", "Secrets", "Success", "Volumes", "Always", "Checks", "Choice", "Closed", "Create", "Delete", "Edited", "Format", "Github", "Gollum", "Inputs", "Issues", "Labels", "Locked", "Matrix", "Number", "Opened", "Public", "Runner", "Status", "String", "ToJSON", "Group", "Image", "Label", "Needs", "Pages", "Paths", "Ports", "Shell", "Steps", "Types", "Value", "Watch", "Write", "Args", "Cron", "Fork", "Jobs", "Join", "Name", "None", "Push", "Read", "Tags", "Type", "Uses", "Vars", "With", "DollarSignLeftCurlyBracketLeftCurlyBracket", "Env", "Job", "Run", "Url", "ExclamationMarkEqualsSign", "AmpersandAmpersand", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "GreaterThanSignEqualsSign", "Id", "If", "On", "VerticalLineVerticalLine", "RightCurlyBracketRightCurlyBracket", "ExclamationMark", "LeftParenthesis", "RightParenthesis", "Comma", "HyphenMinus", "FullStop", "Colon", "LessThanSign", "GreaterThanSign", "LeftSquareBracket", "RightSquareBracket", "RULE_INT", "RULE_DOUBLE", "RULE_BOOLEAN", "RULE_BEGIN", "RULE_END", "RULE_NEWLINE", "RULE_ID", "RULE_STRING", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int Delete=99;
    public static final int Secrets=91;
    public static final int Labeled=85;
    public static final int Needs=119;
    public static final int Deployments=36;
    public static final int Exludes=82;
    public static final int String=114;
    public static final int Image=117;
    public static final int Success=92;
    public static final int LessThanSign=165;
    public static final int Unlabeled=56;
    public static final int RunName=70;
    public static final int Matrix=108;
    public static final int LeftParenthesis=159;
    public static final int Concurrency=34;
    public static final int Workflow_call=27;
    public static final int TagsIgnore=43;
    public static final int FromJSON=63;
    public static final int Boolean=78;
    public static final int Push=136;
    public static final int Failure=83;
    public static final int Tags=138;
    public static final int ExclamationMark=158;
    public static final int Assigned=57;
    public static final int Status=113;
    public static final int GreaterThanSign=166;
    public static final int Review_requested=21;
    public static final int Repository_dispatch=10;
    public static final int RULE_ID=175;
    public static final int Actions=77;
    public static final int Github=102;
    public static final int Labels=106;
    public static final int GreaterThanSignEqualsSign=152;
    public static final int Merge_group=40;
    public static final int Pages=120;
    public static final int Project=88;
    public static final int EqualsSignEqualsSign=151;
    public static final int Contents=60;
    public static final int Defaults=61;
    public static final int Statuses=73;
    public static final int RULE_INT=169;
    public static final int Contains=59;
    public static final int Outputs=87;
    public static final int Edited=100;
    public static final int RULE_ML_COMMENT=177;
    public static final int Unassigned=49;
    public static final int LeftSquareBracket=167;
    public static final int Always=94;
    public static final int Id=153;
    public static final int ContinueOnError=15;
    public static final int If=154;
    public static final int EndsWith=62;
    public static final int Write=128;
    public static final int Group=116;
    public static final int Description=37;
    public static final int RightCurlyBracketRightCurlyBracket=157;
    public static final int Unlocked=75;
    public static final int Check_suite=33;
    public static final int VerticalLineVerticalLine=156;
    public static final int RULE_NEWLINE=174;
    public static final int Auto_merge_disabled=7;
    public static final int Pull_request_review=8;
    public static final int Url=147;
    public static final int Created=79;
    public static final int Comma=161;
    public static final int Project_card=30;
    public static final int HyphenMinus=162;
    public static final int Jobs=132;
    public static final int Registry_package=20;
    public static final int Gollum=103;
    public static final int Watch=127;
    public static final int Deleted=81;
    public static final int Paths=121;
    public static final int LessThanSignEqualsSign=150;
    public static final int IdToken=64;
    public static final int FullStop=163;
    public static final int TimeoutMinutes=24;
    public static final int Vars=141;
    public static final int HashFiles=54;
    public static final int Ports=122;
    public static final int Join=133;
    public static final int Run=146;
    public static final int Default=80;
    public static final int Services=72;
    public static final int Type=139;
    public static final int Pull_request=31;
    public static final int ExclamationMarkEqualsSign=148;
    public static final int None=135;
    public static final int Credentials=35;
    public static final int Review_request_removed=6;
    public static final int Ready_for_review=19;
    public static final int Types=125;
    public static final int Choice=96;
    public static final int RULE_BEGIN=172;
    public static final int Deployment_status=16;
    public static final int Discussions=38;
    public static final int Security_events=23;
    public static final int Synchronize=42;
    public static final int Label=118;
    public static final int Deployment=44;
    public static final int RULE_BOOLEAN=171;
    public static final int Check_run=51;
    public static final int Cron=130;
    public static final int Name=134;
    public static final int Pull_request_review_comment=4;
    public static final int Read=137;
    public static final int Container=52;
    public static final int Branch_protection_rule=5;
    public static final int Volumes=93;
    public static final int ToJSON=115;
    public static final int Packages=66;
    public static final int Permissions=41;
    public static final int Job=145;
    public static final int Inherit=84;
    public static final int RightSquareBracket=168;
    public static final int WorkingDirectory=18;
    public static final int Opened=110;
    public static final int Repository_projects=11;
    public static final int MaxParalell=28;
    public static final int Milestone=55;
    public static final int Branches=58;
    public static final int RightParenthesis=160;
    public static final int Public=111;
    public static final int FailFast=53;
    public static final int Checks=95;
    public static final int Value=126;
    public static final int Environment=39;
    public static final int Discussion=45;
    public static final int DollarSignLeftCurlyBracketLeftCurlyBracket=143;
    public static final int Steps=124;
    public static final int Options=86;
    public static final int Runner=112;
    public static final int RULE_END=173;
    public static final int Fork=131;
    public static final int Uses=140;
    public static final int Reopened=68;
    public static final int Pull_request_target=9;
    public static final int Issues=105;
    public static final int RULE_STRING=176;
    public static final int Env=144;
    public static final int StartsWith=48;
    public static final int CancelInProgress=13;
    public static final int With=142;
    public static final int RULE_SL_COMMENT=178;
    public static final int Pull_requests=26;
    public static final int Includes=65;
    public static final int Locked=107;
    public static final int Shell=123;
    public static final int Auto_merge_enabled=12;
    public static final int Format=101;
    public static final int Project_column=25;
    public static final int Required=69;
    public static final int Number=109;
    public static final int AmpersandAmpersand=149;
    public static final int RULE_DOUBLE=170;
    public static final int Page_build=47;
    public static final int Create=98;
    public static final int Colon=164;
    public static final int EOF=-1;
    public static final int Inputs=104;
    public static final int Release=89;
    public static final int Password=67;
    public static final int BranchesIgnore=22;
    public static final int Args=129;
    public static final int Entrypoint=46;
    public static final int PathsIgnore=29;
    public static final int RULE_WS=179;
    public static final int Cancelled=50;
    public static final int RULE_ANY_OTHER=180;
    public static final int Workflow_dispatch=17;
    public static final int Username=76;
    public static final int Converted_to_draft=14;
    public static final int RunsOn=90;
    public static final int Closed=97;
    public static final int Schedule=71;
    public static final int Strategy=74;
    public static final int Workflow_run=32;
    public static final int On=155;

    // delegates
    // delegators


        public InternalGitHubActionsParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalGitHubActionsParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalGitHubActionsParser.tokenNames; }
    public String getGrammarFileName() { return "InternalGitHubActionsParser.g"; }



    /*
      This grammar contains a lot of empty actions to work around a bug in ANTLR.
      Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
    */

     	private GitHubActionsGrammarAccess grammarAccess;

        public InternalGitHubActionsParser(TokenStream input, GitHubActionsGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Workflow";
       	}

       	@Override
       	protected GitHubActionsGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRuleWorkflow"
    // InternalGitHubActionsParser.g:65:1: entryRuleWorkflow returns [EObject current=null] : iv_ruleWorkflow= ruleWorkflow EOF ;
    public final EObject entryRuleWorkflow() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleWorkflow = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getWorkflowAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:69:2: (iv_ruleWorkflow= ruleWorkflow EOF )
            // InternalGitHubActionsParser.g:70:2: iv_ruleWorkflow= ruleWorkflow EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getWorkflowRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleWorkflow=ruleWorkflow();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleWorkflow; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleWorkflow"


    // $ANTLR start "ruleWorkflow"
    // InternalGitHubActionsParser.g:79:1: ruleWorkflow returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleWorkflow() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token this_BEGIN_15=null;
        Token otherlv_16=null;
        Token this_NEWLINE_18=null;
        Token this_END_19=null;
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token otherlv_28=null;
        Token otherlv_30=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_34=null;
        EObject lv_name_3_0 = null;

        EObject lv_runName_6_0 = null;

        EObject lv_triggers_9_0 = null;

        EObject lv_triggers_11_0 = null;

        EObject lv_triggers_13_0 = null;

        EObject lv_triggers_17_0 = null;

        EObject lv_triggers_20_0 = null;

        EObject lv_permissions_23_0 = null;

        EObject lv_environmentVariables_26_0 = null;

        EObject lv_defaults_29_0 = null;

        EObject lv_concurrencyGroup_32_0 = null;

        EObject lv_jobs_35_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getWorkflowAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:88:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:89:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:89:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:90:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:90:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:91:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getWorkflowAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:94:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:95:5: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:95:5: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+
            int cnt8=0;
            loop8:
            do {
                int alt8=9;
                alt8 = dfa8.predict(input);
                switch (alt8) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:96:3: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:96:3: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:97:4: {...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:97:102: ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:98:5: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:101:8: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:101:9: {...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:101:18: (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:101:19: otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) )
            	    {
            	    otherlv_1=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_1, grammarAccess.getWorkflowAccess().getNameKeyword_0_0());
            	      							
            	    }
            	    otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getWorkflowAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:109:8: ( (lv_name_3_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:110:9: (lv_name_3_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:110:9: (lv_name_3_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:111:10: lv_name_3_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getWorkflowAccess().getNameExpressionParserRuleCall_0_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_name_3_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      										}
            	      										set(
            	      											current,
            	      											"name",
            	      											lv_name_3_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:134:3: ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:134:3: ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:135:4: {...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:135:102: ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:136:5: ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:139:8: ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:139:9: {...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:139:18: (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:139:19: otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) )
            	    {
            	    otherlv_4=(Token)match(input,RunName,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_4, grammarAccess.getWorkflowAccess().getRunNameKeyword_1_0());
            	      							
            	    }
            	    otherlv_5=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_5, grammarAccess.getWorkflowAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:147:8: ( (lv_runName_6_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:148:9: (lv_runName_6_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:148:9: (lv_runName_6_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:149:10: lv_runName_6_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getWorkflowAccess().getRunNameExpressionParserRuleCall_1_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_runName_6_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      										}
            	      										set(
            	      											current,
            	      											"runName",
            	      											lv_runName_6_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:172:3: ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:172:3: ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) )
            	    // InternalGitHubActionsParser.g:173:4: {...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:173:102: ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:174:5: ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:177:8: ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:177:9: {...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:177:18: (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) )
            	    // InternalGitHubActionsParser.g:177:19: otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ )
            	    {
            	    otherlv_7=(Token)match(input,On,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_7, grammarAccess.getWorkflowAccess().getOnKeyword_2_0());
            	      							
            	    }
            	    otherlv_8=(Token)match(input,Colon,FOLLOW_6); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_8, grammarAccess.getWorkflowAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:185:8: ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ )
            	    int alt4=4;
            	    alt4 = dfa4.predict(input);
            	    switch (alt4) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:186:9: ( (lv_triggers_9_0= ruleSimpleTrigger ) )
            	            {
            	            // InternalGitHubActionsParser.g:186:9: ( (lv_triggers_9_0= ruleSimpleTrigger ) )
            	            // InternalGitHubActionsParser.g:187:10: (lv_triggers_9_0= ruleSimpleTrigger )
            	            {
            	            // InternalGitHubActionsParser.g:187:10: (lv_triggers_9_0= ruleSimpleTrigger )
            	            // InternalGitHubActionsParser.g:188:11: lv_triggers_9_0= ruleSimpleTrigger
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_0_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_5);
            	            lv_triggers_9_0=ruleSimpleTrigger();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	              											}
            	              											add(
            	              												current,
            	              												"triggers",
            	              												lv_triggers_9_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:206:9: (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:206:9: (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:207:10: otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket
            	            {
            	            otherlv_10=(Token)match(input,LeftSquareBracket,FOLLOW_7); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_10, grammarAccess.getWorkflowAccess().getLeftSquareBracketKeyword_2_2_1_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:211:10: ( (lv_triggers_11_0= ruleSimpleTrigger ) )
            	            // InternalGitHubActionsParser.g:212:11: (lv_triggers_11_0= ruleSimpleTrigger )
            	            {
            	            // InternalGitHubActionsParser.g:212:11: (lv_triggers_11_0= ruleSimpleTrigger )
            	            // InternalGitHubActionsParser.g:213:12: lv_triggers_11_0= ruleSimpleTrigger
            	            {
            	            if ( state.backtracking==0 ) {

            	              												newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_1_1_0());
            	              											
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_triggers_11_0=ruleSimpleTrigger();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	              												}
            	              												add(
            	              													current,
            	              													"triggers",
            	              													lv_triggers_11_0,
            	              													"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	              												afterParserOrEnumRuleCall();
            	              											
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:230:10: (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )*
            	            loop1:
            	            do {
            	                int alt1=2;
            	                int LA1_0 = input.LA(1);

            	                if ( (LA1_0==Comma) ) {
            	                    alt1=1;
            	                }


            	                switch (alt1) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:231:11: otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) )
            	            	    {
            	            	    otherlv_12=(Token)match(input,Comma,FOLLOW_7); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_12, grammarAccess.getWorkflowAccess().getCommaKeyword_2_2_1_2_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:235:11: ( (lv_triggers_13_0= ruleSimpleTrigger ) )
            	            	    // InternalGitHubActionsParser.g:236:12: (lv_triggers_13_0= ruleSimpleTrigger )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:236:12: (lv_triggers_13_0= ruleSimpleTrigger )
            	            	    // InternalGitHubActionsParser.g:237:13: lv_triggers_13_0= ruleSimpleTrigger
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_1_2_1_0());
            	            	      												
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_triggers_13_0=ruleSimpleTrigger();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	            	      													}
            	            	      													add(
            	            	      														current,
            	            	      														"triggers",
            	            	      														lv_triggers_13_0,
            	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	            	      													afterParserOrEnumRuleCall();
            	            	      												
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop1;
            	                }
            	            } while (true);

            	            otherlv_14=(Token)match(input,RightSquareBracket,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_14, grammarAccess.getWorkflowAccess().getRightSquareBracketKeyword_2_2_1_3());
            	              									
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:261:9: (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:261:9: (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END )
            	            // InternalGitHubActionsParser.g:262:10: this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END
            	            {
            	            this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_BEGIN_15, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_2_2_2_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:266:10: (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+
            	            int cnt2=0;
            	            loop2:
            	            do {
            	                int alt2=2;
            	                int LA2_0 = input.LA(1);

            	                if ( (LA2_0==HyphenMinus) ) {
            	                    alt2=1;
            	                }


            	                switch (alt2) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:267:11: otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE
            	            	    {
            	            	    otherlv_16=(Token)match(input,HyphenMinus,FOLLOW_7); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_16, grammarAccess.getWorkflowAccess().getHyphenMinusKeyword_2_2_2_1_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:271:11: ( (lv_triggers_17_0= ruleSimpleTrigger ) )
            	            	    // InternalGitHubActionsParser.g:272:12: (lv_triggers_17_0= ruleSimpleTrigger )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:272:12: (lv_triggers_17_0= ruleSimpleTrigger )
            	            	    // InternalGitHubActionsParser.g:273:13: lv_triggers_17_0= ruleSimpleTrigger
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_2_1_1_0());
            	            	      												
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_triggers_17_0=ruleSimpleTrigger();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	            	      													}
            	            	      													add(
            	            	      														current,
            	            	      														"triggers",
            	            	      														lv_triggers_17_0,
            	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.SimpleTrigger");
            	            	      													afterParserOrEnumRuleCall();
            	            	      												
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(this_NEWLINE_18, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_2_2_2_1_2());
            	            	      										
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt2 >= 1 ) break loop2;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(2, input);
            	                        throw eee;
            	                }
            	                cnt2++;
            	            } while (true);

            	            this_END_19=(Token)match(input,RULE_END,FOLLOW_5); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_END_19, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_2_2_2_2());
            	              									
            	            }

            	            }


            	            }
            	            break;
            	        case 4 :
            	            // InternalGitHubActionsParser.g:301:9: ( (lv_triggers_20_0= ruleOptionedTrigger ) )+
            	            {
            	            // InternalGitHubActionsParser.g:301:9: ( (lv_triggers_20_0= ruleOptionedTrigger ) )+
            	            int cnt3=0;
            	            loop3:
            	            do {
            	                int alt3=2;
            	                int LA3_0 = input.LA(1);

            	                if ( (LA3_0==Pull_request_target||LA3_0==Workflow_dispatch||LA3_0==Workflow_call||(LA3_0>=Pull_request && LA3_0<=Workflow_run)||LA3_0==Schedule||LA3_0==Push||LA3_0==LeftSquareBracket||LA3_0==RULE_BEGIN) ) {
            	                    alt3=1;
            	                }


            	                switch (alt3) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:302:10: (lv_triggers_20_0= ruleOptionedTrigger )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:302:10: (lv_triggers_20_0= ruleOptionedTrigger )
            	            	    // InternalGitHubActionsParser.g:303:11: lv_triggers_20_0= ruleOptionedTrigger
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      											newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersOptionedTriggerParserRuleCall_2_2_3_0());
            	            	      										
            	            	    }
            	            	    pushFollow(FOLLOW_12);
            	            	    lv_triggers_20_0=ruleOptionedTrigger();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											if (current==null) {
            	            	      												current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	            	      											}
            	            	      											add(
            	            	      												current,
            	            	      												"triggers",
            	            	      												lv_triggers_20_0,
            	            	      												"d.fe.up.pt.cicd.gha.GitHubActions.OptionedTrigger");
            	            	      											afterParserOrEnumRuleCall();
            	            	      										
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt3 >= 1 ) break loop3;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(3, input);
            	                        throw eee;
            	                }
            	                cnt3++;
            	            } while (true);


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:327:3: ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:327:3: ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:328:4: {...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:328:102: ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:329:5: ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:332:8: ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) )
            	    // InternalGitHubActionsParser.g:332:9: {...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:332:18: (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ )
            	    // InternalGitHubActionsParser.g:332:19: otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+
            	    {
            	    otherlv_21=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_21, grammarAccess.getWorkflowAccess().getPermissionsKeyword_3_0());
            	      							
            	    }
            	    otherlv_22=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_22, grammarAccess.getWorkflowAccess().getColonKeyword_3_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:340:8: ( (lv_permissions_23_0= rulePermission ) )+
            	    int cnt5=0;
            	    loop5:
            	    do {
            	        int alt5=2;
            	        int LA5_0 = input.LA(1);

            	        if ( (LA5_0==RULE_BEGIN) ) {
            	            alt5=1;
            	        }


            	        switch (alt5) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:341:9: (lv_permissions_23_0= rulePermission )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:341:9: (lv_permissions_23_0= rulePermission )
            	    	    // InternalGitHubActionsParser.g:342:10: lv_permissions_23_0= rulePermission
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getWorkflowAccess().getPermissionsPermissionParserRuleCall_3_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_14);
            	    	    lv_permissions_23_0=rulePermission();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"permissions",
            	    	      											lv_permissions_23_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Permission");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt5 >= 1 ) break loop5;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(5, input);
            	                throw eee;
            	        }
            	        cnt5++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:365:3: ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:365:3: ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:366:4: {...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:366:102: ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:367:5: ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:370:8: ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:370:9: {...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:370:18: (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ )
            	    // InternalGitHubActionsParser.g:370:19: otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+
            	    {
            	    otherlv_24=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_24, grammarAccess.getWorkflowAccess().getEnvKeyword_4_0());
            	      							
            	    }
            	    otherlv_25=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_25, grammarAccess.getWorkflowAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:378:8: ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+
            	    int cnt6=0;
            	    loop6:
            	    do {
            	        int alt6=2;
            	        int LA6_0 = input.LA(1);

            	        if ( (LA6_0==RULE_BEGIN) ) {
            	            alt6=1;
            	        }


            	        switch (alt6) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:379:9: (lv_environmentVariables_26_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:379:9: (lv_environmentVariables_26_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:380:10: lv_environmentVariables_26_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getWorkflowAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_4_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_14);
            	    	    lv_environmentVariables_26_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_26_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt6 >= 1 ) break loop6;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(6, input);
            	                throw eee;
            	        }
            	        cnt6++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:403:3: ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:403:3: ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:404:4: {...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:404:102: ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) )
            	    // InternalGitHubActionsParser.g:405:5: ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:408:8: ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) )
            	    // InternalGitHubActionsParser.g:408:9: {...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:408:18: (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) )
            	    // InternalGitHubActionsParser.g:408:19: otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) )
            	    {
            	    otherlv_27=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_27, grammarAccess.getWorkflowAccess().getDefaultsKeyword_5_0());
            	      							
            	    }
            	    otherlv_28=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_28, grammarAccess.getWorkflowAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:416:8: ( (lv_defaults_29_0= ruleDefaults ) )
            	    // InternalGitHubActionsParser.g:417:9: (lv_defaults_29_0= ruleDefaults )
            	    {
            	    // InternalGitHubActionsParser.g:417:9: (lv_defaults_29_0= ruleDefaults )
            	    // InternalGitHubActionsParser.g:418:10: lv_defaults_29_0= ruleDefaults
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getWorkflowAccess().getDefaultsDefaultsParserRuleCall_5_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_defaults_29_0=ruleDefaults();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      										}
            	      										set(
            	      											current,
            	      											"defaults",
            	      											lv_defaults_29_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Defaults");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:441:3: ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:441:3: ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:442:4: {...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:442:102: ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) )
            	    // InternalGitHubActionsParser.g:443:5: ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:446:8: ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) )
            	    // InternalGitHubActionsParser.g:446:9: {...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:446:18: (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) )
            	    // InternalGitHubActionsParser.g:446:19: otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) )
            	    {
            	    otherlv_30=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_30, grammarAccess.getWorkflowAccess().getConcurrencyKeyword_6_0());
            	      							
            	    }
            	    otherlv_31=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_31, grammarAccess.getWorkflowAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:454:8: ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) )
            	    // InternalGitHubActionsParser.g:455:9: (lv_concurrencyGroup_32_0= ruleConcurrencyGroup )
            	    {
            	    // InternalGitHubActionsParser.g:455:9: (lv_concurrencyGroup_32_0= ruleConcurrencyGroup )
            	    // InternalGitHubActionsParser.g:456:10: lv_concurrencyGroup_32_0= ruleConcurrencyGroup
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getWorkflowAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_5);
            	    lv_concurrencyGroup_32_0=ruleConcurrencyGroup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	      										}
            	      										set(
            	      											current,
            	      											"concurrencyGroup",
            	      											lv_concurrencyGroup_32_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.ConcurrencyGroup");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:479:3: ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:479:3: ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:480:4: {...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:480:102: ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:481:5: ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:484:8: ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) )
            	    // InternalGitHubActionsParser.g:484:9: {...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleWorkflow", "true");
            	    }
            	    // InternalGitHubActionsParser.g:484:18: (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ )
            	    // InternalGitHubActionsParser.g:484:19: otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+
            	    {
            	    otherlv_33=(Token)match(input,Jobs,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_33, grammarAccess.getWorkflowAccess().getJobsKeyword_7_0());
            	      							
            	    }
            	    otherlv_34=(Token)match(input,Colon,FOLLOW_15); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_34, grammarAccess.getWorkflowAccess().getColonKeyword_7_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:492:8: ( (lv_jobs_35_0= ruleJob ) )+
            	    int cnt7=0;
            	    loop7:
            	    do {
            	        int alt7=2;
            	        alt7 = dfa7.predict(input);
            	        switch (alt7) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:493:9: (lv_jobs_35_0= ruleJob )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:493:9: (lv_jobs_35_0= ruleJob )
            	    	    // InternalGitHubActionsParser.g:494:10: lv_jobs_35_0= ruleJob
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getWorkflowAccess().getJobsJobParserRuleCall_7_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_16);
            	    	    lv_jobs_35_0=ruleJob();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getWorkflowRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"jobs",
            	    	      											lv_jobs_35_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Job");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt7 >= 1 ) break loop7;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(7, input);
            	                throw eee;
            	        }
            	        cnt7++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt8 >= 1 ) break loop8;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(8, input);
                        throw eee;
                }
                cnt8++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getWorkflowAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleWorkflow", "getUnorderedGroupHelper().canLeave(grammarAccess.getWorkflowAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getWorkflowAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleWorkflow"


    // $ANTLR start "entryRuleJob"
    // InternalGitHubActionsParser.g:531:1: entryRuleJob returns [EObject current=null] : iv_ruleJob= ruleJob EOF ;
    public final EObject entryRuleJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJob = null;


        try {
            // InternalGitHubActionsParser.g:531:44: (iv_ruleJob= ruleJob EOF )
            // InternalGitHubActionsParser.g:532:2: iv_ruleJob= ruleJob EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJobRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJob=ruleJob();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJob; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJob"


    // $ANTLR start "ruleJob"
    // InternalGitHubActionsParser.g:538:1: ruleJob returns [EObject current=null] : (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob ) ;
    public final EObject ruleJob() throws RecognitionException {
        EObject current = null;

        EObject this_ScriptJob_0 = null;

        EObject this_ReuseWorkflowJob_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:544:2: ( (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob ) )
            // InternalGitHubActionsParser.g:545:2: (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob )
            {
            // InternalGitHubActionsParser.g:545:2: (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob )
            int alt9=2;
            alt9 = dfa9.predict(input);
            switch (alt9) {
                case 1 :
                    // InternalGitHubActionsParser.g:546:3: this_ScriptJob_0= ruleScriptJob
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJobAccess().getScriptJobParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ScriptJob_0=ruleScriptJob();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ScriptJob_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:558:3: this_ReuseWorkflowJob_1= ruleReuseWorkflowJob
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getJobAccess().getReuseWorkflowJobParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ReuseWorkflowJob_1=ruleReuseWorkflowJob();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ReuseWorkflowJob_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJob"


    // $ANTLR start "entryRuleScriptJob"
    // InternalGitHubActionsParser.g:573:1: entryRuleScriptJob returns [EObject current=null] : iv_ruleScriptJob= ruleScriptJob EOF ;
    public final EObject entryRuleScriptJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScriptJob = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getScriptJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:577:2: (iv_ruleScriptJob= ruleScriptJob EOF )
            // InternalGitHubActionsParser.g:578:2: iv_ruleScriptJob= ruleScriptJob EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getScriptJobRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleScriptJob=ruleScriptJob();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleScriptJob; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleScriptJob"


    // $ANTLR start "ruleScriptJob"
    // InternalGitHubActionsParser.g:587:1: ruleScriptJob returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleScriptJob() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_BEGIN_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token this_NEWLINE_22=null;
        Token this_END_23=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_32=null;
        Token otherlv_34=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_38=null;
        Token otherlv_40=null;
        Token otherlv_41=null;
        Token otherlv_43=null;
        Token otherlv_44=null;
        Token otherlv_46=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token otherlv_52=null;
        Token otherlv_53=null;
        Token otherlv_55=null;
        Token otherlv_56=null;
        Token this_END_58=null;
        Token this_END_59=null;
        EObject lv_jobName_7_0 = null;

        EObject lv_permissions_10_0 = null;

        EObject lv_if_24_0 = null;

        EObject lv_agent_27_0 = null;

        EObject lv_stagingEnvironment_30_0 = null;

        EObject lv_concurrencyGroup_33_0 = null;

        EObject lv_environmentVariables_36_0 = null;

        EObject lv_defaults_39_0 = null;

        EObject lv_steps_42_0 = null;

        EObject lv_strategy_45_0 = null;

        EObject lv_container_48_0 = null;

        EObject lv_services_51_0 = null;

        EObject lv_continueOnError_54_0 = null;

        EObject lv_timeoutMinutes_57_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getScriptJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:596:2: ( ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:597:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:597:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:598:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:598:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:599:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getScriptJobAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:602:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:603:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:603:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+
            int cnt19=0;
            loop19:
            do {
                int alt19=16;
                alt19 = dfa19.predict(input);
                switch (alt19) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:604:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:604:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
            	    // InternalGitHubActionsParser.g:605:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:605:103: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
            	    // InternalGitHubActionsParser.g:606:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:609:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
            	    // InternalGitHubActionsParser.g:609:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:609:18: (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
            	    // InternalGitHubActionsParser.g:609:19: this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
            	    {
            	    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_1, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_0_0());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:613:8: ( (lv_name_2_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:614:9: (lv_name_2_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:614:9: (lv_name_2_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:615:10: lv_name_2_0= RULE_ID
            	    {
            	    lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_name_2_0, grammarAccess.getScriptJobAccess().getNameIDTerminalRuleCall_0_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getScriptJobRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"name",
            	      											lv_name_2_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_3, grammarAccess.getScriptJobAccess().getColonKeyword_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_18); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:639:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
            	    int alt10=2;
            	    alt10 = dfa10.predict(input);
            	    switch (alt10) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:640:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) )
            	            {
            	            otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getScriptJobAccess().getNameKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getScriptJobAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:648:9: ( (lv_jobName_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:649:10: (lv_jobName_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:649:10: (lv_jobName_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:650:11: lv_jobName_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getScriptJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_19);
            	            lv_jobName_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"jobName",
            	              												lv_jobName_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:674:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:674:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:675:4: {...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:675:103: ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:676:5: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:679:8: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
            	    // InternalGitHubActionsParser.g:679:9: {...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:679:18: (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
            	    // InternalGitHubActionsParser.g:679:19: otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+
            	    {
            	    otherlv_8=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_8, grammarAccess.getScriptJobAccess().getPermissionsKeyword_1_0());
            	      							
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getScriptJobAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:687:8: ( (lv_permissions_10_0= rulePermission ) )+
            	    int cnt11=0;
            	    loop11:
            	    do {
            	        int alt11=2;
            	        int LA11_0 = input.LA(1);

            	        if ( (LA11_0==RULE_BEGIN) ) {
            	            int LA11_2 = input.LA(2);

            	            if ( (LA11_2==Repository_projects||LA11_2==Security_events||LA11_2==Pull_requests||LA11_2==Deployments||LA11_2==Discussions||LA11_2==Contents||LA11_2==IdToken||LA11_2==Packages||LA11_2==Statuses||LA11_2==Actions||LA11_2==Checks||LA11_2==Issues||LA11_2==Pages) ) {
            	                alt11=1;
            	            }


            	        }


            	        switch (alt11) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:688:9: (lv_permissions_10_0= rulePermission )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:688:9: (lv_permissions_10_0= rulePermission )
            	    	    // InternalGitHubActionsParser.g:689:10: lv_permissions_10_0= rulePermission
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getPermissionsPermissionParserRuleCall_1_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_19);
            	    	    lv_permissions_10_0=rulePermission();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"permissions",
            	    	      											lv_permissions_10_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Permission");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt11 >= 1 ) break loop11;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(11, input);
            	                throw eee;
            	        }
            	        cnt11++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:712:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:712:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:713:4: {...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:713:103: ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:714:5: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:717:8: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:717:9: {...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:717:18: ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
            	    int alt14=3;
            	    switch ( input.LA(1) ) {
            	    case Needs:
            	        {
            	        alt14=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt14=2;
            	        }
            	        break;
            	    case RULE_BEGIN:
            	        {
            	        alt14=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 14, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt14) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:717:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:717:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
            	            // InternalGitHubActionsParser.g:718:9: otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) )
            	            {
            	            otherlv_11=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_11, grammarAccess.getScriptJobAccess().getNeedsKeyword_2_0_0());
            	              								
            	            }
            	            otherlv_12=(Token)match(input,Colon,FOLLOW_17); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_12, grammarAccess.getScriptJobAccess().getColonKeyword_2_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:726:9: ( (otherlv_13= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:727:10: (otherlv_13= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:727:10: (otherlv_13= RULE_ID )
            	            // InternalGitHubActionsParser.g:728:11: otherlv_13= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              											/* */
            	              										
            	            }
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElement(grammarAccess.getScriptJobRule());
            	              											}
            	              										
            	            }
            	            otherlv_13=(Token)match(input,RULE_ID,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_13, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_0_2_0());
            	              										
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:744:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:744:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:745:9: otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket
            	            {
            	            otherlv_14=(Token)match(input,LeftSquareBracket,FOLLOW_17); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_14, grammarAccess.getScriptJobAccess().getLeftSquareBracketKeyword_2_1_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:749:9: ( (otherlv_15= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:750:10: (otherlv_15= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:750:10: (otherlv_15= RULE_ID )
            	            // InternalGitHubActionsParser.g:751:11: otherlv_15= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              											/* */
            	              										
            	            }
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElement(grammarAccess.getScriptJobRule());
            	              											}
            	              										
            	            }
            	            otherlv_15=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_15, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_1_1_0());
            	              										
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:765:9: (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )*
            	            loop12:
            	            do {
            	                int alt12=2;
            	                int LA12_0 = input.LA(1);

            	                if ( (LA12_0==Comma) ) {
            	                    alt12=1;
            	                }


            	                switch (alt12) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:766:10: otherlv_16= Comma ( (otherlv_17= RULE_ID ) )
            	            	    {
            	            	    otherlv_16=(Token)match(input,Comma,FOLLOW_17); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_16, grammarAccess.getScriptJobAccess().getCommaKeyword_2_1_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:770:10: ( (otherlv_17= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:771:11: (otherlv_17= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:771:11: (otherlv_17= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:772:12: otherlv_17= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getScriptJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_17=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_17, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_1_2_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop12;
            	                }
            	            } while (true);

            	            otherlv_18=(Token)match(input,RightSquareBracket,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_18, grammarAccess.getScriptJobAccess().getRightSquareBracketKeyword_2_1_3());
            	              								
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:793:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:793:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
            	            // InternalGitHubActionsParser.g:794:9: this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END
            	            {
            	            this_BEGIN_19=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_19, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_2_2_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:798:9: (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+
            	            int cnt13=0;
            	            loop13:
            	            do {
            	                int alt13=2;
            	                int LA13_0 = input.LA(1);

            	                if ( (LA13_0==HyphenMinus) ) {
            	                    alt13=1;
            	                }


            	                switch (alt13) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:799:10: otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE
            	            	    {
            	            	    otherlv_20=(Token)match(input,HyphenMinus,FOLLOW_17); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_20, grammarAccess.getScriptJobAccess().getHyphenMinusKeyword_2_2_1_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:803:10: ( (otherlv_21= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:804:11: (otherlv_21= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:804:11: (otherlv_21= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:805:12: otherlv_21= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getScriptJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_21=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_21, grammarAccess.getScriptJobAccess().getDependsOnJobCrossReference_2_2_1_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_22=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(this_NEWLINE_22, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_1_2());
            	            	      									
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt13 >= 1 ) break loop13;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(13, input);
            	                        throw eee;
            	                }
            	                cnt13++;
            	            } while (true);

            	            this_END_23=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_23, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_2_2_2());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:835:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:835:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:836:4: {...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:836:103: ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:837:5: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:840:8: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:840:9: {...}? => ( (lv_if_24_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:840:18: ( (lv_if_24_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:840:19: (lv_if_24_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:840:19: (lv_if_24_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:841:9: lv_if_24_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getScriptJobAccess().getIfIfStatementParserRuleCall_3_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_if_24_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_24_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:863:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:863:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:864:4: {...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:864:103: ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
            	    // InternalGitHubActionsParser.g:865:5: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:868:8: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
            	    // InternalGitHubActionsParser.g:868:9: {...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:868:18: (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
            	    // InternalGitHubActionsParser.g:868:19: otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) )
            	    {
            	    otherlv_25=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_25, grammarAccess.getScriptJobAccess().getRunsOnKeyword_4_0());
            	      							
            	    }
            	    otherlv_26=(Token)match(input,Colon,FOLLOW_20); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_26, grammarAccess.getScriptJobAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:876:8: ( (lv_agent_27_0= ruleAgent ) )
            	    // InternalGitHubActionsParser.g:877:9: (lv_agent_27_0= ruleAgent )
            	    {
            	    // InternalGitHubActionsParser.g:877:9: (lv_agent_27_0= ruleAgent )
            	    // InternalGitHubActionsParser.g:878:10: lv_agent_27_0= ruleAgent
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getAgentAgentParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_agent_27_0=ruleAgent();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"agent",
            	      											lv_agent_27_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Agent");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:901:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:901:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:902:4: {...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:902:103: ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
            	    // InternalGitHubActionsParser.g:903:5: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:906:8: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
            	    // InternalGitHubActionsParser.g:906:9: {...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:906:18: (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
            	    // InternalGitHubActionsParser.g:906:19: otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
            	    {
            	    otherlv_28=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_28, grammarAccess.getScriptJobAccess().getEnvironmentKeyword_5_0());
            	      							
            	    }
            	    otherlv_29=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_29, grammarAccess.getScriptJobAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:914:8: ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
            	    // InternalGitHubActionsParser.g:915:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
            	    {
            	    // InternalGitHubActionsParser.g:915:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
            	    // InternalGitHubActionsParser.g:916:10: lv_stagingEnvironment_30_0= ruleStagingEnvironment
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_stagingEnvironment_30_0=ruleStagingEnvironment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"stagingEnvironment",
            	      											lv_stagingEnvironment_30_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.StagingEnvironment");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:939:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:939:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:940:4: {...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:940:103: ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
            	    // InternalGitHubActionsParser.g:941:5: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:944:8: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
            	    // InternalGitHubActionsParser.g:944:9: {...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:944:18: (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
            	    // InternalGitHubActionsParser.g:944:19: otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
            	    {
            	    otherlv_31=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_31, grammarAccess.getScriptJobAccess().getConcurrencyKeyword_6_0());
            	      							
            	    }
            	    otherlv_32=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_32, grammarAccess.getScriptJobAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:952:8: ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
            	    // InternalGitHubActionsParser.g:953:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
            	    {
            	    // InternalGitHubActionsParser.g:953:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
            	    // InternalGitHubActionsParser.g:954:10: lv_concurrencyGroup_33_0= ruleConcurrencyGroup
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_concurrencyGroup_33_0=ruleConcurrencyGroup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"concurrencyGroup",
            	      											lv_concurrencyGroup_33_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.ConcurrencyGroup");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:977:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:977:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:978:4: {...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:978:103: ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:979:5: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:982:8: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:982:9: {...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:982:18: (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
            	    // InternalGitHubActionsParser.g:982:19: otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
            	    {
            	    otherlv_34=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_34, grammarAccess.getScriptJobAccess().getEnvKeyword_7_0());
            	      							
            	    }
            	    otherlv_35=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_35, grammarAccess.getScriptJobAccess().getColonKeyword_7_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:990:8: ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
            	    int cnt15=0;
            	    loop15:
            	    do {
            	        int alt15=2;
            	        int LA15_0 = input.LA(1);

            	        if ( (LA15_0==RULE_BEGIN) ) {
            	            int LA15_2 = input.LA(2);

            	            if ( (LA15_2==RULE_ID) ) {
            	                int LA15_3 = input.LA(3);

            	                if ( (LA15_3==Colon) ) {
            	                    int LA15_4 = input.LA(4);

            	                    if ( (LA15_4==DollarSignLeftCurlyBracketLeftCurlyBracket||LA15_4==RULE_STRING) ) {
            	                        alt15=1;
            	                    }


            	                }


            	            }


            	        }


            	        switch (alt15) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:991:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:991:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:992:10: lv_environmentVariables_36_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_19);
            	    	    lv_environmentVariables_36_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_36_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt15 >= 1 ) break loop15;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(15, input);
            	                throw eee;
            	        }
            	        cnt15++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalGitHubActionsParser.g:1015:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1015:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1016:4: {...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalGitHubActionsParser.g:1016:103: ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1017:5: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8);
            	    // InternalGitHubActionsParser.g:1020:8: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
            	    // InternalGitHubActionsParser.g:1020:9: {...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1020:18: (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
            	    // InternalGitHubActionsParser.g:1020:19: otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) )
            	    {
            	    otherlv_37=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_37, grammarAccess.getScriptJobAccess().getDefaultsKeyword_8_0());
            	      							
            	    }
            	    otherlv_38=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_38, grammarAccess.getScriptJobAccess().getColonKeyword_8_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1028:8: ( (lv_defaults_39_0= ruleDefaults ) )
            	    // InternalGitHubActionsParser.g:1029:9: (lv_defaults_39_0= ruleDefaults )
            	    {
            	    // InternalGitHubActionsParser.g:1029:9: (lv_defaults_39_0= ruleDefaults )
            	    // InternalGitHubActionsParser.g:1030:10: lv_defaults_39_0= ruleDefaults
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getDefaultsDefaultsParserRuleCall_8_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_defaults_39_0=ruleDefaults();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"defaults",
            	      											lv_defaults_39_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Defaults");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 10 :
            	    // InternalGitHubActionsParser.g:1053:3: ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1053:3: ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:1054:4: {...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9)");
            	    }
            	    // InternalGitHubActionsParser.g:1054:103: ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:1055:5: ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9);
            	    // InternalGitHubActionsParser.g:1058:8: ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) )
            	    // InternalGitHubActionsParser.g:1058:9: {...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1058:18: (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ )
            	    // InternalGitHubActionsParser.g:1058:19: otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+
            	    {
            	    otherlv_40=(Token)match(input,Steps,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_40, grammarAccess.getScriptJobAccess().getStepsKeyword_9_0());
            	      							
            	    }
            	    otherlv_41=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_41, grammarAccess.getScriptJobAccess().getColonKeyword_9_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1066:8: ( (lv_steps_42_0= ruleStep ) )+
            	    int cnt16=0;
            	    loop16:
            	    do {
            	        int alt16=2;
            	        int LA16_0 = input.LA(1);

            	        if ( (LA16_0==RULE_BEGIN) ) {
            	            int LA16_2 = input.LA(2);

            	            if ( (LA16_2==HyphenMinus) ) {
            	                int LA16_3 = input.LA(3);

            	                if ( (LA16_3==ContinueOnError||LA16_3==WorkingDirectory||LA16_3==TimeoutMinutes||LA16_3==Shell||LA16_3==Name||LA16_3==Uses||LA16_3==With||LA16_3==Env||LA16_3==Run||(LA16_3>=Id && LA16_3<=If)||LA16_3==RULE_BEGIN) ) {
            	                    alt16=1;
            	                }


            	            }


            	        }


            	        switch (alt16) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1067:9: (lv_steps_42_0= ruleStep )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1067:9: (lv_steps_42_0= ruleStep )
            	    	    // InternalGitHubActionsParser.g:1068:10: lv_steps_42_0= ruleStep
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStepsStepParserRuleCall_9_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_19);
            	    	    lv_steps_42_0=ruleStep();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"steps",
            	    	      											lv_steps_42_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Step");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt16 >= 1 ) break loop16;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(16, input);
            	                throw eee;
            	        }
            	        cnt16++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 11 :
            	    // InternalGitHubActionsParser.g:1091:3: ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1091:3: ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1092:4: {...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10)");
            	    }
            	    // InternalGitHubActionsParser.g:1092:104: ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1093:5: ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10);
            	    // InternalGitHubActionsParser.g:1096:8: ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) )
            	    // InternalGitHubActionsParser.g:1096:9: {...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1096:18: (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) )
            	    // InternalGitHubActionsParser.g:1096:19: otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) )
            	    {
            	    otherlv_43=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_43, grammarAccess.getScriptJobAccess().getStrategyKeyword_10_0());
            	      							
            	    }
            	    otherlv_44=(Token)match(input,Colon,FOLLOW_22); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_44, grammarAccess.getScriptJobAccess().getColonKeyword_10_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1104:8: ( (lv_strategy_45_0= ruleStrategy ) )
            	    // InternalGitHubActionsParser.g:1105:9: (lv_strategy_45_0= ruleStrategy )
            	    {
            	    // InternalGitHubActionsParser.g:1105:9: (lv_strategy_45_0= ruleStrategy )
            	    // InternalGitHubActionsParser.g:1106:10: lv_strategy_45_0= ruleStrategy
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStrategyStrategyParserRuleCall_10_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_strategy_45_0=ruleStrategy();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"strategy",
            	      											lv_strategy_45_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Strategy");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 12 :
            	    // InternalGitHubActionsParser.g:1129:3: ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1129:3: ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1130:4: {...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11)");
            	    }
            	    // InternalGitHubActionsParser.g:1130:104: ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1131:5: ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11);
            	    // InternalGitHubActionsParser.g:1134:8: ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) )
            	    // InternalGitHubActionsParser.g:1134:9: {...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1134:18: (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) )
            	    // InternalGitHubActionsParser.g:1134:19: otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) )
            	    {
            	    otherlv_46=(Token)match(input,Container,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_46, grammarAccess.getScriptJobAccess().getContainerKeyword_11_0());
            	      							
            	    }
            	    otherlv_47=(Token)match(input,Colon,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_47, grammarAccess.getScriptJobAccess().getColonKeyword_11_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1142:8: ( (lv_container_48_0= ruleContainer ) )
            	    // InternalGitHubActionsParser.g:1143:9: (lv_container_48_0= ruleContainer )
            	    {
            	    // InternalGitHubActionsParser.g:1143:9: (lv_container_48_0= ruleContainer )
            	    // InternalGitHubActionsParser.g:1144:10: lv_container_48_0= ruleContainer
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getContainerContainerParserRuleCall_11_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_container_48_0=ruleContainer();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"container",
            	      											lv_container_48_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Container");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 13 :
            	    // InternalGitHubActionsParser.g:1167:3: ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1167:3: ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:1168:4: {...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12)");
            	    }
            	    // InternalGitHubActionsParser.g:1168:104: ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:1169:5: ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12);
            	    // InternalGitHubActionsParser.g:1172:8: ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) )
            	    // InternalGitHubActionsParser.g:1172:9: {...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1172:18: (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ )
            	    // InternalGitHubActionsParser.g:1172:19: otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+
            	    {
            	    otherlv_49=(Token)match(input,Services,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_49, grammarAccess.getScriptJobAccess().getServicesKeyword_12_0());
            	      							
            	    }
            	    otherlv_50=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_50, grammarAccess.getScriptJobAccess().getColonKeyword_12_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1180:8: ( (lv_services_51_0= ruleService ) )+
            	    int cnt17=0;
            	    loop17:
            	    do {
            	        int alt17=2;
            	        alt17 = dfa17.predict(input);
            	        switch (alt17) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1181:9: (lv_services_51_0= ruleService )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1181:9: (lv_services_51_0= ruleService )
            	    	    // InternalGitHubActionsParser.g:1182:10: lv_services_51_0= ruleService
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getScriptJobAccess().getServicesServiceParserRuleCall_12_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_19);
            	    	    lv_services_51_0=ruleService();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"services",
            	    	      											lv_services_51_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Service");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt17 >= 1 ) break loop17;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(17, input);
            	                throw eee;
            	        }
            	        cnt17++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 14 :
            	    // InternalGitHubActionsParser.g:1205:3: ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1205:3: ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1206:4: {...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13)");
            	    }
            	    // InternalGitHubActionsParser.g:1206:104: ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1207:5: ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13);
            	    // InternalGitHubActionsParser.g:1210:8: ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:1210:9: {...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1210:18: (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:1210:19: otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) )
            	    {
            	    otherlv_52=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_52, grammarAccess.getScriptJobAccess().getContinueOnErrorKeyword_13_0());
            	      							
            	    }
            	    otherlv_53=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_53, grammarAccess.getScriptJobAccess().getColonKeyword_13_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1218:8: ( (lv_continueOnError_54_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:1219:9: (lv_continueOnError_54_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:1219:9: (lv_continueOnError_54_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:1220:10: lv_continueOnError_54_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getScriptJobAccess().getContinueOnErrorExpressionParserRuleCall_13_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_19);
            	    lv_continueOnError_54_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_54_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 15 :
            	    // InternalGitHubActionsParser.g:1243:3: ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1243:3: ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1244:4: {...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14)");
            	    }
            	    // InternalGitHubActionsParser.g:1244:104: ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1245:5: ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14);
            	    // InternalGitHubActionsParser.g:1248:8: ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) )
            	    // InternalGitHubActionsParser.g:1248:9: {...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleScriptJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1248:18: ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END )
            	    // InternalGitHubActionsParser.g:1248:19: (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:1248:19: (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )?
            	    int alt18=2;
            	    int LA18_0 = input.LA(1);

            	    if ( (LA18_0==TimeoutMinutes) ) {
            	        alt18=1;
            	    }
            	    switch (alt18) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:1249:9: otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) )
            	            {
            	            otherlv_55=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_55, grammarAccess.getScriptJobAccess().getTimeoutMinutesKeyword_14_0_0());
            	              								
            	            }
            	            otherlv_56=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_56, grammarAccess.getScriptJobAccess().getColonKeyword_14_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1257:9: ( (lv_timeoutMinutes_57_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:1258:10: (lv_timeoutMinutes_57_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:1258:10: (lv_timeoutMinutes_57_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:1259:11: lv_timeoutMinutes_57_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getScriptJobAccess().getTimeoutMinutesExpressionParserRuleCall_14_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_24);
            	            lv_timeoutMinutes_57_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getScriptJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_57_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    this_END_58=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_58, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1());
            	      							
            	    }
            	    this_END_59=(Token)match(input,RULE_END,FOLLOW_19); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_59, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_2());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt19 >= 1 ) break loop19;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(19, input);
                        throw eee;
                }
                cnt19++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleScriptJob", "getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getScriptJobAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleScriptJob"


    // $ANTLR start "entryRuleReuseWorkflowJob"
    // InternalGitHubActionsParser.g:1305:1: entryRuleReuseWorkflowJob returns [EObject current=null] : iv_ruleReuseWorkflowJob= ruleReuseWorkflowJob EOF ;
    public final EObject entryRuleReuseWorkflowJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleReuseWorkflowJob = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:1309:2: (iv_ruleReuseWorkflowJob= ruleReuseWorkflowJob EOF )
            // InternalGitHubActionsParser.g:1310:2: iv_ruleReuseWorkflowJob= ruleReuseWorkflowJob EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getReuseWorkflowJobRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleReuseWorkflowJob=ruleReuseWorkflowJob();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleReuseWorkflowJob; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleReuseWorkflowJob"


    // $ANTLR start "ruleReuseWorkflowJob"
    // InternalGitHubActionsParser.g:1319:1: ruleReuseWorkflowJob returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleReuseWorkflowJob() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_BEGIN_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token this_NEWLINE_22=null;
        Token this_END_23=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token otherlv_29=null;
        Token otherlv_31=null;
        Token otherlv_32=null;
        Token otherlv_34=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_38=null;
        Token otherlv_40=null;
        Token otherlv_41=null;
        Token otherlv_43=null;
        Token otherlv_44=null;
        Token otherlv_46=null;
        Token otherlv_47=null;
        Token otherlv_49=null;
        Token otherlv_50=null;
        Token otherlv_52=null;
        Token otherlv_53=null;
        Token otherlv_55=null;
        Token otherlv_56=null;
        Token lv_inheritSecrets_57_0=null;
        Token otherlv_59=null;
        Token otherlv_60=null;
        Token otherlv_62=null;
        Token otherlv_63=null;
        Token this_END_65=null;
        Token this_END_66=null;
        EObject lv_jobName_7_0 = null;

        EObject lv_permissions_10_0 = null;

        EObject lv_if_24_0 = null;

        EObject lv_agent_27_0 = null;

        EObject lv_stagingEnvironment_30_0 = null;

        EObject lv_concurrencyGroup_33_0 = null;

        EObject lv_environmentVariables_36_0 = null;

        EObject lv_defaults_39_0 = null;

        EObject lv_strategy_42_0 = null;

        EObject lv_container_45_0 = null;

        EObject lv_services_48_0 = null;

        EObject lv_workflowPath_51_0 = null;

        EObject lv_args_54_0 = null;

        EObject lv_secrets_58_0 = null;

        EObject lv_continueOnError_61_0 = null;

        EObject lv_timeoutMinutes_64_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:1328:2: ( ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:1329:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:1329:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:1330:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:1330:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:1331:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:1334:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:1335:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:1335:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+
            int cnt31=0;
            loop31:
            do {
                int alt31=18;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:1336:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1336:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
            	    // InternalGitHubActionsParser.g:1337:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:1337:110: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
            	    // InternalGitHubActionsParser.g:1338:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:1341:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
            	    // InternalGitHubActionsParser.g:1341:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1341:18: (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
            	    // InternalGitHubActionsParser.g:1341:19: this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
            	    {
            	    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_1, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_0_0());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1345:8: ( (lv_name_2_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:1346:9: (lv_name_2_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:1346:9: (lv_name_2_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:1347:10: lv_name_2_0= RULE_ID
            	    {
            	    lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_name_2_0, grammarAccess.getReuseWorkflowJobAccess().getNameIDTerminalRuleCall_0_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"name",
            	      											lv_name_2_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_3, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_25); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1371:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
            	    int alt20=2;
            	    alt20 = dfa20.predict(input);
            	    switch (alt20) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:1372:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) )
            	            {
            	            otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getReuseWorkflowJobAccess().getNameKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1380:9: ( (lv_jobName_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:1381:10: (lv_jobName_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:1381:10: (lv_jobName_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:1382:11: lv_jobName_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_26);
            	            lv_jobName_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"jobName",
            	              												lv_jobName_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:1406:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1406:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:1407:4: {...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:1407:110: ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:1408:5: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:1411:8: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
            	    // InternalGitHubActionsParser.g:1411:9: {...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1411:18: (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
            	    // InternalGitHubActionsParser.g:1411:19: otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+
            	    {
            	    otherlv_8=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_8, grammarAccess.getReuseWorkflowJobAccess().getPermissionsKeyword_1_0());
            	      							
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1419:8: ( (lv_permissions_10_0= rulePermission ) )+
            	    int cnt21=0;
            	    loop21:
            	    do {
            	        int alt21=2;
            	        int LA21_0 = input.LA(1);

            	        if ( (LA21_0==RULE_BEGIN) ) {
            	            int LA21_2 = input.LA(2);

            	            if ( (LA21_2==Repository_projects||LA21_2==Security_events||LA21_2==Pull_requests||LA21_2==Deployments||LA21_2==Discussions||LA21_2==Contents||LA21_2==IdToken||LA21_2==Packages||LA21_2==Statuses||LA21_2==Actions||LA21_2==Checks||LA21_2==Issues||LA21_2==Pages) ) {
            	                alt21=1;
            	            }


            	        }


            	        switch (alt21) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1420:9: (lv_permissions_10_0= rulePermission )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1420:9: (lv_permissions_10_0= rulePermission )
            	    	    // InternalGitHubActionsParser.g:1421:10: lv_permissions_10_0= rulePermission
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getPermissionsPermissionParserRuleCall_1_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_26);
            	    	    lv_permissions_10_0=rulePermission();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"permissions",
            	    	      											lv_permissions_10_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Permission");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt21 >= 1 ) break loop21;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(21, input);
            	                throw eee;
            	        }
            	        cnt21++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:1444:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1444:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1445:4: {...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:1445:110: ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:1446:5: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:1449:8: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:1449:9: {...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1449:18: ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
            	    int alt24=3;
            	    switch ( input.LA(1) ) {
            	    case Needs:
            	        {
            	        alt24=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt24=2;
            	        }
            	        break;
            	    case RULE_BEGIN:
            	        {
            	        alt24=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 24, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt24) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:1449:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:1449:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
            	            // InternalGitHubActionsParser.g:1450:9: otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) )
            	            {
            	            otherlv_11=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_11, grammarAccess.getReuseWorkflowJobAccess().getNeedsKeyword_2_0_0());
            	              								
            	            }
            	            otherlv_12=(Token)match(input,Colon,FOLLOW_17); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_12, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_2_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1458:9: ( (otherlv_13= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:1459:10: (otherlv_13= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:1459:10: (otherlv_13= RULE_ID )
            	            // InternalGitHubActionsParser.g:1460:11: otherlv_13= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              											/* */
            	              										
            	            }
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              										
            	            }
            	            otherlv_13=(Token)match(input,RULE_ID,FOLLOW_26); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_13, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_0_2_0());
            	              										
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:1476:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:1476:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:1477:9: otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket
            	            {
            	            otherlv_14=(Token)match(input,LeftSquareBracket,FOLLOW_17); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_14, grammarAccess.getReuseWorkflowJobAccess().getLeftSquareBracketKeyword_2_1_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1481:9: ( (otherlv_15= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:1482:10: (otherlv_15= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:1482:10: (otherlv_15= RULE_ID )
            	            // InternalGitHubActionsParser.g:1483:11: otherlv_15= RULE_ID
            	            {
            	            if ( state.backtracking==0 ) {

            	              											/* */
            	              										
            	            }
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              										
            	            }
            	            otherlv_15=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_15, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_1_1_0());
            	              										
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:1497:9: (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )*
            	            loop22:
            	            do {
            	                int alt22=2;
            	                int LA22_0 = input.LA(1);

            	                if ( (LA22_0==Comma) ) {
            	                    alt22=1;
            	                }


            	                switch (alt22) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:1498:10: otherlv_16= Comma ( (otherlv_17= RULE_ID ) )
            	            	    {
            	            	    otherlv_16=(Token)match(input,Comma,FOLLOW_17); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_16, grammarAccess.getReuseWorkflowJobAccess().getCommaKeyword_2_1_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:1502:10: ( (otherlv_17= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:1503:11: (otherlv_17= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:1503:11: (otherlv_17= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:1504:12: otherlv_17= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_17=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_17, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_1_2_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop22;
            	                }
            	            } while (true);

            	            otherlv_18=(Token)match(input,RightSquareBracket,FOLLOW_26); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_18, grammarAccess.getReuseWorkflowJobAccess().getRightSquareBracketKeyword_2_1_3());
            	              								
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:1525:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:1525:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
            	            // InternalGitHubActionsParser.g:1526:9: this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END
            	            {
            	            this_BEGIN_19=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_19, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_2_2_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:1530:9: (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+
            	            int cnt23=0;
            	            loop23:
            	            do {
            	                int alt23=2;
            	                int LA23_0 = input.LA(1);

            	                if ( (LA23_0==HyphenMinus) ) {
            	                    alt23=1;
            	                }


            	                switch (alt23) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:1531:10: otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE
            	            	    {
            	            	    otherlv_20=(Token)match(input,HyphenMinus,FOLLOW_17); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_20, grammarAccess.getReuseWorkflowJobAccess().getHyphenMinusKeyword_2_2_1_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:1535:10: ( (otherlv_21= RULE_ID ) )
            	            	    // InternalGitHubActionsParser.g:1536:11: (otherlv_21= RULE_ID )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:1536:11: (otherlv_21= RULE_ID )
            	            	    // InternalGitHubActionsParser.g:1537:12: otherlv_21= RULE_ID
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												/* */
            	            	      											
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	            	      												}
            	            	      											
            	            	    }
            	            	    otherlv_21=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_21, grammarAccess.getReuseWorkflowJobAccess().getDependsOnJobCrossReference_2_2_1_1_0());
            	            	      											
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_22=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(this_NEWLINE_22, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_1_2());
            	            	      									
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt23 >= 1 ) break loop23;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(23, input);
            	                        throw eee;
            	                }
            	                cnt23++;
            	            } while (true);

            	            this_END_23=(Token)match(input,RULE_END,FOLLOW_26); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_23, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_2_2_2());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:1567:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1567:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1568:4: {...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:1568:110: ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:1569:5: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:1572:8: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:1572:9: {...}? => ( (lv_if_24_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1572:18: ( (lv_if_24_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:1572:19: (lv_if_24_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:1572:19: (lv_if_24_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:1573:9: lv_if_24_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getIfIfStatementParserRuleCall_3_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_if_24_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_24_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:1595:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1595:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1596:4: {...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:1596:110: ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1597:5: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:1600:8: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
            	    // InternalGitHubActionsParser.g:1600:9: {...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1600:18: (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
            	    // InternalGitHubActionsParser.g:1600:19: otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) )
            	    {
            	    otherlv_25=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_25, grammarAccess.getReuseWorkflowJobAccess().getRunsOnKeyword_4_0());
            	      							
            	    }
            	    otherlv_26=(Token)match(input,Colon,FOLLOW_27); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_26, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1608:8: ( (lv_agent_27_0= ruleAgent ) )
            	    // InternalGitHubActionsParser.g:1609:9: (lv_agent_27_0= ruleAgent )
            	    {
            	    // InternalGitHubActionsParser.g:1609:9: (lv_agent_27_0= ruleAgent )
            	    // InternalGitHubActionsParser.g:1610:10: lv_agent_27_0= ruleAgent
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getAgentAgentParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_agent_27_0=ruleAgent();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"agent",
            	      											lv_agent_27_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Agent");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:1633:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1633:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1634:4: {...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:1634:110: ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1635:5: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:1638:8: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
            	    // InternalGitHubActionsParser.g:1638:9: {...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1638:18: (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
            	    // InternalGitHubActionsParser.g:1638:19: otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
            	    {
            	    otherlv_28=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_28, grammarAccess.getReuseWorkflowJobAccess().getEnvironmentKeyword_5_0());
            	      							
            	    }
            	    otherlv_29=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_29, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1646:8: ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
            	    // InternalGitHubActionsParser.g:1647:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
            	    {
            	    // InternalGitHubActionsParser.g:1647:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
            	    // InternalGitHubActionsParser.g:1648:10: lv_stagingEnvironment_30_0= ruleStagingEnvironment
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_stagingEnvironment_30_0=ruleStagingEnvironment();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"stagingEnvironment",
            	      											lv_stagingEnvironment_30_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.StagingEnvironment");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:1671:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1671:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1672:4: {...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:1672:110: ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1673:5: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:1676:8: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
            	    // InternalGitHubActionsParser.g:1676:9: {...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1676:18: (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
            	    // InternalGitHubActionsParser.g:1676:19: otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
            	    {
            	    otherlv_31=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_31, grammarAccess.getReuseWorkflowJobAccess().getConcurrencyKeyword_6_0());
            	      							
            	    }
            	    otherlv_32=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_32, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1684:8: ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
            	    // InternalGitHubActionsParser.g:1685:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
            	    {
            	    // InternalGitHubActionsParser.g:1685:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
            	    // InternalGitHubActionsParser.g:1686:10: lv_concurrencyGroup_33_0= ruleConcurrencyGroup
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_concurrencyGroup_33_0=ruleConcurrencyGroup();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"concurrencyGroup",
            	      											lv_concurrencyGroup_33_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.ConcurrencyGroup");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:1709:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1709:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:1710:4: {...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:1710:110: ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:1711:5: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:1714:8: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:1714:9: {...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1714:18: (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
            	    // InternalGitHubActionsParser.g:1714:19: otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
            	    {
            	    otherlv_34=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_34, grammarAccess.getReuseWorkflowJobAccess().getEnvKeyword_7_0());
            	      							
            	    }
            	    otherlv_35=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_35, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_7_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1722:8: ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
            	    int cnt25=0;
            	    loop25:
            	    do {
            	        int alt25=2;
            	        int LA25_0 = input.LA(1);

            	        if ( (LA25_0==RULE_BEGIN) ) {
            	            int LA25_2 = input.LA(2);

            	            if ( (LA25_2==RULE_ID) ) {
            	                int LA25_3 = input.LA(3);

            	                if ( (LA25_3==Colon) ) {
            	                    int LA25_4 = input.LA(4);

            	                    if ( (LA25_4==DollarSignLeftCurlyBracketLeftCurlyBracket||LA25_4==RULE_STRING) ) {
            	                        alt25=1;
            	                    }


            	                }


            	            }


            	        }


            	        switch (alt25) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1723:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1723:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:1724:10: lv_environmentVariables_36_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_26);
            	    	    lv_environmentVariables_36_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_36_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt25 >= 1 ) break loop25;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(25, input);
            	                throw eee;
            	        }
            	        cnt25++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalGitHubActionsParser.g:1747:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1747:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1748:4: {...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalGitHubActionsParser.g:1748:110: ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1749:5: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8);
            	    // InternalGitHubActionsParser.g:1752:8: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
            	    // InternalGitHubActionsParser.g:1752:9: {...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1752:18: (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
            	    // InternalGitHubActionsParser.g:1752:19: otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) )
            	    {
            	    otherlv_37=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_37, grammarAccess.getReuseWorkflowJobAccess().getDefaultsKeyword_8_0());
            	      							
            	    }
            	    otherlv_38=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_38, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_8_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1760:8: ( (lv_defaults_39_0= ruleDefaults ) )
            	    // InternalGitHubActionsParser.g:1761:9: (lv_defaults_39_0= ruleDefaults )
            	    {
            	    // InternalGitHubActionsParser.g:1761:9: (lv_defaults_39_0= ruleDefaults )
            	    // InternalGitHubActionsParser.g:1762:10: lv_defaults_39_0= ruleDefaults
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getDefaultsDefaultsParserRuleCall_8_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_defaults_39_0=ruleDefaults();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"defaults",
            	      											lv_defaults_39_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Defaults");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 10 :
            	    // InternalGitHubActionsParser.g:1785:3: ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1785:3: ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1786:4: {...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9)");
            	    }
            	    // InternalGitHubActionsParser.g:1786:110: ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1787:5: ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9);
            	    // InternalGitHubActionsParser.g:1790:8: ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) )
            	    // InternalGitHubActionsParser.g:1790:9: {...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1790:18: (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) )
            	    // InternalGitHubActionsParser.g:1790:19: otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) )
            	    {
            	    otherlv_40=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_40, grammarAccess.getReuseWorkflowJobAccess().getStrategyKeyword_9_0());
            	      							
            	    }
            	    otherlv_41=(Token)match(input,Colon,FOLLOW_22); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_41, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_9_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1798:8: ( (lv_strategy_42_0= ruleStrategy ) )
            	    // InternalGitHubActionsParser.g:1799:9: (lv_strategy_42_0= ruleStrategy )
            	    {
            	    // InternalGitHubActionsParser.g:1799:9: (lv_strategy_42_0= ruleStrategy )
            	    // InternalGitHubActionsParser.g:1800:10: lv_strategy_42_0= ruleStrategy
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStrategyStrategyParserRuleCall_9_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_strategy_42_0=ruleStrategy();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"strategy",
            	      											lv_strategy_42_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Strategy");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 11 :
            	    // InternalGitHubActionsParser.g:1823:3: ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1823:3: ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1824:4: {...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10)");
            	    }
            	    // InternalGitHubActionsParser.g:1824:111: ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1825:5: ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10);
            	    // InternalGitHubActionsParser.g:1828:8: ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) )
            	    // InternalGitHubActionsParser.g:1828:9: {...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1828:18: (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) )
            	    // InternalGitHubActionsParser.g:1828:19: otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) )
            	    {
            	    otherlv_43=(Token)match(input,Container,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_43, grammarAccess.getReuseWorkflowJobAccess().getContainerKeyword_10_0());
            	      							
            	    }
            	    otherlv_44=(Token)match(input,Colon,FOLLOW_23); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_44, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_10_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1836:8: ( (lv_container_45_0= ruleContainer ) )
            	    // InternalGitHubActionsParser.g:1837:9: (lv_container_45_0= ruleContainer )
            	    {
            	    // InternalGitHubActionsParser.g:1837:9: (lv_container_45_0= ruleContainer )
            	    // InternalGitHubActionsParser.g:1838:10: lv_container_45_0= ruleContainer
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContainerContainerParserRuleCall_10_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_container_45_0=ruleContainer();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"container",
            	      											lv_container_45_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Container");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 12 :
            	    // InternalGitHubActionsParser.g:1861:3: ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1861:3: ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:1862:4: {...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11)");
            	    }
            	    // InternalGitHubActionsParser.g:1862:111: ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:1863:5: ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11);
            	    // InternalGitHubActionsParser.g:1866:8: ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) )
            	    // InternalGitHubActionsParser.g:1866:9: {...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1866:18: (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ )
            	    // InternalGitHubActionsParser.g:1866:19: otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+
            	    {
            	    otherlv_46=(Token)match(input,Services,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_46, grammarAccess.getReuseWorkflowJobAccess().getServicesKeyword_11_0());
            	      							
            	    }
            	    otherlv_47=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_47, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_11_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1874:8: ( (lv_services_48_0= ruleService ) )+
            	    int cnt26=0;
            	    loop26:
            	    do {
            	        int alt26=2;
            	        alt26 = dfa26.predict(input);
            	        switch (alt26) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1875:9: (lv_services_48_0= ruleService )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1875:9: (lv_services_48_0= ruleService )
            	    	    // InternalGitHubActionsParser.g:1876:10: lv_services_48_0= ruleService
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getServicesServiceParserRuleCall_11_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_26);
            	    	    lv_services_48_0=ruleService();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"services",
            	    	      											lv_services_48_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.Service");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt26 >= 1 ) break loop26;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(26, input);
            	                throw eee;
            	        }
            	        cnt26++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 13 :
            	    // InternalGitHubActionsParser.g:1899:3: ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1899:3: ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1900:4: {...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12)");
            	    }
            	    // InternalGitHubActionsParser.g:1900:111: ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1901:5: ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12);
            	    // InternalGitHubActionsParser.g:1904:8: ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:1904:9: {...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1904:18: (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:1904:19: otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) )
            	    {
            	    otherlv_49=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_49, grammarAccess.getReuseWorkflowJobAccess().getUsesKeyword_12_0());
            	      							
            	    }
            	    otherlv_50=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_50, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_12_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1912:8: ( (lv_workflowPath_51_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:1913:9: (lv_workflowPath_51_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:1913:9: (lv_workflowPath_51_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:1914:10: lv_workflowPath_51_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getWorkflowPathExpressionParserRuleCall_12_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_workflowPath_51_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"workflowPath",
            	      											lv_workflowPath_51_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 14 :
            	    // InternalGitHubActionsParser.g:1937:3: ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1937:3: ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:1938:4: {...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13)");
            	    }
            	    // InternalGitHubActionsParser.g:1938:111: ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:1939:5: ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13);
            	    // InternalGitHubActionsParser.g:1942:8: ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:1942:9: {...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1942:18: (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ )
            	    // InternalGitHubActionsParser.g:1942:19: otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+
            	    {
            	    otherlv_52=(Token)match(input,With,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_52, grammarAccess.getReuseWorkflowJobAccess().getWithKeyword_13_0());
            	      							
            	    }
            	    otherlv_53=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_53, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_13_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1950:8: ( (lv_args_54_0= ruleVariableAssignment ) )+
            	    int cnt27=0;
            	    loop27:
            	    do {
            	        int alt27=2;
            	        int LA27_0 = input.LA(1);

            	        if ( (LA27_0==RULE_BEGIN) ) {
            	            int LA27_2 = input.LA(2);

            	            if ( (LA27_2==RULE_ID) ) {
            	                int LA27_3 = input.LA(3);

            	                if ( (LA27_3==Colon) ) {
            	                    int LA27_4 = input.LA(4);

            	                    if ( (LA27_4==DollarSignLeftCurlyBracketLeftCurlyBracket||LA27_4==RULE_STRING) ) {
            	                        alt27=1;
            	                    }


            	                }


            	            }


            	        }


            	        switch (alt27) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:1951:9: (lv_args_54_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:1951:9: (lv_args_54_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:1952:10: lv_args_54_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getArgsVariableAssignmentParserRuleCall_13_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_26);
            	    	    lv_args_54_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"args",
            	    	      											lv_args_54_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt27 >= 1 ) break loop27;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(27, input);
            	                throw eee;
            	        }
            	        cnt27++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 15 :
            	    // InternalGitHubActionsParser.g:1975:3: ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:1975:3: ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) )
            	    // InternalGitHubActionsParser.g:1976:4: {...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14)");
            	    }
            	    // InternalGitHubActionsParser.g:1976:111: ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:1977:5: ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14);
            	    // InternalGitHubActionsParser.g:1980:8: ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:1980:9: {...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:1980:18: (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:1980:19: otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ )
            	    {
            	    otherlv_55=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_55, grammarAccess.getReuseWorkflowJobAccess().getSecretsKeyword_14_0());
            	      							
            	    }
            	    otherlv_56=(Token)match(input,Colon,FOLLOW_28); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_56, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_14_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:1988:8: ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ )
            	    int alt29=2;
            	    int LA29_0 = input.LA(1);

            	    if ( (LA29_0==Inherit) ) {
            	        alt29=1;
            	    }
            	    else if ( (LA29_0==RULE_BEGIN) ) {
            	        alt29=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 29, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt29) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:1989:9: ( (lv_inheritSecrets_57_0= Inherit ) )
            	            {
            	            // InternalGitHubActionsParser.g:1989:9: ( (lv_inheritSecrets_57_0= Inherit ) )
            	            // InternalGitHubActionsParser.g:1990:10: (lv_inheritSecrets_57_0= Inherit )
            	            {
            	            // InternalGitHubActionsParser.g:1990:10: (lv_inheritSecrets_57_0= Inherit )
            	            // InternalGitHubActionsParser.g:1991:11: lv_inheritSecrets_57_0= Inherit
            	            {
            	            lv_inheritSecrets_57_0=(Token)match(input,Inherit,FOLLOW_26); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(lv_inheritSecrets_57_0, grammarAccess.getReuseWorkflowJobAccess().getInheritSecretsInheritKeyword_14_2_0_0());
            	              										
            	            }
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElement(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              											setWithLastConsumed(current, "inheritSecrets", lv_inheritSecrets_57_0 != null, "inherit");
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:2004:9: ( (lv_secrets_58_0= ruleVariableAssignment ) )+
            	            {
            	            // InternalGitHubActionsParser.g:2004:9: ( (lv_secrets_58_0= ruleVariableAssignment ) )+
            	            int cnt28=0;
            	            loop28:
            	            do {
            	                int alt28=2;
            	                int LA28_0 = input.LA(1);

            	                if ( (LA28_0==RULE_BEGIN) ) {
            	                    int LA28_2 = input.LA(2);

            	                    if ( (LA28_2==RULE_ID) ) {
            	                        int LA28_3 = input.LA(3);

            	                        if ( (LA28_3==Colon) ) {
            	                            int LA28_4 = input.LA(4);

            	                            if ( (LA28_4==DollarSignLeftCurlyBracketLeftCurlyBracket||LA28_4==RULE_STRING) ) {
            	                                alt28=1;
            	                            }


            	                        }


            	                    }


            	                }


            	                switch (alt28) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:2005:10: (lv_secrets_58_0= ruleVariableAssignment )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:2005:10: (lv_secrets_58_0= ruleVariableAssignment )
            	            	    // InternalGitHubActionsParser.g:2006:11: lv_secrets_58_0= ruleVariableAssignment
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getSecretsVariableAssignmentParserRuleCall_14_2_1_0());
            	            	      										
            	            	    }
            	            	    pushFollow(FOLLOW_26);
            	            	    lv_secrets_58_0=ruleVariableAssignment();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											if (current==null) {
            	            	      												current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	            	      											}
            	            	      											add(
            	            	      												current,
            	            	      												"secrets",
            	            	      												lv_secrets_58_0,
            	            	      												"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	            	      											afterParserOrEnumRuleCall();
            	            	      										
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt28 >= 1 ) break loop28;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(28, input);
            	                        throw eee;
            	                }
            	                cnt28++;
            	            } while (true);


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 16 :
            	    // InternalGitHubActionsParser.g:2030:3: ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2030:3: ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2031:4: {...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15)");
            	    }
            	    // InternalGitHubActionsParser.g:2031:111: ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2032:5: ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15);
            	    // InternalGitHubActionsParser.g:2035:8: ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:2035:9: {...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2035:18: (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:2035:19: otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) )
            	    {
            	    otherlv_59=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_59, grammarAccess.getReuseWorkflowJobAccess().getContinueOnErrorKeyword_15_0());
            	      							
            	    }
            	    otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_60, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_15_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2043:8: ( (lv_continueOnError_61_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2044:9: (lv_continueOnError_61_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2044:9: (lv_continueOnError_61_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2045:10: lv_continueOnError_61_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContinueOnErrorExpressionParserRuleCall_15_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_26);
            	    lv_continueOnError_61_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_61_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 17 :
            	    // InternalGitHubActionsParser.g:2068:3: ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2068:3: ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:2069:4: {...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16)");
            	    }
            	    // InternalGitHubActionsParser.g:2069:111: ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:2070:5: ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16);
            	    // InternalGitHubActionsParser.g:2073:8: ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) )
            	    // InternalGitHubActionsParser.g:2073:9: {...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2073:18: ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END )
            	    // InternalGitHubActionsParser.g:2073:19: (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:2073:19: (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )?
            	    int alt30=2;
            	    int LA30_0 = input.LA(1);

            	    if ( (LA30_0==TimeoutMinutes) ) {
            	        alt30=1;
            	    }
            	    switch (alt30) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:2074:9: otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) )
            	            {
            	            otherlv_62=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_62, grammarAccess.getReuseWorkflowJobAccess().getTimeoutMinutesKeyword_16_0_0());
            	              								
            	            }
            	            otherlv_63=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_63, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_16_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:2082:9: ( (lv_timeoutMinutes_64_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:2083:10: (lv_timeoutMinutes_64_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:2083:10: (lv_timeoutMinutes_64_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:2084:11: lv_timeoutMinutes_64_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getTimeoutMinutesExpressionParserRuleCall_16_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_24);
            	            lv_timeoutMinutes_64_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getReuseWorkflowJobRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_64_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    this_END_65=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_65, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1());
            	      							
            	    }
            	    this_END_66=(Token)match(input,RULE_END,FOLLOW_26); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_66, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_2());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt31 >= 1 ) break loop31;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(31, input);
                        throw eee;
                }
                cnt31++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleReuseWorkflowJob", "getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleReuseWorkflowJob"


    // $ANTLR start "entryRuleAgent"
    // InternalGitHubActionsParser.g:2130:1: entryRuleAgent returns [EObject current=null] : iv_ruleAgent= ruleAgent EOF ;
    public final EObject entryRuleAgent() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAgent = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getAgentAccess().getUnorderedGroup_1_1()
        	);

        try {
            // InternalGitHubActionsParser.g:2134:2: (iv_ruleAgent= ruleAgent EOF )
            // InternalGitHubActionsParser.g:2135:2: iv_ruleAgent= ruleAgent EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAgentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAgent=ruleAgent();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAgent; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleAgent"


    // $ANTLR start "ruleAgent"
    // InternalGitHubActionsParser.g:2144:1: ruleAgent returns [EObject current=null] : ( ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) ) | ( () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) ) ) ) ;
    public final EObject ruleAgent() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token this_BEGIN_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_9=null;
        Token this_END_10=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token this_BEGIN_21=null;
        Token otherlv_22=null;
        Token this_NEWLINE_24=null;
        Token this_END_25=null;
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token this_END_30=null;
        EObject lv_labels_0_0 = null;

        EObject lv_labels_2_0 = null;

        EObject lv_labels_4_0 = null;

        EObject lv_labels_8_0 = null;

        EObject lv_labels_15_0 = null;

        EObject lv_labels_17_0 = null;

        EObject lv_labels_19_0 = null;

        EObject lv_labels_23_0 = null;

        EObject lv_group_29_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getAgentAccess().getUnorderedGroup_1_1()
        	);

        try {
            // InternalGitHubActionsParser.g:2153:2: ( ( ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) ) | ( () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) ) ) ) )
            // InternalGitHubActionsParser.g:2154:2: ( ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) ) | ( () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) ) ) )
            {
            // InternalGitHubActionsParser.g:2154:2: ( ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) ) | ( () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) ) ) )
            int alt39=2;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // InternalGitHubActionsParser.g:2155:3: ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) )
                    {
                    // InternalGitHubActionsParser.g:2155:3: ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) )
                    int alt34=3;
                    switch ( input.LA(1) ) {
                    case DollarSignLeftCurlyBracketLeftCurlyBracket:
                    case RULE_STRING:
                        {
                        alt34=1;
                        }
                        break;
                    case LeftSquareBracket:
                        {
                        alt34=2;
                        }
                        break;
                    case RULE_BEGIN:
                        {
                        alt34=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 34, 0, input);

                        throw nvae;
                    }

                    switch (alt34) {
                        case 1 :
                            // InternalGitHubActionsParser.g:2156:4: ( (lv_labels_0_0= ruleExpression ) )
                            {
                            // InternalGitHubActionsParser.g:2156:4: ( (lv_labels_0_0= ruleExpression ) )
                            // InternalGitHubActionsParser.g:2157:5: (lv_labels_0_0= ruleExpression )
                            {
                            // InternalGitHubActionsParser.g:2157:5: (lv_labels_0_0= ruleExpression )
                            // InternalGitHubActionsParser.g:2158:6: lv_labels_0_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              						newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_0_0());
                              					
                            }
                            pushFollow(FOLLOW_2);
                            lv_labels_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              						if (current==null) {
                              							current = createModelElementForParent(grammarAccess.getAgentRule());
                              						}
                              						add(
                              							current,
                              							"labels",
                              							lv_labels_0_0,
                              							"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                              						afterParserOrEnumRuleCall();
                              					
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalGitHubActionsParser.g:2176:4: (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket )
                            {
                            // InternalGitHubActionsParser.g:2176:4: (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket )
                            // InternalGitHubActionsParser.g:2177:5: otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket
                            {
                            otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_1, grammarAccess.getAgentAccess().getLeftSquareBracketKeyword_0_1_0());
                              				
                            }
                            // InternalGitHubActionsParser.g:2181:5: ( (lv_labels_2_0= ruleExpression ) )
                            // InternalGitHubActionsParser.g:2182:6: (lv_labels_2_0= ruleExpression )
                            {
                            // InternalGitHubActionsParser.g:2182:6: (lv_labels_2_0= ruleExpression )
                            // InternalGitHubActionsParser.g:2183:7: lv_labels_2_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_1_1_0());
                              						
                            }
                            pushFollow(FOLLOW_8);
                            lv_labels_2_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getAgentRule());
                              							}
                              							add(
                              								current,
                              								"labels",
                              								lv_labels_2_0,
                              								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }

                            // InternalGitHubActionsParser.g:2200:5: (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )*
                            loop32:
                            do {
                                int alt32=2;
                                int LA32_0 = input.LA(1);

                                if ( (LA32_0==Comma) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                            	case 1 :
                            	    // InternalGitHubActionsParser.g:2201:6: otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) )
                            	    {
                            	    otherlv_3=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_3, grammarAccess.getAgentAccess().getCommaKeyword_0_1_2_0());
                            	      					
                            	    }
                            	    // InternalGitHubActionsParser.g:2205:6: ( (lv_labels_4_0= ruleExpression ) )
                            	    // InternalGitHubActionsParser.g:2206:7: (lv_labels_4_0= ruleExpression )
                            	    {
                            	    // InternalGitHubActionsParser.g:2206:7: (lv_labels_4_0= ruleExpression )
                            	    // InternalGitHubActionsParser.g:2207:8: lv_labels_4_0= ruleExpression
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_1_2_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_8);
                            	    lv_labels_4_0=ruleExpression();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAgentRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"labels",
                            	      									lv_labels_4_0,
                            	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop32;
                                }
                            } while (true);

                            otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getAgentAccess().getRightSquareBracketKeyword_0_1_3());
                              				
                            }

                            }


                            }
                            break;
                        case 3 :
                            // InternalGitHubActionsParser.g:2231:4: (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END )
                            {
                            // InternalGitHubActionsParser.g:2231:4: (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END )
                            // InternalGitHubActionsParser.g:2232:5: this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END
                            {
                            this_BEGIN_6=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_BEGIN_6, grammarAccess.getAgentAccess().getBEGINTerminalRuleCall_0_2_0());
                              				
                            }
                            // InternalGitHubActionsParser.g:2236:5: (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+
                            int cnt33=0;
                            loop33:
                            do {
                                int alt33=2;
                                int LA33_0 = input.LA(1);

                                if ( (LA33_0==HyphenMinus) ) {
                                    alt33=1;
                                }


                                switch (alt33) {
                            	case 1 :
                            	    // InternalGitHubActionsParser.g:2237:6: otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE
                            	    {
                            	    otherlv_7=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(otherlv_7, grammarAccess.getAgentAccess().getHyphenMinusKeyword_0_2_1_0());
                            	      					
                            	    }
                            	    // InternalGitHubActionsParser.g:2241:6: ( (lv_labels_8_0= ruleExpression ) )
                            	    // InternalGitHubActionsParser.g:2242:7: (lv_labels_8_0= ruleExpression )
                            	    {
                            	    // InternalGitHubActionsParser.g:2242:7: (lv_labels_8_0= ruleExpression )
                            	    // InternalGitHubActionsParser.g:2243:8: lv_labels_8_0= ruleExpression
                            	    {
                            	    if ( state.backtracking==0 ) {

                            	      								newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_2_1_1_0());
                            	      							
                            	    }
                            	    pushFollow(FOLLOW_10);
                            	    lv_labels_8_0=ruleExpression();

                            	    state._fsp--;
                            	    if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      								if (current==null) {
                            	      									current = createModelElementForParent(grammarAccess.getAgentRule());
                            	      								}
                            	      								add(
                            	      									current,
                            	      									"labels",
                            	      									lv_labels_8_0,
                            	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                            	      								afterParserOrEnumRuleCall();
                            	      							
                            	    }

                            	    }


                            	    }

                            	    this_NEWLINE_9=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
                            	    if ( state.backtracking==0 ) {

                            	      						newLeafNode(this_NEWLINE_9, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_0_2_1_2());
                            	      					
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt33 >= 1 ) break loop33;
                            	    if (state.backtracking>0) {state.failed=true; return current;}
                                        EarlyExitException eee =
                                            new EarlyExitException(33, input);
                                        throw eee;
                                }
                                cnt33++;
                            } while (true);

                            this_END_10=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(this_END_10, grammarAccess.getAgentAccess().getENDTerminalRuleCall_0_2_2());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:2272:3: ( () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) ) )
                    {
                    // InternalGitHubActionsParser.g:2272:3: ( () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) ) )
                    // InternalGitHubActionsParser.g:2273:4: () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) )
                    {
                    // InternalGitHubActionsParser.g:2273:4: ()
                    // InternalGitHubActionsParser.g:2274:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAgentAccess().getAgentAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:2283:4: ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) )
                    // InternalGitHubActionsParser.g:2284:5: ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) )
                    {
                    // InternalGitHubActionsParser.g:2284:5: ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) )
                    // InternalGitHubActionsParser.g:2285:6: ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* )
                    {
                    getUnorderedGroupHelper().enter(grammarAccess.getAgentAccess().getUnorderedGroup_1_1());
                    // InternalGitHubActionsParser.g:2288:6: ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* )
                    // InternalGitHubActionsParser.g:2289:7: ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )*
                    {
                    // InternalGitHubActionsParser.g:2289:7: ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )*
                    loop38:
                    do {
                        int alt38=3;
                        alt38 = dfa38.predict(input);
                        switch (alt38) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:2290:5: ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:2290:5: ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) )
                    	    // InternalGitHubActionsParser.g:2291:6: {...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleAgent", "getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0)");
                    	    }
                    	    // InternalGitHubActionsParser.g:2291:105: ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:2292:7: ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0);
                    	    // InternalGitHubActionsParser.g:2295:10: ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:2295:11: {...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleAgent", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:2295:20: ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) )
                    	    int alt37=3;
                    	    switch ( input.LA(1) ) {
                    	    case Labels:
                    	        {
                    	        alt37=1;
                    	        }
                    	        break;
                    	    case LeftSquareBracket:
                    	        {
                    	        alt37=2;
                    	        }
                    	        break;
                    	    case RULE_BEGIN:
                    	        {
                    	        alt37=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 37, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt37) {
                    	        case 1 :
                    	            // InternalGitHubActionsParser.g:2295:21: (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) )
                    	            {
                    	            // InternalGitHubActionsParser.g:2295:21: (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) )
                    	            // InternalGitHubActionsParser.g:2296:11: otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) )
                    	            {
                    	            otherlv_13=(Token)match(input,Labels,FOLLOW_3); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_13, grammarAccess.getAgentAccess().getLabelsKeyword_1_1_0_0_0());
                    	              										
                    	            }
                    	            otherlv_14=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_14, grammarAccess.getAgentAccess().getColonKeyword_1_1_0_0_1());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:2304:11: ( (lv_labels_15_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:2305:12: (lv_labels_15_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:2305:12: (lv_labels_15_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:2306:13: lv_labels_15_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              													newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_0_2_0());
                    	              												
                    	            }
                    	            pushFollow(FOLLOW_29);
                    	            lv_labels_15_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													if (current==null) {
                    	              														current = createModelElementForParent(grammarAccess.getAgentRule());
                    	              													}
                    	              													add(
                    	              														current,
                    	              														"labels",
                    	              														lv_labels_15_0,
                    	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              													afterParserOrEnumRuleCall();
                    	              												
                    	            }

                    	            }


                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalGitHubActionsParser.g:2325:10: (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket )
                    	            {
                    	            // InternalGitHubActionsParser.g:2325:10: (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket )
                    	            // InternalGitHubActionsParser.g:2326:11: otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket
                    	            {
                    	            otherlv_16=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_16, grammarAccess.getAgentAccess().getLeftSquareBracketKeyword_1_1_0_1_0());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:2330:11: ( (lv_labels_17_0= ruleExpression ) )
                    	            // InternalGitHubActionsParser.g:2331:12: (lv_labels_17_0= ruleExpression )
                    	            {
                    	            // InternalGitHubActionsParser.g:2331:12: (lv_labels_17_0= ruleExpression )
                    	            // InternalGitHubActionsParser.g:2332:13: lv_labels_17_0= ruleExpression
                    	            {
                    	            if ( state.backtracking==0 ) {

                    	              													newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_1_0());
                    	              												
                    	            }
                    	            pushFollow(FOLLOW_8);
                    	            lv_labels_17_0=ruleExpression();

                    	            state._fsp--;
                    	            if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              													if (current==null) {
                    	              														current = createModelElementForParent(grammarAccess.getAgentRule());
                    	              													}
                    	              													add(
                    	              														current,
                    	              														"labels",
                    	              														lv_labels_17_0,
                    	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	              													afterParserOrEnumRuleCall();
                    	              												
                    	            }

                    	            }


                    	            }

                    	            // InternalGitHubActionsParser.g:2349:11: (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )*
                    	            loop35:
                    	            do {
                    	                int alt35=2;
                    	                int LA35_0 = input.LA(1);

                    	                if ( (LA35_0==Comma) ) {
                    	                    alt35=1;
                    	                }


                    	                switch (alt35) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:2350:12: otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) )
                    	            	    {
                    	            	    otherlv_18=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(otherlv_18, grammarAccess.getAgentAccess().getCommaKeyword_1_1_0_1_2_0());
                    	            	      											
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:2354:12: ( (lv_labels_19_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:2355:13: (lv_labels_19_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:2355:13: (lv_labels_19_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:2356:14: lv_labels_19_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_2_1_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_8);
                    	            	    lv_labels_19_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getAgentRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"labels",
                    	            	      															lv_labels_19_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop35;
                    	                }
                    	            } while (true);

                    	            otherlv_20=(Token)match(input,RightSquareBracket,FOLLOW_29); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(otherlv_20, grammarAccess.getAgentAccess().getRightSquareBracketKeyword_1_1_0_1_3());
                    	              										
                    	            }

                    	            }


                    	            }
                    	            break;
                    	        case 3 :
                    	            // InternalGitHubActionsParser.g:2380:10: (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END )
                    	            {
                    	            // InternalGitHubActionsParser.g:2380:10: (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END )
                    	            // InternalGitHubActionsParser.g:2381:11: this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END
                    	            {
                    	            this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_BEGIN_21, grammarAccess.getAgentAccess().getBEGINTerminalRuleCall_1_1_0_2_0());
                    	              										
                    	            }
                    	            // InternalGitHubActionsParser.g:2385:11: (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+
                    	            int cnt36=0;
                    	            loop36:
                    	            do {
                    	                int alt36=2;
                    	                int LA36_0 = input.LA(1);

                    	                if ( (LA36_0==HyphenMinus) ) {
                    	                    alt36=1;
                    	                }


                    	                switch (alt36) {
                    	            	case 1 :
                    	            	    // InternalGitHubActionsParser.g:2386:12: otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE
                    	            	    {
                    	            	    otherlv_22=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(otherlv_22, grammarAccess.getAgentAccess().getHyphenMinusKeyword_1_1_0_2_1_0());
                    	            	      											
                    	            	    }
                    	            	    // InternalGitHubActionsParser.g:2390:12: ( (lv_labels_23_0= ruleExpression ) )
                    	            	    // InternalGitHubActionsParser.g:2391:13: (lv_labels_23_0= ruleExpression )
                    	            	    {
                    	            	    // InternalGitHubActionsParser.g:2391:13: (lv_labels_23_0= ruleExpression )
                    	            	    // InternalGitHubActionsParser.g:2392:14: lv_labels_23_0= ruleExpression
                    	            	    {
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_2_1_1_0());
                    	            	      													
                    	            	    }
                    	            	    pushFollow(FOLLOW_10);
                    	            	    lv_labels_23_0=ruleExpression();

                    	            	    state._fsp--;
                    	            	    if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      														if (current==null) {
                    	            	      															current = createModelElementForParent(grammarAccess.getAgentRule());
                    	            	      														}
                    	            	      														add(
                    	            	      															current,
                    	            	      															"labels",
                    	            	      															lv_labels_23_0,
                    	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	            	      														afterParserOrEnumRuleCall();
                    	            	      													
                    	            	    }

                    	            	    }


                    	            	    }

                    	            	    this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
                    	            	    if ( state.backtracking==0 ) {

                    	            	      												newLeafNode(this_NEWLINE_24, grammarAccess.getAgentAccess().getNEWLINETerminalRuleCall_1_1_0_2_1_2());
                    	            	      											
                    	            	    }

                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt36 >= 1 ) break loop36;
                    	            	    if (state.backtracking>0) {state.failed=true; return current;}
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(36, input);
                    	                        throw eee;
                    	                }
                    	                cnt36++;
                    	            } while (true);

                    	            this_END_25=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
                    	            if ( state.backtracking==0 ) {

                    	              											newLeafNode(this_END_25, grammarAccess.getAgentAccess().getENDTerminalRuleCall_1_1_0_2_2());
                    	              										
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAgentAccess().getUnorderedGroup_1_1());

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalGitHubActionsParser.g:2425:5: ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) )
                    	    {
                    	    // InternalGitHubActionsParser.g:2425:5: ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) )
                    	    // InternalGitHubActionsParser.g:2426:6: {...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 1) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleAgent", "getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 1)");
                    	    }
                    	    // InternalGitHubActionsParser.g:2426:105: ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) )
                    	    // InternalGitHubActionsParser.g:2427:7: ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) )
                    	    {
                    	    getUnorderedGroupHelper().select(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 1);
                    	    // InternalGitHubActionsParser.g:2430:10: ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) )
                    	    // InternalGitHubActionsParser.g:2430:11: {...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        if (state.backtracking>0) {state.failed=true; return current;}
                    	        throw new FailedPredicateException(input, "ruleAgent", "true");
                    	    }
                    	    // InternalGitHubActionsParser.g:2430:20: (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END )
                    	    // InternalGitHubActionsParser.g:2430:21: otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END
                    	    {
                    	    otherlv_26=(Token)match(input,Group,FOLLOW_3); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_26, grammarAccess.getAgentAccess().getGroupKeyword_1_1_1_0());
                    	      									
                    	    }
                    	    otherlv_27=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(otherlv_27, grammarAccess.getAgentAccess().getColonKeyword_1_1_1_1());
                    	      									
                    	    }
                    	    this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_BEGIN_28, grammarAccess.getAgentAccess().getBEGINTerminalRuleCall_1_1_1_2());
                    	      									
                    	    }
                    	    // InternalGitHubActionsParser.g:2442:10: ( (lv_group_29_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:2443:11: (lv_group_29_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:2443:11: (lv_group_29_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:2444:12: lv_group_29_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      												newCompositeNode(grammarAccess.getAgentAccess().getGroupExpressionParserRuleCall_1_1_1_3_0());
                    	      											
                    	    }
                    	    pushFollow(FOLLOW_24);
                    	    lv_group_29_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      												if (current==null) {
                    	      													current = createModelElementForParent(grammarAccess.getAgentRule());
                    	      												}
                    	      												set(
                    	      													current,
                    	      													"group",
                    	      													lv_group_29_0,
                    	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      												afterParserOrEnumRuleCall();
                    	      											
                    	    }

                    	    }


                    	    }

                    	    this_END_30=(Token)match(input,RULE_END,FOLLOW_29); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      										newLeafNode(this_END_30, grammarAccess.getAgentAccess().getENDTerminalRuleCall_1_1_1_4());
                    	      									
                    	    }

                    	    }


                    	    }

                    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAgentAccess().getUnorderedGroup_1_1());

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    }


                    }

                    getUnorderedGroupHelper().leave(grammarAccess.getAgentAccess().getUnorderedGroup_1_1());

                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleAgent"


    // $ANTLR start "entryRuleStep"
    // InternalGitHubActionsParser.g:2486:1: entryRuleStep returns [EObject current=null] : iv_ruleStep= ruleStep EOF ;
    public final EObject entryRuleStep() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStep = null;


        try {
            // InternalGitHubActionsParser.g:2486:45: (iv_ruleStep= ruleStep EOF )
            // InternalGitHubActionsParser.g:2487:2: iv_ruleStep= ruleStep EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStepRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStep=ruleStep();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStep; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStep"


    // $ANTLR start "ruleStep"
    // InternalGitHubActionsParser.g:2493:1: ruleStep returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END ) ;
    public final EObject ruleStep() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token otherlv_1=null;
        Token this_END_4=null;
        EObject this_Command_2 = null;

        EObject this_Package_3 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:2499:2: ( (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END ) )
            // InternalGitHubActionsParser.g:2500:2: (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END )
            {
            // InternalGitHubActionsParser.g:2500:2: (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END )
            // InternalGitHubActionsParser.g:2501:3: this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus (this_Command_2= ruleCommand | this_Package_3= rulePackage ) this_END_4= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getStepAccess().getBEGINTerminalRuleCall_0());
              		
            }
            otherlv_1=(Token)match(input,HyphenMinus,FOLLOW_30); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStepAccess().getHyphenMinusKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:2509:3: (this_Command_2= ruleCommand | this_Package_3= rulePackage )
            int alt40=2;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // InternalGitHubActionsParser.g:2510:4: this_Command_2= ruleCommand
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStepAccess().getCommandParserRuleCall_2_0());
                      			
                    }
                    pushFollow(FOLLOW_24);
                    this_Command_2=ruleCommand();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Command_2;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:2522:4: this_Package_3= rulePackage
                    {
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getStepAccess().getPackageParserRuleCall_2_1());
                      			
                    }
                    pushFollow(FOLLOW_24);
                    this_Package_3=rulePackage();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_Package_3;
                      				afterParserOrEnumRuleCall();
                      			
                    }

                    }
                    break;

            }

            this_END_4=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_4, grammarAccess.getStepAccess().getENDTerminalRuleCall_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStep"


    // $ANTLR start "entryRuleCommand"
    // InternalGitHubActionsParser.g:2542:1: entryRuleCommand returns [EObject current=null] : iv_ruleCommand= ruleCommand EOF ;
    public final EObject entryRuleCommand() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCommand = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getCommandAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:2546:2: (iv_ruleCommand= ruleCommand EOF )
            // InternalGitHubActionsParser.g:2547:2: iv_ruleCommand= ruleCommand EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCommandRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCommand=ruleCommand();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCommand; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleCommand"


    // $ANTLR start "ruleCommand"
    // InternalGitHubActionsParser.g:2556:1: ruleCommand returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleCommand() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_24=null;
        EObject lv_if_4_0 = null;

        EObject lv_name_7_0 = null;

        EObject lv_shell_10_0 = null;

        EObject lv_workingDirectory_13_0 = null;

        EObject lv_environmentVariables_16_0 = null;

        EObject lv_continueOnError_19_0 = null;

        EObject lv_timeoutMinutes_22_0 = null;

        EObject lv_command_25_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getCommandAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:2565:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:2566:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:2566:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:2567:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:2567:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:2568:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getCommandAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:2571:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:2572:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:2572:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+
            int cnt43=0;
            loop43:
            do {
                int alt43=9;
                alt43 = dfa43.predict(input);
                switch (alt43) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:2573:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2573:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2574:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:2574:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2575:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:2578:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
            	    // InternalGitHubActionsParser.g:2578:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2578:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
            	    // InternalGitHubActionsParser.g:2578:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) )
            	    {
            	    otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_1, grammarAccess.getCommandAccess().getIdKeyword_0_0());
            	      							
            	    }
            	    otherlv_2=(Token)match(input,Colon,FOLLOW_31); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getCommandAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2586:8: ( (lv_id_3_0= RULE_STRING ) )
            	    // InternalGitHubActionsParser.g:2587:9: (lv_id_3_0= RULE_STRING )
            	    {
            	    // InternalGitHubActionsParser.g:2587:9: (lv_id_3_0= RULE_STRING )
            	    // InternalGitHubActionsParser.g:2588:10: lv_id_3_0= RULE_STRING
            	    {
            	    lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_32); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_3_0, grammarAccess.getCommandAccess().getIdSTRINGTerminalRuleCall_0_2_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getCommandRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_3_0,
            	      											"org.eclipse.xtext.common.Terminals.STRING");
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:2610:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2610:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2611:4: {...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:2611:101: ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:2612:5: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:2615:8: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:2615:9: {...}? => ( (lv_if_4_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2615:18: ( (lv_if_4_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:2615:19: (lv_if_4_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:2615:19: (lv_if_4_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:2616:9: lv_if_4_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getCommandAccess().getIfIfStatementParserRuleCall_1_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_if_4_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getCommandRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_4_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:2638:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2638:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2639:4: {...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:2639:101: ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2640:5: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:2643:8: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:2643:9: {...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2643:18: (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:2643:19: otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) )
            	    {
            	    otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_5, grammarAccess.getCommandAccess().getNameKeyword_2_0());
            	      							
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_6, grammarAccess.getCommandAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2651:8: ( (lv_name_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2652:9: (lv_name_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2652:9: (lv_name_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2653:10: lv_name_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getNameExpressionParserRuleCall_2_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_name_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"name",
            	      											lv_name_7_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:2676:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2676:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2677:4: {...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:2677:101: ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2678:5: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:2681:8: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:2681:9: {...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2681:18: (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:2681:19: otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) )
            	    {
            	    otherlv_8=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_8, grammarAccess.getCommandAccess().getShellKeyword_3_0());
            	      							
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getCommandAccess().getColonKeyword_3_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2689:8: ( (lv_shell_10_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2690:9: (lv_shell_10_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2690:9: (lv_shell_10_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2691:10: lv_shell_10_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getShellExpressionParserRuleCall_3_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_shell_10_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"shell",
            	      											lv_shell_10_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:2714:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2714:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2715:4: {...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:2715:101: ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2716:5: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:2719:8: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:2719:9: {...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2719:18: (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:2719:19: otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) )
            	    {
            	    otherlv_11=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_11, grammarAccess.getCommandAccess().getWorkingDirectoryKeyword_4_0());
            	      							
            	    }
            	    otherlv_12=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_12, grammarAccess.getCommandAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2727:8: ( (lv_workingDirectory_13_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2728:9: (lv_workingDirectory_13_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2728:9: (lv_workingDirectory_13_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2729:10: lv_workingDirectory_13_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_workingDirectory_13_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"workingDirectory",
            	      											lv_workingDirectory_13_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:2752:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2752:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:2753:4: {...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:2753:101: ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:2754:5: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:2757:8: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:2757:9: {...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2757:18: (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
            	    // InternalGitHubActionsParser.g:2757:19: otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
            	    {
            	    otherlv_14=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_14, grammarAccess.getCommandAccess().getEnvKeyword_5_0());
            	      							
            	    }
            	    otherlv_15=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_15, grammarAccess.getCommandAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2765:8: ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
            	    int cnt41=0;
            	    loop41:
            	    do {
            	        int alt41=2;
            	        int LA41_0 = input.LA(1);

            	        if ( (LA41_0==RULE_BEGIN) ) {
            	            alt41=1;
            	        }


            	        switch (alt41) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:2766:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:2766:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:2767:10: lv_environmentVariables_16_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getCommandAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_33);
            	    	    lv_environmentVariables_16_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_16_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt41 >= 1 ) break loop41;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(41, input);
            	                throw eee;
            	        }
            	        cnt41++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:2790:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2790:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2791:4: {...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:2791:101: ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2792:5: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:2795:8: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:2795:9: {...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2795:18: (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:2795:19: otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) )
            	    {
            	    otherlv_17=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_17, grammarAccess.getCommandAccess().getContinueOnErrorKeyword_6_0());
            	      							
            	    }
            	    otherlv_18=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_18, grammarAccess.getCommandAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2803:8: ( (lv_continueOnError_19_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2804:9: (lv_continueOnError_19_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2804:9: (lv_continueOnError_19_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2805:10: lv_continueOnError_19_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getCommandAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_continueOnError_19_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getCommandRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_19_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:2828:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2828:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2829:4: {...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:2829:101: ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2830:5: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:2833:8: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2833:9: {...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleCommand", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2833:18: ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:2833:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2833:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )?
            	    int alt42=2;
            	    int LA42_0 = input.LA(1);

            	    if ( (LA42_0==TimeoutMinutes) ) {
            	        alt42=1;
            	    }
            	    switch (alt42) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:2834:9: otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) )
            	            {
            	            otherlv_20=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_20, grammarAccess.getCommandAccess().getTimeoutMinutesKeyword_7_0_0());
            	              								
            	            }
            	            otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_21, grammarAccess.getCommandAccess().getColonKeyword_7_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:2842:9: ( (lv_timeoutMinutes_22_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:2843:10: (lv_timeoutMinutes_22_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:2843:10: (lv_timeoutMinutes_22_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:2844:11: lv_timeoutMinutes_22_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getCommandAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_34);
            	            lv_timeoutMinutes_22_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getCommandRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_22_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // InternalGitHubActionsParser.g:2862:8: (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:2863:9: otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) )
            	    {
            	    otherlv_23=(Token)match(input,Run,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_23, grammarAccess.getCommandAccess().getRunKeyword_7_1_0());
            	      								
            	    }
            	    otherlv_24=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_24, grammarAccess.getCommandAccess().getColonKeyword_7_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:2871:9: ( (lv_command_25_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:2872:10: (lv_command_25_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:2872:10: (lv_command_25_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:2873:11: lv_command_25_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getCommandAccess().getCommandExpressionParserRuleCall_7_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_32);
            	    lv_command_25_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getCommandRule());
            	      											}
            	      											set(
            	      												current,
            	      												"command",
            	      												lv_command_25_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getCommandAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt43 >= 1 ) break loop43;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(43, input);
                        throw eee;
                }
                cnt43++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getCommandAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleCommand", "getUnorderedGroupHelper().canLeave(grammarAccess.getCommandAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getCommandAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleCommand"


    // $ANTLR start "entryRulePackage"
    // InternalGitHubActionsParser.g:2911:1: entryRulePackage returns [EObject current=null] : iv_rulePackage= rulePackage EOF ;
    public final EObject entryRulePackage() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePackage = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getPackageAccess().getUnorderedGroup(), 
        	grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3()
        	);

        try {
            // InternalGitHubActionsParser.g:2916:2: (iv_rulePackage= rulePackage EOF )
            // InternalGitHubActionsParser.g:2917:2: iv_rulePackage= rulePackage EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPackageRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePackage=rulePackage();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePackage; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRulePackage"


    // $ANTLR start "rulePackage"
    // InternalGitHubActionsParser.g:2926:1: rulePackage returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?) ) ) ;
    public final EObject rulePackage() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token otherlv_30=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_34=null;
        Token this_END_37=null;
        EObject lv_if_4_0 = null;

        EObject lv_name_7_0 = null;

        EObject lv_shell_10_0 = null;

        EObject lv_workingDirectory_13_0 = null;

        EObject lv_environmentVariables_16_0 = null;

        EObject lv_continueOnError_19_0 = null;

        EObject lv_timeoutMinutes_22_0 = null;

        EObject lv_uses_25_0 = null;

        EObject lv_entrypoint_32_0 = null;

        EObject lv_containerArgs_35_0 = null;

        EObject lv_args_36_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getPackageAccess().getUnorderedGroup(), 
        	grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3()
        	);

        try {
            // InternalGitHubActionsParser.g:2936:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:2937:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:2937:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:2938:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:2938:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:2939:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getPackageAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:2942:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:2943:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:2943:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+
            int cnt49=0;
            loop49:
            do {
                int alt49=10;
                alt49 = dfa49.predict(input);
                switch (alt49) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:2944:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2944:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2945:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:2945:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2946:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:2949:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
            	    // InternalGitHubActionsParser.g:2949:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2949:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
            	    // InternalGitHubActionsParser.g:2949:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) )
            	    {
            	    otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_1, grammarAccess.getPackageAccess().getIdKeyword_0_0());
            	      							
            	    }
            	    otherlv_2=(Token)match(input,Colon,FOLLOW_31); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getColonKeyword_0_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:2957:8: ( (lv_id_3_0= RULE_STRING ) )
            	    // InternalGitHubActionsParser.g:2958:9: (lv_id_3_0= RULE_STRING )
            	    {
            	    // InternalGitHubActionsParser.g:2958:9: (lv_id_3_0= RULE_STRING )
            	    // InternalGitHubActionsParser.g:2959:10: lv_id_3_0= RULE_STRING
            	    {
            	    lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_35); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_3_0, grammarAccess.getPackageAccess().getIdSTRINGTerminalRuleCall_0_2_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getPackageRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_3_0,
            	      											"org.eclipse.xtext.common.Terminals.STRING");
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:2981:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:2981:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
            	    // InternalGitHubActionsParser.g:2982:4: {...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:2982:101: ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
            	    // InternalGitHubActionsParser.g:2983:5: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:2986:8: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
            	    // InternalGitHubActionsParser.g:2986:9: {...}? => ( (lv_if_4_0= ruleIfStatement ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:2986:18: ( (lv_if_4_0= ruleIfStatement ) )
            	    // InternalGitHubActionsParser.g:2986:19: (lv_if_4_0= ruleIfStatement )
            	    {
            	    // InternalGitHubActionsParser.g:2986:19: (lv_if_4_0= ruleIfStatement )
            	    // InternalGitHubActionsParser.g:2987:9: lv_if_4_0= ruleIfStatement
            	    {
            	    if ( state.backtracking==0 ) {

            	      									newCompositeNode(grammarAccess.getPackageAccess().getIfIfStatementParserRuleCall_1_0());
            	      								
            	    }
            	    pushFollow(FOLLOW_35);
            	    lv_if_4_0=ruleIfStatement();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									if (current==null) {
            	      										current = createModelElementForParent(grammarAccess.getPackageRule());
            	      									}
            	      									set(
            	      										current,
            	      										"if",
            	      										lv_if_4_0,
            	      										"d.fe.up.pt.cicd.gha.GitHubActions.IfStatement");
            	      									afterParserOrEnumRuleCall();
            	      								
            	    }

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:3009:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3009:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3010:4: {...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:3010:101: ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3011:5: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:3014:8: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:3014:9: {...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3014:18: (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:3014:19: otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) )
            	    {
            	    otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_5, grammarAccess.getPackageAccess().getNameKeyword_2_0());
            	      							
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_6, grammarAccess.getPackageAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3022:8: ( (lv_name_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3023:9: (lv_name_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3023:9: (lv_name_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3024:10: lv_name_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getNameExpressionParserRuleCall_2_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_35);
            	    lv_name_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"name",
            	      											lv_name_7_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:3047:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3047:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3048:4: {...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:3048:101: ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3049:5: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:3052:8: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:3052:9: {...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3052:18: (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:3052:19: otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) )
            	    {
            	    otherlv_8=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_8, grammarAccess.getPackageAccess().getShellKeyword_3_0());
            	      							
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getPackageAccess().getColonKeyword_3_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3060:8: ( (lv_shell_10_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3061:9: (lv_shell_10_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3061:9: (lv_shell_10_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3062:10: lv_shell_10_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getShellExpressionParserRuleCall_3_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_35);
            	    lv_shell_10_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"shell",
            	      											lv_shell_10_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:3085:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3085:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3086:4: {...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:3086:101: ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3087:5: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:3090:8: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:3090:9: {...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3090:18: (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:3090:19: otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) )
            	    {
            	    otherlv_11=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_11, grammarAccess.getPackageAccess().getWorkingDirectoryKeyword_4_0());
            	      							
            	    }
            	    otherlv_12=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_12, grammarAccess.getPackageAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3098:8: ( (lv_workingDirectory_13_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3099:9: (lv_workingDirectory_13_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3099:9: (lv_workingDirectory_13_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3100:10: lv_workingDirectory_13_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_35);
            	    lv_workingDirectory_13_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"workingDirectory",
            	      											lv_workingDirectory_13_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:3123:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3123:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:3124:4: {...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:3124:101: ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:3125:5: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:3128:8: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:3128:9: {...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3128:18: (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
            	    // InternalGitHubActionsParser.g:3128:19: otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
            	    {
            	    otherlv_14=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_14, grammarAccess.getPackageAccess().getEnvKeyword_5_0());
            	      							
            	    }
            	    otherlv_15=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_15, grammarAccess.getPackageAccess().getColonKeyword_5_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3136:8: ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
            	    int cnt44=0;
            	    loop44:
            	    do {
            	        int alt44=2;
            	        alt44 = dfa44.predict(input);
            	        switch (alt44) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:3137:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:3137:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:3138:10: lv_environmentVariables_16_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getPackageAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_35);
            	    	    lv_environmentVariables_16_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_16_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt44 >= 1 ) break loop44;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(44, input);
            	                throw eee;
            	        }
            	        cnt44++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalGitHubActionsParser.g:3161:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3161:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3162:4: {...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalGitHubActionsParser.g:3162:101: ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3163:5: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 6);
            	    // InternalGitHubActionsParser.g:3166:8: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:3166:9: {...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3166:18: (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:3166:19: otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) )
            	    {
            	    otherlv_17=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_17, grammarAccess.getPackageAccess().getContinueOnErrorKeyword_6_0());
            	      							
            	    }
            	    otherlv_18=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_18, grammarAccess.getPackageAccess().getColonKeyword_6_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:3174:8: ( (lv_continueOnError_19_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3175:9: (lv_continueOnError_19_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3175:9: (lv_continueOnError_19_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3176:10: lv_continueOnError_19_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getPackageAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_35);
            	    lv_continueOnError_19_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getPackageRule());
            	      										}
            	      										set(
            	      											current,
            	      											"continueOnError",
            	      											lv_continueOnError_19_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalGitHubActionsParser.g:3199:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3199:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3200:4: {...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalGitHubActionsParser.g:3200:101: ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3201:5: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 7);
            	    // InternalGitHubActionsParser.g:3204:8: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3204:9: {...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3204:18: ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:3204:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3204:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )?
            	    int alt45=2;
            	    int LA45_0 = input.LA(1);

            	    if ( (LA45_0==TimeoutMinutes) ) {
            	        alt45=1;
            	    }
            	    switch (alt45) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:3205:9: otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) )
            	            {
            	            otherlv_20=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_20, grammarAccess.getPackageAccess().getTimeoutMinutesKeyword_7_0_0());
            	              								
            	            }
            	            otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_21, grammarAccess.getPackageAccess().getColonKeyword_7_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:3213:9: ( (lv_timeoutMinutes_22_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:3214:10: (lv_timeoutMinutes_22_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:3214:10: (lv_timeoutMinutes_22_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:3215:11: lv_timeoutMinutes_22_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getPackageAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_36);
            	            lv_timeoutMinutes_22_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getPackageRule());
            	              											}
            	              											set(
            	              												current,
            	              												"timeoutMinutes",
            	              												lv_timeoutMinutes_22_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    // InternalGitHubActionsParser.g:3233:8: (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:3234:9: otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) )
            	    {
            	    otherlv_23=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_23, grammarAccess.getPackageAccess().getUsesKeyword_7_1_0());
            	      								
            	    }
            	    otherlv_24=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_24, grammarAccess.getPackageAccess().getColonKeyword_7_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:3242:9: ( (lv_uses_25_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3243:10: (lv_uses_25_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3243:10: (lv_uses_25_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3244:11: lv_uses_25_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getPackageAccess().getUsesExpressionParserRuleCall_7_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_35);
            	    lv_uses_25_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getPackageRule());
            	      											}
            	      											set(
            	      												current,
            	      												"uses",
            	      												lv_uses_25_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalGitHubActionsParser.g:3268:3: ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3268:3: ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3269:4: {...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalGitHubActionsParser.g:3269:101: ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:3270:5: ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 8);
            	    // InternalGitHubActionsParser.g:3273:8: ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:3273:9: {...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3273:18: ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
            	    int alt48=2;
            	    int LA48_0 = input.LA(1);

            	    if ( (LA48_0==With) ) {
            	        alt48=1;
            	    }
            	    else if ( (LA48_0==RULE_BEGIN) ) {
            	        alt48=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 48, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt48) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:3273:19: (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:3273:19: (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) )
            	            // InternalGitHubActionsParser.g:3274:9: otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) )
            	            {
            	            otherlv_26=(Token)match(input,With,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_26, grammarAccess.getPackageAccess().getWithKeyword_8_0_0());
            	              								
            	            }
            	            otherlv_27=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_27, grammarAccess.getPackageAccess().getColonKeyword_8_0_1());
            	              								
            	            }
            	            this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_37); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_28, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_2());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:3286:9: ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) )
            	            // InternalGitHubActionsParser.g:3287:10: ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
            	            {
            	            // InternalGitHubActionsParser.g:3287:10: ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
            	            // InternalGitHubActionsParser.g:3288:11: ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
            	            {
            	            getUnorderedGroupHelper().enter(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3());
            	            // InternalGitHubActionsParser.g:3291:11: ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
            	            // InternalGitHubActionsParser.g:3292:12: ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?
            	            {
            	            // InternalGitHubActionsParser.g:3292:12: ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+
            	            int cnt46=0;
            	            loop46:
            	            do {
            	                int alt46=3;
            	                int LA46_0 = input.LA(1);

            	                if ( LA46_0 == Entrypoint && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0) ) {
            	                    alt46=1;
            	                }
            	                else if ( LA46_0 == Args && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1) ) {
            	                    alt46=2;
            	                }


            	                switch (alt46) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:3293:10: ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3293:10: ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3294:11: {...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) )
            	            	    {
            	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0)");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3294:114: ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3295:12: ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) )
            	            	    {
            	            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0);
            	            	    // InternalGitHubActionsParser.g:3298:15: ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3298:16: {...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) )
            	            	    {
            	            	    if ( !((true)) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3298:25: (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) )
            	            	    // InternalGitHubActionsParser.g:3298:26: otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_30=(Token)match(input,Entrypoint,FOLLOW_3); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_30, grammarAccess.getPackageAccess().getEntrypointKeyword_8_0_3_0_0());
            	            	      														
            	            	    }
            	            	    otherlv_31=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_31, grammarAccess.getPackageAccess().getColonKeyword_8_0_3_0_1());
            	            	      														
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3306:15: ( (lv_entrypoint_32_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:3307:16: (lv_entrypoint_32_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3307:16: (lv_entrypoint_32_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:3308:17: lv_entrypoint_32_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      																	newCompositeNode(grammarAccess.getPackageAccess().getEntrypointExpressionParserRuleCall_8_0_3_0_2_0());
            	            	      																
            	            	    }
            	            	    pushFollow(FOLLOW_38);
            	            	    lv_entrypoint_32_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      																	if (current==null) {
            	            	      																		current = createModelElementForParent(grammarAccess.getPackageRule());
            	            	      																	}
            	            	      																	set(
            	            	      																		current,
            	            	      																		"entrypoint",
            	            	      																		lv_entrypoint_32_0,
            	            	      																		"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      																	afterParserOrEnumRuleCall();
            	            	      																
            	            	    }

            	            	    }


            	            	    }


            	            	    }


            	            	    }

            	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3());

            	            	    }


            	            	    }


            	            	    }
            	            	    break;
            	            	case 2 :
            	            	    // InternalGitHubActionsParser.g:3331:10: ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3331:10: ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3332:11: {...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) )
            	            	    {
            	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1)");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3332:114: ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3333:12: ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) )
            	            	    {
            	            	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1);
            	            	    // InternalGitHubActionsParser.g:3336:15: ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) )
            	            	    // InternalGitHubActionsParser.g:3336:16: {...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) )
            	            	    {
            	            	    if ( !((true)) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "rulePackage", "true");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3336:25: (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) )
            	            	    // InternalGitHubActionsParser.g:3336:26: otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_33=(Token)match(input,Args,FOLLOW_3); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_33, grammarAccess.getPackageAccess().getArgsKeyword_8_0_3_1_0());
            	            	      														
            	            	    }
            	            	    otherlv_34=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_34, grammarAccess.getPackageAccess().getColonKeyword_8_0_3_1_1());
            	            	      														
            	            	    }
            	            	    // InternalGitHubActionsParser.g:3344:15: ( (lv_containerArgs_35_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:3345:16: (lv_containerArgs_35_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3345:16: (lv_containerArgs_35_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:3346:17: lv_containerArgs_35_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      																	newCompositeNode(grammarAccess.getPackageAccess().getContainerArgsExpressionParserRuleCall_8_0_3_1_2_0());
            	            	      																
            	            	    }
            	            	    pushFollow(FOLLOW_38);
            	            	    lv_containerArgs_35_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      																	if (current==null) {
            	            	      																		current = createModelElementForParent(grammarAccess.getPackageRule());
            	            	      																	}
            	            	      																	set(
            	            	      																		current,
            	            	      																		"containerArgs",
            	            	      																		lv_containerArgs_35_0,
            	            	      																		"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      																	afterParserOrEnumRuleCall();
            	            	      																
            	            	    }

            	            	    }


            	            	    }


            	            	    }


            	            	    }

            	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3());

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt46 >= 1 ) break loop46;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(46, input);
            	                        throw eee;
            	                }
            	                cnt46++;
            	            } while (true);

            	            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3()) ) {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3())");
            	            }

            	            }


            	            }

            	            getUnorderedGroupHelper().leave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3());

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:3379:8: ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:3379:8: ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
            	            // InternalGitHubActionsParser.g:3380:9: ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END
            	            {
            	            // InternalGitHubActionsParser.g:3380:9: ( (lv_args_36_0= ruleVariableAssignment ) )+
            	            int cnt47=0;
            	            loop47:
            	            do {
            	                int alt47=2;
            	                int LA47_0 = input.LA(1);

            	                if ( (LA47_0==RULE_BEGIN) ) {
            	                    alt47=1;
            	                }


            	                switch (alt47) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:3381:10: (lv_args_36_0= ruleVariableAssignment )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:3381:10: (lv_args_36_0= ruleVariableAssignment )
            	            	    // InternalGitHubActionsParser.g:3382:11: lv_args_36_0= ruleVariableAssignment
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      											newCompositeNode(grammarAccess.getPackageAccess().getArgsVariableAssignmentParserRuleCall_8_1_0_0());
            	            	      										
            	            	    }
            	            	    pushFollow(FOLLOW_39);
            	            	    lv_args_36_0=ruleVariableAssignment();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											if (current==null) {
            	            	      												current = createModelElementForParent(grammarAccess.getPackageRule());
            	            	      											}
            	            	      											add(
            	            	      												current,
            	            	      												"args",
            	            	      												lv_args_36_0,
            	            	      												"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	            	      											afterParserOrEnumRuleCall();
            	            	      										
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt47 >= 1 ) break loop47;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(47, input);
            	                        throw eee;
            	                }
            	                cnt47++;
            	            } while (true);

            	            this_END_37=(Token)match(input,RULE_END,FOLLOW_35); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_37, grammarAccess.getPackageAccess().getENDTerminalRuleCall_8_1_1());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPackageAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt49 >= 1 ) break loop49;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(49, input);
                        throw eee;
                }
                cnt49++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "rulePackage", "getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getPackageAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "rulePackage"


    // $ANTLR start "entryRuleIfStatement"
    // InternalGitHubActionsParser.g:3424:1: entryRuleIfStatement returns [EObject current=null] : iv_ruleIfStatement= ruleIfStatement EOF ;
    public final EObject entryRuleIfStatement() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleIfStatement = null;


        try {
            // InternalGitHubActionsParser.g:3424:52: (iv_ruleIfStatement= ruleIfStatement EOF )
            // InternalGitHubActionsParser.g:3425:2: iv_ruleIfStatement= ruleIfStatement EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getIfStatementRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleIfStatement=ruleIfStatement();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleIfStatement; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIfStatement"


    // $ANTLR start "ruleIfStatement"
    // InternalGitHubActionsParser.g:3431:1: ruleIfStatement returns [EObject current=null] : (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression ) ;
    public final EObject ruleIfStatement() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        EObject this_Expression_2 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3437:2: ( (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression ) )
            // InternalGitHubActionsParser.g:3438:2: (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression )
            {
            // InternalGitHubActionsParser.g:3438:2: (otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression )
            // InternalGitHubActionsParser.g:3439:3: otherlv_0= If otherlv_1= Colon this_Expression_2= ruleExpression
            {
            otherlv_0=(Token)match(input,If,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getColonKeyword_1());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionParserRuleCall_2());
              		
            }
            pushFollow(FOLLOW_2);
            this_Expression_2=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Expression_2;
              			afterParserOrEnumRuleCall();
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIfStatement"


    // $ANTLR start "entryRuleConcurrencyGroup"
    // InternalGitHubActionsParser.g:3462:1: entryRuleConcurrencyGroup returns [EObject current=null] : iv_ruleConcurrencyGroup= ruleConcurrencyGroup EOF ;
    public final EObject entryRuleConcurrencyGroup() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConcurrencyGroup = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalGitHubActionsParser.g:3466:2: (iv_ruleConcurrencyGroup= ruleConcurrencyGroup EOF )
            // InternalGitHubActionsParser.g:3467:2: iv_ruleConcurrencyGroup= ruleConcurrencyGroup EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConcurrencyGroupRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConcurrencyGroup=ruleConcurrencyGroup();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConcurrencyGroup; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleConcurrencyGroup"


    // $ANTLR start "ruleConcurrencyGroup"
    // InternalGitHubActionsParser.g:3476:1: ruleConcurrencyGroup returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_8= RULE_END ) ;
    public final EObject ruleConcurrencyGroup() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_END_8=null;
        EObject lv_name_4_0 = null;

        EObject lv_cancelInProgress_7_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1()
        	);

        try {
            // InternalGitHubActionsParser.g:3485:2: ( (this_BEGIN_0= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_8= RULE_END ) )
            // InternalGitHubActionsParser.g:3486:2: (this_BEGIN_0= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_8= RULE_END )
            {
            // InternalGitHubActionsParser.g:3486:2: (this_BEGIN_0= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_8= RULE_END )
            // InternalGitHubActionsParser.g:3487:3: this_BEGIN_0= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_8= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_40); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getConcurrencyGroupAccess().getBEGINTerminalRuleCall_0());
              		
            }
            // InternalGitHubActionsParser.g:3491:3: ( ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:3492:4: ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:3492:4: ( ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:3493:5: ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1());
            // InternalGitHubActionsParser.g:3496:5: ( ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:3497:6: ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:3497:6: ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )+
            int cnt50=0;
            loop50:
            do {
                int alt50=3;
                int LA50_0 = input.LA(1);

                if ( LA50_0 == Group && getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 0) ) {
                    alt50=1;
                }
                else if ( LA50_0 == CancelInProgress && getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 1) ) {
                    alt50=2;
                }


                switch (alt50) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:3498:4: ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3498:4: ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3499:5: {...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:3499:113: ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3500:6: ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 0);
            	    // InternalGitHubActionsParser.g:3503:9: ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:3503:10: {...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3503:19: (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:3503:20: otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) )
            	    {
            	    otherlv_2=(Token)match(input,Group,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_2, grammarAccess.getConcurrencyGroupAccess().getGroupKeyword_1_0_0());
            	      								
            	    }
            	    otherlv_3=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_3, grammarAccess.getConcurrencyGroupAccess().getColonKeyword_1_0_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:3511:9: ( (lv_name_4_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3512:10: (lv_name_4_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3512:10: (lv_name_4_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3513:11: lv_name_4_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getNameExpressionParserRuleCall_1_0_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_41);
            	    lv_name_4_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getConcurrencyGroupRule());
            	      											}
            	      											set(
            	      												current,
            	      												"name",
            	      												lv_name_4_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:3536:4: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:3536:4: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3537:5: {...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:3537:113: ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:3538:6: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 1);
            	    // InternalGitHubActionsParser.g:3541:9: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:3541:10: {...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleConcurrencyGroup", "true");
            	    }
            	    // InternalGitHubActionsParser.g:3541:19: (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:3541:20: otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) )
            	    {
            	    otherlv_5=(Token)match(input,CancelInProgress,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_5, grammarAccess.getConcurrencyGroupAccess().getCancelInProgressKeyword_1_1_0());
            	      								
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_6, grammarAccess.getConcurrencyGroupAccess().getColonKeyword_1_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:3549:9: ( (lv_cancelInProgress_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:3550:10: (lv_cancelInProgress_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:3550:10: (lv_cancelInProgress_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:3551:11: lv_cancelInProgress_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getCancelInProgressExpressionParserRuleCall_1_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_41);
            	    lv_cancelInProgress_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getConcurrencyGroupRule());
            	      											}
            	      											set(
            	      												current,
            	      												"cancelInProgress",
            	      												lv_cancelInProgress_7_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt50 >= 1 ) break loop50;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(50, input);
                        throw eee;
                }
                cnt50++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleConcurrencyGroup", "getUnorderedGroupHelper().canLeave(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1());

            }

            this_END_8=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_8, grammarAccess.getConcurrencyGroupAccess().getENDTerminalRuleCall_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleConcurrencyGroup"


    // $ANTLR start "entryRuleSimpleTrigger"
    // InternalGitHubActionsParser.g:3593:1: entryRuleSimpleTrigger returns [EObject current=null] : iv_ruleSimpleTrigger= ruleSimpleTrigger EOF ;
    public final EObject entryRuleSimpleTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3593:54: (iv_ruleSimpleTrigger= ruleSimpleTrigger EOF )
            // InternalGitHubActionsParser.g:3594:2: iv_ruleSimpleTrigger= ruleSimpleTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleTrigger=ruleSimpleTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleTrigger"


    // $ANTLR start "ruleSimpleTrigger"
    // InternalGitHubActionsParser.g:3600:1: ruleSimpleTrigger returns [EObject current=null] : (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger ) ;
    public final EObject ruleSimpleTrigger() throws RecognitionException {
        EObject current = null;

        EObject this_SimpleWorkflowDispatchTrigger_0 = null;

        EObject this_SimpleWorkflowCallTrigger_1 = null;

        EObject this_SimplePushTriggerTrigger_2 = null;

        EObject this_SimplePullRequestTrigger_3 = null;

        EObject this_SimpleStandardEventTrigger_4 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3606:2: ( (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger ) )
            // InternalGitHubActionsParser.g:3607:2: (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger )
            {
            // InternalGitHubActionsParser.g:3607:2: (this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger | this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger | this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger | this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger | this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger )
            int alt51=5;
            switch ( input.LA(1) ) {
            case Workflow_dispatch:
                {
                alt51=1;
                }
                break;
            case Workflow_call:
                {
                alt51=2;
                }
                break;
            case Push:
                {
                alt51=3;
                }
                break;
            case Pull_request_target:
            case Pull_request:
                {
                alt51=4;
                }
                break;
            case Pull_request_review_comment:
            case Branch_protection_rule:
            case Pull_request_review:
            case Repository_dispatch:
            case Deployment_status:
            case Registry_package:
            case Project_column:
            case Project_card:
            case Check_suite:
            case Merge_group:
            case Deployment:
            case Discussion:
            case Page_build:
            case Check_run:
            case Milestone:
            case Project:
            case Release:
            case Create:
            case Delete:
            case Gollum:
            case Issues:
            case Public:
            case Status:
            case Label:
            case Watch:
            case Fork:
                {
                alt51=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // InternalGitHubActionsParser.g:3608:3: this_SimpleWorkflowDispatchTrigger_0= ruleSimpleWorkflowDispatchTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimpleWorkflowDispatchTriggerParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SimpleWorkflowDispatchTrigger_0=ruleSimpleWorkflowDispatchTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimpleWorkflowDispatchTrigger_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:3620:3: this_SimpleWorkflowCallTrigger_1= ruleSimpleWorkflowCallTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimpleWorkflowCallTriggerParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SimpleWorkflowCallTrigger_1=ruleSimpleWorkflowCallTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimpleWorkflowCallTrigger_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:3632:3: this_SimplePushTriggerTrigger_2= ruleSimplePushTriggerTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimplePushTriggerTriggerParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SimplePushTriggerTrigger_2=ruleSimplePushTriggerTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimplePushTriggerTrigger_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:3644:3: this_SimplePullRequestTrigger_3= ruleSimplePullRequestTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimplePullRequestTriggerParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SimplePullRequestTrigger_3=ruleSimplePullRequestTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimplePullRequestTrigger_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:3656:3: this_SimpleStandardEventTrigger_4= ruleSimpleStandardEventTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getSimpleTriggerAccess().getSimpleStandardEventTriggerParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_SimpleStandardEventTrigger_4=ruleSimpleStandardEventTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_SimpleStandardEventTrigger_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleTrigger"


    // $ANTLR start "entryRuleSimplePullRequestTrigger"
    // InternalGitHubActionsParser.g:3671:1: entryRuleSimplePullRequestTrigger returns [EObject current=null] : iv_ruleSimplePullRequestTrigger= ruleSimplePullRequestTrigger EOF ;
    public final EObject entryRuleSimplePullRequestTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimplePullRequestTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3671:65: (iv_ruleSimplePullRequestTrigger= ruleSimplePullRequestTrigger EOF )
            // InternalGitHubActionsParser.g:3672:2: iv_ruleSimplePullRequestTrigger= ruleSimplePullRequestTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimplePullRequestTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimplePullRequestTrigger=ruleSimplePullRequestTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimplePullRequestTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimplePullRequestTrigger"


    // $ANTLR start "ruleSimplePullRequestTrigger"
    // InternalGitHubActionsParser.g:3678:1: ruleSimplePullRequestTrigger returns [EObject current=null] : ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) ) ;
    public final EObject ruleSimplePullRequestTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3684:2: ( ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) ) )
            // InternalGitHubActionsParser.g:3685:2: ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) )
            {
            // InternalGitHubActionsParser.g:3685:2: ( ( () otherlv_1= Pull_request ) | ( () otherlv_3= Pull_request_target ) )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==Pull_request) ) {
                alt52=1;
            }
            else if ( (LA52_0==Pull_request_target) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // InternalGitHubActionsParser.g:3686:3: ( () otherlv_1= Pull_request )
                    {
                    // InternalGitHubActionsParser.g:3686:3: ( () otherlv_1= Pull_request )
                    // InternalGitHubActionsParser.g:3687:4: () otherlv_1= Pull_request
                    {
                    // InternalGitHubActionsParser.g:3687:4: ()
                    // InternalGitHubActionsParser.g:3688:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getSimplePullRequestTriggerAccess().getPullRequestTriggerAction_0_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_1=(Token)match(input,Pull_request,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getSimplePullRequestTriggerAccess().getPull_requestKeyword_0_1());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:3703:3: ( () otherlv_3= Pull_request_target )
                    {
                    // InternalGitHubActionsParser.g:3703:3: ( () otherlv_3= Pull_request_target )
                    // InternalGitHubActionsParser.g:3704:4: () otherlv_3= Pull_request_target
                    {
                    // InternalGitHubActionsParser.g:3704:4: ()
                    // InternalGitHubActionsParser.g:3705:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getSimplePullRequestTriggerAccess().getPullRequestTriggerAction_1_0(),
                      						current);
                      				
                    }

                    }

                    otherlv_3=(Token)match(input,Pull_request_target,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getSimplePullRequestTriggerAccess().getPull_request_targetKeyword_1_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimplePullRequestTrigger"


    // $ANTLR start "entryRuleSimplePushTriggerTrigger"
    // InternalGitHubActionsParser.g:3723:1: entryRuleSimplePushTriggerTrigger returns [EObject current=null] : iv_ruleSimplePushTriggerTrigger= ruleSimplePushTriggerTrigger EOF ;
    public final EObject entryRuleSimplePushTriggerTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimplePushTriggerTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3723:65: (iv_ruleSimplePushTriggerTrigger= ruleSimplePushTriggerTrigger EOF )
            // InternalGitHubActionsParser.g:3724:2: iv_ruleSimplePushTriggerTrigger= ruleSimplePushTriggerTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimplePushTriggerTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimplePushTriggerTrigger=ruleSimplePushTriggerTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimplePushTriggerTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimplePushTriggerTrigger"


    // $ANTLR start "ruleSimplePushTriggerTrigger"
    // InternalGitHubActionsParser.g:3730:1: ruleSimplePushTriggerTrigger returns [EObject current=null] : ( () otherlv_1= Push ) ;
    public final EObject ruleSimplePushTriggerTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3736:2: ( ( () otherlv_1= Push ) )
            // InternalGitHubActionsParser.g:3737:2: ( () otherlv_1= Push )
            {
            // InternalGitHubActionsParser.g:3737:2: ( () otherlv_1= Push )
            // InternalGitHubActionsParser.g:3738:3: () otherlv_1= Push
            {
            // InternalGitHubActionsParser.g:3738:3: ()
            // InternalGitHubActionsParser.g:3739:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSimplePushTriggerTriggerAccess().getPushTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Push,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSimplePushTriggerTriggerAccess().getPushKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimplePushTriggerTrigger"


    // $ANTLR start "entryRuleSimpleWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:3756:1: entryRuleSimpleWorkflowCallTrigger returns [EObject current=null] : iv_ruleSimpleWorkflowCallTrigger= ruleSimpleWorkflowCallTrigger EOF ;
    public final EObject entryRuleSimpleWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleWorkflowCallTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3756:66: (iv_ruleSimpleWorkflowCallTrigger= ruleSimpleWorkflowCallTrigger EOF )
            // InternalGitHubActionsParser.g:3757:2: iv_ruleSimpleWorkflowCallTrigger= ruleSimpleWorkflowCallTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleWorkflowCallTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleWorkflowCallTrigger=ruleSimpleWorkflowCallTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleWorkflowCallTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleWorkflowCallTrigger"


    // $ANTLR start "ruleSimpleWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:3763:1: ruleSimpleWorkflowCallTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_call ) ;
    public final EObject ruleSimpleWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3769:2: ( ( () otherlv_1= Workflow_call ) )
            // InternalGitHubActionsParser.g:3770:2: ( () otherlv_1= Workflow_call )
            {
            // InternalGitHubActionsParser.g:3770:2: ( () otherlv_1= Workflow_call )
            // InternalGitHubActionsParser.g:3771:3: () otherlv_1= Workflow_call
            {
            // InternalGitHubActionsParser.g:3771:3: ()
            // InternalGitHubActionsParser.g:3772:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSimpleWorkflowCallTriggerAccess().getWorkflowCallTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_call,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSimpleWorkflowCallTriggerAccess().getWorkflow_callKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleWorkflowCallTrigger"


    // $ANTLR start "entryRuleSimpleWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:3789:1: entryRuleSimpleWorkflowDispatchTrigger returns [EObject current=null] : iv_ruleSimpleWorkflowDispatchTrigger= ruleSimpleWorkflowDispatchTrigger EOF ;
    public final EObject entryRuleSimpleWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleWorkflowDispatchTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3789:70: (iv_ruleSimpleWorkflowDispatchTrigger= ruleSimpleWorkflowDispatchTrigger EOF )
            // InternalGitHubActionsParser.g:3790:2: iv_ruleSimpleWorkflowDispatchTrigger= ruleSimpleWorkflowDispatchTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleWorkflowDispatchTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleWorkflowDispatchTrigger=ruleSimpleWorkflowDispatchTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleWorkflowDispatchTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleWorkflowDispatchTrigger"


    // $ANTLR start "ruleSimpleWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:3796:1: ruleSimpleWorkflowDispatchTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_dispatch ) ;
    public final EObject ruleSimpleWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3802:2: ( ( () otherlv_1= Workflow_dispatch ) )
            // InternalGitHubActionsParser.g:3803:2: ( () otherlv_1= Workflow_dispatch )
            {
            // InternalGitHubActionsParser.g:3803:2: ( () otherlv_1= Workflow_dispatch )
            // InternalGitHubActionsParser.g:3804:3: () otherlv_1= Workflow_dispatch
            {
            // InternalGitHubActionsParser.g:3804:3: ()
            // InternalGitHubActionsParser.g:3805:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSimpleWorkflowDispatchTriggerAccess().getWorkflowDispatchTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_dispatch,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSimpleWorkflowDispatchTriggerAccess().getWorkflow_dispatchKeyword_1());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleWorkflowDispatchTrigger"


    // $ANTLR start "entryRuleSimpleStandardEventTrigger"
    // InternalGitHubActionsParser.g:3822:1: entryRuleSimpleStandardEventTrigger returns [EObject current=null] : iv_ruleSimpleStandardEventTrigger= ruleSimpleStandardEventTrigger EOF ;
    public final EObject entryRuleSimpleStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSimpleStandardEventTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3822:67: (iv_ruleSimpleStandardEventTrigger= ruleSimpleStandardEventTrigger EOF )
            // InternalGitHubActionsParser.g:3823:2: iv_ruleSimpleStandardEventTrigger= ruleSimpleStandardEventTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSimpleStandardEventTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSimpleStandardEventTrigger=ruleSimpleStandardEventTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSimpleStandardEventTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleStandardEventTrigger"


    // $ANTLR start "ruleSimpleStandardEventTrigger"
    // InternalGitHubActionsParser.g:3829:1: ruleSimpleStandardEventTrigger returns [EObject current=null] : ( (lv_event_0_0= ruleEVENT ) ) ;
    public final EObject ruleSimpleStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        Enumerator lv_event_0_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3835:2: ( ( (lv_event_0_0= ruleEVENT ) ) )
            // InternalGitHubActionsParser.g:3836:2: ( (lv_event_0_0= ruleEVENT ) )
            {
            // InternalGitHubActionsParser.g:3836:2: ( (lv_event_0_0= ruleEVENT ) )
            // InternalGitHubActionsParser.g:3837:3: (lv_event_0_0= ruleEVENT )
            {
            // InternalGitHubActionsParser.g:3837:3: (lv_event_0_0= ruleEVENT )
            // InternalGitHubActionsParser.g:3838:4: lv_event_0_0= ruleEVENT
            {
            if ( state.backtracking==0 ) {

              				newCompositeNode(grammarAccess.getSimpleStandardEventTriggerAccess().getEventEVENTEnumRuleCall_0());
              			
            }
            pushFollow(FOLLOW_2);
            lv_event_0_0=ruleEVENT();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElementForParent(grammarAccess.getSimpleStandardEventTriggerRule());
              				}
              				set(
              					current,
              					"event",
              					lv_event_0_0,
              					"d.fe.up.pt.cicd.gha.GitHubActions.EVENT");
              				afterParserOrEnumRuleCall();
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleStandardEventTrigger"


    // $ANTLR start "entryRuleOptionedTrigger"
    // InternalGitHubActionsParser.g:3858:1: entryRuleOptionedTrigger returns [EObject current=null] : iv_ruleOptionedTrigger= ruleOptionedTrigger EOF ;
    public final EObject entryRuleOptionedTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3858:56: (iv_ruleOptionedTrigger= ruleOptionedTrigger EOF )
            // InternalGitHubActionsParser.g:3859:2: iv_ruleOptionedTrigger= ruleOptionedTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedTrigger=ruleOptionedTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedTrigger"


    // $ANTLR start "ruleOptionedTrigger"
    // InternalGitHubActionsParser.g:3865:1: ruleOptionedTrigger returns [EObject current=null] : (this_OptionedPullRequestTrigger_0= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_1= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_2= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_3= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_4= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_5= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_6= ruleOptionedWorkflowDispatchTrigger ) ;
    public final EObject ruleOptionedTrigger() throws RecognitionException {
        EObject current = null;

        EObject this_OptionedPullRequestTrigger_0 = null;

        EObject this_OptionedPushTrigger_1 = null;

        EObject this_OptionedScheduleTrigger_2 = null;

        EObject this_OptionedStandardEventTrigger_3 = null;

        EObject this_OptionedWorkflowCallTrigger_4 = null;

        EObject this_OptionedWorkflowRunTrigger_5 = null;

        EObject this_OptionedWorkflowDispatchTrigger_6 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3871:2: ( (this_OptionedPullRequestTrigger_0= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_1= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_2= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_3= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_4= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_5= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_6= ruleOptionedWorkflowDispatchTrigger ) )
            // InternalGitHubActionsParser.g:3872:2: (this_OptionedPullRequestTrigger_0= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_1= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_2= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_3= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_4= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_5= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_6= ruleOptionedWorkflowDispatchTrigger )
            {
            // InternalGitHubActionsParser.g:3872:2: (this_OptionedPullRequestTrigger_0= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_1= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_2= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_3= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_4= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_5= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_6= ruleOptionedWorkflowDispatchTrigger )
            int alt53=7;
            alt53 = dfa53.predict(input);
            switch (alt53) {
                case 1 :
                    // InternalGitHubActionsParser.g:3873:3: this_OptionedPullRequestTrigger_0= ruleOptionedPullRequestTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedPullRequestTriggerParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OptionedPullRequestTrigger_0=ruleOptionedPullRequestTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OptionedPullRequestTrigger_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:3885:3: this_OptionedPushTrigger_1= ruleOptionedPushTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedPushTriggerParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OptionedPushTrigger_1=ruleOptionedPushTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OptionedPushTrigger_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:3897:3: this_OptionedScheduleTrigger_2= ruleOptionedScheduleTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedScheduleTriggerParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OptionedScheduleTrigger_2=ruleOptionedScheduleTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OptionedScheduleTrigger_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:3909:3: this_OptionedStandardEventTrigger_3= ruleOptionedStandardEventTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedStandardEventTriggerParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OptionedStandardEventTrigger_3=ruleOptionedStandardEventTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OptionedStandardEventTrigger_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:3921:3: this_OptionedWorkflowCallTrigger_4= ruleOptionedWorkflowCallTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedWorkflowCallTriggerParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OptionedWorkflowCallTrigger_4=ruleOptionedWorkflowCallTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OptionedWorkflowCallTrigger_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:3933:3: this_OptionedWorkflowRunTrigger_5= ruleOptionedWorkflowRunTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedWorkflowRunTriggerParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OptionedWorkflowRunTrigger_5=ruleOptionedWorkflowRunTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OptionedWorkflowRunTrigger_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:3945:3: this_OptionedWorkflowDispatchTrigger_6= ruleOptionedWorkflowDispatchTrigger
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getOptionedTriggerAccess().getOptionedWorkflowDispatchTriggerParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_OptionedWorkflowDispatchTrigger_6=ruleOptionedWorkflowDispatchTrigger();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_OptionedWorkflowDispatchTrigger_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedTrigger"


    // $ANTLR start "entryRuleOptionedStandardEventTrigger"
    // InternalGitHubActionsParser.g:3960:1: entryRuleOptionedStandardEventTrigger returns [EObject current=null] : iv_ruleOptionedStandardEventTrigger= ruleOptionedStandardEventTrigger EOF ;
    public final EObject entryRuleOptionedStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedStandardEventTrigger = null;


        try {
            // InternalGitHubActionsParser.g:3960:69: (iv_ruleOptionedStandardEventTrigger= ruleOptionedStandardEventTrigger EOF )
            // InternalGitHubActionsParser.g:3961:2: iv_ruleOptionedStandardEventTrigger= ruleOptionedStandardEventTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedStandardEventTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedStandardEventTrigger=ruleOptionedStandardEventTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedStandardEventTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedStandardEventTrigger"


    // $ANTLR start "ruleOptionedStandardEventTrigger"
    // InternalGitHubActionsParser.g:3967:1: ruleOptionedStandardEventTrigger returns [EObject current=null] : ( (this_BEGIN_0= RULE_BEGIN ( (lv_event_1_0= ruleEVENT ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END this_END_18= RULE_END ) ) ;
    public final EObject ruleOptionedStandardEventTrigger() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token otherlv_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token this_BEGIN_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_15=null;
        Token this_END_16=null;
        Token this_END_17=null;
        Token this_END_18=null;
        Enumerator lv_event_1_0 = null;

        Enumerator lv_eventTypes_6_0 = null;

        Enumerator lv_eventTypes_8_0 = null;

        Enumerator lv_eventTypes_10_0 = null;

        Enumerator lv_eventTypes_14_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:3973:2: ( ( (this_BEGIN_0= RULE_BEGIN ( (lv_event_1_0= ruleEVENT ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END this_END_18= RULE_END ) ) )
            // InternalGitHubActionsParser.g:3974:2: ( (this_BEGIN_0= RULE_BEGIN ( (lv_event_1_0= ruleEVENT ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END this_END_18= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:3974:2: ( (this_BEGIN_0= RULE_BEGIN ( (lv_event_1_0= ruleEVENT ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END this_END_18= RULE_END ) )
            int alt56=3;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==RULE_BEGIN) ) {
                int LA56_1 = input.LA(2);

                if ( (LA56_1==HyphenMinus) ) {
                    alt56=3;
                }
                else if ( ((LA56_1>=Pull_request_review_comment && LA56_1<=Branch_protection_rule)||LA56_1==Pull_request_review||LA56_1==Repository_dispatch||LA56_1==Deployment_status||LA56_1==Registry_package||LA56_1==Project_column||LA56_1==Project_card||LA56_1==Check_suite||LA56_1==Merge_group||(LA56_1>=Deployment && LA56_1<=Discussion)||LA56_1==Page_build||LA56_1==Check_run||LA56_1==Milestone||(LA56_1>=Project && LA56_1<=Release)||(LA56_1>=Create && LA56_1<=Delete)||LA56_1==Gollum||LA56_1==Issues||LA56_1==Public||LA56_1==Status||LA56_1==Label||LA56_1==Watch||LA56_1==Fork) ) {
                    alt56=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return current;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 56, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA56_0==LeftSquareBracket) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // InternalGitHubActionsParser.g:3975:3: (this_BEGIN_0= RULE_BEGIN ( (lv_event_1_0= ruleEVENT ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )
                    {
                    // InternalGitHubActionsParser.g:3975:3: (this_BEGIN_0= RULE_BEGIN ( (lv_event_1_0= ruleEVENT ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )
                    // InternalGitHubActionsParser.g:3976:4: this_BEGIN_0= RULE_BEGIN ( (lv_event_1_0= ruleEVENT ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN otherlv_4= Types otherlv_5= Colon ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    {
                    this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_7); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_0, grammarAccess.getOptionedStandardEventTriggerAccess().getBEGINTerminalRuleCall_0_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:3980:4: ( (lv_event_1_0= ruleEVENT ) )
                    // InternalGitHubActionsParser.g:3981:5: (lv_event_1_0= ruleEVENT )
                    {
                    // InternalGitHubActionsParser.g:3981:5: (lv_event_1_0= ruleEVENT )
                    // InternalGitHubActionsParser.g:3982:6: lv_event_1_0= ruleEVENT
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventEVENTEnumRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_3);
                    lv_event_1_0=ruleEVENT();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                      						}
                      						set(
                      							current,
                      							"event",
                      							lv_event_1_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.EVENT");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    otherlv_2=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getOptionedStandardEventTriggerAccess().getColonKeyword_0_2());
                      			
                    }
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_42); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_3, grammarAccess.getOptionedStandardEventTriggerAccess().getBEGINTerminalRuleCall_0_3());
                      			
                    }
                    otherlv_4=(Token)match(input,Types,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getOptionedStandardEventTriggerAccess().getTypesKeyword_0_4());
                      			
                    }
                    otherlv_5=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getOptionedStandardEventTriggerAccess().getColonKeyword_0_5());
                      			
                    }
                    // InternalGitHubActionsParser.g:4015:4: ( (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    // InternalGitHubActionsParser.g:4016:5: (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    {
                    // InternalGitHubActionsParser.g:4016:5: (lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    // InternalGitHubActionsParser.g:4017:6: lv_eventTypes_6_0= ruleWEBHOOK_ACTIVITY_TYPE
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_0_6_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_eventTypes_6_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                      						}
                      						add(
                      							current,
                      							"eventTypes",
                      							lv_eventTypes_6_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4036:3: (otherlv_7= LeftSquareBracket ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_11= RightSquareBracket )
                    {
                    // InternalGitHubActionsParser.g:4036:3: (otherlv_7= LeftSquareBracket ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_11= RightSquareBracket )
                    // InternalGitHubActionsParser.g:4037:4: otherlv_7= LeftSquareBracket ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_11= RightSquareBracket
                    {
                    otherlv_7=(Token)match(input,LeftSquareBracket,FOLLOW_43); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getOptionedStandardEventTriggerAccess().getLeftSquareBracketKeyword_1_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:4041:4: ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    // InternalGitHubActionsParser.g:4042:5: (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    {
                    // InternalGitHubActionsParser.g:4042:5: (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    // InternalGitHubActionsParser.g:4043:6: lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_eventTypes_8_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                      						}
                      						add(
                      							current,
                      							"eventTypes",
                      							lv_eventTypes_8_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalGitHubActionsParser.g:4060:4: (otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==Comma) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4061:5: otherlv_9= Comma ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_9, grammarAccess.getOptionedStandardEventTriggerAccess().getCommaKeyword_1_2_0());
                    	      				
                    	    }
                    	    // InternalGitHubActionsParser.g:4065:5: ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	    // InternalGitHubActionsParser.g:4066:6: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    {
                    	    // InternalGitHubActionsParser.g:4066:6: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    // InternalGitHubActionsParser.g:4067:7: lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_1_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_8);
                    	    lv_eventTypes_10_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"eventTypes",
                    	      								lv_eventTypes_10_0,
                    	      								"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);

                    otherlv_11=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getOptionedStandardEventTriggerAccess().getRightSquareBracketKeyword_1_3());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:4091:3: ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END this_END_18= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:4091:3: ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END this_END_18= RULE_END )
                    // InternalGitHubActionsParser.g:4092:4: (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END this_END_18= RULE_END
                    {
                    // InternalGitHubActionsParser.g:4092:4: (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END )
                    // InternalGitHubActionsParser.g:4093:5: this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END
                    {
                    this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_12, grammarAccess.getOptionedStandardEventTriggerAccess().getBEGINTerminalRuleCall_2_0_0());
                      				
                    }
                    // InternalGitHubActionsParser.g:4097:5: (otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE )+
                    int cnt55=0;
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==HyphenMinus) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4098:6: otherlv_13= HyphenMinus ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_15= RULE_NEWLINE
                    	    {
                    	    otherlv_13=(Token)match(input,HyphenMinus,FOLLOW_43); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_13, grammarAccess.getOptionedStandardEventTriggerAccess().getHyphenMinusKeyword_2_0_1_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:4102:6: ( (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                    	    // InternalGitHubActionsParser.g:4103:7: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    {
                    	    // InternalGitHubActionsParser.g:4103:7: (lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE )
                    	    // InternalGitHubActionsParser.g:4104:8: lv_eventTypes_14_0= ruleWEBHOOK_ACTIVITY_TYPE
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getOptionedStandardEventTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_2_0_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_eventTypes_14_0=ruleWEBHOOK_ACTIVITY_TYPE();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getOptionedStandardEventTriggerRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"eventTypes",
                    	      									lv_eventTypes_14_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_15=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_NEWLINE_15, grammarAccess.getOptionedStandardEventTriggerAccess().getNEWLINETerminalRuleCall_2_0_1_2());
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt55 >= 1 ) break loop55;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(55, input);
                                throw eee;
                        }
                        cnt55++;
                    } while (true);

                    this_END_16=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_16, grammarAccess.getOptionedStandardEventTriggerAccess().getENDTerminalRuleCall_2_0_2());
                      				
                    }

                    }

                    this_END_17=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_17, grammarAccess.getOptionedStandardEventTriggerAccess().getENDTerminalRuleCall_2_1());
                      			
                    }
                    this_END_18=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_18, grammarAccess.getOptionedStandardEventTriggerAccess().getENDTerminalRuleCall_2_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedStandardEventTrigger"


    // $ANTLR start "entryRuleOptionedWorkflowRunTrigger"
    // InternalGitHubActionsParser.g:4144:1: entryRuleOptionedWorkflowRunTrigger returns [EObject current=null] : iv_ruleOptionedWorkflowRunTrigger= ruleOptionedWorkflowRunTrigger EOF ;
    public final EObject entryRuleOptionedWorkflowRunTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedWorkflowRunTrigger = null;


        try {
            // InternalGitHubActionsParser.g:4144:67: (iv_ruleOptionedWorkflowRunTrigger= ruleOptionedWorkflowRunTrigger EOF )
            // InternalGitHubActionsParser.g:4145:2: iv_ruleOptionedWorkflowRunTrigger= ruleOptionedWorkflowRunTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedWorkflowRunTrigger=ruleOptionedWorkflowRunTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedWorkflowRunTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedWorkflowRunTrigger"


    // $ANTLR start "ruleOptionedWorkflowRunTrigger"
    // InternalGitHubActionsParser.g:4151:1: ruleOptionedWorkflowRunTrigger returns [EObject current=null] : ( (otherlv_0= Workflow_run otherlv_1= Colon this_BEGIN_2= RULE_BEGIN (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) ) otherlv_5= Colon ( (lv_branches_6_0= ruleExpression ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_branches_8_0= ruleExpression ) ) (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END ) ) ;
    public final EObject ruleOptionedWorkflowRunTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_BEGIN_2=null;
        Token otherlv_3=null;
        Token lv_ignoreSpecifiedBranches_4_0=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token this_BEGIN_12=null;
        Token otherlv_13=null;
        Token this_NEWLINE_15=null;
        Token this_END_16=null;
        Token this_END_17=null;
        EObject lv_branches_6_0 = null;

        EObject lv_branches_8_0 = null;

        EObject lv_branches_10_0 = null;

        EObject lv_branches_14_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:4157:2: ( ( (otherlv_0= Workflow_run otherlv_1= Colon this_BEGIN_2= RULE_BEGIN (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) ) otherlv_5= Colon ( (lv_branches_6_0= ruleExpression ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_branches_8_0= ruleExpression ) ) (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END ) ) )
            // InternalGitHubActionsParser.g:4158:2: ( (otherlv_0= Workflow_run otherlv_1= Colon this_BEGIN_2= RULE_BEGIN (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) ) otherlv_5= Colon ( (lv_branches_6_0= ruleExpression ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_branches_8_0= ruleExpression ) ) (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:4158:2: ( (otherlv_0= Workflow_run otherlv_1= Colon this_BEGIN_2= RULE_BEGIN (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) ) otherlv_5= Colon ( (lv_branches_6_0= ruleExpression ) ) ) | (otherlv_7= LeftSquareBracket ( (lv_branches_8_0= ruleExpression ) ) (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )* otherlv_11= RightSquareBracket ) | ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END ) )
            int alt60=3;
            switch ( input.LA(1) ) {
            case Workflow_run:
                {
                alt60=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt60=2;
                }
                break;
            case RULE_BEGIN:
                {
                alt60=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }

            switch (alt60) {
                case 1 :
                    // InternalGitHubActionsParser.g:4159:3: (otherlv_0= Workflow_run otherlv_1= Colon this_BEGIN_2= RULE_BEGIN (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) ) otherlv_5= Colon ( (lv_branches_6_0= ruleExpression ) ) )
                    {
                    // InternalGitHubActionsParser.g:4159:3: (otherlv_0= Workflow_run otherlv_1= Colon this_BEGIN_2= RULE_BEGIN (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) ) otherlv_5= Colon ( (lv_branches_6_0= ruleExpression ) ) )
                    // InternalGitHubActionsParser.g:4160:4: otherlv_0= Workflow_run otherlv_1= Colon this_BEGIN_2= RULE_BEGIN (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) ) otherlv_5= Colon ( (lv_branches_6_0= ruleExpression ) )
                    {
                    otherlv_0=(Token)match(input,Workflow_run,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getOptionedWorkflowRunTriggerAccess().getWorkflow_runKeyword_0_0());
                      			
                    }
                    otherlv_1=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOptionedWorkflowRunTriggerAccess().getColonKeyword_0_1());
                      			
                    }
                    this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_44); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_2, grammarAccess.getOptionedWorkflowRunTriggerAccess().getBEGINTerminalRuleCall_0_2());
                      			
                    }
                    // InternalGitHubActionsParser.g:4172:4: (otherlv_3= Branches | ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) ) )
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==Branches) ) {
                        alt57=1;
                    }
                    else if ( (LA57_0==BranchesIgnore) ) {
                        alt57=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return current;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 0, input);

                        throw nvae;
                    }
                    switch (alt57) {
                        case 1 :
                            // InternalGitHubActionsParser.g:4173:5: otherlv_3= Branches
                            {
                            otherlv_3=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_3, grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesKeyword_0_3_0());
                              				
                            }

                            }
                            break;
                        case 2 :
                            // InternalGitHubActionsParser.g:4178:5: ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) )
                            {
                            // InternalGitHubActionsParser.g:4178:5: ( (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore ) )
                            // InternalGitHubActionsParser.g:4179:6: (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore )
                            {
                            // InternalGitHubActionsParser.g:4179:6: (lv_ignoreSpecifiedBranches_4_0= BranchesIgnore )
                            // InternalGitHubActionsParser.g:4180:7: lv_ignoreSpecifiedBranches_4_0= BranchesIgnore
                            {
                            lv_ignoreSpecifiedBranches_4_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							newLeafNode(lv_ignoreSpecifiedBranches_4_0, grammarAccess.getOptionedWorkflowRunTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_0_3_1_0());
                              						
                            }
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElement(grammarAccess.getOptionedWorkflowRunTriggerRule());
                              							}
                              							setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_4_0 != null, "branches-ignore");
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    otherlv_5=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getOptionedWorkflowRunTriggerAccess().getColonKeyword_0_4());
                      			
                    }
                    // InternalGitHubActionsParser.g:4197:4: ( (lv_branches_6_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:4198:5: (lv_branches_6_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:4198:5: (lv_branches_6_0= ruleExpression )
                    // InternalGitHubActionsParser.g:4199:6: lv_branches_6_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_0_5_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_branches_6_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                      						}
                      						add(
                      							current,
                      							"branches",
                      							lv_branches_6_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4218:3: (otherlv_7= LeftSquareBracket ( (lv_branches_8_0= ruleExpression ) ) (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )* otherlv_11= RightSquareBracket )
                    {
                    // InternalGitHubActionsParser.g:4218:3: (otherlv_7= LeftSquareBracket ( (lv_branches_8_0= ruleExpression ) ) (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )* otherlv_11= RightSquareBracket )
                    // InternalGitHubActionsParser.g:4219:4: otherlv_7= LeftSquareBracket ( (lv_branches_8_0= ruleExpression ) ) (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )* otherlv_11= RightSquareBracket
                    {
                    otherlv_7=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_7, grammarAccess.getOptionedWorkflowRunTriggerAccess().getLeftSquareBracketKeyword_1_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:4223:4: ( (lv_branches_8_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:4224:5: (lv_branches_8_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:4224:5: (lv_branches_8_0= ruleExpression )
                    // InternalGitHubActionsParser.g:4225:6: lv_branches_8_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_1_1_0());
                      					
                    }
                    pushFollow(FOLLOW_8);
                    lv_branches_8_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                      						}
                      						add(
                      							current,
                      							"branches",
                      							lv_branches_8_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }

                    // InternalGitHubActionsParser.g:4242:4: (otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) ) )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==Comma) ) {
                            alt58=1;
                        }


                        switch (alt58) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4243:5: otherlv_9= Comma ( (lv_branches_10_0= ruleExpression ) )
                    	    {
                    	    otherlv_9=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      					newLeafNode(otherlv_9, grammarAccess.getOptionedWorkflowRunTriggerAccess().getCommaKeyword_1_2_0());
                    	      				
                    	    }
                    	    // InternalGitHubActionsParser.g:4247:5: ( (lv_branches_10_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:4248:6: (lv_branches_10_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:4248:6: (lv_branches_10_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:4249:7: lv_branches_10_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      							newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_1_2_1_0());
                    	      						
                    	    }
                    	    pushFollow(FOLLOW_8);
                    	    lv_branches_10_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      							if (current==null) {
                    	      								current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                    	      							}
                    	      							add(
                    	      								current,
                    	      								"branches",
                    	      								lv_branches_10_0,
                    	      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      							afterParserOrEnumRuleCall();
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);

                    otherlv_11=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_11, grammarAccess.getOptionedWorkflowRunTriggerAccess().getRightSquareBracketKeyword_1_3());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:4273:3: ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:4273:3: ( (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END )
                    // InternalGitHubActionsParser.g:4274:4: (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END ) this_END_17= RULE_END
                    {
                    // InternalGitHubActionsParser.g:4274:4: (this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END )
                    // InternalGitHubActionsParser.g:4275:5: this_BEGIN_12= RULE_BEGIN (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+ this_END_16= RULE_END
                    {
                    this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_12, grammarAccess.getOptionedWorkflowRunTriggerAccess().getBEGINTerminalRuleCall_2_0_0());
                      				
                    }
                    // InternalGitHubActionsParser.g:4279:5: (otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE )+
                    int cnt59=0;
                    loop59:
                    do {
                        int alt59=2;
                        int LA59_0 = input.LA(1);

                        if ( (LA59_0==HyphenMinus) ) {
                            alt59=1;
                        }


                        switch (alt59) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:4280:6: otherlv_13= HyphenMinus ( (lv_branches_14_0= ruleExpression ) ) this_NEWLINE_15= RULE_NEWLINE
                    	    {
                    	    otherlv_13=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_13, grammarAccess.getOptionedWorkflowRunTriggerAccess().getHyphenMinusKeyword_2_0_1_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:4284:6: ( (lv_branches_14_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:4285:7: (lv_branches_14_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:4285:7: (lv_branches_14_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:4286:8: lv_branches_14_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getOptionedWorkflowRunTriggerAccess().getBranchesExpressionParserRuleCall_2_0_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_branches_14_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getOptionedWorkflowRunTriggerRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"branches",
                    	      									lv_branches_14_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_15=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_NEWLINE_15, grammarAccess.getOptionedWorkflowRunTriggerAccess().getNEWLINETerminalRuleCall_2_0_1_2());
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt59 >= 1 ) break loop59;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(59, input);
                                throw eee;
                        }
                        cnt59++;
                    } while (true);

                    this_END_16=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_16, grammarAccess.getOptionedWorkflowRunTriggerAccess().getENDTerminalRuleCall_2_0_2());
                      				
                    }

                    }

                    this_END_17=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_17, grammarAccess.getOptionedWorkflowRunTriggerAccess().getENDTerminalRuleCall_2_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedWorkflowRunTrigger"


    // $ANTLR start "entryRuleOptionedPullRequestTrigger"
    // InternalGitHubActionsParser.g:4322:1: entryRuleOptionedPullRequestTrigger returns [EObject current=null] : iv_ruleOptionedPullRequestTrigger= ruleOptionedPullRequestTrigger EOF ;
    public final EObject entryRuleOptionedPullRequestTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedPullRequestTrigger = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3()
        	);

        try {
            // InternalGitHubActionsParser.g:4326:2: (iv_ruleOptionedPullRequestTrigger= ruleOptionedPullRequestTrigger EOF )
            // InternalGitHubActionsParser.g:4327:2: iv_ruleOptionedPullRequestTrigger= ruleOptionedPullRequestTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedPullRequestTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedPullRequestTrigger=ruleOptionedPullRequestTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedPullRequestTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedPullRequestTrigger"


    // $ANTLR start "ruleOptionedPullRequestTrigger"
    // InternalGitHubActionsParser.g:4336:1: ruleOptionedPullRequestTrigger returns [EObject current=null] : ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) ) ;
    public final EObject ruleOptionedPullRequestTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token this_BEGIN_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token this_END_18=null;
        Token otherlv_19=null;
        Token lv_ignoreSpecifiedBranches_20_0=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token this_END_32=null;
        Token otherlv_33=null;
        Token lv_ignoreSpecifiedPaths_34_0=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_39=null;
        Token otherlv_41=null;
        Token this_BEGIN_42=null;
        Token otherlv_43=null;
        Token this_NEWLINE_45=null;
        Token this_END_46=null;
        Token this_END_47=null;
        Enumerator lv_eventTypes_8_0 = null;

        Enumerator lv_eventTypes_10_0 = null;

        Enumerator lv_eventTypes_12_0 = null;

        Enumerator lv_eventTypes_16_0 = null;

        EObject lv_branches_22_0 = null;

        EObject lv_branches_24_0 = null;

        EObject lv_branches_26_0 = null;

        EObject lv_branches_30_0 = null;

        EObject lv_paths_36_0 = null;

        EObject lv_paths_38_0 = null;

        EObject lv_paths_40_0 = null;

        EObject lv_paths_44_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3()
        	);

        try {
            // InternalGitHubActionsParser.g:4345:2: ( ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            // InternalGitHubActionsParser.g:4346:2: ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) )
            {
            // InternalGitHubActionsParser.g:4346:2: ( () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:4347:3: () (otherlv_1= Pull_request | otherlv_2= Pull_request_target ) otherlv_3= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:4347:3: ()
            // InternalGitHubActionsParser.g:4348:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedPullRequestTriggerAccess().getPullRequestTriggerAction_0(),
              					current);
              			
            }

            }

            // InternalGitHubActionsParser.g:4357:3: (otherlv_1= Pull_request | otherlv_2= Pull_request_target )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==Pull_request) ) {
                alt61=1;
            }
            else if ( (LA61_0==Pull_request_target) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // InternalGitHubActionsParser.g:4358:4: otherlv_1= Pull_request
                    {
                    otherlv_1=(Token)match(input,Pull_request,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_1, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_requestKeyword_1_0());
                      			
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:4363:4: otherlv_2= Pull_request_target
                    {
                    otherlv_2=(Token)match(input,Pull_request_target,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_request_targetKeyword_1_1());
                      			
                    }

                    }
                    break;

            }

            otherlv_3=(Token)match(input,Colon,FOLLOW_45); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:4372:3: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:4373:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:4373:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:4374:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3());
            // InternalGitHubActionsParser.g:4377:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:4378:6: ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:4378:6: ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+
            int cnt73=0;
            loop73:
            do {
                int alt73=4;
                alt73 = dfa73.predict(input);
                switch (alt73) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:4379:4: ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:4379:4: ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
            	    // InternalGitHubActionsParser.g:4380:5: {...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:4380:123: ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
            	    // InternalGitHubActionsParser.g:4381:6: ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 0);
            	    // InternalGitHubActionsParser.g:4384:9: ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
            	    // InternalGitHubActionsParser.g:4384:10: {...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:4384:19: (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
            	    // InternalGitHubActionsParser.g:4384:20: this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
            	    {
            	    this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_46); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_5, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_0());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:4388:9: ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
            	    int alt64=4;
            	    alt64 = dfa64.predict(input);
            	    switch (alt64) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:4389:10: (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:4389:10: (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )
            	            // InternalGitHubActionsParser.g:4390:11: otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
            	            {
            	            otherlv_6=(Token)match(input,Types,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_6, grammarAccess.getOptionedPullRequestTriggerAccess().getTypesKeyword_3_0_1_0_0());
            	              										
            	            }
            	            otherlv_7=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_7, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_0_1_0_1());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4398:11: ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
            	            // InternalGitHubActionsParser.g:4399:12: (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            {
            	            // InternalGitHubActionsParser.g:4399:12: (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            // InternalGitHubActionsParser.g:4400:13: lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_0_2_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_47);
            	            lv_eventTypes_8_0=ruleWEBHOOK_ACTIVITY_TYPE();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"eventTypes",
            	              														lv_eventTypes_8_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:4419:10: (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:4419:10: (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:4420:11: otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket
            	            {
            	            otherlv_9=(Token)match(input,LeftSquareBracket,FOLLOW_43); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_9, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_0_1_1_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4424:11: ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
            	            // InternalGitHubActionsParser.g:4425:12: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            {
            	            // InternalGitHubActionsParser.g:4425:12: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            // InternalGitHubActionsParser.g:4426:13: lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_1_1_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_eventTypes_10_0=ruleWEBHOOK_ACTIVITY_TYPE();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"eventTypes",
            	              														lv_eventTypes_10_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:4443:11: (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
            	            loop62:
            	            do {
            	                int alt62=2;
            	                int LA62_0 = input.LA(1);

            	                if ( (LA62_0==Comma) ) {
            	                    alt62=1;
            	                }


            	                switch (alt62) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:4444:12: otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
            	            	    {
            	            	    otherlv_11=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_11, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_0_1_1_2_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:4448:12: ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
            	            	    // InternalGitHubActionsParser.g:4449:13: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:4449:13: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            	    // InternalGitHubActionsParser.g:4450:14: lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_1_2_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_eventTypes_12_0=ruleWEBHOOK_ACTIVITY_TYPE();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"eventTypes",
            	            	      															lv_eventTypes_12_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop62;
            	                }
            	            } while (true);

            	            otherlv_13=(Token)match(input,RightSquareBracket,FOLLOW_47); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_13, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_0_1_1_3());
            	              										
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:4474:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:4474:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
            	            // InternalGitHubActionsParser.g:4475:11: this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END
            	            {
            	            this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_BEGIN_14, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_1_2_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4479:11: (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+
            	            int cnt63=0;
            	            loop63:
            	            do {
            	                int alt63=2;
            	                int LA63_0 = input.LA(1);

            	                if ( (LA63_0==HyphenMinus) ) {
            	                    alt63=1;
            	                }


            	                switch (alt63) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:4480:12: otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE
            	            	    {
            	            	    otherlv_15=(Token)match(input,HyphenMinus,FOLLOW_43); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_15, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_0_1_2_1_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:4484:12: ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
            	            	    // InternalGitHubActionsParser.g:4485:13: (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:4485:13: (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE )
            	            	    // InternalGitHubActionsParser.g:4486:14: lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_2_1_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_eventTypes_16_0=ruleWEBHOOK_ACTIVITY_TYPE();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"eventTypes",
            	            	      															lv_eventTypes_16_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.WEBHOOK_ACTIVITY_TYPE");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(this_NEWLINE_17, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_1_2_1_2());
            	            	      											
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt63 >= 1 ) break loop63;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(63, input);
            	                        throw eee;
            	                }
            	                cnt63++;
            	            } while (true);

            	            this_END_18=(Token)match(input,RULE_END,FOLLOW_47); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_END_18, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_1_2_2());
            	              										
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:4520:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:4520:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:4521:5: {...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:4521:123: ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:4522:6: ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1);
            	    // InternalGitHubActionsParser.g:4525:9: ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:4525:10: {...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:4525:19: ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
            	    int alt68=3;
            	    switch ( input.LA(1) ) {
            	    case BranchesIgnore:
            	    case Branches:
            	        {
            	        alt68=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt68=2;
            	        }
            	        break;
            	    case RULE_BEGIN:
            	        {
            	        alt68=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 68, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt68) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:4525:20: ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:4525:20: ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) )
            	            // InternalGitHubActionsParser.g:4526:10: (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) )
            	            {
            	            // InternalGitHubActionsParser.g:4526:10: (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) )
            	            int alt65=2;
            	            int LA65_0 = input.LA(1);

            	            if ( (LA65_0==Branches) ) {
            	                alt65=1;
            	            }
            	            else if ( (LA65_0==BranchesIgnore) ) {
            	                alt65=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 65, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt65) {
            	                case 1 :
            	                    // InternalGitHubActionsParser.g:4527:11: otherlv_19= Branches
            	                    {
            	                    otherlv_19=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      											newLeafNode(otherlv_19, grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesKeyword_3_1_0_0_0());
            	                      										
            	                    }

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalGitHubActionsParser.g:4532:11: ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) )
            	                    {
            	                    // InternalGitHubActionsParser.g:4532:11: ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) )
            	                    // InternalGitHubActionsParser.g:4533:12: (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore )
            	                    {
            	                    // InternalGitHubActionsParser.g:4533:12: (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore )
            	                    // InternalGitHubActionsParser.g:4534:13: lv_ignoreSpecifiedBranches_20_0= BranchesIgnore
            	                    {
            	                    lv_ignoreSpecifiedBranches_20_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      													newLeafNode(lv_ignoreSpecifiedBranches_20_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_1_0_0_1_0());
            	                      												
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      													if (current==null) {
            	                      														current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
            	                      													}
            	                      													setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_20_0 != null, "branches-ignore");
            	                      												
            	                    }

            	                    }


            	                    }


            	                    }
            	                    break;

            	            }

            	            otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_21, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_1_0_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:4551:10: ( (lv_branches_22_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:4552:11: (lv_branches_22_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:4552:11: (lv_branches_22_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:4553:12: lv_branches_22_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              												newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_2_0());
            	              											
            	            }
            	            pushFollow(FOLLOW_47);
            	            lv_branches_22_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	              												}
            	              												add(
            	              													current,
            	              													"branches",
            	              													lv_branches_22_0,
            	              													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              												afterParserOrEnumRuleCall();
            	              											
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:4572:9: (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:4572:9: (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:4573:10: otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket
            	            {
            	            otherlv_23=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_23, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_1_1_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:4577:10: ( (lv_branches_24_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:4578:11: (lv_branches_24_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:4578:11: (lv_branches_24_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:4579:12: lv_branches_24_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              												newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_1_1_0());
            	              											
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_branches_24_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	              												}
            	              												add(
            	              													current,
            	              													"branches",
            	              													lv_branches_24_0,
            	              													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              												afterParserOrEnumRuleCall();
            	              											
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:4596:10: (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )*
            	            loop66:
            	            do {
            	                int alt66=2;
            	                int LA66_0 = input.LA(1);

            	                if ( (LA66_0==Comma) ) {
            	                    alt66=1;
            	                }


            	                switch (alt66) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:4597:11: otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_25=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_25, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_1_1_2_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:4601:11: ( (lv_branches_26_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:4602:12: (lv_branches_26_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:4602:12: (lv_branches_26_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:4603:13: lv_branches_26_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_1_2_1_0());
            	            	      												
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_branches_26_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	            	      													}
            	            	      													add(
            	            	      														current,
            	            	      														"branches",
            	            	      														lv_branches_26_0,
            	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      													afterParserOrEnumRuleCall();
            	            	      												
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop66;
            	                }
            	            } while (true);

            	            otherlv_27=(Token)match(input,RightSquareBracket,FOLLOW_47); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_27, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_1_1_3());
            	              									
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:4627:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:4627:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
            	            // InternalGitHubActionsParser.g:4628:10: this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END
            	            {
            	            this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_BEGIN_28, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_2_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:4632:10: (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+
            	            int cnt67=0;
            	            loop67:
            	            do {
            	                int alt67=2;
            	                int LA67_0 = input.LA(1);

            	                if ( (LA67_0==HyphenMinus) ) {
            	                    alt67=1;
            	                }


            	                switch (alt67) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:4633:11: otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
            	            	    {
            	            	    otherlv_29=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_29, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_1_2_1_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:4637:11: ( (lv_branches_30_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:4638:12: (lv_branches_30_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:4638:12: (lv_branches_30_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:4639:13: lv_branches_30_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_2_1_1_0());
            	            	      												
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_branches_30_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	            	      													}
            	            	      													add(
            	            	      														current,
            	            	      														"branches",
            	            	      														lv_branches_30_0,
            	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      													afterParserOrEnumRuleCall();
            	            	      												
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(this_NEWLINE_31, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_2_1_2());
            	            	      										
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt67 >= 1 ) break loop67;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(67, input);
            	                        throw eee;
            	                }
            	                cnt67++;
            	            } while (true);

            	            this_END_32=(Token)match(input,RULE_END,FOLLOW_47); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_END_32, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_2_2());
            	              									
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:4672:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:4672:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:4673:5: {...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:4673:123: ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:4674:6: ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2);
            	    // InternalGitHubActionsParser.g:4677:9: ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
            	    // InternalGitHubActionsParser.g:4677:10: {...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:4677:19: ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
            	    // InternalGitHubActionsParser.g:4677:20: ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:4677:20: ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )?
            	    int alt72=4;
            	    switch ( input.LA(1) ) {
            	        case PathsIgnore:
            	        case Paths:
            	            {
            	            alt72=1;
            	            }
            	            break;
            	        case LeftSquareBracket:
            	            {
            	            alt72=2;
            	            }
            	            break;
            	        case RULE_BEGIN:
            	            {
            	            alt72=3;
            	            }
            	            break;
            	    }

            	    switch (alt72) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:4678:10: ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:4678:10: ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) )
            	            // InternalGitHubActionsParser.g:4679:11: (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) )
            	            {
            	            // InternalGitHubActionsParser.g:4679:11: (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) )
            	            int alt69=2;
            	            int LA69_0 = input.LA(1);

            	            if ( (LA69_0==Paths) ) {
            	                alt69=1;
            	            }
            	            else if ( (LA69_0==PathsIgnore) ) {
            	                alt69=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 69, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt69) {
            	                case 1 :
            	                    // InternalGitHubActionsParser.g:4680:12: otherlv_33= Paths
            	                    {
            	                    otherlv_33=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      												newLeafNode(otherlv_33, grammarAccess.getOptionedPullRequestTriggerAccess().getPathsKeyword_3_2_0_0_0_0());
            	                      											
            	                    }

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalGitHubActionsParser.g:4685:12: ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) )
            	                    {
            	                    // InternalGitHubActionsParser.g:4685:12: ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) )
            	                    // InternalGitHubActionsParser.g:4686:13: (lv_ignoreSpecifiedPaths_34_0= PathsIgnore )
            	                    {
            	                    // InternalGitHubActionsParser.g:4686:13: (lv_ignoreSpecifiedPaths_34_0= PathsIgnore )
            	                    // InternalGitHubActionsParser.g:4687:14: lv_ignoreSpecifiedPaths_34_0= PathsIgnore
            	                    {
            	                    lv_ignoreSpecifiedPaths_34_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      														newLeafNode(lv_ignoreSpecifiedPaths_34_0, grammarAccess.getOptionedPullRequestTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_2_0_0_0_1_0());
            	                      													
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      														if (current==null) {
            	                      															current = createModelElement(grammarAccess.getOptionedPullRequestTriggerRule());
            	                      														}
            	                      														setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_34_0 != null, "paths-ignore");
            	                      													
            	                    }

            	                    }


            	                    }


            	                    }
            	                    break;

            	            }

            	            otherlv_35=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_35, grammarAccess.getOptionedPullRequestTriggerAccess().getColonKeyword_3_2_0_0_1());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4704:11: ( (lv_paths_36_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:4705:12: (lv_paths_36_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:4705:12: (lv_paths_36_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:4706:13: lv_paths_36_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_2_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_24);
            	            lv_paths_36_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"paths",
            	              														lv_paths_36_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:4725:10: (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:4725:10: (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:4726:11: otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket
            	            {
            	            otherlv_37=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_37, grammarAccess.getOptionedPullRequestTriggerAccess().getLeftSquareBracketKeyword_3_2_0_1_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4730:11: ( (lv_paths_38_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:4731:12: (lv_paths_38_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:4731:12: (lv_paths_38_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:4732:13: lv_paths_38_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_1_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_paths_38_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"paths",
            	              														lv_paths_38_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:4749:11: (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )*
            	            loop70:
            	            do {
            	                int alt70=2;
            	                int LA70_0 = input.LA(1);

            	                if ( (LA70_0==Comma) ) {
            	                    alt70=1;
            	                }


            	                switch (alt70) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:4750:12: otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_39=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_39, grammarAccess.getOptionedPullRequestTriggerAccess().getCommaKeyword_3_2_0_1_2_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:4754:12: ( (lv_paths_40_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:4755:13: (lv_paths_40_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:4755:13: (lv_paths_40_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:4756:14: lv_paths_40_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_2_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_paths_40_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"paths",
            	            	      															lv_paths_40_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop70;
            	                }
            	            } while (true);

            	            otherlv_41=(Token)match(input,RightSquareBracket,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_41, grammarAccess.getOptionedPullRequestTriggerAccess().getRightSquareBracketKeyword_3_2_0_1_3());
            	              										
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:4780:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:4780:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
            	            // InternalGitHubActionsParser.g:4781:11: this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END
            	            {
            	            this_BEGIN_42=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_BEGIN_42, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_2_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4785:11: (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+
            	            int cnt71=0;
            	            loop71:
            	            do {
            	                int alt71=2;
            	                int LA71_0 = input.LA(1);

            	                if ( (LA71_0==HyphenMinus) ) {
            	                    alt71=1;
            	                }


            	                switch (alt71) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:4786:12: otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE
            	            	    {
            	            	    otherlv_43=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_43, grammarAccess.getOptionedPullRequestTriggerAccess().getHyphenMinusKeyword_3_2_0_2_1_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:4790:12: ( (lv_paths_44_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:4791:13: (lv_paths_44_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:4791:13: (lv_paths_44_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:4792:14: lv_paths_44_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_2_1_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_paths_44_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPullRequestTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"paths",
            	            	      															lv_paths_44_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_45=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(this_NEWLINE_45, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_2_1_2());
            	            	      											
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt71 >= 1 ) break loop71;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(71, input);
            	                        throw eee;
            	                }
            	                cnt71++;
            	            } while (true);

            	            this_END_46=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_END_46, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_2_2());
            	              										
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    this_END_47=(Token)match(input,RULE_END,FOLLOW_47); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_47, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_1());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt73 >= 1 ) break loop73;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(73, input);
                        throw eee;
                }
                cnt73++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleOptionedPullRequestTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3());

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOptionedPullRequestTrigger"


    // $ANTLR start "entryRuleOptionedPushTrigger"
    // InternalGitHubActionsParser.g:4845:1: entryRuleOptionedPushTrigger returns [EObject current=null] : iv_ruleOptionedPushTrigger= ruleOptionedPushTrigger EOF ;
    public final EObject entryRuleOptionedPushTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedPushTrigger = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3()
        	);

        try {
            // InternalGitHubActionsParser.g:4849:2: (iv_ruleOptionedPushTrigger= ruleOptionedPushTrigger EOF )
            // InternalGitHubActionsParser.g:4850:2: iv_ruleOptionedPushTrigger= ruleOptionedPushTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedPushTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedPushTrigger=ruleOptionedPushTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedPushTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedPushTrigger"


    // $ANTLR start "ruleOptionedPushTrigger"
    // InternalGitHubActionsParser.g:4859:1: ruleOptionedPushTrigger returns [EObject current=null] : ( () otherlv_1= Push otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) ) ;
    public final EObject ruleOptionedPushTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token lv_ignoreSpecifiedBranches_6_0=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token this_BEGIN_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token this_END_18=null;
        Token otherlv_19=null;
        Token lv_ignoreSpecifiedPaths_20_0=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token this_END_32=null;
        Token otherlv_33=null;
        Token lv_ignoreSpecifiedTags_34_0=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_39=null;
        Token otherlv_41=null;
        Token this_BEGIN_42=null;
        Token otherlv_43=null;
        Token this_NEWLINE_45=null;
        Token this_END_46=null;
        Token this_END_47=null;
        EObject lv_branches_8_0 = null;

        EObject lv_branches_10_0 = null;

        EObject lv_branches_12_0 = null;

        EObject lv_branches_16_0 = null;

        EObject lv_paths_22_0 = null;

        EObject lv_paths_24_0 = null;

        EObject lv_paths_26_0 = null;

        EObject lv_paths_30_0 = null;

        EObject lv_tags_36_0 = null;

        EObject lv_tags_38_0 = null;

        EObject lv_tags_40_0 = null;

        EObject lv_tags_44_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3()
        	);

        try {
            // InternalGitHubActionsParser.g:4868:2: ( ( () otherlv_1= Push otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            // InternalGitHubActionsParser.g:4869:2: ( () otherlv_1= Push otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) )
            {
            // InternalGitHubActionsParser.g:4869:2: ( () otherlv_1= Push otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:4870:3: () otherlv_1= Push otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:4870:3: ()
            // InternalGitHubActionsParser.g:4871:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedPushTriggerAccess().getPushTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Push,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedPushTriggerAccess().getPushKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_48); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:4888:3: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:4889:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:4889:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:4890:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3());
            // InternalGitHubActionsParser.g:4893:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:4894:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:4894:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+
            int cnt86=0;
            loop86:
            do {
                int alt86=4;
                alt86 = dfa86.predict(input);
                switch (alt86) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:4895:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:4895:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
            	    // InternalGitHubActionsParser.g:4896:5: {...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:4896:116: ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
            	    // InternalGitHubActionsParser.g:4897:6: ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 0);
            	    // InternalGitHubActionsParser.g:4900:9: ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
            	    // InternalGitHubActionsParser.g:4900:10: {...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:4900:19: (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
            	    // InternalGitHubActionsParser.g:4900:20: this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
            	    {
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_49); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_4, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_0());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:4904:9: ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
            	    int alt77=4;
            	    alt77 = dfa77.predict(input);
            	    switch (alt77) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:4905:10: ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:4905:10: ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) )
            	            // InternalGitHubActionsParser.g:4906:11: (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) )
            	            {
            	            // InternalGitHubActionsParser.g:4906:11: (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) )
            	            int alt74=2;
            	            int LA74_0 = input.LA(1);

            	            if ( (LA74_0==Branches) ) {
            	                alt74=1;
            	            }
            	            else if ( (LA74_0==BranchesIgnore) ) {
            	                alt74=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 74, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt74) {
            	                case 1 :
            	                    // InternalGitHubActionsParser.g:4907:12: otherlv_5= Branches
            	                    {
            	                    otherlv_5=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      												newLeafNode(otherlv_5, grammarAccess.getOptionedPushTriggerAccess().getBranchesKeyword_3_0_1_0_0_0());
            	                      											
            	                    }

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalGitHubActionsParser.g:4912:12: ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) )
            	                    {
            	                    // InternalGitHubActionsParser.g:4912:12: ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) )
            	                    // InternalGitHubActionsParser.g:4913:13: (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore )
            	                    {
            	                    // InternalGitHubActionsParser.g:4913:13: (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore )
            	                    // InternalGitHubActionsParser.g:4914:14: lv_ignoreSpecifiedBranches_6_0= BranchesIgnore
            	                    {
            	                    lv_ignoreSpecifiedBranches_6_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      														newLeafNode(lv_ignoreSpecifiedBranches_6_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedBranchesBranchesIgnoreKeyword_3_0_1_0_0_1_0());
            	                      													
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      														if (current==null) {
            	                      															current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
            	                      														}
            	                      														setWithLastConsumed(current, "ignoreSpecifiedBranches", lv_ignoreSpecifiedBranches_6_0 != null, "branches-ignore");
            	                      													
            	                    }

            	                    }


            	                    }


            	                    }
            	                    break;

            	            }

            	            otherlv_7=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_7, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_0_1_0_1());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4931:11: ( (lv_branches_8_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:4932:12: (lv_branches_8_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:4932:12: (lv_branches_8_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:4933:13: lv_branches_8_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_0_2_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_50);
            	            lv_branches_8_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"branches",
            	              														lv_branches_8_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:4952:10: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:4952:10: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:4953:11: otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket
            	            {
            	            otherlv_9=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_9, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_0_1_1_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:4957:11: ( (lv_branches_10_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:4958:12: (lv_branches_10_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:4958:12: (lv_branches_10_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:4959:13: lv_branches_10_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_1_1_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_branches_10_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"branches",
            	              														lv_branches_10_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:4976:11: (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )*
            	            loop75:
            	            do {
            	                int alt75=2;
            	                int LA75_0 = input.LA(1);

            	                if ( (LA75_0==Comma) ) {
            	                    alt75=1;
            	                }


            	                switch (alt75) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:4977:12: otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_11=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_11, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_0_1_1_2_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:4981:12: ( (lv_branches_12_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:4982:13: (lv_branches_12_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:4982:13: (lv_branches_12_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:4983:14: lv_branches_12_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_1_2_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_branches_12_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"branches",
            	            	      															lv_branches_12_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop75;
            	                }
            	            } while (true);

            	            otherlv_13=(Token)match(input,RightSquareBracket,FOLLOW_50); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_13, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_0_1_1_3());
            	              										
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:5007:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:5007:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
            	            // InternalGitHubActionsParser.g:5008:11: this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END
            	            {
            	            this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_BEGIN_14, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_1_2_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:5012:11: (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+
            	            int cnt76=0;
            	            loop76:
            	            do {
            	                int alt76=2;
            	                int LA76_0 = input.LA(1);

            	                if ( (LA76_0==HyphenMinus) ) {
            	                    alt76=1;
            	                }


            	                switch (alt76) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5013:12: otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
            	            	    {
            	            	    otherlv_15=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_15, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_0_1_2_1_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:5017:12: ( (lv_branches_16_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:5018:13: (lv_branches_16_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5018:13: (lv_branches_16_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:5019:14: lv_branches_16_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_2_1_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_branches_16_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"branches",
            	            	      															lv_branches_16_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(this_NEWLINE_17, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_1_2_1_2());
            	            	      											
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt76 >= 1 ) break loop76;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(76, input);
            	                        throw eee;
            	                }
            	                cnt76++;
            	            } while (true);

            	            this_END_18=(Token)match(input,RULE_END,FOLLOW_50); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_END_18, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_1_2_2());
            	              										
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:5053:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5053:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:5054:5: {...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:5054:116: ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:5055:6: ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1);
            	    // InternalGitHubActionsParser.g:5058:9: ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:5058:10: {...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5058:19: ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
            	    int alt81=3;
            	    switch ( input.LA(1) ) {
            	    case PathsIgnore:
            	    case Paths:
            	        {
            	        alt81=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt81=2;
            	        }
            	        break;
            	    case RULE_BEGIN:
            	        {
            	        alt81=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 81, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt81) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:5058:20: ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:5058:20: ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) )
            	            // InternalGitHubActionsParser.g:5059:10: (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) )
            	            {
            	            // InternalGitHubActionsParser.g:5059:10: (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) )
            	            int alt78=2;
            	            int LA78_0 = input.LA(1);

            	            if ( (LA78_0==Paths) ) {
            	                alt78=1;
            	            }
            	            else if ( (LA78_0==PathsIgnore) ) {
            	                alt78=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 78, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt78) {
            	                case 1 :
            	                    // InternalGitHubActionsParser.g:5060:11: otherlv_19= Paths
            	                    {
            	                    otherlv_19=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      											newLeafNode(otherlv_19, grammarAccess.getOptionedPushTriggerAccess().getPathsKeyword_3_1_0_0_0());
            	                      										
            	                    }

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalGitHubActionsParser.g:5065:11: ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) )
            	                    {
            	                    // InternalGitHubActionsParser.g:5065:11: ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) )
            	                    // InternalGitHubActionsParser.g:5066:12: (lv_ignoreSpecifiedPaths_20_0= PathsIgnore )
            	                    {
            	                    // InternalGitHubActionsParser.g:5066:12: (lv_ignoreSpecifiedPaths_20_0= PathsIgnore )
            	                    // InternalGitHubActionsParser.g:5067:13: lv_ignoreSpecifiedPaths_20_0= PathsIgnore
            	                    {
            	                    lv_ignoreSpecifiedPaths_20_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      													newLeafNode(lv_ignoreSpecifiedPaths_20_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedPathsPathsIgnoreKeyword_3_1_0_0_1_0());
            	                      												
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      													if (current==null) {
            	                      														current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
            	                      													}
            	                      													setWithLastConsumed(current, "ignoreSpecifiedPaths", lv_ignoreSpecifiedPaths_20_0 != null, "paths-ignore");
            	                      												
            	                    }

            	                    }


            	                    }


            	                    }
            	                    break;

            	            }

            	            otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_21, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_1_0_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:5084:10: ( (lv_paths_22_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:5085:11: (lv_paths_22_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:5085:11: (lv_paths_22_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:5086:12: lv_paths_22_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              												newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_2_0());
            	              											
            	            }
            	            pushFollow(FOLLOW_50);
            	            lv_paths_22_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	              												}
            	              												add(
            	              													current,
            	              													"paths",
            	              													lv_paths_22_0,
            	              													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              												afterParserOrEnumRuleCall();
            	              											
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:5105:9: (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:5105:9: (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:5106:10: otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket
            	            {
            	            otherlv_23=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_23, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_1_1_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:5110:10: ( (lv_paths_24_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:5111:11: (lv_paths_24_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:5111:11: (lv_paths_24_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:5112:12: lv_paths_24_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              												newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_0());
            	              											
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_paths_24_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	              												}
            	              												add(
            	              													current,
            	              													"paths",
            	              													lv_paths_24_0,
            	              													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              												afterParserOrEnumRuleCall();
            	              											
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:5129:10: (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )*
            	            loop79:
            	            do {
            	                int alt79=2;
            	                int LA79_0 = input.LA(1);

            	                if ( (LA79_0==Comma) ) {
            	                    alt79=1;
            	                }


            	                switch (alt79) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5130:11: otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_25=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_25, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_1_1_2_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:5134:11: ( (lv_paths_26_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:5135:12: (lv_paths_26_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5135:12: (lv_paths_26_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:5136:13: lv_paths_26_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_2_1_0());
            	            	      												
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_paths_26_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	            	      													}
            	            	      													add(
            	            	      														current,
            	            	      														"paths",
            	            	      														lv_paths_26_0,
            	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      													afterParserOrEnumRuleCall();
            	            	      												
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop79;
            	                }
            	            } while (true);

            	            otherlv_27=(Token)match(input,RightSquareBracket,FOLLOW_50); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_27, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_1_1_3());
            	              									
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:5160:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:5160:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
            	            // InternalGitHubActionsParser.g:5161:10: this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END
            	            {
            	            this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_BEGIN_28, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_2_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:5165:10: (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+
            	            int cnt80=0;
            	            loop80:
            	            do {
            	                int alt80=2;
            	                int LA80_0 = input.LA(1);

            	                if ( (LA80_0==HyphenMinus) ) {
            	                    alt80=1;
            	                }


            	                switch (alt80) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5166:11: otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
            	            	    {
            	            	    otherlv_29=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_29, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_1_2_1_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:5170:11: ( (lv_paths_30_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:5171:12: (lv_paths_30_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5171:12: (lv_paths_30_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:5172:13: lv_paths_30_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_2_1_1_0());
            	            	      												
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_paths_30_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	            	      													}
            	            	      													add(
            	            	      														current,
            	            	      														"paths",
            	            	      														lv_paths_30_0,
            	            	      														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      													afterParserOrEnumRuleCall();
            	            	      												
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(this_NEWLINE_31, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_2_1_2());
            	            	      										
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt80 >= 1 ) break loop80;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(80, input);
            	                        throw eee;
            	                }
            	                cnt80++;
            	            } while (true);

            	            this_END_32=(Token)match(input,RULE_END,FOLLOW_50); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_END_32, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_2_2());
            	              									
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:5205:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5205:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:5206:5: {...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:5206:116: ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:5207:6: ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2);
            	    // InternalGitHubActionsParser.g:5210:9: ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
            	    // InternalGitHubActionsParser.g:5210:10: {...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5210:19: ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
            	    // InternalGitHubActionsParser.g:5210:20: ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:5210:20: ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )?
            	    int alt85=4;
            	    switch ( input.LA(1) ) {
            	        case TagsIgnore:
            	        case Tags:
            	            {
            	            alt85=1;
            	            }
            	            break;
            	        case LeftSquareBracket:
            	            {
            	            alt85=2;
            	            }
            	            break;
            	        case RULE_BEGIN:
            	            {
            	            alt85=3;
            	            }
            	            break;
            	    }

            	    switch (alt85) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:5211:10: ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:5211:10: ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) )
            	            // InternalGitHubActionsParser.g:5212:11: (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) )
            	            {
            	            // InternalGitHubActionsParser.g:5212:11: (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) )
            	            int alt82=2;
            	            int LA82_0 = input.LA(1);

            	            if ( (LA82_0==Tags) ) {
            	                alt82=1;
            	            }
            	            else if ( (LA82_0==TagsIgnore) ) {
            	                alt82=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 82, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt82) {
            	                case 1 :
            	                    // InternalGitHubActionsParser.g:5213:12: otherlv_33= Tags
            	                    {
            	                    otherlv_33=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      												newLeafNode(otherlv_33, grammarAccess.getOptionedPushTriggerAccess().getTagsKeyword_3_2_0_0_0_0());
            	                      											
            	                    }

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalGitHubActionsParser.g:5218:12: ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) )
            	                    {
            	                    // InternalGitHubActionsParser.g:5218:12: ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) )
            	                    // InternalGitHubActionsParser.g:5219:13: (lv_ignoreSpecifiedTags_34_0= TagsIgnore )
            	                    {
            	                    // InternalGitHubActionsParser.g:5219:13: (lv_ignoreSpecifiedTags_34_0= TagsIgnore )
            	                    // InternalGitHubActionsParser.g:5220:14: lv_ignoreSpecifiedTags_34_0= TagsIgnore
            	                    {
            	                    lv_ignoreSpecifiedTags_34_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return current;
            	                    if ( state.backtracking==0 ) {

            	                      														newLeafNode(lv_ignoreSpecifiedTags_34_0, grammarAccess.getOptionedPushTriggerAccess().getIgnoreSpecifiedTagsTagsIgnoreKeyword_3_2_0_0_0_1_0());
            	                      													
            	                    }
            	                    if ( state.backtracking==0 ) {

            	                      														if (current==null) {
            	                      															current = createModelElement(grammarAccess.getOptionedPushTriggerRule());
            	                      														}
            	                      														setWithLastConsumed(current, "ignoreSpecifiedTags", lv_ignoreSpecifiedTags_34_0 != null, "tags-ignore");
            	                      													
            	                    }

            	                    }


            	                    }


            	                    }
            	                    break;

            	            }

            	            otherlv_35=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_35, grammarAccess.getOptionedPushTriggerAccess().getColonKeyword_3_2_0_0_1());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:5237:11: ( (lv_tags_36_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:5238:12: (lv_tags_36_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:5238:12: (lv_tags_36_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:5239:13: lv_tags_36_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_2_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_24);
            	            lv_tags_36_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"tags",
            	              														lv_tags_36_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:5258:10: (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:5258:10: (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:5259:11: otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket
            	            {
            	            otherlv_37=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_37, grammarAccess.getOptionedPushTriggerAccess().getLeftSquareBracketKeyword_3_2_0_1_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:5263:11: ( (lv_tags_38_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:5264:12: (lv_tags_38_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:5264:12: (lv_tags_38_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:5265:13: lv_tags_38_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_1_1_0());
            	              												
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_tags_38_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              													if (current==null) {
            	              														current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	              													}
            	              													add(
            	              														current,
            	              														"tags",
            	              														lv_tags_38_0,
            	              														"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              													afterParserOrEnumRuleCall();
            	              												
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:5282:11: (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )*
            	            loop83:
            	            do {
            	                int alt83=2;
            	                int LA83_0 = input.LA(1);

            	                if ( (LA83_0==Comma) ) {
            	                    alt83=1;
            	                }


            	                switch (alt83) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5283:12: otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_39=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_39, grammarAccess.getOptionedPushTriggerAccess().getCommaKeyword_3_2_0_1_2_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:5287:12: ( (lv_tags_40_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:5288:13: (lv_tags_40_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5288:13: (lv_tags_40_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:5289:14: lv_tags_40_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_1_2_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_tags_40_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"tags",
            	            	      															lv_tags_40_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop83;
            	                }
            	            } while (true);

            	            otherlv_41=(Token)match(input,RightSquareBracket,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(otherlv_41, grammarAccess.getOptionedPushTriggerAccess().getRightSquareBracketKeyword_3_2_0_1_3());
            	              										
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:5313:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:5313:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
            	            // InternalGitHubActionsParser.g:5314:11: this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END
            	            {
            	            this_BEGIN_42=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_BEGIN_42, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_2_0());
            	              										
            	            }
            	            // InternalGitHubActionsParser.g:5318:11: (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+
            	            int cnt84=0;
            	            loop84:
            	            do {
            	                int alt84=2;
            	                int LA84_0 = input.LA(1);

            	                if ( (LA84_0==HyphenMinus) ) {
            	                    alt84=1;
            	                }


            	                switch (alt84) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5319:12: otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE
            	            	    {
            	            	    otherlv_43=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(otherlv_43, grammarAccess.getOptionedPushTriggerAccess().getHyphenMinusKeyword_3_2_0_2_1_0());
            	            	      											
            	            	    }
            	            	    // InternalGitHubActionsParser.g:5323:12: ( (lv_tags_44_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:5324:13: (lv_tags_44_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5324:13: (lv_tags_44_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:5325:14: lv_tags_44_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_2_1_1_0());
            	            	      													
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_tags_44_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														if (current==null) {
            	            	      															current = createModelElementForParent(grammarAccess.getOptionedPushTriggerRule());
            	            	      														}
            	            	      														add(
            	            	      															current,
            	            	      															"tags",
            	            	      															lv_tags_44_0,
            	            	      															"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      														afterParserOrEnumRuleCall();
            	            	      													
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_45=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												newLeafNode(this_NEWLINE_45, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_2_1_2());
            	            	      											
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt84 >= 1 ) break loop84;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(84, input);
            	                        throw eee;
            	                }
            	                cnt84++;
            	            } while (true);

            	            this_END_46=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											newLeafNode(this_END_46, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_2_2());
            	              										
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    this_END_47=(Token)match(input,RULE_END,FOLLOW_50); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_47, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_1());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt86 >= 1 ) break loop86;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(86, input);
                        throw eee;
                }
                cnt86++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleOptionedPushTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3());

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOptionedPushTrigger"


    // $ANTLR start "entryRuleOptionedScheduleTrigger"
    // InternalGitHubActionsParser.g:5378:1: entryRuleOptionedScheduleTrigger returns [EObject current=null] : iv_ruleOptionedScheduleTrigger= ruleOptionedScheduleTrigger EOF ;
    public final EObject entryRuleOptionedScheduleTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedScheduleTrigger = null;


        try {
            // InternalGitHubActionsParser.g:5378:64: (iv_ruleOptionedScheduleTrigger= ruleOptionedScheduleTrigger EOF )
            // InternalGitHubActionsParser.g:5379:2: iv_ruleOptionedScheduleTrigger= ruleOptionedScheduleTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedScheduleTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedScheduleTrigger=ruleOptionedScheduleTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedScheduleTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedScheduleTrigger"


    // $ANTLR start "ruleOptionedScheduleTrigger"
    // InternalGitHubActionsParser.g:5385:1: ruleOptionedScheduleTrigger returns [EObject current=null] : (otherlv_0= Schedule otherlv_1= Colon (this_BEGIN_2= RULE_BEGIN (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+ this_END_7= RULE_END ) ) ;
    public final EObject ruleOptionedScheduleTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_BEGIN_2=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token this_END_7=null;
        EObject lv_crons_6_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:5391:2: ( (otherlv_0= Schedule otherlv_1= Colon (this_BEGIN_2= RULE_BEGIN (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+ this_END_7= RULE_END ) ) )
            // InternalGitHubActionsParser.g:5392:2: (otherlv_0= Schedule otherlv_1= Colon (this_BEGIN_2= RULE_BEGIN (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+ this_END_7= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:5392:2: (otherlv_0= Schedule otherlv_1= Colon (this_BEGIN_2= RULE_BEGIN (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+ this_END_7= RULE_END ) )
            // InternalGitHubActionsParser.g:5393:3: otherlv_0= Schedule otherlv_1= Colon (this_BEGIN_2= RULE_BEGIN (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+ this_END_7= RULE_END )
            {
            otherlv_0=(Token)match(input,Schedule,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getOptionedScheduleTriggerAccess().getScheduleKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedScheduleTriggerAccess().getColonKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:5401:3: (this_BEGIN_2= RULE_BEGIN (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+ this_END_7= RULE_END )
            // InternalGitHubActionsParser.g:5402:4: this_BEGIN_2= RULE_BEGIN (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+ this_END_7= RULE_END
            {
            this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_BEGIN_2, grammarAccess.getOptionedScheduleTriggerAccess().getBEGINTerminalRuleCall_2_0());
              			
            }
            // InternalGitHubActionsParser.g:5406:4: (otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) ) )+
            int cnt87=0;
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==HyphenMinus) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:5407:5: otherlv_3= HyphenMinus otherlv_4= Cron otherlv_5= Colon ( (lv_crons_6_0= ruleExpression ) )
            	    {
            	    otherlv_3=(Token)match(input,HyphenMinus,FOLLOW_51); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_3, grammarAccess.getOptionedScheduleTriggerAccess().getHyphenMinusKeyword_2_1_0());
            	      				
            	    }
            	    otherlv_4=(Token)match(input,Cron,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_4, grammarAccess.getOptionedScheduleTriggerAccess().getCronKeyword_2_1_1());
            	      				
            	    }
            	    otherlv_5=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      					newLeafNode(otherlv_5, grammarAccess.getOptionedScheduleTriggerAccess().getColonKeyword_2_1_2());
            	      				
            	    }
            	    // InternalGitHubActionsParser.g:5419:5: ( (lv_crons_6_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:5420:6: (lv_crons_6_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:5420:6: (lv_crons_6_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:5421:7: lv_crons_6_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      							newCompositeNode(grammarAccess.getOptionedScheduleTriggerAccess().getCronsExpressionParserRuleCall_2_1_3_0());
            	      						
            	    }
            	    pushFollow(FOLLOW_11);
            	    lv_crons_6_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      							if (current==null) {
            	      								current = createModelElementForParent(grammarAccess.getOptionedScheduleTriggerRule());
            	      							}
            	      							add(
            	      								current,
            	      								"crons",
            	      								lv_crons_6_0,
            	      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      							afterParserOrEnumRuleCall();
            	      						
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt87 >= 1 ) break loop87;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(87, input);
                        throw eee;
                }
                cnt87++;
            } while (true);

            this_END_7=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(this_END_7, grammarAccess.getOptionedScheduleTriggerAccess().getENDTerminalRuleCall_2_2());
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedScheduleTrigger"


    // $ANTLR start "entryRuleOptionedWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:5448:1: entryRuleOptionedWorkflowCallTrigger returns [EObject current=null] : iv_ruleOptionedWorkflowCallTrigger= ruleOptionedWorkflowCallTrigger EOF ;
    public final EObject entryRuleOptionedWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedWorkflowCallTrigger = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3()
        	);

        try {
            // InternalGitHubActionsParser.g:5452:2: (iv_ruleOptionedWorkflowCallTrigger= ruleOptionedWorkflowCallTrigger EOF )
            // InternalGitHubActionsParser.g:5453:2: iv_ruleOptionedWorkflowCallTrigger= ruleOptionedWorkflowCallTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedWorkflowCallTrigger=ruleOptionedWorkflowCallTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedWorkflowCallTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedWorkflowCallTrigger"


    // $ANTLR start "ruleOptionedWorkflowCallTrigger"
    // InternalGitHubActionsParser.g:5462:1: ruleOptionedWorkflowCallTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_call otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) ) ) ) ;
    public final EObject ruleOptionedWorkflowCallTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token this_END_14=null;
        EObject lv_inputs_7_0 = null;

        EObject lv_outputs_10_0 = null;

        EObject lv_secrets_13_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3()
        	);

        try {
            // InternalGitHubActionsParser.g:5471:2: ( ( () otherlv_1= Workflow_call otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            // InternalGitHubActionsParser.g:5472:2: ( () otherlv_1= Workflow_call otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) ) ) )
            {
            // InternalGitHubActionsParser.g:5472:2: ( () otherlv_1= Workflow_call otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:5473:3: () otherlv_1= Workflow_call otherlv_2= Colon ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:5473:3: ()
            // InternalGitHubActionsParser.g:5474:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedWorkflowCallTriggerAccess().getWorkflowCallTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_call,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedWorkflowCallTriggerAccess().getWorkflow_callKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_52); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:5491:3: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:5492:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:5492:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:5493:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3());
            // InternalGitHubActionsParser.g:5496:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:5497:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:5497:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+
            int cnt93=0;
            loop93:
            do {
                int alt93=4;
                alt93 = dfa93.predict(input);
                switch (alt93) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:5498:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5498:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) )
            	    // InternalGitHubActionsParser.g:5499:5: {...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:5499:124: ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) )
            	    // InternalGitHubActionsParser.g:5500:6: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0);
            	    // InternalGitHubActionsParser.g:5503:9: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) )
            	    // InternalGitHubActionsParser.g:5503:10: {...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5503:19: (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? )
            	    // InternalGitHubActionsParser.g:5503:20: this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )?
            	    {
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_53); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_BEGIN_4, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_0());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:5507:9: (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )?
            	    int alt89=2;
            	    int LA89_0 = input.LA(1);

            	    if ( (LA89_0==Inputs) ) {
            	        alt89=1;
            	    }
            	    switch (alt89) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:5508:10: otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+
            	            {
            	            otherlv_5=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_5, grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsKeyword_3_0_1_0());
            	              									
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_6, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_1_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:5516:10: ( (lv_inputs_7_0= ruleInput ) )+
            	            int cnt88=0;
            	            loop88:
            	            do {
            	                int alt88=2;
            	                alt88 = dfa88.predict(input);
            	                switch (alt88) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5517:11: (lv_inputs_7_0= ruleInput )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5517:11: (lv_inputs_7_0= ruleInput )
            	            	    // InternalGitHubActionsParser.g:5518:12: lv_inputs_7_0= ruleInput
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_0_1_2_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_55);
            	            	    lv_inputs_7_0=ruleInput();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"inputs",
            	            	      													lv_inputs_7_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.Input");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt88 >= 1 ) break loop88;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(88, input);
            	                        throw eee;
            	                }
            	                cnt88++;
            	            } while (true);


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:5542:4: ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5542:4: ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:5543:5: {...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:5543:124: ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:5544:6: ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 1);
            	    // InternalGitHubActionsParser.g:5547:9: ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) )
            	    // InternalGitHubActionsParser.g:5547:10: {...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5547:19: (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ )
            	    // InternalGitHubActionsParser.g:5547:20: otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+
            	    {
            	    otherlv_8=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_8, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_1_0());
            	      								
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_9, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:5555:9: ( (lv_outputs_10_0= ruleOutput ) )+
            	    int cnt90=0;
            	    loop90:
            	    do {
            	        int alt90=2;
            	        int LA90_0 = input.LA(1);

            	        if ( (LA90_0==RULE_BEGIN) ) {
            	            int LA90_2 = input.LA(2);

            	            if ( (LA90_2==RULE_ID) ) {
            	                alt90=1;
            	            }


            	        }
            	        else if ( (LA90_0==Value) ) {
            	            alt90=1;
            	        }


            	        switch (alt90) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:5556:10: (lv_outputs_10_0= ruleOutput )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:5556:10: (lv_outputs_10_0= ruleOutput )
            	    	    // InternalGitHubActionsParser.g:5557:11: lv_outputs_10_0= ruleOutput
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      											newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_1_2_0());
            	    	      										
            	    	    }
            	    	    pushFollow(FOLLOW_57);
            	    	    lv_outputs_10_0=ruleOutput();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      											if (current==null) {
            	    	      												current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
            	    	      											}
            	    	      											add(
            	    	      												current,
            	    	      												"outputs",
            	    	      												lv_outputs_10_0,
            	    	      												"d.fe.up.pt.cicd.gha.GitHubActions.Output");
            	    	      											afterParserOrEnumRuleCall();
            	    	      										
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt90 >= 1 ) break loop90;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(90, input);
            	                throw eee;
            	        }
            	        cnt90++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:5580:4: ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5580:4: ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:5581:5: {...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:5581:124: ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:5582:6: ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2);
            	    // InternalGitHubActionsParser.g:5585:9: ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) )
            	    // InternalGitHubActionsParser.g:5585:10: {...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5585:19: ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END )
            	    // InternalGitHubActionsParser.g:5585:20: (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:5585:20: (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )?
            	    int alt92=2;
            	    int LA92_0 = input.LA(1);

            	    if ( (LA92_0==Secrets) ) {
            	        alt92=1;
            	    }
            	    switch (alt92) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:5586:10: otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+
            	            {
            	            otherlv_11=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_11, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_2_0_0());
            	              									
            	            }
            	            otherlv_12=(Token)match(input,Colon,FOLLOW_58); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_12, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:5594:10: ( (lv_secrets_13_0= ruleSecret ) )+
            	            int cnt91=0;
            	            loop91:
            	            do {
            	                int alt91=2;
            	                int LA91_0 = input.LA(1);

            	                if ( (LA91_0==RULE_END) ) {
            	                    int LA91_1 = input.LA(2);

            	                    if ( (LA91_1==RULE_END) ) {
            	                        int LA91_4 = input.LA(3);

            	                        if ( (synpred178_InternalGitHubActionsParser()) ) {
            	                            alt91=1;
            	                        }


            	                    }


            	                }
            	                else if ( (LA91_0==Required||LA91_0==RULE_BEGIN) ) {
            	                    alt91=1;
            	                }


            	                switch (alt91) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5595:11: (lv_secrets_13_0= ruleSecret )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5595:11: (lv_secrets_13_0= ruleSecret )
            	            	    // InternalGitHubActionsParser.g:5596:12: lv_secrets_13_0= ruleSecret
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_2_0_2_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_58);
            	            	    lv_secrets_13_0=ruleSecret();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getOptionedWorkflowCallTriggerRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"secrets",
            	            	      													lv_secrets_13_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.Secret");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt91 >= 1 ) break loop91;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(91, input);
            	                        throw eee;
            	                }
            	                cnt91++;
            	            } while (true);


            	            }
            	            break;

            	    }

            	    this_END_14=(Token)match(input,RULE_END,FOLLOW_59); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(this_END_14, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_1());
            	      								
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt93 >= 1 ) break loop93;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(93, input);
                        throw eee;
                }
                cnt93++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleOptionedWorkflowCallTrigger", "getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3());

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOptionedWorkflowCallTrigger"


    // $ANTLR start "entryRuleOptionedWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:5639:1: entryRuleOptionedWorkflowDispatchTrigger returns [EObject current=null] : iv_ruleOptionedWorkflowDispatchTrigger= ruleOptionedWorkflowDispatchTrigger EOF ;
    public final EObject entryRuleOptionedWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOptionedWorkflowDispatchTrigger = null;


        try {
            // InternalGitHubActionsParser.g:5639:72: (iv_ruleOptionedWorkflowDispatchTrigger= ruleOptionedWorkflowDispatchTrigger EOF )
            // InternalGitHubActionsParser.g:5640:2: iv_ruleOptionedWorkflowDispatchTrigger= ruleOptionedWorkflowDispatchTrigger EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOptionedWorkflowDispatchTriggerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOptionedWorkflowDispatchTrigger=ruleOptionedWorkflowDispatchTrigger();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOptionedWorkflowDispatchTrigger; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOptionedWorkflowDispatchTrigger"


    // $ANTLR start "ruleOptionedWorkflowDispatchTrigger"
    // InternalGitHubActionsParser.g:5646:1: ruleOptionedWorkflowDispatchTrigger returns [EObject current=null] : ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_BEGIN_3= RULE_BEGIN (otherlv_4= Inputs otherlv_5= Colon ( (lv_inputs_6_0= ruleInput ) )+ )? this_END_7= RULE_END ) ;
    public final EObject ruleOptionedWorkflowDispatchTrigger() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token this_END_7=null;
        EObject lv_inputs_6_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:5652:2: ( ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_BEGIN_3= RULE_BEGIN (otherlv_4= Inputs otherlv_5= Colon ( (lv_inputs_6_0= ruleInput ) )+ )? this_END_7= RULE_END ) )
            // InternalGitHubActionsParser.g:5653:2: ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_BEGIN_3= RULE_BEGIN (otherlv_4= Inputs otherlv_5= Colon ( (lv_inputs_6_0= ruleInput ) )+ )? this_END_7= RULE_END )
            {
            // InternalGitHubActionsParser.g:5653:2: ( () otherlv_1= Workflow_dispatch otherlv_2= Colon this_BEGIN_3= RULE_BEGIN (otherlv_4= Inputs otherlv_5= Colon ( (lv_inputs_6_0= ruleInput ) )+ )? this_END_7= RULE_END )
            // InternalGitHubActionsParser.g:5654:3: () otherlv_1= Workflow_dispatch otherlv_2= Colon this_BEGIN_3= RULE_BEGIN (otherlv_4= Inputs otherlv_5= Colon ( (lv_inputs_6_0= ruleInput ) )+ )? this_END_7= RULE_END
            {
            // InternalGitHubActionsParser.g:5654:3: ()
            // InternalGitHubActionsParser.g:5655:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getWorkflowDispatchTriggerAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Workflow_dispatch,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getWorkflow_dispatchKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getColonKeyword_2());
              		
            }
            this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_60); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_3, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getBEGINTerminalRuleCall_3());
              		
            }
            // InternalGitHubActionsParser.g:5676:3: (otherlv_4= Inputs otherlv_5= Colon ( (lv_inputs_6_0= ruleInput ) )+ )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==Inputs) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // InternalGitHubActionsParser.g:5677:4: otherlv_4= Inputs otherlv_5= Colon ( (lv_inputs_6_0= ruleInput ) )+
                    {
                    otherlv_4=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_4, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getInputsKeyword_4_0());
                      			
                    }
                    otherlv_5=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_5, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getColonKeyword_4_1());
                      			
                    }
                    // InternalGitHubActionsParser.g:5685:4: ( (lv_inputs_6_0= ruleInput ) )+
                    int cnt94=0;
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);

                        if ( (LA94_0==Required||LA94_0==Default||LA94_0==Options||LA94_0==Type||LA94_0==LeftSquareBracket||LA94_0==RULE_BEGIN) ) {
                            alt94=1;
                        }


                        switch (alt94) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:5686:5: (lv_inputs_6_0= ruleInput )
                    	    {
                    	    // InternalGitHubActionsParser.g:5686:5: (lv_inputs_6_0= ruleInput )
                    	    // InternalGitHubActionsParser.g:5687:6: lv_inputs_6_0= ruleInput
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      						newCompositeNode(grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getInputsInputParserRuleCall_4_2_0());
                    	      					
                    	    }
                    	    pushFollow(FOLLOW_61);
                    	    lv_inputs_6_0=ruleInput();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						if (current==null) {
                    	      							current = createModelElementForParent(grammarAccess.getOptionedWorkflowDispatchTriggerRule());
                    	      						}
                    	      						add(
                    	      							current,
                    	      							"inputs",
                    	      							lv_inputs_6_0,
                    	      							"d.fe.up.pt.cicd.gha.GitHubActions.Input");
                    	      						afterParserOrEnumRuleCall();
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt94 >= 1 ) break loop94;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(94, input);
                                throw eee;
                        }
                        cnt94++;
                    } while (true);


                    }
                    break;

            }

            this_END_7=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_7, grammarAccess.getOptionedWorkflowDispatchTriggerAccess().getENDTerminalRuleCall_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOptionedWorkflowDispatchTrigger"


    // $ANTLR start "entryRuleInput"
    // InternalGitHubActionsParser.g:5713:1: entryRuleInput returns [EObject current=null] : iv_ruleInput= ruleInput EOF ;
    public final EObject entryRuleInput() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInput = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getInputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:5717:2: (iv_ruleInput= ruleInput EOF )
            // InternalGitHubActionsParser.g:5718:2: iv_ruleInput= ruleInput EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInputRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInput=ruleInput();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInput; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleInput"


    // $ANTLR start "ruleInput"
    // InternalGitHubActionsParser.g:5727:1: ruleInput returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleInput() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token lv_id_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token lv_options_19_0=null;
        Token otherlv_20=null;
        Token lv_options_21_0=null;
        Token otherlv_22=null;
        Token lv_options_23_0=null;
        Token otherlv_24=null;
        Token this_BEGIN_25=null;
        Token otherlv_26=null;
        Token lv_options_27_0=null;
        Token this_NEWLINE_28=null;
        Token this_END_29=null;
        Token this_END_30=null;
        Token this_END_31=null;
        EObject lv_description_7_0 = null;

        EObject lv_default_10_0 = null;

        EObject lv_isRequired_13_0 = null;

        Enumerator lv_type_16_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getInputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:5736:2: ( ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:5737:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:5737:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:5738:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:5738:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:5739:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getInputAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:5742:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:5743:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:5743:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+
            int cnt100=0;
            loop100:
            do {
                int alt100=6;
                alt100 = dfa100.predict(input);
                switch (alt100) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:5744:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5744:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
            	    // InternalGitHubActionsParser.g:5745:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:5745:99: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
            	    // InternalGitHubActionsParser.g:5746:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:5749:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
            	    // InternalGitHubActionsParser.g:5749:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5749:18: (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
            	    // InternalGitHubActionsParser.g:5749:19: this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
            	    {
            	    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_1, grammarAccess.getInputAccess().getBEGINTerminalRuleCall_0_0());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:5753:8: ( (lv_id_2_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:5754:9: (lv_id_2_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:5754:9: (lv_id_2_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:5755:10: lv_id_2_0= RULE_ID
            	    {
            	    lv_id_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_2_0, grammarAccess.getInputAccess().getIdIDTerminalRuleCall_0_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getInputRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_2_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_3, grammarAccess.getInputAccess().getColonKeyword_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_62); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getInputAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:5779:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
            	    int alt96=2;
            	    int LA96_0 = input.LA(1);

            	    if ( (LA96_0==Description) ) {
            	        alt96=1;
            	    }
            	    switch (alt96) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:5780:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) )
            	            {
            	            otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getInputAccess().getDescriptionKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getInputAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:5788:9: ( (lv_description_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:5789:10: (lv_description_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:5789:10: (lv_description_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:5790:11: lv_description_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getInputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_63);
            	            lv_description_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getInputRule());
            	              											}
            	              											set(
            	              												current,
            	              												"description",
            	              												lv_description_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:5814:3: ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5814:3: ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:5815:4: {...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:5815:99: ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:5816:5: ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:5819:8: ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:5819:9: {...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5819:18: (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:5819:19: otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) )
            	    {
            	    otherlv_8=(Token)match(input,Default,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_8, grammarAccess.getInputAccess().getDefaultKeyword_1_0());
            	      							
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_9, grammarAccess.getInputAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:5827:8: ( (lv_default_10_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:5828:9: (lv_default_10_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:5828:9: (lv_default_10_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:5829:10: lv_default_10_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getInputAccess().getDefaultExpressionParserRuleCall_1_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_63);
            	    lv_default_10_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getInputRule());
            	      										}
            	      										set(
            	      											current,
            	      											"default",
            	      											lv_default_10_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:5852:3: ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5852:3: ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:5853:4: {...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:5853:99: ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:5854:5: ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:5857:8: ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:5857:9: {...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5857:18: (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:5857:19: otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) )
            	    {
            	    otherlv_11=(Token)match(input,Required,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_11, grammarAccess.getInputAccess().getRequiredKeyword_2_0());
            	      							
            	    }
            	    otherlv_12=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_12, grammarAccess.getInputAccess().getColonKeyword_2_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:5865:8: ( (lv_isRequired_13_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:5866:9: (lv_isRequired_13_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:5866:9: (lv_isRequired_13_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:5867:10: lv_isRequired_13_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getInputAccess().getIsRequiredExpressionParserRuleCall_2_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_63);
            	    lv_isRequired_13_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getInputRule());
            	      										}
            	      										set(
            	      											current,
            	      											"isRequired",
            	      											lv_isRequired_13_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:5890:3: ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5890:3: ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:5891:4: {...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:5891:99: ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) )
            	    // InternalGitHubActionsParser.g:5892:5: ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:5895:8: ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) )
            	    // InternalGitHubActionsParser.g:5895:9: {...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5895:18: (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) )
            	    // InternalGitHubActionsParser.g:5895:19: otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) )
            	    {
            	    otherlv_14=(Token)match(input,Type,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_14, grammarAccess.getInputAccess().getTypeKeyword_3_0());
            	      							
            	    }
            	    otherlv_15=(Token)match(input,Colon,FOLLOW_64); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_15, grammarAccess.getInputAccess().getColonKeyword_3_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:5903:8: ( (lv_type_16_0= ruleTYPE ) )
            	    // InternalGitHubActionsParser.g:5904:9: (lv_type_16_0= ruleTYPE )
            	    {
            	    // InternalGitHubActionsParser.g:5904:9: (lv_type_16_0= ruleTYPE )
            	    // InternalGitHubActionsParser.g:5905:10: lv_type_16_0= ruleTYPE
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getInputAccess().getTypeTYPEEnumRuleCall_3_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_63);
            	    lv_type_16_0=ruleTYPE();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getInputRule());
            	      										}
            	      										set(
            	      											current,
            	      											"type",
            	      											lv_type_16_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.TYPE");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:5928:3: ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:5928:3: ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:5929:4: {...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:5929:99: ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:5930:5: ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:5933:8: ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) )
            	    // InternalGitHubActionsParser.g:5933:9: {...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleInput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:5933:18: ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END )
            	    // InternalGitHubActionsParser.g:5933:19: ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:5933:19: ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) )
            	    int alt99=3;
            	    switch ( input.LA(1) ) {
            	    case Options:
            	        {
            	        alt99=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt99=2;
            	        }
            	        break;
            	    case RULE_BEGIN:
            	        {
            	        alt99=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 99, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt99) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:5934:9: (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:5934:9: (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) )
            	            // InternalGitHubActionsParser.g:5935:10: otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) )
            	            {
            	            otherlv_17=(Token)match(input,Options,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_17, grammarAccess.getInputAccess().getOptionsKeyword_4_0_0_0());
            	              									
            	            }
            	            otherlv_18=(Token)match(input,Colon,FOLLOW_31); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_18, grammarAccess.getInputAccess().getColonKeyword_4_0_0_1());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:5943:10: ( (lv_options_19_0= RULE_STRING ) )
            	            // InternalGitHubActionsParser.g:5944:11: (lv_options_19_0= RULE_STRING )
            	            {
            	            // InternalGitHubActionsParser.g:5944:11: (lv_options_19_0= RULE_STRING )
            	            // InternalGitHubActionsParser.g:5945:12: lv_options_19_0= RULE_STRING
            	            {
            	            lv_options_19_0=(Token)match(input,RULE_STRING,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												newLeafNode(lv_options_19_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_0_2_0());
            	              											
            	            }
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElement(grammarAccess.getInputRule());
            	              												}
            	              												addWithLastConsumed(
            	              													current,
            	              													"options",
            	              													lv_options_19_0,
            	              													"org.eclipse.xtext.common.Terminals.STRING");
            	              											
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:5963:9: (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:5963:9: (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:5964:10: otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket
            	            {
            	            otherlv_20=(Token)match(input,LeftSquareBracket,FOLLOW_31); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_20, grammarAccess.getInputAccess().getLeftSquareBracketKeyword_4_0_1_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:5968:10: ( (lv_options_21_0= RULE_STRING ) )
            	            // InternalGitHubActionsParser.g:5969:11: (lv_options_21_0= RULE_STRING )
            	            {
            	            // InternalGitHubActionsParser.g:5969:11: (lv_options_21_0= RULE_STRING )
            	            // InternalGitHubActionsParser.g:5970:12: lv_options_21_0= RULE_STRING
            	            {
            	            lv_options_21_0=(Token)match(input,RULE_STRING,FOLLOW_8); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              												newLeafNode(lv_options_21_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_1_1_0());
            	              											
            	            }
            	            if ( state.backtracking==0 ) {

            	              												if (current==null) {
            	              													current = createModelElement(grammarAccess.getInputRule());
            	              												}
            	              												addWithLastConsumed(
            	              													current,
            	              													"options",
            	              													lv_options_21_0,
            	              													"org.eclipse.xtext.common.Terminals.STRING");
            	              											
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:5986:10: (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )*
            	            loop97:
            	            do {
            	                int alt97=2;
            	                int LA97_0 = input.LA(1);

            	                if ( (LA97_0==Comma) ) {
            	                    alt97=1;
            	                }


            	                switch (alt97) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:5987:11: otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) )
            	            	    {
            	            	    otherlv_22=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_22, grammarAccess.getInputAccess().getCommaKeyword_4_0_1_2_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:5991:11: ( (lv_options_23_0= RULE_STRING ) )
            	            	    // InternalGitHubActionsParser.g:5992:12: (lv_options_23_0= RULE_STRING )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:5992:12: (lv_options_23_0= RULE_STRING )
            	            	    // InternalGitHubActionsParser.g:5993:13: lv_options_23_0= RULE_STRING
            	            	    {
            	            	    lv_options_23_0=(Token)match(input,RULE_STRING,FOLLOW_8); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													newLeafNode(lv_options_23_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_1_2_1_0());
            	            	      												
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElement(grammarAccess.getInputRule());
            	            	      													}
            	            	      													addWithLastConsumed(
            	            	      														current,
            	            	      														"options",
            	            	      														lv_options_23_0,
            	            	      														"org.eclipse.xtext.common.Terminals.STRING");
            	            	      												
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop97;
            	                }
            	            } while (true);

            	            otherlv_24=(Token)match(input,RightSquareBracket,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(otherlv_24, grammarAccess.getInputAccess().getRightSquareBracketKeyword_4_0_1_3());
            	              									
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:6016:9: (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:6016:9: (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END )
            	            // InternalGitHubActionsParser.g:6017:10: this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END
            	            {
            	            this_BEGIN_25=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_BEGIN_25, grammarAccess.getInputAccess().getBEGINTerminalRuleCall_4_0_2_0());
            	              									
            	            }
            	            // InternalGitHubActionsParser.g:6021:10: (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+
            	            int cnt98=0;
            	            loop98:
            	            do {
            	                int alt98=2;
            	                int LA98_0 = input.LA(1);

            	                if ( (LA98_0==HyphenMinus) ) {
            	                    alt98=1;
            	                }


            	                switch (alt98) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:6022:11: otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE
            	            	    {
            	            	    otherlv_26=(Token)match(input,HyphenMinus,FOLLOW_31); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(otherlv_26, grammarAccess.getInputAccess().getHyphenMinusKeyword_4_0_2_1_0());
            	            	      										
            	            	    }
            	            	    // InternalGitHubActionsParser.g:6026:11: ( (lv_options_27_0= RULE_STRING ) )
            	            	    // InternalGitHubActionsParser.g:6027:12: (lv_options_27_0= RULE_STRING )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:6027:12: (lv_options_27_0= RULE_STRING )
            	            	    // InternalGitHubActionsParser.g:6028:13: lv_options_27_0= RULE_STRING
            	            	    {
            	            	    lv_options_27_0=(Token)match(input,RULE_STRING,FOLLOW_10); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      													newLeafNode(lv_options_27_0, grammarAccess.getInputAccess().getOptionsSTRINGTerminalRuleCall_4_0_2_1_1_0());
            	            	      												
            	            	    }
            	            	    if ( state.backtracking==0 ) {

            	            	      													if (current==null) {
            	            	      														current = createModelElement(grammarAccess.getInputRule());
            	            	      													}
            	            	      													addWithLastConsumed(
            	            	      														current,
            	            	      														"options",
            	            	      														lv_options_27_0,
            	            	      														"org.eclipse.xtext.common.Terminals.STRING");
            	            	      												
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_28=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      											newLeafNode(this_NEWLINE_28, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_1_2());
            	            	      										
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt98 >= 1 ) break loop98;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(98, input);
            	                        throw eee;
            	                }
            	                cnt98++;
            	            } while (true);

            	            this_END_29=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              										newLeafNode(this_END_29, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_0_2_2());
            	              									
            	            }

            	            }


            	            }
            	            break;

            	    }

            	    this_END_30=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_30, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_1());
            	      							
            	    }
            	    this_END_31=(Token)match(input,RULE_END,FOLLOW_63); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_31, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_2());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt100 >= 1 ) break loop100;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(100, input);
                        throw eee;
                }
                cnt100++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleInput", "getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getInputAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleInput"


    // $ANTLR start "entryRuleOutput"
    // InternalGitHubActionsParser.g:6083:1: entryRuleOutput returns [EObject current=null] : iv_ruleOutput= ruleOutput EOF ;
    public final EObject entryRuleOutput() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOutput = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOutputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:6087:2: (iv_ruleOutput= ruleOutput EOF )
            // InternalGitHubActionsParser.g:6088:2: iv_ruleOutput= ruleOutput EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOutputRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOutput=ruleOutput();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOutput; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleOutput"


    // $ANTLR start "ruleOutput"
    // InternalGitHubActionsParser.g:6097:1: ruleOutput returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleOutput() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token lv_id_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token this_END_11=null;
        Token this_END_12=null;
        EObject lv_description_7_0 = null;

        EObject lv_value_10_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getOutputAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:6106:2: ( ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:6107:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:6107:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:6108:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:6108:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:6109:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getOutputAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:6112:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:6113:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:6113:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+
            int cnt102=0;
            loop102:
            do {
                int alt102=3;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==RULE_BEGIN) ) {
                    int LA102_2 = input.LA(2);

                    if ( synpred194_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0) ) {
                        alt102=1;
                    }


                }
                else if ( (LA102_0==Value) ) {
                    int LA102_3 = input.LA(2);

                    if ( synpred195_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1) ) {
                        alt102=2;
                    }


                }


                switch (alt102) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:6114:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6114:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
            	    // InternalGitHubActionsParser.g:6115:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:6115:100: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
            	    // InternalGitHubActionsParser.g:6116:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:6119:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
            	    // InternalGitHubActionsParser.g:6119:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6119:18: (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
            	    // InternalGitHubActionsParser.g:6119:19: this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
            	    {
            	    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_1, grammarAccess.getOutputAccess().getBEGINTerminalRuleCall_0_0());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:6123:8: ( (lv_id_2_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:6124:9: (lv_id_2_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:6124:9: (lv_id_2_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:6125:10: lv_id_2_0= RULE_ID
            	    {
            	    lv_id_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_2_0, grammarAccess.getOutputAccess().getIdIDTerminalRuleCall_0_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getOutputRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_2_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getColonKeyword_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_65); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getOutputAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:6149:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
            	    int alt101=2;
            	    int LA101_0 = input.LA(1);

            	    if ( (LA101_0==Description) ) {
            	        alt101=1;
            	    }
            	    switch (alt101) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:6150:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) )
            	            {
            	            otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getOutputAccess().getDescriptionKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getOutputAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:6158:9: ( (lv_description_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:6159:10: (lv_description_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:6159:10: (lv_description_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:6160:11: lv_description_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getOutputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_66);
            	            lv_description_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getOutputRule());
            	              											}
            	              											set(
            	              												current,
            	              												"description",
            	              												lv_description_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOutputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:6184:3: ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6184:3: ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:6185:4: {...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:6185:100: ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:6186:5: ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:6189:8: ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) )
            	    // InternalGitHubActionsParser.g:6189:9: {...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleOutput", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6189:18: ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END )
            	    // InternalGitHubActionsParser.g:6189:19: (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:6189:19: (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:6190:9: otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) )
            	    {
            	    otherlv_8=(Token)match(input,Value,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_8, grammarAccess.getOutputAccess().getValueKeyword_1_0_0());
            	      								
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_9, grammarAccess.getOutputAccess().getColonKeyword_1_0_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:6198:9: ( (lv_value_10_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:6199:10: (lv_value_10_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:6199:10: (lv_value_10_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:6200:11: lv_value_10_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getOutputAccess().getValueExpressionParserRuleCall_1_0_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_24);
            	    lv_value_10_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getOutputRule());
            	      											}
            	      											set(
            	      												current,
            	      												"value",
            	      												lv_value_10_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }

            	    this_END_11=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_11, grammarAccess.getOutputAccess().getENDTerminalRuleCall_1_1());
            	      							
            	    }
            	    this_END_12=(Token)match(input,RULE_END,FOLLOW_66); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_12, grammarAccess.getOutputAccess().getENDTerminalRuleCall_1_2());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOutputAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt102 >= 1 ) break loop102;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(102, input);
                        throw eee;
                }
                cnt102++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getOutputAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleOutput", "getUnorderedGroupHelper().canLeave(grammarAccess.getOutputAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getOutputAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleOutput"


    // $ANTLR start "entryRuleSecret"
    // InternalGitHubActionsParser.g:6246:1: entryRuleSecret returns [EObject current=null] : iv_ruleSecret= ruleSecret EOF ;
    public final EObject entryRuleSecret() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSecret = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getSecretAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:6250:2: (iv_ruleSecret= ruleSecret EOF )
            // InternalGitHubActionsParser.g:6251:2: iv_ruleSecret= ruleSecret EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSecretRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSecret=ruleSecret();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSecret; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleSecret"


    // $ANTLR start "ruleSecret"
    // InternalGitHubActionsParser.g:6260:1: ruleSecret returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleSecret() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token lv_id_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token this_END_11=null;
        Token this_END_12=null;
        EObject lv_description_7_0 = null;

        EObject lv_isRequired_10_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getSecretAccess().getUnorderedGroup()
        	);

        try {
            // InternalGitHubActionsParser.g:6269:2: ( ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:6270:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:6270:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:6271:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:6271:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:6272:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getSecretAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:6275:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:6276:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:6276:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )+
            int cnt105=0;
            loop105:
            do {
                int alt105=3;
                switch ( input.LA(1) ) {
                case RULE_END:
                    {
                    int LA105_1 = input.LA(2);

                    if ( synpred199_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 1) ) {
                        alt105=2;
                    }


                    }
                    break;
                case RULE_BEGIN:
                    {
                    int LA105_2 = input.LA(2);

                    if ( synpred197_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 0) ) {
                        alt105=1;
                    }


                    }
                    break;
                case Required:
                    {
                    int LA105_3 = input.LA(2);

                    if ( synpred199_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 1) ) {
                        alt105=2;
                    }


                    }
                    break;

                }

                switch (alt105) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:6277:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6277:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
            	    // InternalGitHubActionsParser.g:6278:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:6278:100: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
            	    // InternalGitHubActionsParser.g:6279:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:6282:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
            	    // InternalGitHubActionsParser.g:6282:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleSecret", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6282:18: (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
            	    // InternalGitHubActionsParser.g:6282:19: this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
            	    {
            	    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_1, grammarAccess.getSecretAccess().getBEGINTerminalRuleCall_0_0());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:6286:8: ( (lv_id_2_0= RULE_ID ) )
            	    // InternalGitHubActionsParser.g:6287:9: (lv_id_2_0= RULE_ID )
            	    {
            	    // InternalGitHubActionsParser.g:6287:9: (lv_id_2_0= RULE_ID )
            	    // InternalGitHubActionsParser.g:6288:10: lv_id_2_0= RULE_ID
            	    {
            	    lv_id_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										newLeafNode(lv_id_2_0, grammarAccess.getSecretAccess().getIdIDTerminalRuleCall_0_1_0());
            	      									
            	    }
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElement(grammarAccess.getSecretRule());
            	      										}
            	      										setWithLastConsumed(
            	      											current,
            	      											"id",
            	      											lv_id_2_0,
            	      											"org.eclipse.xtext.common.Terminals.ID");
            	      									
            	    }

            	    }


            	    }

            	    otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_3, grammarAccess.getSecretAccess().getColonKeyword_0_2());
            	      							
            	    }
            	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_67); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_4, grammarAccess.getSecretAccess().getBEGINTerminalRuleCall_0_3());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:6312:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
            	    int alt103=2;
            	    int LA103_0 = input.LA(1);

            	    if ( (LA103_0==Description) ) {
            	        alt103=1;
            	    }
            	    switch (alt103) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:6313:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) )
            	            {
            	            otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_5, grammarAccess.getSecretAccess().getDescriptionKeyword_0_4_0());
            	              								
            	            }
            	            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_6, grammarAccess.getSecretAccess().getColonKeyword_0_4_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:6321:9: ( (lv_description_7_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:6322:10: (lv_description_7_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:6322:10: (lv_description_7_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:6323:11: lv_description_7_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getSecretAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_68);
            	            lv_description_7_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getSecretRule());
            	              											}
            	              											set(
            	              												current,
            	              												"description",
            	              												lv_description_7_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSecretAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:6347:3: ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6347:3: ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:6348:4: {...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:6348:100: ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:6349:5: ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:6352:8: ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) )
            	    // InternalGitHubActionsParser.g:6352:9: {...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleSecret", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6352:18: ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END )
            	    // InternalGitHubActionsParser.g:6352:19: (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:6352:19: (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )?
            	    int alt104=2;
            	    int LA104_0 = input.LA(1);

            	    if ( (LA104_0==Required) ) {
            	        alt104=1;
            	    }
            	    switch (alt104) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:6353:9: otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) )
            	            {
            	            otherlv_8=(Token)match(input,Required,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_8, grammarAccess.getSecretAccess().getRequiredKeyword_1_0_0());
            	              								
            	            }
            	            otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_9, grammarAccess.getSecretAccess().getColonKeyword_1_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:6361:9: ( (lv_isRequired_10_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:6362:10: (lv_isRequired_10_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:6362:10: (lv_isRequired_10_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:6363:11: lv_isRequired_10_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getSecretAccess().getIsRequiredExpressionParserRuleCall_1_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_24);
            	            lv_isRequired_10_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getSecretRule());
            	              											}
            	              											set(
            	              												current,
            	              												"isRequired",
            	              												lv_isRequired_10_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    this_END_11=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_11, grammarAccess.getSecretAccess().getENDTerminalRuleCall_1_1());
            	      							
            	    }
            	    this_END_12=(Token)match(input,RULE_END,FOLLOW_68); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_12, grammarAccess.getSecretAccess().getENDTerminalRuleCall_1_2());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSecretAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt105 >= 1 ) break loop105;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(105, input);
                        throw eee;
                }
                cnt105++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getSecretAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleSecret", "getUnorderedGroupHelper().canLeave(grammarAccess.getSecretAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getSecretAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleSecret"


    // $ANTLR start "entryRulePermission"
    // InternalGitHubActionsParser.g:6409:1: entryRulePermission returns [EObject current=null] : iv_rulePermission= rulePermission EOF ;
    public final EObject entryRulePermission() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePermission = null;


        try {
            // InternalGitHubActionsParser.g:6409:51: (iv_rulePermission= rulePermission EOF )
            // InternalGitHubActionsParser.g:6410:2: iv_rulePermission= rulePermission EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPermissionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePermission=rulePermission();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePermission; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePermission"


    // $ANTLR start "rulePermission"
    // InternalGitHubActionsParser.g:6416:1: rulePermission returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN ( ( (lv_key_1_0= rulePERMISSION_SCOPE ) ) otherlv_2= Colon ( (lv_value_3_0= rulePERMISSION_VALUE ) ) ) this_END_4= RULE_END ) ;
    public final EObject rulePermission() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token otherlv_2=null;
        Token this_END_4=null;
        Enumerator lv_key_1_0 = null;

        Enumerator lv_value_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:6422:2: ( (this_BEGIN_0= RULE_BEGIN ( ( (lv_key_1_0= rulePERMISSION_SCOPE ) ) otherlv_2= Colon ( (lv_value_3_0= rulePERMISSION_VALUE ) ) ) this_END_4= RULE_END ) )
            // InternalGitHubActionsParser.g:6423:2: (this_BEGIN_0= RULE_BEGIN ( ( (lv_key_1_0= rulePERMISSION_SCOPE ) ) otherlv_2= Colon ( (lv_value_3_0= rulePERMISSION_VALUE ) ) ) this_END_4= RULE_END )
            {
            // InternalGitHubActionsParser.g:6423:2: (this_BEGIN_0= RULE_BEGIN ( ( (lv_key_1_0= rulePERMISSION_SCOPE ) ) otherlv_2= Colon ( (lv_value_3_0= rulePERMISSION_VALUE ) ) ) this_END_4= RULE_END )
            // InternalGitHubActionsParser.g:6424:3: this_BEGIN_0= RULE_BEGIN ( ( (lv_key_1_0= rulePERMISSION_SCOPE ) ) otherlv_2= Colon ( (lv_value_3_0= rulePERMISSION_VALUE ) ) ) this_END_4= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_69); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getPermissionAccess().getBEGINTerminalRuleCall_0());
              		
            }
            // InternalGitHubActionsParser.g:6428:3: ( ( (lv_key_1_0= rulePERMISSION_SCOPE ) ) otherlv_2= Colon ( (lv_value_3_0= rulePERMISSION_VALUE ) ) )
            // InternalGitHubActionsParser.g:6429:4: ( (lv_key_1_0= rulePERMISSION_SCOPE ) ) otherlv_2= Colon ( (lv_value_3_0= rulePERMISSION_VALUE ) )
            {
            // InternalGitHubActionsParser.g:6429:4: ( (lv_key_1_0= rulePERMISSION_SCOPE ) )
            // InternalGitHubActionsParser.g:6430:5: (lv_key_1_0= rulePERMISSION_SCOPE )
            {
            // InternalGitHubActionsParser.g:6430:5: (lv_key_1_0= rulePERMISSION_SCOPE )
            // InternalGitHubActionsParser.g:6431:6: lv_key_1_0= rulePERMISSION_SCOPE
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getPermissionAccess().getKeyPERMISSION_SCOPEEnumRuleCall_1_0_0());
              					
            }
            pushFollow(FOLLOW_3);
            lv_key_1_0=rulePERMISSION_SCOPE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getPermissionRule());
              						}
              						set(
              							current,
              							"key",
              							lv_key_1_0,
              							"d.fe.up.pt.cicd.gha.GitHubActions.PERMISSION_SCOPE");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_70); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(otherlv_2, grammarAccess.getPermissionAccess().getColonKeyword_1_1());
              			
            }
            // InternalGitHubActionsParser.g:6452:4: ( (lv_value_3_0= rulePERMISSION_VALUE ) )
            // InternalGitHubActionsParser.g:6453:5: (lv_value_3_0= rulePERMISSION_VALUE )
            {
            // InternalGitHubActionsParser.g:6453:5: (lv_value_3_0= rulePERMISSION_VALUE )
            // InternalGitHubActionsParser.g:6454:6: lv_value_3_0= rulePERMISSION_VALUE
            {
            if ( state.backtracking==0 ) {

              						newCompositeNode(grammarAccess.getPermissionAccess().getValuePERMISSION_VALUEEnumRuleCall_1_2_0());
              					
            }
            pushFollow(FOLLOW_24);
            lv_value_3_0=rulePERMISSION_VALUE();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              						if (current==null) {
              							current = createModelElementForParent(grammarAccess.getPermissionRule());
              						}
              						set(
              							current,
              							"value",
              							lv_value_3_0,
              							"d.fe.up.pt.cicd.gha.GitHubActions.PERMISSION_VALUE");
              						afterParserOrEnumRuleCall();
              					
            }

            }


            }


            }

            this_END_4=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_4, grammarAccess.getPermissionAccess().getENDTerminalRuleCall_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePermission"


    // $ANTLR start "entryRuleDefaults"
    // InternalGitHubActionsParser.g:6480:1: entryRuleDefaults returns [EObject current=null] : iv_ruleDefaults= ruleDefaults EOF ;
    public final EObject entryRuleDefaults() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleDefaults = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getDefaultsAccess().getUnorderedGroup_4()
        	);

        try {
            // InternalGitHubActionsParser.g:6484:2: (iv_ruleDefaults= ruleDefaults EOF )
            // InternalGitHubActionsParser.g:6485:2: iv_ruleDefaults= ruleDefaults EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getDefaultsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleDefaults=ruleDefaults();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleDefaults; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleDefaults"


    // $ANTLR start "ruleDefaults"
    // InternalGitHubActionsParser.g:6494:1: ruleDefaults returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN otherlv_1= Run otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ;
    public final EObject ruleDefaults() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token this_BEGIN_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token this_END_11=null;
        Token this_END_12=null;
        EObject lv_shell_7_0 = null;

        EObject lv_workingDirectory_10_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getDefaultsAccess().getUnorderedGroup_4()
        	);

        try {
            // InternalGitHubActionsParser.g:6503:2: ( (this_BEGIN_0= RULE_BEGIN otherlv_1= Run otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_11= RULE_END this_END_12= RULE_END ) )
            // InternalGitHubActionsParser.g:6504:2: (this_BEGIN_0= RULE_BEGIN otherlv_1= Run otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_11= RULE_END this_END_12= RULE_END )
            {
            // InternalGitHubActionsParser.g:6504:2: (this_BEGIN_0= RULE_BEGIN otherlv_1= Run otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_11= RULE_END this_END_12= RULE_END )
            // InternalGitHubActionsParser.g:6505:3: this_BEGIN_0= RULE_BEGIN otherlv_1= Run otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) this_END_11= RULE_END this_END_12= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_34); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getDefaultsAccess().getBEGINTerminalRuleCall_0());
              		
            }
            otherlv_1=(Token)match(input,Run,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getDefaultsAccess().getRunKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getDefaultsAccess().getColonKeyword_2());
              		
            }
            this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_71); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_3, grammarAccess.getDefaultsAccess().getBEGINTerminalRuleCall_3());
              		
            }
            // InternalGitHubActionsParser.g:6521:3: ( ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:6522:4: ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:6522:4: ( ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:6523:5: ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());
            // InternalGitHubActionsParser.g:6526:5: ( ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:6527:6: ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:6527:6: ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )+
            int cnt106=0;
            loop106:
            do {
                int alt106=3;
                int LA106_0 = input.LA(1);

                if ( LA106_0 == Shell && getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0) ) {
                    alt106=1;
                }
                else if ( LA106_0 == WorkingDirectory && getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1) ) {
                    alt106=2;
                }


                switch (alt106) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:6528:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6528:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6529:5: {...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:6529:105: ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6530:6: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0);
            	    // InternalGitHubActionsParser.g:6533:9: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:6533:10: {...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6533:19: (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:6533:20: otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) )
            	    {
            	    otherlv_5=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_5, grammarAccess.getDefaultsAccess().getShellKeyword_4_0_0());
            	      								
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_6, grammarAccess.getDefaultsAccess().getColonKeyword_4_0_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:6541:9: ( (lv_shell_7_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:6542:10: (lv_shell_7_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:6542:10: (lv_shell_7_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:6543:11: lv_shell_7_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getDefaultsAccess().getShellExpressionParserRuleCall_4_0_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_72);
            	    lv_shell_7_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getDefaultsRule());
            	      											}
            	      											set(
            	      												current,
            	      												"shell",
            	      												lv_shell_7_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:6566:4: ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6566:4: ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6567:5: {...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:6567:105: ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6568:6: ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1);
            	    // InternalGitHubActionsParser.g:6571:9: ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:6571:10: {...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleDefaults", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6571:19: (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:6571:20: otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) )
            	    {
            	    otherlv_8=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_8, grammarAccess.getDefaultsAccess().getWorkingDirectoryKeyword_4_1_0());
            	      								
            	    }
            	    otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_9, grammarAccess.getDefaultsAccess().getColonKeyword_4_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:6579:9: ( (lv_workingDirectory_10_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:6580:10: (lv_workingDirectory_10_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:6580:10: (lv_workingDirectory_10_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:6581:11: lv_workingDirectory_10_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getDefaultsAccess().getWorkingDirectoryExpressionParserRuleCall_4_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_72);
            	    lv_workingDirectory_10_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getDefaultsRule());
            	      											}
            	      											set(
            	      												current,
            	      												"workingDirectory",
            	      												lv_workingDirectory_10_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getDefaultsAccess().getUnorderedGroup_4()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleDefaults", "getUnorderedGroupHelper().canLeave(grammarAccess.getDefaultsAccess().getUnorderedGroup_4())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getDefaultsAccess().getUnorderedGroup_4());

            }

            this_END_11=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_11, grammarAccess.getDefaultsAccess().getENDTerminalRuleCall_5());
              		
            }
            this_END_12=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_12, grammarAccess.getDefaultsAccess().getENDTerminalRuleCall_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleDefaults"


    // $ANTLR start "entryRuleStagingEnvironment"
    // InternalGitHubActionsParser.g:6627:1: entryRuleStagingEnvironment returns [EObject current=null] : iv_ruleStagingEnvironment= ruleStagingEnvironment EOF ;
    public final EObject entryRuleStagingEnvironment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStagingEnvironment = null;


        try {
            // InternalGitHubActionsParser.g:6627:59: (iv_ruleStagingEnvironment= ruleStagingEnvironment EOF )
            // InternalGitHubActionsParser.g:6628:2: iv_ruleStagingEnvironment= ruleStagingEnvironment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStagingEnvironmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStagingEnvironment=ruleStagingEnvironment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStagingEnvironment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStagingEnvironment"


    // $ANTLR start "ruleStagingEnvironment"
    // InternalGitHubActionsParser.g:6634:1: ruleStagingEnvironment returns [EObject current=null] : ( ( (lv_name_0_0= ruleExpression ) ) | (this_BEGIN_1= RULE_BEGIN (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )? this_END_8= RULE_END ) ) ;
    public final EObject ruleStagingEnvironment() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token this_END_8=null;
        EObject lv_name_0_0 = null;

        EObject lv_name_4_0 = null;

        EObject lv_url_7_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:6640:2: ( ( ( (lv_name_0_0= ruleExpression ) ) | (this_BEGIN_1= RULE_BEGIN (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )? this_END_8= RULE_END ) ) )
            // InternalGitHubActionsParser.g:6641:2: ( ( (lv_name_0_0= ruleExpression ) ) | (this_BEGIN_1= RULE_BEGIN (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )? this_END_8= RULE_END ) )
            {
            // InternalGitHubActionsParser.g:6641:2: ( ( (lv_name_0_0= ruleExpression ) ) | (this_BEGIN_1= RULE_BEGIN (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )? this_END_8= RULE_END ) )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==DollarSignLeftCurlyBracketLeftCurlyBracket||LA108_0==RULE_STRING) ) {
                alt108=1;
            }
            else if ( (LA108_0==RULE_BEGIN) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // InternalGitHubActionsParser.g:6642:3: ( (lv_name_0_0= ruleExpression ) )
                    {
                    // InternalGitHubActionsParser.g:6642:3: ( (lv_name_0_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:6643:4: (lv_name_0_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:6643:4: (lv_name_0_0= ruleExpression )
                    // InternalGitHubActionsParser.g:6644:5: lv_name_0_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      					newCompositeNode(grammarAccess.getStagingEnvironmentAccess().getNameExpressionParserRuleCall_0_0());
                      				
                    }
                    pushFollow(FOLLOW_2);
                    lv_name_0_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					if (current==null) {
                      						current = createModelElementForParent(grammarAccess.getStagingEnvironmentRule());
                      					}
                      					set(
                      						current,
                      						"name",
                      						lv_name_0_0,
                      						"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      					afterParserOrEnumRuleCall();
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:6662:3: (this_BEGIN_1= RULE_BEGIN (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )? this_END_8= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:6662:3: (this_BEGIN_1= RULE_BEGIN (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )? this_END_8= RULE_END )
                    // InternalGitHubActionsParser.g:6663:4: this_BEGIN_1= RULE_BEGIN (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )? this_END_8= RULE_END
                    {
                    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_73); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_BEGIN_1, grammarAccess.getStagingEnvironmentAccess().getBEGINTerminalRuleCall_1_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:6667:4: (otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) )
                    // InternalGitHubActionsParser.g:6668:5: otherlv_2= Name otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) )
                    {
                    otherlv_2=(Token)match(input,Name,FOLLOW_3); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_2, grammarAccess.getStagingEnvironmentAccess().getNameKeyword_1_1_0());
                      				
                    }
                    otherlv_3=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_3, grammarAccess.getStagingEnvironmentAccess().getColonKeyword_1_1_1());
                      				
                    }
                    // InternalGitHubActionsParser.g:6676:5: ( (lv_name_4_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:6677:6: (lv_name_4_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:6677:6: (lv_name_4_0= ruleExpression )
                    // InternalGitHubActionsParser.g:6678:7: lv_name_4_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getStagingEnvironmentAccess().getNameExpressionParserRuleCall_1_1_2_0());
                      						
                    }
                    pushFollow(FOLLOW_74);
                    lv_name_4_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getStagingEnvironmentRule());
                      							}
                      							set(
                      								current,
                      								"name",
                      								lv_name_4_0,
                      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }


                    }

                    // InternalGitHubActionsParser.g:6696:4: (otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) ) )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==Url) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // InternalGitHubActionsParser.g:6697:5: otherlv_5= Url otherlv_6= Colon ( (lv_url_7_0= ruleExpression ) )
                            {
                            otherlv_5=(Token)match(input,Url,FOLLOW_3); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_5, grammarAccess.getStagingEnvironmentAccess().getUrlKeyword_1_2_0());
                              				
                            }
                            otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              					newLeafNode(otherlv_6, grammarAccess.getStagingEnvironmentAccess().getColonKeyword_1_2_1());
                              				
                            }
                            // InternalGitHubActionsParser.g:6705:5: ( (lv_url_7_0= ruleExpression ) )
                            // InternalGitHubActionsParser.g:6706:6: (lv_url_7_0= ruleExpression )
                            {
                            // InternalGitHubActionsParser.g:6706:6: (lv_url_7_0= ruleExpression )
                            // InternalGitHubActionsParser.g:6707:7: lv_url_7_0= ruleExpression
                            {
                            if ( state.backtracking==0 ) {

                              							newCompositeNode(grammarAccess.getStagingEnvironmentAccess().getUrlExpressionParserRuleCall_1_2_2_0());
                              						
                            }
                            pushFollow(FOLLOW_24);
                            lv_url_7_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return current;
                            if ( state.backtracking==0 ) {

                              							if (current==null) {
                              								current = createModelElementForParent(grammarAccess.getStagingEnvironmentRule());
                              							}
                              							set(
                              								current,
                              								"url",
                              								lv_url_7_0,
                              								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                              							afterParserOrEnumRuleCall();
                              						
                            }

                            }


                            }


                            }
                            break;

                    }

                    this_END_8=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(this_END_8, grammarAccess.getStagingEnvironmentAccess().getENDTerminalRuleCall_1_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStagingEnvironment"


    // $ANTLR start "entryRuleStrategy"
    // InternalGitHubActionsParser.g:6734:1: entryRuleStrategy returns [EObject current=null] : iv_ruleStrategy= ruleStrategy EOF ;
    public final EObject entryRuleStrategy() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStrategy = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getStrategyAccess().getUnorderedGroup(), 
        	grammarAccess.getStrategyAccess().getUnorderedGroup_0_1()
        	);

        try {
            // InternalGitHubActionsParser.g:6739:2: (iv_ruleStrategy= ruleStrategy EOF )
            // InternalGitHubActionsParser.g:6740:2: iv_ruleStrategy= ruleStrategy EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStrategyRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStrategy=ruleStrategy();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStrategy; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleStrategy"


    // $ANTLR start "ruleStrategy"
    // InternalGitHubActionsParser.g:6749:1: ruleStrategy returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleStrategy() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_END_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_END_20=null;
        EObject lv_includes_8_0 = null;

        EObject lv_excludes_11_0 = null;

        EObject lv_axes_12_0 = null;

        EObject lv_failFast_16_0 = null;

        EObject lv_maxParallel_19_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getStrategyAccess().getUnorderedGroup(), 
        	grammarAccess.getStrategyAccess().getUnorderedGroup_0_1()
        	);

        try {
            // InternalGitHubActionsParser.g:6759:2: ( ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:6760:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:6760:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:6761:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:6761:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:6762:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getStrategyAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:6765:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:6766:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:6766:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+
            int cnt113=0;
            loop113:
            do {
                int alt113=4;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:6767:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6767:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6768:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:6768:102: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6769:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:6772:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    // InternalGitHubActionsParser.g:6772:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6772:18: (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    // InternalGitHubActionsParser.g:6772:19: this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) )
            	    {
            	    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_75); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_1, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:6776:8: ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) )
            	    // InternalGitHubActionsParser.g:6777:9: ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) )
            	    {
            	    // InternalGitHubActionsParser.g:6777:9: ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) )
            	    // InternalGitHubActionsParser.g:6778:10: ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?)
            	    {
            	    getUnorderedGroupHelper().enter(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1());
            	    // InternalGitHubActionsParser.g:6781:10: ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?)
            	    // InternalGitHubActionsParser.g:6782:11: ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?
            	    {
            	    // InternalGitHubActionsParser.g:6782:11: ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+
            	    int cnt111=0;
            	    loop111:
            	    do {
            	        int alt111=4;
            	        alt111 = dfa111.predict(input);
            	        switch (alt111) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:6783:9: ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:6783:9: ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) )
            	    	    // InternalGitHubActionsParser.g:6784:10: {...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0)");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6784:112: ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) )
            	    	    // InternalGitHubActionsParser.g:6785:11: ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) )
            	    	    {
            	    	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0);
            	    	    // InternalGitHubActionsParser.g:6788:14: ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) )
            	    	    // InternalGitHubActionsParser.g:6788:15: {...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6788:24: (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? )
            	    	    // InternalGitHubActionsParser.g:6788:25: otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )?
            	    	    {
            	    	    otherlv_3=(Token)match(input,Matrix,FOLLOW_3); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(otherlv_3, grammarAccess.getStrategyAccess().getMatrixKeyword_0_1_0_0());
            	    	      													
            	    	    }
            	    	    otherlv_4=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(otherlv_4, grammarAccess.getStrategyAccess().getColonKeyword_0_1_0_1());
            	    	      													
            	    	    }
            	    	    this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_76); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(this_BEGIN_5, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_1_0_2());
            	    	      													
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6800:14: (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )?
            	    	    int alt109=2;
            	    	    int LA109_0 = input.LA(1);

            	    	    if ( (LA109_0==Includes) ) {
            	    	        alt109=1;
            	    	    }
            	    	    switch (alt109) {
            	    	        case 1 :
            	    	            // InternalGitHubActionsParser.g:6801:15: otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) )
            	    	            {
            	    	            otherlv_6=(Token)match(input,Includes,FOLLOW_3); if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              															newLeafNode(otherlv_6, grammarAccess.getStrategyAccess().getIncludesKeyword_0_1_0_3_0());
            	    	              														
            	    	            }
            	    	            otherlv_7=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              															newLeafNode(otherlv_7, grammarAccess.getStrategyAccess().getColonKeyword_0_1_0_3_1());
            	    	              														
            	    	            }
            	    	            // InternalGitHubActionsParser.g:6809:15: ( (lv_includes_8_0= ruleMatrixCombination ) )
            	    	            // InternalGitHubActionsParser.g:6810:16: (lv_includes_8_0= ruleMatrixCombination )
            	    	            {
            	    	            // InternalGitHubActionsParser.g:6810:16: (lv_includes_8_0= ruleMatrixCombination )
            	    	            // InternalGitHubActionsParser.g:6811:17: lv_includes_8_0= ruleMatrixCombination
            	    	            {
            	    	            if ( state.backtracking==0 ) {

            	    	              																	newCompositeNode(grammarAccess.getStrategyAccess().getIncludesMatrixCombinationParserRuleCall_0_1_0_3_2_0());
            	    	              																
            	    	            }
            	    	            pushFollow(FOLLOW_77);
            	    	            lv_includes_8_0=ruleMatrixCombination();

            	    	            state._fsp--;
            	    	            if (state.failed) return current;
            	    	            if ( state.backtracking==0 ) {

            	    	              																	if (current==null) {
            	    	              																		current = createModelElementForParent(grammarAccess.getStrategyRule());
            	    	              																	}
            	    	              																	add(
            	    	              																		current,
            	    	              																		"includes",
            	    	              																		lv_includes_8_0,
            	    	              																		"d.fe.up.pt.cicd.gha.GitHubActions.MatrixCombination");
            	    	              																	afterParserOrEnumRuleCall();
            	    	              																
            	    	            }

            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }


            	    	    }


            	    	    }

            	    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1());

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // InternalGitHubActionsParser.g:6835:9: ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:6835:9: ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) )
            	    	    // InternalGitHubActionsParser.g:6836:10: {...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1)");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6836:112: ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) )
            	    	    // InternalGitHubActionsParser.g:6837:11: ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) )
            	    	    {
            	    	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1);
            	    	    // InternalGitHubActionsParser.g:6840:14: ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) )
            	    	    // InternalGitHubActionsParser.g:6840:15: {...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6840:24: (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) )
            	    	    // InternalGitHubActionsParser.g:6840:25: otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) )
            	    	    {
            	    	    otherlv_9=(Token)match(input,Exludes,FOLLOW_3); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(otherlv_9, grammarAccess.getStrategyAccess().getExludesKeyword_0_1_1_0());
            	    	      													
            	    	    }
            	    	    otherlv_10=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(otherlv_10, grammarAccess.getStrategyAccess().getColonKeyword_0_1_1_1());
            	    	      													
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6848:14: ( (lv_excludes_11_0= ruleMatrixCombination ) )
            	    	    // InternalGitHubActionsParser.g:6849:15: (lv_excludes_11_0= ruleMatrixCombination )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:6849:15: (lv_excludes_11_0= ruleMatrixCombination )
            	    	    // InternalGitHubActionsParser.g:6850:16: lv_excludes_11_0= ruleMatrixCombination
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      																newCompositeNode(grammarAccess.getStrategyAccess().getExcludesMatrixCombinationParserRuleCall_0_1_1_2_0());
            	    	      															
            	    	    }
            	    	    pushFollow(FOLLOW_77);
            	    	    lv_excludes_11_0=ruleMatrixCombination();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      																if (current==null) {
            	    	      																	current = createModelElementForParent(grammarAccess.getStrategyRule());
            	    	      																}
            	    	      																add(
            	    	      																	current,
            	    	      																	"excludes",
            	    	      																	lv_excludes_11_0,
            	    	      																	"d.fe.up.pt.cicd.gha.GitHubActions.MatrixCombination");
            	    	      																afterParserOrEnumRuleCall();
            	    	      															
            	    	    }

            	    	    }


            	    	    }


            	    	    }


            	    	    }

            	    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1());

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 3 :
            	    	    // InternalGitHubActionsParser.g:6873:9: ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:6873:9: ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) )
            	    	    // InternalGitHubActionsParser.g:6874:10: {...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2)");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6874:112: ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) )
            	    	    // InternalGitHubActionsParser.g:6875:11: ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) )
            	    	    {
            	    	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2);
            	    	    // InternalGitHubActionsParser.g:6878:14: ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) )
            	    	    // InternalGitHubActionsParser.g:6878:15: {...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        if (state.backtracking>0) {state.failed=true; return current;}
            	    	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    	    }
            	    	    // InternalGitHubActionsParser.g:6878:24: ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END )
            	    	    // InternalGitHubActionsParser.g:6878:25: ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END
            	    	    {
            	    	    // InternalGitHubActionsParser.g:6878:25: ( (lv_axes_12_0= ruleMatrixAxis ) )+
            	    	    int cnt110=0;
            	    	    loop110:
            	    	    do {
            	    	        int alt110=2;
            	    	        int LA110_0 = input.LA(1);

            	    	        if ( (LA110_0==RULE_BEGIN) ) {
            	    	            alt110=1;
            	    	        }


            	    	        switch (alt110) {
            	    	    	case 1 :
            	    	    	    // InternalGitHubActionsParser.g:6879:15: (lv_axes_12_0= ruleMatrixAxis )
            	    	    	    {
            	    	    	    // InternalGitHubActionsParser.g:6879:15: (lv_axes_12_0= ruleMatrixAxis )
            	    	    	    // InternalGitHubActionsParser.g:6880:16: lv_axes_12_0= ruleMatrixAxis
            	    	    	    {
            	    	    	    if ( state.backtracking==0 ) {

            	    	    	      																newCompositeNode(grammarAccess.getStrategyAccess().getAxesMatrixAxisParserRuleCall_0_1_2_0_0());
            	    	    	      															
            	    	    	    }
            	    	    	    pushFollow(FOLLOW_78);
            	    	    	    lv_axes_12_0=ruleMatrixAxis();

            	    	    	    state._fsp--;
            	    	    	    if (state.failed) return current;
            	    	    	    if ( state.backtracking==0 ) {

            	    	    	      																if (current==null) {
            	    	    	      																	current = createModelElementForParent(grammarAccess.getStrategyRule());
            	    	    	      																}
            	    	    	      																add(
            	    	    	      																	current,
            	    	    	      																	"axes",
            	    	    	      																	lv_axes_12_0,
            	    	    	      																	"d.fe.up.pt.cicd.gha.GitHubActions.MatrixAxis");
            	    	    	      																afterParserOrEnumRuleCall();
            	    	    	      															
            	    	    	    }

            	    	    	    }


            	    	    	    }
            	    	    	    break;

            	    	    	default :
            	    	    	    if ( cnt110 >= 1 ) break loop110;
            	    	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	    	                EarlyExitException eee =
            	    	                    new EarlyExitException(110, input);
            	    	                throw eee;
            	    	        }
            	    	        cnt110++;
            	    	    } while (true);

            	    	    this_END_13=(Token)match(input,RULE_END,FOLLOW_77); if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      														newLeafNode(this_END_13, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_1_2_1());
            	    	      													
            	    	    }

            	    	    }


            	    	    }

            	    	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1());

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt111 >= 1 ) break loop111;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(111, input);
            	                throw eee;
            	        }
            	        cnt111++;
            	    } while (true);

            	    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1()) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1())");
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().leave(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1());

            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:6921:3: ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6921:3: ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6922:4: {...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:6922:102: ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:6923:5: ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:6926:8: ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:6926:9: {...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6926:18: (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:6926:19: otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) )
            	    {
            	    otherlv_14=(Token)match(input,FailFast,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_14, grammarAccess.getStrategyAccess().getFailFastKeyword_1_0());
            	      							
            	    }
            	    otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_15, grammarAccess.getStrategyAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:6934:8: ( (lv_failFast_16_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:6935:9: (lv_failFast_16_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:6935:9: (lv_failFast_16_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:6936:10: lv_failFast_16_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getStrategyAccess().getFailFastExpressionParserRuleCall_1_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_79);
            	    lv_failFast_16_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getStrategyRule());
            	      										}
            	      										set(
            	      											current,
            	      											"failFast",
            	      											lv_failFast_16_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:6959:3: ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:6959:3: ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:6960:4: {...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:6960:102: ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:6961:5: ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:6964:8: ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) )
            	    // InternalGitHubActionsParser.g:6964:9: {...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleStrategy", "true");
            	    }
            	    // InternalGitHubActionsParser.g:6964:18: ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END )
            	    // InternalGitHubActionsParser.g:6964:19: (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:6964:19: (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )?
            	    int alt112=2;
            	    int LA112_0 = input.LA(1);

            	    if ( (LA112_0==MaxParalell) ) {
            	        alt112=1;
            	    }
            	    switch (alt112) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:6965:9: otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) )
            	            {
            	            otherlv_17=(Token)match(input,MaxParalell,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_17, grammarAccess.getStrategyAccess().getMaxParalellKeyword_2_0_0());
            	              								
            	            }
            	            otherlv_18=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_18, grammarAccess.getStrategyAccess().getColonKeyword_2_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:6973:9: ( (lv_maxParallel_19_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:6974:10: (lv_maxParallel_19_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:6974:10: (lv_maxParallel_19_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:6975:11: lv_maxParallel_19_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getStrategyAccess().getMaxParallelExpressionParserRuleCall_2_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_24);
            	            lv_maxParallel_19_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getStrategyRule());
            	              											}
            	              											set(
            	              												current,
            	              												"maxParallel",
            	              												lv_maxParallel_19_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }
            	            break;

            	    }

            	    this_END_20=(Token)match(input,RULE_END,FOLLOW_79); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_20, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_2_1());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStrategyAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt113 >= 1 ) break loop113;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(113, input);
                        throw eee;
                }
                cnt113++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleStrategy", "getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getStrategyAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleStrategy"


    // $ANTLR start "entryRuleMatrixAxis"
    // InternalGitHubActionsParser.g:7017:1: entryRuleMatrixAxis returns [EObject current=null] : iv_ruleMatrixAxis= ruleMatrixAxis EOF ;
    public final EObject entryRuleMatrixAxis() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMatrixAxis = null;


        try {
            // InternalGitHubActionsParser.g:7017:51: (iv_ruleMatrixAxis= ruleMatrixAxis EOF )
            // InternalGitHubActionsParser.g:7018:2: iv_ruleMatrixAxis= ruleMatrixAxis EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMatrixAxisRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMatrixAxis=ruleMatrixAxis();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMatrixAxis; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMatrixAxis"


    // $ANTLR start "ruleMatrixAxis"
    // InternalGitHubActionsParser.g:7024:1: ruleMatrixAxis returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon ( ( (lv_cells_3_0= ruleExpression ) ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket ) | (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) this_END_14= RULE_END ) ;
    public final EObject ruleMatrixAxis() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token lv_name_1_0=null;
        Token otherlv_2=null;
        Token otherlv_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token this_BEGIN_9=null;
        Token otherlv_10=null;
        Token this_NEWLINE_12=null;
        Token this_END_13=null;
        Token this_END_14=null;
        EObject lv_cells_3_0 = null;

        EObject lv_cells_5_0 = null;

        EObject lv_cells_7_0 = null;

        EObject lv_cells_11_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:7030:2: ( (this_BEGIN_0= RULE_BEGIN ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon ( ( (lv_cells_3_0= ruleExpression ) ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket ) | (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) this_END_14= RULE_END ) )
            // InternalGitHubActionsParser.g:7031:2: (this_BEGIN_0= RULE_BEGIN ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon ( ( (lv_cells_3_0= ruleExpression ) ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket ) | (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) this_END_14= RULE_END )
            {
            // InternalGitHubActionsParser.g:7031:2: (this_BEGIN_0= RULE_BEGIN ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon ( ( (lv_cells_3_0= ruleExpression ) ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket ) | (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) this_END_14= RULE_END )
            // InternalGitHubActionsParser.g:7032:3: this_BEGIN_0= RULE_BEGIN ( (lv_name_1_0= RULE_ID ) ) otherlv_2= Colon ( ( (lv_cells_3_0= ruleExpression ) ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket ) | (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) ) this_END_14= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getMatrixAxisAccess().getBEGINTerminalRuleCall_0());
              		
            }
            // InternalGitHubActionsParser.g:7036:3: ( (lv_name_1_0= RULE_ID ) )
            // InternalGitHubActionsParser.g:7037:4: (lv_name_1_0= RULE_ID )
            {
            // InternalGitHubActionsParser.g:7037:4: (lv_name_1_0= RULE_ID )
            // InternalGitHubActionsParser.g:7038:5: lv_name_1_0= RULE_ID
            {
            lv_name_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_name_1_0, grammarAccess.getMatrixAxisAccess().getNameIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getMatrixAxisRule());
              					}
              					setWithLastConsumed(
              						current,
              						"name",
              						lv_name_1_0,
              						"org.eclipse.xtext.common.Terminals.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_80); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getMatrixAxisAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:7058:3: ( ( (lv_cells_3_0= ruleExpression ) ) | (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket ) | (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END ) )
            int alt116=3;
            switch ( input.LA(1) ) {
            case DollarSignLeftCurlyBracketLeftCurlyBracket:
            case RULE_STRING:
                {
                alt116=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt116=2;
                }
                break;
            case RULE_BEGIN:
                {
                alt116=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // InternalGitHubActionsParser.g:7059:4: ( (lv_cells_3_0= ruleExpression ) )
                    {
                    // InternalGitHubActionsParser.g:7059:4: ( (lv_cells_3_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:7060:5: (lv_cells_3_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:7060:5: (lv_cells_3_0= ruleExpression )
                    // InternalGitHubActionsParser.g:7061:6: lv_cells_3_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_3_0_0());
                      					
                    }
                    pushFollow(FOLLOW_24);
                    lv_cells_3_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                      						}
                      						add(
                      							current,
                      							"cells",
                      							lv_cells_3_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:7079:4: (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket )
                    {
                    // InternalGitHubActionsParser.g:7079:4: (otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket )
                    // InternalGitHubActionsParser.g:7080:5: otherlv_4= LeftSquareBracket ( (lv_cells_5_0= ruleExpression ) ) (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )* otherlv_8= RightSquareBracket
                    {
                    otherlv_4=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_4, grammarAccess.getMatrixAxisAccess().getLeftSquareBracketKeyword_3_1_0());
                      				
                    }
                    // InternalGitHubActionsParser.g:7084:5: ( (lv_cells_5_0= ruleExpression ) )
                    // InternalGitHubActionsParser.g:7085:6: (lv_cells_5_0= ruleExpression )
                    {
                    // InternalGitHubActionsParser.g:7085:6: (lv_cells_5_0= ruleExpression )
                    // InternalGitHubActionsParser.g:7086:7: lv_cells_5_0= ruleExpression
                    {
                    if ( state.backtracking==0 ) {

                      							newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_3_1_1_0());
                      						
                    }
                    pushFollow(FOLLOW_8);
                    lv_cells_5_0=ruleExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      							if (current==null) {
                      								current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                      							}
                      							add(
                      								current,
                      								"cells",
                      								lv_cells_5_0,
                      								"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                      							afterParserOrEnumRuleCall();
                      						
                    }

                    }


                    }

                    // InternalGitHubActionsParser.g:7103:5: (otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) ) )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==Comma) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:7104:6: otherlv_6= Comma ( (lv_cells_7_0= ruleExpression ) )
                    	    {
                    	    otherlv_6=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_6, grammarAccess.getMatrixAxisAccess().getCommaKeyword_3_1_2_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:7108:6: ( (lv_cells_7_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:7109:7: (lv_cells_7_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:7109:7: (lv_cells_7_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:7110:8: lv_cells_7_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_3_1_2_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_8);
                    	    lv_cells_7_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"cells",
                    	      									lv_cells_7_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);

                    otherlv_8=(Token)match(input,RightSquareBracket,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(otherlv_8, grammarAccess.getMatrixAxisAccess().getRightSquareBracketKeyword_3_1_3());
                      				
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:7134:4: (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END )
                    {
                    // InternalGitHubActionsParser.g:7134:4: (this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END )
                    // InternalGitHubActionsParser.g:7135:5: this_BEGIN_9= RULE_BEGIN (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+ this_END_13= RULE_END
                    {
                    this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_BEGIN_9, grammarAccess.getMatrixAxisAccess().getBEGINTerminalRuleCall_3_2_0());
                      				
                    }
                    // InternalGitHubActionsParser.g:7139:5: (otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE )+
                    int cnt115=0;
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);

                        if ( (LA115_0==HyphenMinus) ) {
                            alt115=1;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    // InternalGitHubActionsParser.g:7140:6: otherlv_10= HyphenMinus ( (lv_cells_11_0= ruleExpression ) ) this_NEWLINE_12= RULE_NEWLINE
                    	    {
                    	    otherlv_10=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(otherlv_10, grammarAccess.getMatrixAxisAccess().getHyphenMinusKeyword_3_2_1_0());
                    	      					
                    	    }
                    	    // InternalGitHubActionsParser.g:7144:6: ( (lv_cells_11_0= ruleExpression ) )
                    	    // InternalGitHubActionsParser.g:7145:7: (lv_cells_11_0= ruleExpression )
                    	    {
                    	    // InternalGitHubActionsParser.g:7145:7: (lv_cells_11_0= ruleExpression )
                    	    // InternalGitHubActionsParser.g:7146:8: lv_cells_11_0= ruleExpression
                    	    {
                    	    if ( state.backtracking==0 ) {

                    	      								newCompositeNode(grammarAccess.getMatrixAxisAccess().getCellsExpressionParserRuleCall_3_2_1_1_0());
                    	      							
                    	    }
                    	    pushFollow(FOLLOW_10);
                    	    lv_cells_11_0=ruleExpression();

                    	    state._fsp--;
                    	    if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      								if (current==null) {
                    	      									current = createModelElementForParent(grammarAccess.getMatrixAxisRule());
                    	      								}
                    	      								add(
                    	      									current,
                    	      									"cells",
                    	      									lv_cells_11_0,
                    	      									"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
                    	      								afterParserOrEnumRuleCall();
                    	      							
                    	    }

                    	    }


                    	    }

                    	    this_NEWLINE_12=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
                    	    if ( state.backtracking==0 ) {

                    	      						newLeafNode(this_NEWLINE_12, grammarAccess.getMatrixAxisAccess().getNEWLINETerminalRuleCall_3_2_1_2());
                    	      					
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt115 >= 1 ) break loop115;
                    	    if (state.backtracking>0) {state.failed=true; return current;}
                                EarlyExitException eee =
                                    new EarlyExitException(115, input);
                                throw eee;
                        }
                        cnt115++;
                    } while (true);

                    this_END_13=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      					newLeafNode(this_END_13, grammarAccess.getMatrixAxisAccess().getENDTerminalRuleCall_3_2_2());
                      				
                    }

                    }


                    }
                    break;

            }

            this_END_14=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_14, grammarAccess.getMatrixAxisAccess().getENDTerminalRuleCall_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMatrixAxis"


    // $ANTLR start "entryRuleMatrixCombination"
    // InternalGitHubActionsParser.g:7182:1: entryRuleMatrixCombination returns [EObject current=null] : iv_ruleMatrixCombination= ruleMatrixCombination EOF ;
    public final EObject entryRuleMatrixCombination() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleMatrixCombination = null;


        try {
            // InternalGitHubActionsParser.g:7182:58: (iv_ruleMatrixCombination= ruleMatrixCombination EOF )
            // InternalGitHubActionsParser.g:7183:2: iv_ruleMatrixCombination= ruleMatrixCombination EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getMatrixCombinationRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleMatrixCombination=ruleMatrixCombination();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleMatrixCombination; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleMatrixCombination"


    // $ANTLR start "ruleMatrixCombination"
    // InternalGitHubActionsParser.g:7189:1: ruleMatrixCombination returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus this_BEGIN_2= RULE_BEGIN ( (lv_entries_3_0= ruleVariableAssignment ) ) this_END_4= RULE_END this_END_5= RULE_END ) ;
    public final EObject ruleMatrixCombination() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token otherlv_1=null;
        Token this_BEGIN_2=null;
        Token this_END_4=null;
        Token this_END_5=null;
        EObject lv_entries_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:7195:2: ( (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus this_BEGIN_2= RULE_BEGIN ( (lv_entries_3_0= ruleVariableAssignment ) ) this_END_4= RULE_END this_END_5= RULE_END ) )
            // InternalGitHubActionsParser.g:7196:2: (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus this_BEGIN_2= RULE_BEGIN ( (lv_entries_3_0= ruleVariableAssignment ) ) this_END_4= RULE_END this_END_5= RULE_END )
            {
            // InternalGitHubActionsParser.g:7196:2: (this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus this_BEGIN_2= RULE_BEGIN ( (lv_entries_3_0= ruleVariableAssignment ) ) this_END_4= RULE_END this_END_5= RULE_END )
            // InternalGitHubActionsParser.g:7197:3: this_BEGIN_0= RULE_BEGIN otherlv_1= HyphenMinus this_BEGIN_2= RULE_BEGIN ( (lv_entries_3_0= ruleVariableAssignment ) ) this_END_4= RULE_END this_END_5= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getMatrixCombinationAccess().getBEGINTerminalRuleCall_0());
              		
            }
            otherlv_1=(Token)match(input,HyphenMinus,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getMatrixCombinationAccess().getHyphenMinusKeyword_1());
              		
            }
            this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_2, grammarAccess.getMatrixCombinationAccess().getBEGINTerminalRuleCall_2());
              		
            }
            // InternalGitHubActionsParser.g:7209:3: ( (lv_entries_3_0= ruleVariableAssignment ) )
            // InternalGitHubActionsParser.g:7210:4: (lv_entries_3_0= ruleVariableAssignment )
            {
            // InternalGitHubActionsParser.g:7210:4: (lv_entries_3_0= ruleVariableAssignment )
            // InternalGitHubActionsParser.g:7211:5: lv_entries_3_0= ruleVariableAssignment
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getMatrixCombinationAccess().getEntriesVariableAssignmentParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_entries_3_0=ruleVariableAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getMatrixCombinationRule());
              					}
              					add(
              						current,
              						"entries",
              						lv_entries_3_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_END_4=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_4, grammarAccess.getMatrixCombinationAccess().getENDTerminalRuleCall_4());
              		
            }
            this_END_5=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_5, grammarAccess.getMatrixCombinationAccess().getENDTerminalRuleCall_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleMatrixCombination"


    // $ANTLR start "entryRuleContainer"
    // InternalGitHubActionsParser.g:7240:1: entryRuleContainer returns [EObject current=null] : iv_ruleContainer= ruleContainer EOF ;
    public final EObject entryRuleContainer() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleContainer = null;



        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getContainerAccess().getUnorderedGroup(), 
        	grammarAccess.getContainerAccess().getUnorderedGroup_5_0()
        	);

        try {
            // InternalGitHubActionsParser.g:7245:2: (iv_ruleContainer= ruleContainer EOF )
            // InternalGitHubActionsParser.g:7246:2: iv_ruleContainer= ruleContainer EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContainerRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContainer=ruleContainer();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContainer; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "entryRuleContainer"


    // $ANTLR start "ruleContainer"
    // InternalGitHubActionsParser.g:7255:1: ruleContainer returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?) ) ) ;
    public final EObject ruleContainer() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_BEGIN_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_19=null;
        Token this_END_20=null;
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token this_BEGIN_29=null;
        Token otherlv_30=null;
        Token this_NEWLINE_32=null;
        Token this_END_33=null;
        Token otherlv_34=null;
        Token otherlv_35=null;
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_BEGIN_40=null;
        Token otherlv_41=null;
        Token otherlv_42=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_END_47=null;
        Token this_END_48=null;
        EObject lv_image_4_0 = null;

        EObject lv_environmentVariables_7_0 = null;

        EObject lv_ports_10_0 = null;

        EObject lv_ports_12_0 = null;

        EObject lv_ports_14_0 = null;

        EObject lv_ports_18_0 = null;

        EObject lv_volumes_23_0 = null;

        EObject lv_volumes_25_0 = null;

        EObject lv_volumes_27_0 = null;

        EObject lv_volumes_31_0 = null;

        EObject lv_options_36_0 = null;

        EObject lv_username_43_0 = null;

        EObject lv_password_46_0 = null;



        	enterRule();
        	UnorderedGroupState myUnorderedGroupState = getUnorderedGroupHelper().snapShot(
        	grammarAccess.getContainerAccess().getUnorderedGroup(), 
        	grammarAccess.getContainerAccess().getUnorderedGroup_5_0()
        	);

        try {
            // InternalGitHubActionsParser.g:7265:2: ( ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?) ) ) )
            // InternalGitHubActionsParser.g:7266:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?) ) )
            {
            // InternalGitHubActionsParser.g:7266:2: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?) ) )
            // InternalGitHubActionsParser.g:7267:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?) )
            {
            // InternalGitHubActionsParser.g:7267:3: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?) )
            // InternalGitHubActionsParser.g:7268:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?)
            {
            getUnorderedGroupHelper().enter(grammarAccess.getContainerAccess().getUnorderedGroup());
            // InternalGitHubActionsParser.g:7271:4: ( ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?)
            // InternalGitHubActionsParser.g:7272:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+ {...}?
            {
            // InternalGitHubActionsParser.g:7272:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+
            int cnt126=0;
            loop126:
            do {
                int alt126=7;
                alt126 = dfa126.predict(input);
                switch (alt126) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:7273:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:7273:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:7274:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 0) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalGitHubActionsParser.g:7274:103: ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:7275:5: ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 0);
            	    // InternalGitHubActionsParser.g:7278:8: ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:7278:9: {...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	    }
            	    // InternalGitHubActionsParser.g:7278:18: (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:7278:19: this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) )
            	    {
            	    this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_81); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_BEGIN_1, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_0_0());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:7282:8: (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:7283:9: otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) )
            	    {
            	    otherlv_2=(Token)match(input,Image,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_2, grammarAccess.getContainerAccess().getImageKeyword_0_1_0());
            	      								
            	    }
            	    otherlv_3=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      									newLeafNode(otherlv_3, grammarAccess.getContainerAccess().getColonKeyword_0_1_1());
            	      								
            	    }
            	    // InternalGitHubActionsParser.g:7291:9: ( (lv_image_4_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:7292:10: (lv_image_4_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:7292:10: (lv_image_4_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:7293:11: lv_image_4_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      											newCompositeNode(grammarAccess.getContainerAccess().getImageExpressionParserRuleCall_0_1_2_0());
            	      										
            	    }
            	    pushFollow(FOLLOW_82);
            	    lv_image_4_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      											if (current==null) {
            	      												current = createModelElementForParent(grammarAccess.getContainerRule());
            	      											}
            	      											set(
            	      												current,
            	      												"image",
            	      												lv_image_4_0,
            	      												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      											afterParserOrEnumRuleCall();
            	      										
            	    }

            	    }


            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalGitHubActionsParser.g:7317:3: ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:7317:3: ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) )
            	    // InternalGitHubActionsParser.g:7318:4: {...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 1) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalGitHubActionsParser.g:7318:103: ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) )
            	    // InternalGitHubActionsParser.g:7319:5: ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 1);
            	    // InternalGitHubActionsParser.g:7322:8: ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) )
            	    // InternalGitHubActionsParser.g:7322:9: {...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	    }
            	    // InternalGitHubActionsParser.g:7322:18: (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ )
            	    // InternalGitHubActionsParser.g:7322:19: otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+
            	    {
            	    otherlv_5=(Token)match(input,Env,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_5, grammarAccess.getContainerAccess().getEnvKeyword_1_0());
            	      							
            	    }
            	    otherlv_6=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_6, grammarAccess.getContainerAccess().getColonKeyword_1_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:7330:8: ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+
            	    int cnt117=0;
            	    loop117:
            	    do {
            	        int alt117=2;
            	        int LA117_0 = input.LA(1);

            	        if ( (LA117_0==RULE_BEGIN) ) {
            	            int LA117_2 = input.LA(2);

            	            if ( (LA117_2==RULE_ID) ) {
            	                int LA117_3 = input.LA(3);

            	                if ( (LA117_3==Colon) ) {
            	                    int LA117_4 = input.LA(4);

            	                    if ( (LA117_4==DollarSignLeftCurlyBracketLeftCurlyBracket||LA117_4==RULE_STRING) ) {
            	                        alt117=1;
            	                    }


            	                }


            	            }


            	        }


            	        switch (alt117) {
            	    	case 1 :
            	    	    // InternalGitHubActionsParser.g:7331:9: (lv_environmentVariables_7_0= ruleVariableAssignment )
            	    	    {
            	    	    // InternalGitHubActionsParser.g:7331:9: (lv_environmentVariables_7_0= ruleVariableAssignment )
            	    	    // InternalGitHubActionsParser.g:7332:10: lv_environmentVariables_7_0= ruleVariableAssignment
            	    	    {
            	    	    if ( state.backtracking==0 ) {

            	    	      										newCompositeNode(grammarAccess.getContainerAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_1_2_0());
            	    	      									
            	    	    }
            	    	    pushFollow(FOLLOW_82);
            	    	    lv_environmentVariables_7_0=ruleVariableAssignment();

            	    	    state._fsp--;
            	    	    if (state.failed) return current;
            	    	    if ( state.backtracking==0 ) {

            	    	      										if (current==null) {
            	    	      											current = createModelElementForParent(grammarAccess.getContainerRule());
            	    	      										}
            	    	      										add(
            	    	      											current,
            	    	      											"environmentVariables",
            	    	      											lv_environmentVariables_7_0,
            	    	      											"d.fe.up.pt.cicd.gha.GitHubActions.VariableAssignment");
            	    	      										afterParserOrEnumRuleCall();
            	    	      									
            	    	    }

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt117 >= 1 ) break loop117;
            	    	    if (state.backtracking>0) {state.failed=true; return current;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(117, input);
            	                throw eee;
            	        }
            	        cnt117++;
            	    } while (true);


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalGitHubActionsParser.g:7355:3: ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:7355:3: ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:7356:4: {...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 2) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalGitHubActionsParser.g:7356:103: ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:7357:5: ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 2);
            	    // InternalGitHubActionsParser.g:7360:8: ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:7360:9: {...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	    }
            	    // InternalGitHubActionsParser.g:7360:18: ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) )
            	    int alt120=3;
            	    switch ( input.LA(1) ) {
            	    case Ports:
            	        {
            	        alt120=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt120=2;
            	        }
            	        break;
            	    case RULE_BEGIN:
            	        {
            	        alt120=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 120, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt120) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:7360:19: (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:7360:19: (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) )
            	            // InternalGitHubActionsParser.g:7361:9: otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) )
            	            {
            	            otherlv_8=(Token)match(input,Ports,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_8, grammarAccess.getContainerAccess().getPortsKeyword_2_0_0());
            	              								
            	            }
            	            otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_9, grammarAccess.getContainerAccess().getColonKeyword_2_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:7369:9: ( (lv_ports_10_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:7370:10: (lv_ports_10_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:7370:10: (lv_ports_10_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:7371:11: lv_ports_10_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_82);
            	            lv_ports_10_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getContainerRule());
            	              											}
            	              											add(
            	              												current,
            	              												"ports",
            	              												lv_ports_10_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:7390:8: (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:7390:8: (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:7391:9: otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket
            	            {
            	            otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_11, grammarAccess.getContainerAccess().getLeftSquareBracketKeyword_2_1_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:7395:9: ( (lv_ports_12_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:7396:10: (lv_ports_12_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:7396:10: (lv_ports_12_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:7397:11: lv_ports_12_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_1_1_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_ports_12_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getContainerRule());
            	              											}
            	              											add(
            	              												current,
            	              												"ports",
            	              												lv_ports_12_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:7414:9: (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )*
            	            loop118:
            	            do {
            	                int alt118=2;
            	                int LA118_0 = input.LA(1);

            	                if ( (LA118_0==Comma) ) {
            	                    alt118=1;
            	                }


            	                switch (alt118) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:7415:10: otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_13=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_13, grammarAccess.getContainerAccess().getCommaKeyword_2_1_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7419:10: ( (lv_ports_14_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:7420:11: (lv_ports_14_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7420:11: (lv_ports_14_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:7421:12: lv_ports_14_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_1_2_1_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_ports_14_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getContainerRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"ports",
            	            	      													lv_ports_14_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop118;
            	                }
            	            } while (true);

            	            otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_82); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_15, grammarAccess.getContainerAccess().getRightSquareBracketKeyword_2_1_3());
            	              								
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:7445:8: (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:7445:8: (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END )
            	            // InternalGitHubActionsParser.g:7446:9: this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END
            	            {
            	            this_BEGIN_16=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_16, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_2_2_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:7450:9: (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+
            	            int cnt119=0;
            	            loop119:
            	            do {
            	                int alt119=2;
            	                int LA119_0 = input.LA(1);

            	                if ( (LA119_0==HyphenMinus) ) {
            	                    alt119=1;
            	                }


            	                switch (alt119) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:7451:10: otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE
            	            	    {
            	            	    otherlv_17=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_17, grammarAccess.getContainerAccess().getHyphenMinusKeyword_2_2_1_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7455:10: ( (lv_ports_18_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:7456:11: (lv_ports_18_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7456:11: (lv_ports_18_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:7457:12: lv_ports_18_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_2_1_1_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_ports_18_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getContainerRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"ports",
            	            	      													lv_ports_18_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_19=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(this_NEWLINE_19, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_2_2_1_2());
            	            	      									
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt119 >= 1 ) break loop119;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(119, input);
            	                        throw eee;
            	                }
            	                cnt119++;
            	            } while (true);

            	            this_END_20=(Token)match(input,RULE_END,FOLLOW_82); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_20, grammarAccess.getContainerAccess().getENDTerminalRuleCall_2_2_2());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalGitHubActionsParser.g:7490:3: ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:7490:3: ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) )
            	    // InternalGitHubActionsParser.g:7491:4: {...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 3) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalGitHubActionsParser.g:7491:103: ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:7492:5: ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 3);
            	    // InternalGitHubActionsParser.g:7495:8: ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:7495:9: {...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	    }
            	    // InternalGitHubActionsParser.g:7495:18: ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) )
            	    int alt123=3;
            	    switch ( input.LA(1) ) {
            	    case Volumes:
            	        {
            	        alt123=1;
            	        }
            	        break;
            	    case LeftSquareBracket:
            	        {
            	        alt123=2;
            	        }
            	        break;
            	    case RULE_BEGIN:
            	        {
            	        alt123=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 123, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt123) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:7495:19: (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:7495:19: (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) )
            	            // InternalGitHubActionsParser.g:7496:9: otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) )
            	            {
            	            otherlv_21=(Token)match(input,Volumes,FOLLOW_3); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_21, grammarAccess.getContainerAccess().getVolumesKeyword_3_0_0());
            	              								
            	            }
            	            otherlv_22=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_22, grammarAccess.getContainerAccess().getColonKeyword_3_0_1());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:7504:9: ( (lv_volumes_23_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:7505:10: (lv_volumes_23_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:7505:10: (lv_volumes_23_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:7506:11: lv_volumes_23_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_0_2_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_82);
            	            lv_volumes_23_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getContainerRule());
            	              											}
            	              											add(
            	              												current,
            	              												"volumes",
            	              												lv_volumes_23_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:7525:8: (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:7525:8: (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:7526:9: otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket
            	            {
            	            otherlv_24=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_24, grammarAccess.getContainerAccess().getLeftSquareBracketKeyword_3_1_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:7530:9: ( (lv_volumes_25_0= ruleExpression ) )
            	            // InternalGitHubActionsParser.g:7531:10: (lv_volumes_25_0= ruleExpression )
            	            {
            	            // InternalGitHubActionsParser.g:7531:10: (lv_volumes_25_0= ruleExpression )
            	            // InternalGitHubActionsParser.g:7532:11: lv_volumes_25_0= ruleExpression
            	            {
            	            if ( state.backtracking==0 ) {

            	              											newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_1_1_0());
            	              										
            	            }
            	            pushFollow(FOLLOW_8);
            	            lv_volumes_25_0=ruleExpression();

            	            state._fsp--;
            	            if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              											if (current==null) {
            	              												current = createModelElementForParent(grammarAccess.getContainerRule());
            	              											}
            	              											add(
            	              												current,
            	              												"volumes",
            	              												lv_volumes_25_0,
            	              												"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	              											afterParserOrEnumRuleCall();
            	              										
            	            }

            	            }


            	            }

            	            // InternalGitHubActionsParser.g:7549:9: (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )*
            	            loop121:
            	            do {
            	                int alt121=2;
            	                int LA121_0 = input.LA(1);

            	                if ( (LA121_0==Comma) ) {
            	                    alt121=1;
            	                }


            	                switch (alt121) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:7550:10: otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_26=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_26, grammarAccess.getContainerAccess().getCommaKeyword_3_1_2_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7554:10: ( (lv_volumes_27_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:7555:11: (lv_volumes_27_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7555:11: (lv_volumes_27_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:7556:12: lv_volumes_27_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_1_2_1_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_8);
            	            	    lv_volumes_27_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getContainerRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"volumes",
            	            	      													lv_volumes_27_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop121;
            	                }
            	            } while (true);

            	            otherlv_28=(Token)match(input,RightSquareBracket,FOLLOW_82); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(otherlv_28, grammarAccess.getContainerAccess().getRightSquareBracketKeyword_3_1_3());
            	              								
            	            }

            	            }


            	            }
            	            break;
            	        case 3 :
            	            // InternalGitHubActionsParser.g:7580:8: (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END )
            	            {
            	            // InternalGitHubActionsParser.g:7580:8: (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END )
            	            // InternalGitHubActionsParser.g:7581:9: this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END
            	            {
            	            this_BEGIN_29=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_BEGIN_29, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_3_2_0());
            	              								
            	            }
            	            // InternalGitHubActionsParser.g:7585:9: (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+
            	            int cnt122=0;
            	            loop122:
            	            do {
            	                int alt122=2;
            	                int LA122_0 = input.LA(1);

            	                if ( (LA122_0==HyphenMinus) ) {
            	                    alt122=1;
            	                }


            	                switch (alt122) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:7586:10: otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE
            	            	    {
            	            	    otherlv_30=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(otherlv_30, grammarAccess.getContainerAccess().getHyphenMinusKeyword_3_2_1_0());
            	            	      									
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7590:10: ( (lv_volumes_31_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:7591:11: (lv_volumes_31_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7591:11: (lv_volumes_31_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:7592:12: lv_volumes_31_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      												newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_2_1_1_0());
            	            	      											
            	            	    }
            	            	    pushFollow(FOLLOW_10);
            	            	    lv_volumes_31_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      												if (current==null) {
            	            	      													current = createModelElementForParent(grammarAccess.getContainerRule());
            	            	      												}
            	            	      												add(
            	            	      													current,
            	            	      													"volumes",
            	            	      													lv_volumes_31_0,
            	            	      													"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      												afterParserOrEnumRuleCall();
            	            	      											
            	            	    }

            	            	    }


            	            	    }

            	            	    this_NEWLINE_32=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      										newLeafNode(this_NEWLINE_32, grammarAccess.getContainerAccess().getNEWLINETerminalRuleCall_3_2_1_2());
            	            	      									
            	            	    }

            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt122 >= 1 ) break loop122;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(122, input);
            	                        throw eee;
            	                }
            	                cnt122++;
            	            } while (true);

            	            this_END_33=(Token)match(input,RULE_END,FOLLOW_82); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              									newLeafNode(this_END_33, grammarAccess.getContainerAccess().getENDTerminalRuleCall_3_2_2());
            	              								
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalGitHubActionsParser.g:7625:3: ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:7625:3: ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) )
            	    // InternalGitHubActionsParser.g:7626:4: {...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 4) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalGitHubActionsParser.g:7626:103: ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) )
            	    // InternalGitHubActionsParser.g:7627:5: ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 4);
            	    // InternalGitHubActionsParser.g:7630:8: ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) )
            	    // InternalGitHubActionsParser.g:7630:9: {...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	    }
            	    // InternalGitHubActionsParser.g:7630:18: (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) )
            	    // InternalGitHubActionsParser.g:7630:19: otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) )
            	    {
            	    otherlv_34=(Token)match(input,Options,FOLLOW_3); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_34, grammarAccess.getContainerAccess().getOptionsKeyword_4_0());
            	      							
            	    }
            	    otherlv_35=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(otherlv_35, grammarAccess.getContainerAccess().getColonKeyword_4_1());
            	      							
            	    }
            	    // InternalGitHubActionsParser.g:7638:8: ( (lv_options_36_0= ruleExpression ) )
            	    // InternalGitHubActionsParser.g:7639:9: (lv_options_36_0= ruleExpression )
            	    {
            	    // InternalGitHubActionsParser.g:7639:9: (lv_options_36_0= ruleExpression )
            	    // InternalGitHubActionsParser.g:7640:10: lv_options_36_0= ruleExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      										newCompositeNode(grammarAccess.getContainerAccess().getOptionsExpressionParserRuleCall_4_2_0());
            	      									
            	    }
            	    pushFollow(FOLLOW_82);
            	    lv_options_36_0=ruleExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      										if (current==null) {
            	      											current = createModelElementForParent(grammarAccess.getContainerRule());
            	      										}
            	      										set(
            	      											current,
            	      											"options",
            	      											lv_options_36_0,
            	      											"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	      										afterParserOrEnumRuleCall();
            	      									
            	    }

            	    }


            	    }


            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalGitHubActionsParser.g:7663:3: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) )
            	    {
            	    // InternalGitHubActionsParser.g:7663:3: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) )
            	    // InternalGitHubActionsParser.g:7664:4: {...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 5) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalGitHubActionsParser.g:7664:103: ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) )
            	    // InternalGitHubActionsParser.g:7665:5: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) )
            	    {
            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 5);
            	    // InternalGitHubActionsParser.g:7668:8: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) )
            	    // InternalGitHubActionsParser.g:7668:9: {...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	    }
            	    // InternalGitHubActionsParser.g:7668:18: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END )
            	    // InternalGitHubActionsParser.g:7668:19: ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END
            	    {
            	    // InternalGitHubActionsParser.g:7668:19: ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )?
            	    int alt125=2;
            	    int LA125_0 = input.LA(1);

            	    if ( (LA125_0==Credentials||LA125_0==Password) ) {
            	        alt125=1;
            	    }
            	    switch (alt125) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:7669:9: ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) )
            	            {
            	            // InternalGitHubActionsParser.g:7669:9: ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) )
            	            // InternalGitHubActionsParser.g:7670:10: ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?)
            	            {
            	            getUnorderedGroupHelper().enter(grammarAccess.getContainerAccess().getUnorderedGroup_5_0());
            	            // InternalGitHubActionsParser.g:7673:10: ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?)
            	            // InternalGitHubActionsParser.g:7674:11: ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?
            	            {
            	            // InternalGitHubActionsParser.g:7674:11: ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+
            	            int cnt124=0;
            	            loop124:
            	            do {
            	                int alt124=3;
            	                int LA124_0 = input.LA(1);

            	                if ( LA124_0 == Credentials && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0) ) {
            	                    alt124=1;
            	                }
            	                else if ( LA124_0 == Password && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1) ) {
            	                    alt124=2;
            	                }


            	                switch (alt124) {
            	            	case 1 :
            	            	    // InternalGitHubActionsParser.g:7675:9: ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7675:9: ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) )
            	            	    // InternalGitHubActionsParser.g:7676:10: {...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) )
            	            	    {
            	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0)");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7676:113: ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) )
            	            	    // InternalGitHubActionsParser.g:7677:11: ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) )
            	            	    {
            	            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0);
            	            	    // InternalGitHubActionsParser.g:7680:14: ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) )
            	            	    // InternalGitHubActionsParser.g:7680:15: {...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) )
            	            	    {
            	            	    if ( !((true)) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7680:24: (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) )
            	            	    // InternalGitHubActionsParser.g:7680:25: otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) )
            	            	    {
            	            	    otherlv_38=(Token)match(input,Credentials,FOLLOW_3); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														newLeafNode(otherlv_38, grammarAccess.getContainerAccess().getCredentialsKeyword_5_0_0_0());
            	            	      													
            	            	    }
            	            	    otherlv_39=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														newLeafNode(otherlv_39, grammarAccess.getContainerAccess().getColonKeyword_5_0_0_1());
            	            	      													
            	            	    }
            	            	    this_BEGIN_40=(Token)match(input,RULE_BEGIN,FOLLOW_83); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														newLeafNode(this_BEGIN_40, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_5_0_0_2());
            	            	      													
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7692:14: (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) )
            	            	    // InternalGitHubActionsParser.g:7693:15: otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_41=(Token)match(input,Username,FOLLOW_3); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_41, grammarAccess.getContainerAccess().getUsernameKeyword_5_0_0_3_0());
            	            	      														
            	            	    }
            	            	    otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_42, grammarAccess.getContainerAccess().getColonKeyword_5_0_0_3_1());
            	            	      														
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7701:15: ( (lv_username_43_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:7702:16: (lv_username_43_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7702:16: (lv_username_43_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:7703:17: lv_username_43_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      																	newCompositeNode(grammarAccess.getContainerAccess().getUsernameExpressionParserRuleCall_5_0_0_3_2_0());
            	            	      																
            	            	    }
            	            	    pushFollow(FOLLOW_84);
            	            	    lv_username_43_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      																	if (current==null) {
            	            	      																		current = createModelElementForParent(grammarAccess.getContainerRule());
            	            	      																	}
            	            	      																	set(
            	            	      																		current,
            	            	      																		"username",
            	            	      																		lv_username_43_0,
            	            	      																		"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      																	afterParserOrEnumRuleCall();
            	            	      																
            	            	    }

            	            	    }


            	            	    }


            	            	    }


            	            	    }


            	            	    }

            	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_5_0());

            	            	    }


            	            	    }


            	            	    }
            	            	    break;
            	            	case 2 :
            	            	    // InternalGitHubActionsParser.g:7727:9: ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7727:9: ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) )
            	            	    // InternalGitHubActionsParser.g:7728:10: {...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) )
            	            	    {
            	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1)");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7728:113: ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) )
            	            	    // InternalGitHubActionsParser.g:7729:11: ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) )
            	            	    {
            	            	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1);
            	            	    // InternalGitHubActionsParser.g:7732:14: ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) )
            	            	    // InternalGitHubActionsParser.g:7732:15: {...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END )
            	            	    {
            	            	    if ( !((true)) ) {
            	            	        if (state.backtracking>0) {state.failed=true; return current;}
            	            	        throw new FailedPredicateException(input, "ruleContainer", "true");
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7732:24: ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END )
            	            	    // InternalGitHubActionsParser.g:7732:25: (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7732:25: (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) )
            	            	    // InternalGitHubActionsParser.g:7733:15: otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) )
            	            	    {
            	            	    otherlv_44=(Token)match(input,Password,FOLLOW_3); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_44, grammarAccess.getContainerAccess().getPasswordKeyword_5_0_1_0_0());
            	            	      														
            	            	    }
            	            	    otherlv_45=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      															newLeafNode(otherlv_45, grammarAccess.getContainerAccess().getColonKeyword_5_0_1_0_1());
            	            	      														
            	            	    }
            	            	    // InternalGitHubActionsParser.g:7741:15: ( (lv_password_46_0= ruleExpression ) )
            	            	    // InternalGitHubActionsParser.g:7742:16: (lv_password_46_0= ruleExpression )
            	            	    {
            	            	    // InternalGitHubActionsParser.g:7742:16: (lv_password_46_0= ruleExpression )
            	            	    // InternalGitHubActionsParser.g:7743:17: lv_password_46_0= ruleExpression
            	            	    {
            	            	    if ( state.backtracking==0 ) {

            	            	      																	newCompositeNode(grammarAccess.getContainerAccess().getPasswordExpressionParserRuleCall_5_0_1_0_2_0());
            	            	      																
            	            	    }
            	            	    pushFollow(FOLLOW_24);
            	            	    lv_password_46_0=ruleExpression();

            	            	    state._fsp--;
            	            	    if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      																	if (current==null) {
            	            	      																		current = createModelElementForParent(grammarAccess.getContainerRule());
            	            	      																	}
            	            	      																	set(
            	            	      																		current,
            	            	      																		"password",
            	            	      																		lv_password_46_0,
            	            	      																		"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
            	            	      																	afterParserOrEnumRuleCall();
            	            	      																
            	            	    }

            	            	    }


            	            	    }


            	            	    }

            	            	    this_END_47=(Token)match(input,RULE_END,FOLLOW_84); if (state.failed) return current;
            	            	    if ( state.backtracking==0 ) {

            	            	      														newLeafNode(this_END_47, grammarAccess.getContainerAccess().getENDTerminalRuleCall_5_0_1_1());
            	            	      													
            	            	    }

            	            	    }


            	            	    }

            	            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup_5_0());

            	            	    }


            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    if ( cnt124 >= 1 ) break loop124;
            	            	    if (state.backtracking>0) {state.failed=true; return current;}
            	                        EarlyExitException eee =
            	                            new EarlyExitException(124, input);
            	                        throw eee;
            	                }
            	                cnt124++;
            	            } while (true);

            	            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_5_0()) ) {
            	                if (state.backtracking>0) {state.failed=true; return current;}
            	                throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_5_0())");
            	            }

            	            }


            	            }

            	            getUnorderedGroupHelper().leave(grammarAccess.getContainerAccess().getUnorderedGroup_5_0());

            	            }
            	            break;

            	    }

            	    this_END_48=(Token)match(input,RULE_END,FOLLOW_82); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								newLeafNode(this_END_48, grammarAccess.getContainerAccess().getENDTerminalRuleCall_5_1());
            	      							
            	    }

            	    }


            	    }

            	    getUnorderedGroupHelper().returnFromSelection(grammarAccess.getContainerAccess().getUnorderedGroup());

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt126 >= 1 ) break loop126;
            	    if (state.backtracking>0) {state.failed=true; return current;}
                        EarlyExitException eee =
                            new EarlyExitException(126, input);
                        throw eee;
                }
                cnt126++;
            } while (true);

            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return current;}
                throw new FailedPredicateException(input, "ruleContainer", "getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup())");
            }

            }


            }

            getUnorderedGroupHelper().leave(grammarAccess.getContainerAccess().getUnorderedGroup());

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {

            	myUnorderedGroupState.restore();

        }
        return current;
    }
    // $ANTLR end "ruleContainer"


    // $ANTLR start "entryRuleService"
    // InternalGitHubActionsParser.g:7803:1: entryRuleService returns [EObject current=null] : iv_ruleService= ruleService EOF ;
    public final EObject entryRuleService() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleService = null;


        try {
            // InternalGitHubActionsParser.g:7803:48: (iv_ruleService= ruleService EOF )
            // InternalGitHubActionsParser.g:7804:2: iv_ruleService= ruleService EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getServiceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleService=ruleService();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleService; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleService"


    // $ANTLR start "ruleService"
    // InternalGitHubActionsParser.g:7810:1: ruleService returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END this_END_6= RULE_END ) ;
    public final EObject ruleService() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token lv_key_1_0=null;
        Token otherlv_2=null;
        Token this_BEGIN_3=null;
        Token this_END_5=null;
        Token this_END_6=null;
        EObject lv_value_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:7816:2: ( (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END this_END_6= RULE_END ) )
            // InternalGitHubActionsParser.g:7817:2: (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END this_END_6= RULE_END )
            {
            // InternalGitHubActionsParser.g:7817:2: (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END this_END_6= RULE_END )
            // InternalGitHubActionsParser.g:7818:3: this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon this_BEGIN_3= RULE_BEGIN ( (lv_value_4_0= ruleContainer ) ) this_END_5= RULE_END this_END_6= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getServiceAccess().getBEGINTerminalRuleCall_0());
              		
            }
            // InternalGitHubActionsParser.g:7822:3: ( (lv_key_1_0= RULE_ID ) )
            // InternalGitHubActionsParser.g:7823:4: (lv_key_1_0= RULE_ID )
            {
            // InternalGitHubActionsParser.g:7823:4: (lv_key_1_0= RULE_ID )
            // InternalGitHubActionsParser.g:7824:5: lv_key_1_0= RULE_ID
            {
            lv_key_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_key_1_0, grammarAccess.getServiceAccess().getKeyIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getServiceRule());
              					}
              					setWithLastConsumed(
              						current,
              						"key",
              						lv_key_1_0,
              						"org.eclipse.xtext.common.Terminals.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getColonKeyword_2());
              		
            }
            this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_23); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_3, grammarAccess.getServiceAccess().getBEGINTerminalRuleCall_3());
              		
            }
            // InternalGitHubActionsParser.g:7848:3: ( (lv_value_4_0= ruleContainer ) )
            // InternalGitHubActionsParser.g:7849:4: (lv_value_4_0= ruleContainer )
            {
            // InternalGitHubActionsParser.g:7849:4: (lv_value_4_0= ruleContainer )
            // InternalGitHubActionsParser.g:7850:5: lv_value_4_0= ruleContainer
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getServiceAccess().getValueContainerParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_value_4_0=ruleContainer();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getServiceRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.Container");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_END_5=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_5, grammarAccess.getServiceAccess().getENDTerminalRuleCall_5());
              		
            }
            this_END_6=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_6, grammarAccess.getServiceAccess().getENDTerminalRuleCall_6());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleService"


    // $ANTLR start "entryRuleVariableAssignment"
    // InternalGitHubActionsParser.g:7879:1: entryRuleVariableAssignment returns [EObject current=null] : iv_ruleVariableAssignment= ruleVariableAssignment EOF ;
    public final EObject entryRuleVariableAssignment() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableAssignment = null;


        try {
            // InternalGitHubActionsParser.g:7879:59: (iv_ruleVariableAssignment= ruleVariableAssignment EOF )
            // InternalGitHubActionsParser.g:7880:2: iv_ruleVariableAssignment= ruleVariableAssignment EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableAssignmentRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableAssignment=ruleVariableAssignment();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableAssignment; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableAssignment"


    // $ANTLR start "ruleVariableAssignment"
    // InternalGitHubActionsParser.g:7886:1: ruleVariableAssignment returns [EObject current=null] : (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon ( (lv_value_3_0= ruleExpression ) ) this_END_4= RULE_END ) ;
    public final EObject ruleVariableAssignment() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token lv_key_1_0=null;
        Token otherlv_2=null;
        Token this_END_4=null;
        EObject lv_value_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:7892:2: ( (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon ( (lv_value_3_0= ruleExpression ) ) this_END_4= RULE_END ) )
            // InternalGitHubActionsParser.g:7893:2: (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon ( (lv_value_3_0= ruleExpression ) ) this_END_4= RULE_END )
            {
            // InternalGitHubActionsParser.g:7893:2: (this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon ( (lv_value_3_0= ruleExpression ) ) this_END_4= RULE_END )
            // InternalGitHubActionsParser.g:7894:3: this_BEGIN_0= RULE_BEGIN ( (lv_key_1_0= RULE_ID ) ) otherlv_2= Colon ( (lv_value_3_0= ruleExpression ) ) this_END_4= RULE_END
            {
            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_BEGIN_0, grammarAccess.getVariableAssignmentAccess().getBEGINTerminalRuleCall_0());
              		
            }
            // InternalGitHubActionsParser.g:7898:3: ( (lv_key_1_0= RULE_ID ) )
            // InternalGitHubActionsParser.g:7899:4: (lv_key_1_0= RULE_ID )
            {
            // InternalGitHubActionsParser.g:7899:4: (lv_key_1_0= RULE_ID )
            // InternalGitHubActionsParser.g:7900:5: lv_key_1_0= RULE_ID
            {
            lv_key_1_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					newLeafNode(lv_key_1_0, grammarAccess.getVariableAssignmentAccess().getKeyIDTerminalRuleCall_1_0());
              				
            }
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElement(grammarAccess.getVariableAssignmentRule());
              					}
              					setWithLastConsumed(
              						current,
              						"key",
              						lv_key_1_0,
              						"org.eclipse.xtext.common.Terminals.ID");
              				
            }

            }


            }

            otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getVariableAssignmentAccess().getColonKeyword_2());
              		
            }
            // InternalGitHubActionsParser.g:7920:3: ( (lv_value_3_0= ruleExpression ) )
            // InternalGitHubActionsParser.g:7921:4: (lv_value_3_0= ruleExpression )
            {
            // InternalGitHubActionsParser.g:7921:4: (lv_value_3_0= ruleExpression )
            // InternalGitHubActionsParser.g:7922:5: lv_value_3_0= ruleExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getVariableAssignmentAccess().getValueExpressionParserRuleCall_3_0());
              				
            }
            pushFollow(FOLLOW_24);
            lv_value_3_0=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getVariableAssignmentRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_3_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.Expression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            this_END_4=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(this_END_4, grammarAccess.getVariableAssignmentAccess().getENDTerminalRuleCall_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableAssignment"


    // $ANTLR start "entryRuleExpression"
    // InternalGitHubActionsParser.g:7947:1: entryRuleExpression returns [EObject current=null] : iv_ruleExpression= ruleExpression EOF ;
    public final EObject entryRuleExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleExpression = null;


        try {
            // InternalGitHubActionsParser.g:7947:51: (iv_ruleExpression= ruleExpression EOF )
            // InternalGitHubActionsParser.g:7948:2: iv_ruleExpression= ruleExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleExpression=ruleExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleExpression"


    // $ANTLR start "ruleExpression"
    // InternalGitHubActionsParser.g:7954:1: ruleExpression returns [EObject current=null] : this_Concat_0= ruleConcat ;
    public final EObject ruleExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Concat_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:7960:2: (this_Concat_0= ruleConcat )
            // InternalGitHubActionsParser.g:7961:2: this_Concat_0= ruleConcat
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getExpressionAccess().getConcatParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_Concat_0=ruleConcat();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_Concat_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleExpression"


    // $ANTLR start "entryRuleConcat"
    // InternalGitHubActionsParser.g:7975:1: entryRuleConcat returns [EObject current=null] : iv_ruleConcat= ruleConcat EOF ;
    public final EObject entryRuleConcat() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConcat = null;


        try {
            // InternalGitHubActionsParser.g:7975:47: (iv_ruleConcat= ruleConcat EOF )
            // InternalGitHubActionsParser.g:7976:2: iv_ruleConcat= ruleConcat EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConcatRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConcat=ruleConcat();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConcat; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConcat"


    // $ANTLR start "ruleConcat"
    // InternalGitHubActionsParser.g:7982:1: ruleConcat returns [EObject current=null] : (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* ) ;
    public final EObject ruleConcat() throws RecognitionException {
        EObject current = null;

        EObject this_ConcatExpression_0 = null;

        EObject lv_rhs_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:7988:2: ( (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* ) )
            // InternalGitHubActionsParser.g:7989:2: (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* )
            {
            // InternalGitHubActionsParser.g:7989:2: (this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )* )
            // InternalGitHubActionsParser.g:7990:3: this_ConcatExpression_0= ruleConcatExpression ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getConcatAccess().getConcatExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_85);
            this_ConcatExpression_0=ruleConcatExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_ConcatExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:8001:3: ( () ( (lv_rhs_2_0= ruleConcatExpression ) ) )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==DollarSignLeftCurlyBracketLeftCurlyBracket||LA127_0==RULE_STRING) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8002:4: () ( (lv_rhs_2_0= ruleConcatExpression ) )
            	    {
            	    // InternalGitHubActionsParser.g:8002:4: ()
            	    // InternalGitHubActionsParser.g:8003:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getConcatAccess().getConcatLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:8012:4: ( (lv_rhs_2_0= ruleConcatExpression ) )
            	    // InternalGitHubActionsParser.g:8013:5: (lv_rhs_2_0= ruleConcatExpression )
            	    {
            	    // InternalGitHubActionsParser.g:8013:5: (lv_rhs_2_0= ruleConcatExpression )
            	    // InternalGitHubActionsParser.g:8014:6: lv_rhs_2_0= ruleConcatExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getConcatAccess().getRhsConcatExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_85);
            	    lv_rhs_2_0=ruleConcatExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getConcatRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_2_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.ConcatExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConcat"


    // $ANTLR start "entryRuleConcatExpression"
    // InternalGitHubActionsParser.g:8036:1: entryRuleConcatExpression returns [EObject current=null] : iv_ruleConcatExpression= ruleConcatExpression EOF ;
    public final EObject entryRuleConcatExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConcatExpression = null;


        try {
            // InternalGitHubActionsParser.g:8036:57: (iv_ruleConcatExpression= ruleConcatExpression EOF )
            // InternalGitHubActionsParser.g:8037:2: iv_ruleConcatExpression= ruleConcatExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getConcatExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleConcatExpression=ruleConcatExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleConcatExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConcatExpression"


    // $ANTLR start "ruleConcatExpression"
    // InternalGitHubActionsParser.g:8043:1: ruleConcatExpression returns [EObject current=null] : (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral ) ;
    public final EObject ruleConcatExpression() throws RecognitionException {
        EObject current = null;

        EObject this_BracketedExpression_0 = null;

        EObject this_UnbracketedLiteral_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8049:2: ( (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral ) )
            // InternalGitHubActionsParser.g:8050:2: (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral )
            {
            // InternalGitHubActionsParser.g:8050:2: (this_BracketedExpression_0= ruleBracketedExpression | this_UnbracketedLiteral_1= ruleUnbracketedLiteral )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==DollarSignLeftCurlyBracketLeftCurlyBracket) ) {
                alt128=1;
            }
            else if ( (LA128_0==RULE_STRING) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // InternalGitHubActionsParser.g:8051:3: this_BracketedExpression_0= ruleBracketedExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getConcatExpressionAccess().getBracketedExpressionParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_BracketedExpression_0=ruleBracketedExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_BracketedExpression_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:8063:3: this_UnbracketedLiteral_1= ruleUnbracketedLiteral
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getConcatExpressionAccess().getUnbracketedLiteralParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_UnbracketedLiteral_1=ruleUnbracketedLiteral();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_UnbracketedLiteral_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConcatExpression"


    // $ANTLR start "entryRuleBracketedExpression"
    // InternalGitHubActionsParser.g:8078:1: entryRuleBracketedExpression returns [EObject current=null] : iv_ruleBracketedExpression= ruleBracketedExpression EOF ;
    public final EObject entryRuleBracketedExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBracketedExpression = null;


        try {
            // InternalGitHubActionsParser.g:8078:60: (iv_ruleBracketedExpression= ruleBracketedExpression EOF )
            // InternalGitHubActionsParser.g:8079:2: iv_ruleBracketedExpression= ruleBracketedExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBracketedExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBracketedExpression=ruleBracketedExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBracketedExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBracketedExpression"


    // $ANTLR start "ruleBracketedExpression"
    // InternalGitHubActionsParser.g:8085:1: ruleBracketedExpression returns [EObject current=null] : (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket ) ;
    public final EObject ruleBracketedExpression() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_InsideBracketsExpression_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8091:2: ( (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket ) )
            // InternalGitHubActionsParser.g:8092:2: (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket )
            {
            // InternalGitHubActionsParser.g:8092:2: (otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket )
            // InternalGitHubActionsParser.g:8093:3: otherlv_0= DollarSignLeftCurlyBracketLeftCurlyBracket this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightCurlyBracketRightCurlyBracket
            {
            otherlv_0=(Token)match(input,DollarSignLeftCurlyBracketLeftCurlyBracket,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getBracketedExpressionAccess().getDollarSignLeftCurlyBracketLeftCurlyBracketKeyword_0());
              		
            }
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getBracketedExpressionAccess().getInsideBracketsExpressionParserRuleCall_1());
              		
            }
            pushFollow(FOLLOW_87);
            this_InsideBracketsExpression_1=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_InsideBracketsExpression_1;
              			afterParserOrEnumRuleCall();
              		
            }
            otherlv_2=(Token)match(input,RightCurlyBracketRightCurlyBracket,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getBracketedExpressionAccess().getRightCurlyBracketRightCurlyBracketKeyword_2());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBracketedExpression"


    // $ANTLR start "entryRuleInsideBracketsExpression"
    // InternalGitHubActionsParser.g:8116:1: entryRuleInsideBracketsExpression returns [EObject current=null] : iv_ruleInsideBracketsExpression= ruleInsideBracketsExpression EOF ;
    public final EObject entryRuleInsideBracketsExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleInsideBracketsExpression = null;


        try {
            // InternalGitHubActionsParser.g:8116:65: (iv_ruleInsideBracketsExpression= ruleInsideBracketsExpression EOF )
            // InternalGitHubActionsParser.g:8117:2: iv_ruleInsideBracketsExpression= ruleInsideBracketsExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getInsideBracketsExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleInsideBracketsExpression=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleInsideBracketsExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleInsideBracketsExpression"


    // $ANTLR start "ruleInsideBracketsExpression"
    // InternalGitHubActionsParser.g:8123:1: ruleInsideBracketsExpression returns [EObject current=null] : this_Or_0= ruleOr ;
    public final EObject ruleInsideBracketsExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Or_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8129:2: (this_Or_0= ruleOr )
            // InternalGitHubActionsParser.g:8130:2: this_Or_0= ruleOr
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getInsideBracketsExpressionAccess().getOrParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_Or_0=ruleOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_Or_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleInsideBracketsExpression"


    // $ANTLR start "entryRuleUnbracketedLiteral"
    // InternalGitHubActionsParser.g:8144:1: entryRuleUnbracketedLiteral returns [EObject current=null] : iv_ruleUnbracketedLiteral= ruleUnbracketedLiteral EOF ;
    public final EObject entryRuleUnbracketedLiteral() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnbracketedLiteral = null;


        try {
            // InternalGitHubActionsParser.g:8144:59: (iv_ruleUnbracketedLiteral= ruleUnbracketedLiteral EOF )
            // InternalGitHubActionsParser.g:8145:2: iv_ruleUnbracketedLiteral= ruleUnbracketedLiteral EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnbracketedLiteralRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnbracketedLiteral=ruleUnbracketedLiteral();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnbracketedLiteral; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnbracketedLiteral"


    // $ANTLR start "ruleUnbracketedLiteral"
    // InternalGitHubActionsParser.g:8151:1: ruleUnbracketedLiteral returns [EObject current=null] : this_UnbracketedString_0= ruleUnbracketedString ;
    public final EObject ruleUnbracketedLiteral() throws RecognitionException {
        EObject current = null;

        EObject this_UnbracketedString_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8157:2: (this_UnbracketedString_0= ruleUnbracketedString )
            // InternalGitHubActionsParser.g:8158:2: this_UnbracketedString_0= ruleUnbracketedString
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getUnbracketedLiteralAccess().getUnbracketedStringParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_UnbracketedString_0=ruleUnbracketedString();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_UnbracketedString_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnbracketedLiteral"


    // $ANTLR start "entryRuleUnbracketedString"
    // InternalGitHubActionsParser.g:8172:1: entryRuleUnbracketedString returns [EObject current=null] : iv_ruleUnbracketedString= ruleUnbracketedString EOF ;
    public final EObject entryRuleUnbracketedString() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnbracketedString = null;


        try {
            // InternalGitHubActionsParser.g:8172:58: (iv_ruleUnbracketedString= ruleUnbracketedString EOF )
            // InternalGitHubActionsParser.g:8173:2: iv_ruleUnbracketedString= ruleUnbracketedString EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnbracketedStringRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnbracketedString=ruleUnbracketedString();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnbracketedString; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnbracketedString"


    // $ANTLR start "ruleUnbracketedString"
    // InternalGitHubActionsParser.g:8179:1: ruleUnbracketedString returns [EObject current=null] : ( (lv_value_0_0= RULE_STRING ) ) ;
    public final EObject ruleUnbracketedString() throws RecognitionException {
        EObject current = null;

        Token lv_value_0_0=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8185:2: ( ( (lv_value_0_0= RULE_STRING ) ) )
            // InternalGitHubActionsParser.g:8186:2: ( (lv_value_0_0= RULE_STRING ) )
            {
            // InternalGitHubActionsParser.g:8186:2: ( (lv_value_0_0= RULE_STRING ) )
            // InternalGitHubActionsParser.g:8187:3: (lv_value_0_0= RULE_STRING )
            {
            // InternalGitHubActionsParser.g:8187:3: (lv_value_0_0= RULE_STRING )
            // InternalGitHubActionsParser.g:8188:4: lv_value_0_0= RULE_STRING
            {
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				newLeafNode(lv_value_0_0, grammarAccess.getUnbracketedStringAccess().getValueSTRINGTerminalRuleCall_0());
              			
            }
            if ( state.backtracking==0 ) {

              				if (current==null) {
              					current = createModelElement(grammarAccess.getUnbracketedStringRule());
              				}
              				setWithLastConsumed(
              					current,
              					"value",
              					lv_value_0_0,
              					"org.eclipse.xtext.common.Terminals.STRING");
              			
            }

            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnbracketedString"


    // $ANTLR start "entryRuleOr"
    // InternalGitHubActionsParser.g:8207:1: entryRuleOr returns [EObject current=null] : iv_ruleOr= ruleOr EOF ;
    public final EObject entryRuleOr() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleOr = null;


        try {
            // InternalGitHubActionsParser.g:8207:43: (iv_ruleOr= ruleOr EOF )
            // InternalGitHubActionsParser.g:8208:2: iv_ruleOr= ruleOr EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getOrRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleOr=ruleOr();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleOr; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleOr"


    // $ANTLR start "ruleOr"
    // InternalGitHubActionsParser.g:8214:1: ruleOr returns [EObject current=null] : (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* ) ;
    public final EObject ruleOr() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_And_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8220:2: ( (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* ) )
            // InternalGitHubActionsParser.g:8221:2: (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* )
            {
            // InternalGitHubActionsParser.g:8221:2: (this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )* )
            // InternalGitHubActionsParser.g:8222:3: this_And_0= ruleAnd ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_88);
            this_And_0=ruleAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_And_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:8233:3: ( () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) ) )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==VerticalLineVerticalLine) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8234:4: () otherlv_2= VerticalLineVerticalLine ( (lv_rhs_3_0= ruleAnd ) )
            	    {
            	    // InternalGitHubActionsParser.g:8234:4: ()
            	    // InternalGitHubActionsParser.g:8235:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getOrAccess().getOrLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_2=(Token)match(input,VerticalLineVerticalLine,FOLLOW_86); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
            	      			
            	    }
            	    // InternalGitHubActionsParser.g:8248:4: ( (lv_rhs_3_0= ruleAnd ) )
            	    // InternalGitHubActionsParser.g:8249:5: (lv_rhs_3_0= ruleAnd )
            	    {
            	    // InternalGitHubActionsParser.g:8249:5: (lv_rhs_3_0= ruleAnd )
            	    // InternalGitHubActionsParser.g:8250:6: lv_rhs_3_0= ruleAnd
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getOrAccess().getRhsAndParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_88);
            	    lv_rhs_3_0=ruleAnd();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getOrRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.And");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleOr"


    // $ANTLR start "entryRuleAnd"
    // InternalGitHubActionsParser.g:8272:1: entryRuleAnd returns [EObject current=null] : iv_ruleAnd= ruleAnd EOF ;
    public final EObject entryRuleAnd() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAnd = null;


        try {
            // InternalGitHubActionsParser.g:8272:44: (iv_ruleAnd= ruleAnd EOF )
            // InternalGitHubActionsParser.g:8273:2: iv_ruleAnd= ruleAnd EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAndRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAnd=ruleAnd();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAnd; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnd"


    // $ANTLR start "ruleAnd"
    // InternalGitHubActionsParser.g:8279:1: ruleAnd returns [EObject current=null] : (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* ) ;
    public final EObject ruleAnd() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        EObject this_Equality_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8285:2: ( (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* ) )
            // InternalGitHubActionsParser.g:8286:2: (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* )
            {
            // InternalGitHubActionsParser.g:8286:2: (this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )* )
            // InternalGitHubActionsParser.g:8287:3: this_Equality_0= ruleEquality ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_89);
            this_Equality_0=ruleEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Equality_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:8298:3: ( () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) ) )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==AmpersandAmpersand) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8299:4: () otherlv_2= AmpersandAmpersand ( (lv_rhs_3_0= ruleEquality ) )
            	    {
            	    // InternalGitHubActionsParser.g:8299:4: ()
            	    // InternalGitHubActionsParser.g:8300:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getAndAccess().getAndLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    otherlv_2=(Token)match(input,AmpersandAmpersand,FOLLOW_86); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
            	      			
            	    }
            	    // InternalGitHubActionsParser.g:8313:4: ( (lv_rhs_3_0= ruleEquality ) )
            	    // InternalGitHubActionsParser.g:8314:5: (lv_rhs_3_0= ruleEquality )
            	    {
            	    // InternalGitHubActionsParser.g:8314:5: (lv_rhs_3_0= ruleEquality )
            	    // InternalGitHubActionsParser.g:8315:6: lv_rhs_3_0= ruleEquality
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getAndAccess().getRhsEqualityParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_89);
            	    lv_rhs_3_0=ruleEquality();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getAndRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.Equality");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnd"


    // $ANTLR start "entryRuleEquality"
    // InternalGitHubActionsParser.g:8337:1: entryRuleEquality returns [EObject current=null] : iv_ruleEquality= ruleEquality EOF ;
    public final EObject entryRuleEquality() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEquality = null;


        try {
            // InternalGitHubActionsParser.g:8337:49: (iv_ruleEquality= ruleEquality EOF )
            // InternalGitHubActionsParser.g:8338:2: iv_ruleEquality= ruleEquality EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEqualityRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEquality=ruleEquality();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEquality; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEquality"


    // $ANTLR start "ruleEquality"
    // InternalGitHubActionsParser.g:8344:1: ruleEquality returns [EObject current=null] : (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* ) ;
    public final EObject ruleEquality() throws RecognitionException {
        EObject current = null;

        EObject this_Comparison_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8350:2: ( (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* ) )
            // InternalGitHubActionsParser.g:8351:2: (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* )
            {
            // InternalGitHubActionsParser.g:8351:2: (this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )* )
            // InternalGitHubActionsParser.g:8352:3: this_Comparison_0= ruleComparison ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_90);
            this_Comparison_0=ruleComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Comparison_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:8363:3: ( () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) ) )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==ExclamationMarkEqualsSign||LA131_0==EqualsSignEqualsSign) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8364:4: () ( (lv_op_2_0= ruleEQUALITY_OP ) ) ( (lv_rhs_3_0= ruleComparison ) )
            	    {
            	    // InternalGitHubActionsParser.g:8364:4: ()
            	    // InternalGitHubActionsParser.g:8365:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getEqualityAccess().getEqualityLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:8374:4: ( (lv_op_2_0= ruleEQUALITY_OP ) )
            	    // InternalGitHubActionsParser.g:8375:5: (lv_op_2_0= ruleEQUALITY_OP )
            	    {
            	    // InternalGitHubActionsParser.g:8375:5: (lv_op_2_0= ruleEQUALITY_OP )
            	    // InternalGitHubActionsParser.g:8376:6: lv_op_2_0= ruleEQUALITY_OP
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityAccess().getOpEQUALITY_OPEnumRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_86);
            	    lv_op_2_0=ruleEQUALITY_OP();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityRule());
            	      						}
            	      						set(
            	      							current,
            	      							"op",
            	      							lv_op_2_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.EQUALITY_OP");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalGitHubActionsParser.g:8393:4: ( (lv_rhs_3_0= ruleComparison ) )
            	    // InternalGitHubActionsParser.g:8394:5: (lv_rhs_3_0= ruleComparison )
            	    {
            	    // InternalGitHubActionsParser.g:8394:5: (lv_rhs_3_0= ruleComparison )
            	    // InternalGitHubActionsParser.g:8395:6: lv_rhs_3_0= ruleComparison
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getEqualityAccess().getRhsComparisonParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_90);
            	    lv_rhs_3_0=ruleComparison();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getEqualityRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.Comparison");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEquality"


    // $ANTLR start "entryRuleComparison"
    // InternalGitHubActionsParser.g:8417:1: entryRuleComparison returns [EObject current=null] : iv_ruleComparison= ruleComparison EOF ;
    public final EObject entryRuleComparison() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleComparison = null;


        try {
            // InternalGitHubActionsParser.g:8417:51: (iv_ruleComparison= ruleComparison EOF )
            // InternalGitHubActionsParser.g:8418:2: iv_ruleComparison= ruleComparison EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getComparisonRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleComparison=ruleComparison();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleComparison; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleComparison"


    // $ANTLR start "ruleComparison"
    // InternalGitHubActionsParser.g:8424:1: ruleComparison returns [EObject current=null] : (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* ) ;
    public final EObject ruleComparison() throws RecognitionException {
        EObject current = null;

        EObject this_UnaryOp_0 = null;

        Enumerator lv_op_2_0 = null;

        EObject lv_rhs_3_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8430:2: ( (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* ) )
            // InternalGitHubActionsParser.g:8431:2: (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* )
            {
            // InternalGitHubActionsParser.g:8431:2: (this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )* )
            // InternalGitHubActionsParser.g:8432:3: this_UnaryOp_0= ruleUnaryOp ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getComparisonAccess().getUnaryOpParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_91);
            this_UnaryOp_0=ruleUnaryOp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_UnaryOp_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:8443:3: ( () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) ) )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==LessThanSignEqualsSign||LA132_0==GreaterThanSignEqualsSign||(LA132_0>=LessThanSign && LA132_0<=GreaterThanSign)) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8444:4: () ( (lv_op_2_0= ruleCOMPARISON_OP ) ) ( (lv_rhs_3_0= ruleUnaryOp ) )
            	    {
            	    // InternalGitHubActionsParser.g:8444:4: ()
            	    // InternalGitHubActionsParser.g:8445:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getComparisonAccess().getComparisonLhsAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:8454:4: ( (lv_op_2_0= ruleCOMPARISON_OP ) )
            	    // InternalGitHubActionsParser.g:8455:5: (lv_op_2_0= ruleCOMPARISON_OP )
            	    {
            	    // InternalGitHubActionsParser.g:8455:5: (lv_op_2_0= ruleCOMPARISON_OP )
            	    // InternalGitHubActionsParser.g:8456:6: lv_op_2_0= ruleCOMPARISON_OP
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getComparisonAccess().getOpCOMPARISON_OPEnumRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_86);
            	    lv_op_2_0=ruleCOMPARISON_OP();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getComparisonRule());
            	      						}
            	      						set(
            	      							current,
            	      							"op",
            	      							lv_op_2_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.COMPARISON_OP");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }

            	    // InternalGitHubActionsParser.g:8473:4: ( (lv_rhs_3_0= ruleUnaryOp ) )
            	    // InternalGitHubActionsParser.g:8474:5: (lv_rhs_3_0= ruleUnaryOp )
            	    {
            	    // InternalGitHubActionsParser.g:8474:5: (lv_rhs_3_0= ruleUnaryOp )
            	    // InternalGitHubActionsParser.g:8475:6: lv_rhs_3_0= ruleUnaryOp
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getComparisonAccess().getRhsUnaryOpParserRuleCall_1_2_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_91);
            	    lv_rhs_3_0=ruleUnaryOp();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getComparisonRule());
            	      						}
            	      						set(
            	      							current,
            	      							"rhs",
            	      							lv_rhs_3_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.UnaryOp");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleComparison"


    // $ANTLR start "entryRuleUnaryOp"
    // InternalGitHubActionsParser.g:8497:1: entryRuleUnaryOp returns [EObject current=null] : iv_ruleUnaryOp= ruleUnaryOp EOF ;
    public final EObject entryRuleUnaryOp() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleUnaryOp = null;


        try {
            // InternalGitHubActionsParser.g:8497:48: (iv_ruleUnaryOp= ruleUnaryOp EOF )
            // InternalGitHubActionsParser.g:8498:2: iv_ruleUnaryOp= ruleUnaryOp EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getUnaryOpRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleUnaryOp=ruleUnaryOp();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleUnaryOp; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnaryOp"


    // $ANTLR start "ruleUnaryOp"
    // InternalGitHubActionsParser.g:8504:1: ruleUnaryOp returns [EObject current=null] : (this_Not_0= ruleNot | this_Blank_1= ruleBlank ) ;
    public final EObject ruleUnaryOp() throws RecognitionException {
        EObject current = null;

        EObject this_Not_0 = null;

        EObject this_Blank_1 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8510:2: ( (this_Not_0= ruleNot | this_Blank_1= ruleBlank ) )
            // InternalGitHubActionsParser.g:8511:2: (this_Not_0= ruleNot | this_Blank_1= ruleBlank )
            {
            // InternalGitHubActionsParser.g:8511:2: (this_Not_0= ruleNot | this_Blank_1= ruleBlank )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ExclamationMark) ) {
                alt133=1;
            }
            else if ( (LA133_0==StartsWith||LA133_0==Cancelled||LA133_0==HashFiles||LA133_0==Contains||(LA133_0>=EndsWith && LA133_0<=FromJSON)||LA133_0==Strategy||LA133_0==Failure||(LA133_0>=Secrets && LA133_0<=Success)||LA133_0==Always||(LA133_0>=Format && LA133_0<=Github)||LA133_0==Inputs||LA133_0==Matrix||LA133_0==Runner||LA133_0==ToJSON||LA133_0==Needs||LA133_0==Steps||(LA133_0>=Jobs && LA133_0<=Join)||LA133_0==Vars||(LA133_0>=Env && LA133_0<=Job)||LA133_0==LeftParenthesis||(LA133_0>=RULE_INT && LA133_0<=RULE_BOOLEAN)||(LA133_0>=RULE_ID && LA133_0<=RULE_STRING)) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // InternalGitHubActionsParser.g:8512:3: this_Not_0= ruleNot
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryOpAccess().getNotParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Not_0=ruleNot();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Not_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:8524:3: this_Blank_1= ruleBlank
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getUnaryOpAccess().getBlankParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Blank_1=ruleBlank();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Blank_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnaryOp"


    // $ANTLR start "entryRuleNot"
    // InternalGitHubActionsParser.g:8539:1: entryRuleNot returns [EObject current=null] : iv_ruleNot= ruleNot EOF ;
    public final EObject entryRuleNot() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleNot = null;


        try {
            // InternalGitHubActionsParser.g:8539:44: (iv_ruleNot= ruleNot EOF )
            // InternalGitHubActionsParser.g:8540:2: iv_ruleNot= ruleNot EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getNotRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleNot=ruleNot();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleNot; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNot"


    // $ANTLR start "ruleNot"
    // InternalGitHubActionsParser.g:8546:1: ruleNot returns [EObject current=null] : (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) ) ;
    public final EObject ruleNot() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject lv_childExpr_1_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8552:2: ( (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) ) )
            // InternalGitHubActionsParser.g:8553:2: (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) )
            {
            // InternalGitHubActionsParser.g:8553:2: (otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) ) )
            // InternalGitHubActionsParser.g:8554:3: otherlv_0= ExclamationMark ( (lv_childExpr_1_0= ruleVariableDereference ) )
            {
            otherlv_0=(Token)match(input,ExclamationMark,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getNotAccess().getExclamationMarkKeyword_0());
              		
            }
            // InternalGitHubActionsParser.g:8558:3: ( (lv_childExpr_1_0= ruleVariableDereference ) )
            // InternalGitHubActionsParser.g:8559:4: (lv_childExpr_1_0= ruleVariableDereference )
            {
            // InternalGitHubActionsParser.g:8559:4: (lv_childExpr_1_0= ruleVariableDereference )
            // InternalGitHubActionsParser.g:8560:5: lv_childExpr_1_0= ruleVariableDereference
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getNotAccess().getChildExprVariableDereferenceParserRuleCall_1_0());
              				
            }
            pushFollow(FOLLOW_2);
            lv_childExpr_1_0=ruleVariableDereference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getNotRule());
              					}
              					set(
              						current,
              						"childExpr",
              						lv_childExpr_1_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.VariableDereference");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNot"


    // $ANTLR start "entryRuleBlank"
    // InternalGitHubActionsParser.g:8581:1: entryRuleBlank returns [EObject current=null] : iv_ruleBlank= ruleBlank EOF ;
    public final EObject entryRuleBlank() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBlank = null;


        try {
            // InternalGitHubActionsParser.g:8581:46: (iv_ruleBlank= ruleBlank EOF )
            // InternalGitHubActionsParser.g:8582:2: iv_ruleBlank= ruleBlank EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getBlankRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleBlank=ruleBlank();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleBlank; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBlank"


    // $ANTLR start "ruleBlank"
    // InternalGitHubActionsParser.g:8588:1: ruleBlank returns [EObject current=null] : this_VariableDereference_0= ruleVariableDereference ;
    public final EObject ruleBlank() throws RecognitionException {
        EObject current = null;

        EObject this_VariableDereference_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8594:2: (this_VariableDereference_0= ruleVariableDereference )
            // InternalGitHubActionsParser.g:8595:2: this_VariableDereference_0= ruleVariableDereference
            {
            if ( state.backtracking==0 ) {

              		/* */
              	
            }
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getBlankAccess().getVariableDereferenceParserRuleCall());
              	
            }
            pushFollow(FOLLOW_2);
            this_VariableDereference_0=ruleVariableDereference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_VariableDereference_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBlank"


    // $ANTLR start "entryRuleVariableDereference"
    // InternalGitHubActionsParser.g:8609:1: entryRuleVariableDereference returns [EObject current=null] : iv_ruleVariableDereference= ruleVariableDereference EOF ;
    public final EObject entryRuleVariableDereference() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariableDereference = null;


        try {
            // InternalGitHubActionsParser.g:8609:60: (iv_ruleVariableDereference= ruleVariableDereference EOF )
            // InternalGitHubActionsParser.g:8610:2: iv_ruleVariableDereference= ruleVariableDereference EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getVariableDereferenceRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleVariableDereference=ruleVariableDereference();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleVariableDereference; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariableDereference"


    // $ANTLR start "ruleVariableDereference"
    // InternalGitHubActionsParser.g:8616:1: ruleVariableDereference returns [EObject current=null] : (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* ) ;
    public final EObject ruleVariableDereference() throws RecognitionException {
        EObject current = null;

        Token otherlv_2=null;
        Token lv_property_3_0=null;
        Token otherlv_4=null;
        Token lv_property_5_0=null;
        Token otherlv_6=null;
        EObject this_Primary_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8622:2: ( (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* ) )
            // InternalGitHubActionsParser.g:8623:2: (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* )
            {
            // InternalGitHubActionsParser.g:8623:2: (this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )* )
            // InternalGitHubActionsParser.g:8624:3: this_Primary_0= rulePrimary ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )*
            {
            if ( state.backtracking==0 ) {

              			/* */
              		
            }
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getVariableDereferenceAccess().getPrimaryParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_92);
            this_Primary_0=rulePrimary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_Primary_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalGitHubActionsParser.g:8635:3: ( () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) ) )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==FullStop||LA135_0==LeftSquareBracket) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:8636:4: () ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) )
            	    {
            	    // InternalGitHubActionsParser.g:8636:4: ()
            	    // InternalGitHubActionsParser.g:8637:5: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      					/* */
            	      				
            	    }
            	    if ( state.backtracking==0 ) {

            	      					current = forceCreateModelElementAndSet(
            	      						grammarAccess.getVariableDereferenceAccess().getVariableDereferenceVariableAction_1_0(),
            	      						current);
            	      				
            	    }

            	    }

            	    // InternalGitHubActionsParser.g:8646:4: ( (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) ) | (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket ) )
            	    int alt134=2;
            	    int LA134_0 = input.LA(1);

            	    if ( (LA134_0==FullStop) ) {
            	        alt134=1;
            	    }
            	    else if ( (LA134_0==LeftSquareBracket) ) {
            	        alt134=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return current;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 134, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt134) {
            	        case 1 :
            	            // InternalGitHubActionsParser.g:8647:5: (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) )
            	            {
            	            // InternalGitHubActionsParser.g:8647:5: (otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) ) )
            	            // InternalGitHubActionsParser.g:8648:6: otherlv_2= FullStop ( (lv_property_3_0= RULE_ID ) )
            	            {
            	            otherlv_2=(Token)match(input,FullStop,FOLLOW_17); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_2, grammarAccess.getVariableDereferenceAccess().getFullStopKeyword_1_1_0_0());
            	              					
            	            }
            	            // InternalGitHubActionsParser.g:8652:6: ( (lv_property_3_0= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:8653:7: (lv_property_3_0= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:8653:7: (lv_property_3_0= RULE_ID )
            	            // InternalGitHubActionsParser.g:8654:8: lv_property_3_0= RULE_ID
            	            {
            	            lv_property_3_0=(Token)match(input,RULE_ID,FOLLOW_92); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								newLeafNode(lv_property_3_0, grammarAccess.getVariableDereferenceAccess().getPropertyIDTerminalRuleCall_1_1_0_1_0());
            	              							
            	            }
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElement(grammarAccess.getVariableDereferenceRule());
            	              								}
            	              								setWithLastConsumed(
            	              									current,
            	              									"property",
            	              									lv_property_3_0,
            	              									"org.eclipse.xtext.common.Terminals.ID");
            	              							
            	            }

            	            }


            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalGitHubActionsParser.g:8672:5: (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket )
            	            {
            	            // InternalGitHubActionsParser.g:8672:5: (otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket )
            	            // InternalGitHubActionsParser.g:8673:6: otherlv_4= LeftSquareBracket ( (lv_property_5_0= RULE_ID ) ) otherlv_6= RightSquareBracket
            	            {
            	            otherlv_4=(Token)match(input,LeftSquareBracket,FOLLOW_17); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_4, grammarAccess.getVariableDereferenceAccess().getLeftSquareBracketKeyword_1_1_1_0());
            	              					
            	            }
            	            // InternalGitHubActionsParser.g:8677:6: ( (lv_property_5_0= RULE_ID ) )
            	            // InternalGitHubActionsParser.g:8678:7: (lv_property_5_0= RULE_ID )
            	            {
            	            // InternalGitHubActionsParser.g:8678:7: (lv_property_5_0= RULE_ID )
            	            // InternalGitHubActionsParser.g:8679:8: lv_property_5_0= RULE_ID
            	            {
            	            lv_property_5_0=(Token)match(input,RULE_ID,FOLLOW_93); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              								newLeafNode(lv_property_5_0, grammarAccess.getVariableDereferenceAccess().getPropertyIDTerminalRuleCall_1_1_1_1_0());
            	              							
            	            }
            	            if ( state.backtracking==0 ) {

            	              								if (current==null) {
            	              									current = createModelElement(grammarAccess.getVariableDereferenceRule());
            	              								}
            	              								setWithLastConsumed(
            	              									current,
            	              									"property",
            	              									lv_property_5_0,
            	              									"org.eclipse.xtext.common.Terminals.ID");
            	              							
            	            }

            	            }


            	            }

            	            otherlv_6=(Token)match(input,RightSquareBracket,FOLLOW_92); if (state.failed) return current;
            	            if ( state.backtracking==0 ) {

            	              						newLeafNode(otherlv_6, grammarAccess.getVariableDereferenceAccess().getRightSquareBracketKeyword_1_1_1_2());
            	              					
            	            }

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariableDereference"


    // $ANTLR start "entryRulePrimary"
    // InternalGitHubActionsParser.g:8706:1: entryRulePrimary returns [EObject current=null] : iv_rulePrimary= rulePrimary EOF ;
    public final EObject entryRulePrimary() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePrimary = null;


        try {
            // InternalGitHubActionsParser.g:8706:48: (iv_rulePrimary= rulePrimary EOF )
            // InternalGitHubActionsParser.g:8707:2: iv_rulePrimary= rulePrimary EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getPrimaryRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_rulePrimary=rulePrimary();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_rulePrimary; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePrimary"


    // $ANTLR start "rulePrimary"
    // InternalGitHubActionsParser.g:8713:1: rulePrimary returns [EObject current=null] : ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic ) ;
    public final EObject rulePrimary() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_2=null;
        EObject this_InsideBracketsExpression_1 = null;

        EObject this_CallExpression_3 = null;

        EObject this_Atomic_4 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8719:2: ( ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic ) )
            // InternalGitHubActionsParser.g:8720:2: ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic )
            {
            // InternalGitHubActionsParser.g:8720:2: ( (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis ) | this_CallExpression_3= ruleCallExpression | this_Atomic_4= ruleAtomic )
            int alt136=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt136=1;
                }
                break;
            case StartsWith:
            case Cancelled:
            case HashFiles:
            case Contains:
            case EndsWith:
            case FromJSON:
            case Failure:
            case Success:
            case Always:
            case Format:
            case ToJSON:
            case Join:
                {
                alt136=2;
                }
                break;
            case Strategy:
            case Secrets:
            case Github:
            case Inputs:
            case Matrix:
            case Runner:
            case Needs:
            case Steps:
            case Jobs:
            case Vars:
            case Env:
            case Job:
            case RULE_INT:
            case RULE_DOUBLE:
            case RULE_BOOLEAN:
            case RULE_ID:
            case RULE_STRING:
                {
                alt136=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // InternalGitHubActionsParser.g:8721:3: (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis )
                    {
                    // InternalGitHubActionsParser.g:8721:3: (otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis )
                    // InternalGitHubActionsParser.g:8722:4: otherlv_0= LeftParenthesis this_InsideBracketsExpression_1= ruleInsideBracketsExpression otherlv_2= RightParenthesis
                    {
                    otherlv_0=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				/* */
                      			
                    }
                    if ( state.backtracking==0 ) {

                      				newCompositeNode(grammarAccess.getPrimaryAccess().getInsideBracketsExpressionParserRuleCall_0_1());
                      			
                    }
                    pushFollow(FOLLOW_94);
                    this_InsideBracketsExpression_1=ruleInsideBracketsExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = this_InsideBracketsExpression_1;
                      				afterParserOrEnumRuleCall();
                      			
                    }
                    otherlv_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:8743:3: this_CallExpression_3= ruleCallExpression
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryAccess().getCallExpressionParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_CallExpression_3=ruleCallExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_CallExpression_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:8755:3: this_Atomic_4= ruleAtomic
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Atomic_4=ruleAtomic();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Atomic_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePrimary"


    // $ANTLR start "entryRuleAtomic"
    // InternalGitHubActionsParser.g:8770:1: entryRuleAtomic returns [EObject current=null] : iv_ruleAtomic= ruleAtomic EOF ;
    public final EObject entryRuleAtomic() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAtomic = null;


        try {
            // InternalGitHubActionsParser.g:8770:47: (iv_ruleAtomic= ruleAtomic EOF )
            // InternalGitHubActionsParser.g:8771:2: iv_ruleAtomic= ruleAtomic EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAtomicRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAtomic=ruleAtomic();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAtomic; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAtomic"


    // $ANTLR start "ruleAtomic"
    // InternalGitHubActionsParser.g:8777:1: ruleAtomic returns [EObject current=null] : ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) ) ;
    public final EObject ruleAtomic() throws RecognitionException {
        EObject current = null;

        Token lv_name_3_0=null;
        Token lv_value_5_0=null;
        Token lv_value_7_0=null;
        Token lv_value_9_0=null;
        Token lv_value_11_0=null;
        Enumerator lv_context_1_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8783:2: ( ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) ) )
            // InternalGitHubActionsParser.g:8784:2: ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) )
            {
            // InternalGitHubActionsParser.g:8784:2: ( ( () ( (lv_context_1_0= ruleCONTEXT ) ) ) | ( () ( (lv_name_3_0= RULE_ID ) ) ) | ( () ( (lv_value_5_0= RULE_INT ) ) ) | ( () ( (lv_value_7_0= RULE_DOUBLE ) ) ) | ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) ) | ( () ( (lv_value_11_0= RULE_STRING ) ) ) )
            int alt137=6;
            switch ( input.LA(1) ) {
            case Strategy:
            case Secrets:
            case Github:
            case Inputs:
            case Matrix:
            case Runner:
            case Needs:
            case Steps:
            case Jobs:
            case Vars:
            case Env:
            case Job:
                {
                alt137=1;
                }
                break;
            case RULE_ID:
                {
                alt137=2;
                }
                break;
            case RULE_INT:
                {
                alt137=3;
                }
                break;
            case RULE_DOUBLE:
                {
                alt137=4;
                }
                break;
            case RULE_BOOLEAN:
                {
                alt137=5;
                }
                break;
            case RULE_STRING:
                {
                alt137=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // InternalGitHubActionsParser.g:8785:3: ( () ( (lv_context_1_0= ruleCONTEXT ) ) )
                    {
                    // InternalGitHubActionsParser.g:8785:3: ( () ( (lv_context_1_0= ruleCONTEXT ) ) )
                    // InternalGitHubActionsParser.g:8786:4: () ( (lv_context_1_0= ruleCONTEXT ) )
                    {
                    // InternalGitHubActionsParser.g:8786:4: ()
                    // InternalGitHubActionsParser.g:8787:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getGitHubContextAction_0_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:8796:4: ( (lv_context_1_0= ruleCONTEXT ) )
                    // InternalGitHubActionsParser.g:8797:5: (lv_context_1_0= ruleCONTEXT )
                    {
                    // InternalGitHubActionsParser.g:8797:5: (lv_context_1_0= ruleCONTEXT )
                    // InternalGitHubActionsParser.g:8798:6: lv_context_1_0= ruleCONTEXT
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getAtomicAccess().getContextCONTEXTEnumRuleCall_0_1_0());
                      					
                    }
                    pushFollow(FOLLOW_2);
                    lv_context_1_0=ruleCONTEXT();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getAtomicRule());
                      						}
                      						set(
                      							current,
                      							"context",
                      							lv_context_1_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.CONTEXT");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:8817:3: ( () ( (lv_name_3_0= RULE_ID ) ) )
                    {
                    // InternalGitHubActionsParser.g:8817:3: ( () ( (lv_name_3_0= RULE_ID ) ) )
                    // InternalGitHubActionsParser.g:8818:4: () ( (lv_name_3_0= RULE_ID ) )
                    {
                    // InternalGitHubActionsParser.g:8818:4: ()
                    // InternalGitHubActionsParser.g:8819:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getVariableAction_1_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:8828:4: ( (lv_name_3_0= RULE_ID ) )
                    // InternalGitHubActionsParser.g:8829:5: (lv_name_3_0= RULE_ID )
                    {
                    // InternalGitHubActionsParser.g:8829:5: (lv_name_3_0= RULE_ID )
                    // InternalGitHubActionsParser.g:8830:6: lv_name_3_0= RULE_ID
                    {
                    lv_name_3_0=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_name_3_0, grammarAccess.getAtomicAccess().getNameIDTerminalRuleCall_1_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"name",
                      							lv_name_3_0,
                      							"org.eclipse.xtext.common.Terminals.ID");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:8848:3: ( () ( (lv_value_5_0= RULE_INT ) ) )
                    {
                    // InternalGitHubActionsParser.g:8848:3: ( () ( (lv_value_5_0= RULE_INT ) ) )
                    // InternalGitHubActionsParser.g:8849:4: () ( (lv_value_5_0= RULE_INT ) )
                    {
                    // InternalGitHubActionsParser.g:8849:4: ()
                    // InternalGitHubActionsParser.g:8850:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getIntegerLiteralAction_2_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:8859:4: ( (lv_value_5_0= RULE_INT ) )
                    // InternalGitHubActionsParser.g:8860:5: (lv_value_5_0= RULE_INT )
                    {
                    // InternalGitHubActionsParser.g:8860:5: (lv_value_5_0= RULE_INT )
                    // InternalGitHubActionsParser.g:8861:6: lv_value_5_0= RULE_INT
                    {
                    lv_value_5_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_5_0, grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_2_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_5_0,
                      							"org.eclipse.xtext.common.Terminals.INT");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:8879:3: ( () ( (lv_value_7_0= RULE_DOUBLE ) ) )
                    {
                    // InternalGitHubActionsParser.g:8879:3: ( () ( (lv_value_7_0= RULE_DOUBLE ) ) )
                    // InternalGitHubActionsParser.g:8880:4: () ( (lv_value_7_0= RULE_DOUBLE ) )
                    {
                    // InternalGitHubActionsParser.g:8880:4: ()
                    // InternalGitHubActionsParser.g:8881:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getDoubleLiteralAction_3_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:8890:4: ( (lv_value_7_0= RULE_DOUBLE ) )
                    // InternalGitHubActionsParser.g:8891:5: (lv_value_7_0= RULE_DOUBLE )
                    {
                    // InternalGitHubActionsParser.g:8891:5: (lv_value_7_0= RULE_DOUBLE )
                    // InternalGitHubActionsParser.g:8892:6: lv_value_7_0= RULE_DOUBLE
                    {
                    lv_value_7_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_7_0, grammarAccess.getAtomicAccess().getValueDOUBLETerminalRuleCall_3_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_7_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.DOUBLE");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:8910:3: ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) )
                    {
                    // InternalGitHubActionsParser.g:8910:3: ( () ( (lv_value_9_0= RULE_BOOLEAN ) ) )
                    // InternalGitHubActionsParser.g:8911:4: () ( (lv_value_9_0= RULE_BOOLEAN ) )
                    {
                    // InternalGitHubActionsParser.g:8911:4: ()
                    // InternalGitHubActionsParser.g:8912:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getBooleanLiteralAction_4_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:8921:4: ( (lv_value_9_0= RULE_BOOLEAN ) )
                    // InternalGitHubActionsParser.g:8922:5: (lv_value_9_0= RULE_BOOLEAN )
                    {
                    // InternalGitHubActionsParser.g:8922:5: (lv_value_9_0= RULE_BOOLEAN )
                    // InternalGitHubActionsParser.g:8923:6: lv_value_9_0= RULE_BOOLEAN
                    {
                    lv_value_9_0=(Token)match(input,RULE_BOOLEAN,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_9_0, grammarAccess.getAtomicAccess().getValueBOOLEANTerminalRuleCall_4_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_9_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.BOOLEAN");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:8941:3: ( () ( (lv_value_11_0= RULE_STRING ) ) )
                    {
                    // InternalGitHubActionsParser.g:8941:3: ( () ( (lv_value_11_0= RULE_STRING ) ) )
                    // InternalGitHubActionsParser.g:8942:4: () ( (lv_value_11_0= RULE_STRING ) )
                    {
                    // InternalGitHubActionsParser.g:8942:4: ()
                    // InternalGitHubActionsParser.g:8943:5: 
                    {
                    if ( state.backtracking==0 ) {

                      					/* */
                      				
                    }
                    if ( state.backtracking==0 ) {

                      					current = forceCreateModelElement(
                      						grammarAccess.getAtomicAccess().getStringLiteralAction_5_0(),
                      						current);
                      				
                    }

                    }

                    // InternalGitHubActionsParser.g:8952:4: ( (lv_value_11_0= RULE_STRING ) )
                    // InternalGitHubActionsParser.g:8953:5: (lv_value_11_0= RULE_STRING )
                    {
                    // InternalGitHubActionsParser.g:8953:5: (lv_value_11_0= RULE_STRING )
                    // InternalGitHubActionsParser.g:8954:6: lv_value_11_0= RULE_STRING
                    {
                    lv_value_11_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						newLeafNode(lv_value_11_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_5_1_0());
                      					
                    }
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElement(grammarAccess.getAtomicRule());
                      						}
                      						setWithLastConsumed(
                      							current,
                      							"value",
                      							lv_value_11_0,
                      							"org.eclipse.xtext.common.Terminals.STRING");
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAtomic"


    // $ANTLR start "entryRuleCallExpression"
    // InternalGitHubActionsParser.g:8975:1: entryRuleCallExpression returns [EObject current=null] : iv_ruleCallExpression= ruleCallExpression EOF ;
    public final EObject entryRuleCallExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCallExpression = null;


        try {
            // InternalGitHubActionsParser.g:8975:55: (iv_ruleCallExpression= ruleCallExpression EOF )
            // InternalGitHubActionsParser.g:8976:2: iv_ruleCallExpression= ruleCallExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCallExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCallExpression=ruleCallExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCallExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCallExpression"


    // $ANTLR start "ruleCallExpression"
    // InternalGitHubActionsParser.g:8982:1: ruleCallExpression returns [EObject current=null] : (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled ) ;
    public final EObject ruleCallExpression() throws RecognitionException {
        EObject current = null;

        EObject this_Contains_0 = null;

        EObject this_StartsWith_1 = null;

        EObject this_EndsWith_2 = null;

        EObject this_Format_3 = null;

        EObject this_Join_4 = null;

        EObject this_ToJSON_5 = null;

        EObject this_FromJSON_6 = null;

        EObject this_HashFiles_7 = null;

        EObject this_Success_8 = null;

        EObject this_Always_9 = null;

        EObject this_Failure_10 = null;

        EObject this_Cancelled_11 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:8988:2: ( (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled ) )
            // InternalGitHubActionsParser.g:8989:2: (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled )
            {
            // InternalGitHubActionsParser.g:8989:2: (this_Contains_0= ruleContains | this_StartsWith_1= ruleStartsWith | this_EndsWith_2= ruleEndsWith | this_Format_3= ruleFormat | this_Join_4= ruleJoin | this_ToJSON_5= ruleToJSON | this_FromJSON_6= ruleFromJSON | this_HashFiles_7= ruleHashFiles | this_Success_8= ruleSuccess | this_Always_9= ruleAlways | this_Failure_10= ruleFailure | this_Cancelled_11= ruleCancelled )
            int alt138=12;
            switch ( input.LA(1) ) {
            case Contains:
                {
                alt138=1;
                }
                break;
            case StartsWith:
                {
                alt138=2;
                }
                break;
            case EndsWith:
                {
                alt138=3;
                }
                break;
            case Format:
                {
                alt138=4;
                }
                break;
            case Join:
                {
                alt138=5;
                }
                break;
            case ToJSON:
                {
                alt138=6;
                }
                break;
            case FromJSON:
                {
                alt138=7;
                }
                break;
            case HashFiles:
                {
                alt138=8;
                }
                break;
            case Success:
                {
                alt138=9;
                }
                break;
            case Always:
                {
                alt138=10;
                }
                break;
            case Failure:
                {
                alt138=11;
                }
                break;
            case Cancelled:
                {
                alt138=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // InternalGitHubActionsParser.g:8990:3: this_Contains_0= ruleContains
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getContainsParserRuleCall_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Contains_0=ruleContains();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Contains_0;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:9002:3: this_StartsWith_1= ruleStartsWith
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getStartsWithParserRuleCall_1());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_StartsWith_1=ruleStartsWith();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_StartsWith_1;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:9014:3: this_EndsWith_2= ruleEndsWith
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getEndsWithParserRuleCall_2());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_EndsWith_2=ruleEndsWith();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_EndsWith_2;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:9026:3: this_Format_3= ruleFormat
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getFormatParserRuleCall_3());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Format_3=ruleFormat();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Format_3;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:9038:3: this_Join_4= ruleJoin
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getJoinParserRuleCall_4());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Join_4=ruleJoin();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Join_4;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:9050:3: this_ToJSON_5= ruleToJSON
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getToJSONParserRuleCall_5());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_ToJSON_5=ruleToJSON();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_ToJSON_5;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:9062:3: this_FromJSON_6= ruleFromJSON
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getFromJSONParserRuleCall_6());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_FromJSON_6=ruleFromJSON();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_FromJSON_6;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:9074:3: this_HashFiles_7= ruleHashFiles
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getHashFilesParserRuleCall_7());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_HashFiles_7=ruleHashFiles();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_HashFiles_7;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:9086:3: this_Success_8= ruleSuccess
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getSuccessParserRuleCall_8());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Success_8=ruleSuccess();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Success_8;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:9098:3: this_Always_9= ruleAlways
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getAlwaysParserRuleCall_9());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Always_9=ruleAlways();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Always_9;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:9110:3: this_Failure_10= ruleFailure
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getFailureParserRuleCall_10());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Failure_10=ruleFailure();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Failure_10;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:9122:3: this_Cancelled_11= ruleCancelled
                    {
                    if ( state.backtracking==0 ) {

                      			/* */
                      		
                    }
                    if ( state.backtracking==0 ) {

                      			newCompositeNode(grammarAccess.getCallExpressionAccess().getCancelledParserRuleCall_11());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    this_Cancelled_11=ruleCancelled();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      			current = this_Cancelled_11;
                      			afterParserOrEnumRuleCall();
                      		
                    }

                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCallExpression"


    // $ANTLR start "entryRuleContains"
    // InternalGitHubActionsParser.g:9137:1: entryRuleContains returns [EObject current=null] : iv_ruleContains= ruleContains EOF ;
    public final EObject entryRuleContains() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleContains = null;


        try {
            // InternalGitHubActionsParser.g:9137:49: (iv_ruleContains= ruleContains EOF )
            // InternalGitHubActionsParser.g:9138:2: iv_ruleContains= ruleContains EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getContainsRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleContains=ruleContains();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleContains; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleContains"


    // $ANTLR start "ruleContains"
    // InternalGitHubActionsParser.g:9144:1: ruleContains returns [EObject current=null] : (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleContains() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_search_2_0 = null;

        EObject lv_item_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9150:2: ( (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9151:2: (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9151:2: (otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:9152:3: otherlv_0= Contains otherlv_1= LeftParenthesis ( (lv_search_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_item_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Contains,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getContainsKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getContainsAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9160:3: ( (lv_search_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9161:4: (lv_search_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9161:4: (lv_search_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9162:5: lv_search_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getContainsAccess().getSearchInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_96);
            lv_search_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getContainsRule());
              					}
              					set(
              						current,
              						"search",
              						lv_search_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getContainsAccess().getCommaKeyword_3());
              		
            }
            // InternalGitHubActionsParser.g:9183:3: ( (lv_item_4_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9184:4: (lv_item_4_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9184:4: (lv_item_4_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9185:5: lv_item_4_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getContainsAccess().getItemInsideBracketsExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_item_4_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getContainsRule());
              					}
              					set(
              						current,
              						"item",
              						lv_item_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getContainsAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleContains"


    // $ANTLR start "entryRuleStartsWith"
    // InternalGitHubActionsParser.g:9210:1: entryRuleStartsWith returns [EObject current=null] : iv_ruleStartsWith= ruleStartsWith EOF ;
    public final EObject entryRuleStartsWith() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStartsWith = null;


        try {
            // InternalGitHubActionsParser.g:9210:51: (iv_ruleStartsWith= ruleStartsWith EOF )
            // InternalGitHubActionsParser.g:9211:2: iv_ruleStartsWith= ruleStartsWith EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getStartsWithRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleStartsWith=ruleStartsWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleStartsWith; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStartsWith"


    // $ANTLR start "ruleStartsWith"
    // InternalGitHubActionsParser.g:9217:1: ruleStartsWith returns [EObject current=null] : (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleStartsWith() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_searchString_2_0 = null;

        EObject lv_searchValue_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9223:2: ( (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9224:2: (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9224:2: (otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:9225:3: otherlv_0= StartsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,StartsWith,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getStartsWithAccess().getStartsWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getStartsWithAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9233:3: ( (lv_searchString_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9234:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9234:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9235:5: lv_searchString_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartsWithAccess().getSearchStringInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_96);
            lv_searchString_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartsWithRule());
              					}
              					set(
              						current,
              						"searchString",
              						lv_searchString_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getStartsWithAccess().getCommaKeyword_3());
              		
            }
            // InternalGitHubActionsParser.g:9256:3: ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9257:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9257:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9258:5: lv_searchValue_4_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getStartsWithAccess().getSearchValueInsideBracketsExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_searchValue_4_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getStartsWithRule());
              					}
              					set(
              						current,
              						"searchValue",
              						lv_searchValue_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getStartsWithAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStartsWith"


    // $ANTLR start "entryRuleEndsWith"
    // InternalGitHubActionsParser.g:9283:1: entryRuleEndsWith returns [EObject current=null] : iv_ruleEndsWith= ruleEndsWith EOF ;
    public final EObject entryRuleEndsWith() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEndsWith = null;


        try {
            // InternalGitHubActionsParser.g:9283:49: (iv_ruleEndsWith= ruleEndsWith EOF )
            // InternalGitHubActionsParser.g:9284:2: iv_ruleEndsWith= ruleEndsWith EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getEndsWithRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleEndsWith=ruleEndsWith();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleEndsWith; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEndsWith"


    // $ANTLR start "ruleEndsWith"
    // InternalGitHubActionsParser.g:9290:1: ruleEndsWith returns [EObject current=null] : (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) ;
    public final EObject ruleEndsWith() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_searchString_2_0 = null;

        EObject lv_searchValue_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9296:2: ( (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9297:2: (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9297:2: (otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:9298:3: otherlv_0= EndsWith otherlv_1= LeftParenthesis ( (lv_searchString_2_0= ruleInsideBracketsExpression ) ) otherlv_3= Comma ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) ) otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,EndsWith,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getEndsWithAccess().getEndsWithKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getEndsWithAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9306:3: ( (lv_searchString_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9307:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9307:4: (lv_searchString_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9308:5: lv_searchString_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getEndsWithAccess().getSearchStringInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_96);
            lv_searchString_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getEndsWithRule());
              					}
              					set(
              						current,
              						"searchString",
              						lv_searchString_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,Comma,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getEndsWithAccess().getCommaKeyword_3());
              		
            }
            // InternalGitHubActionsParser.g:9329:3: ( (lv_searchValue_4_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9330:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9330:4: (lv_searchValue_4_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9331:5: lv_searchValue_4_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getEndsWithAccess().getSearchValueInsideBracketsExpressionParserRuleCall_4_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_searchValue_4_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getEndsWithRule());
              					}
              					set(
              						current,
              						"searchValue",
              						lv_searchValue_4_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getEndsWithAccess().getRightParenthesisKeyword_5());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEndsWith"


    // $ANTLR start "entryRuleFormat"
    // InternalGitHubActionsParser.g:9356:1: entryRuleFormat returns [EObject current=null] : iv_ruleFormat= ruleFormat EOF ;
    public final EObject entryRuleFormat() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFormat = null;


        try {
            // InternalGitHubActionsParser.g:9356:47: (iv_ruleFormat= ruleFormat EOF )
            // InternalGitHubActionsParser.g:9357:2: iv_ruleFormat= ruleFormat EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFormatRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFormat=ruleFormat();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFormat; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFormat"


    // $ANTLR start "ruleFormat"
    // InternalGitHubActionsParser.g:9363:1: ruleFormat returns [EObject current=null] : (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis ) ;
    public final EObject ruleFormat() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_string_2_0 = null;

        EObject lv_replaceValues_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9369:2: ( (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9370:2: (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9370:2: (otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:9371:3: otherlv_0= Format otherlv_1= LeftParenthesis ( (lv_string_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )* otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Format,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFormatAccess().getFormatKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFormatAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9379:3: ( (lv_string_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9380:4: (lv_string_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9380:4: (lv_string_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9381:5: lv_string_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFormatAccess().getStringInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_97);
            lv_string_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFormatRule());
              					}
              					set(
              						current,
              						"string",
              						lv_string_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalGitHubActionsParser.g:9398:3: (otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) ) )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==Comma) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // InternalGitHubActionsParser.g:9399:4: otherlv_3= Comma ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) )
            	    {
            	    otherlv_3=(Token)match(input,Comma,FOLLOW_86); if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      				newLeafNode(otherlv_3, grammarAccess.getFormatAccess().getCommaKeyword_3_0());
            	      			
            	    }
            	    // InternalGitHubActionsParser.g:9403:4: ( (lv_replaceValues_4_0= ruleInsideBracketsExpression ) )
            	    // InternalGitHubActionsParser.g:9404:5: (lv_replaceValues_4_0= ruleInsideBracketsExpression )
            	    {
            	    // InternalGitHubActionsParser.g:9404:5: (lv_replaceValues_4_0= ruleInsideBracketsExpression )
            	    // InternalGitHubActionsParser.g:9405:6: lv_replaceValues_4_0= ruleInsideBracketsExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getFormatAccess().getReplaceValuesInsideBracketsExpressionParserRuleCall_3_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_97);
            	    lv_replaceValues_4_0=ruleInsideBracketsExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getFormatRule());
            	      						}
            	      						add(
            	      							current,
            	      							"replaceValues",
            	      							lv_replaceValues_4_0,
            	      							"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getFormatAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFormat"


    // $ANTLR start "entryRuleJoin"
    // InternalGitHubActionsParser.g:9431:1: entryRuleJoin returns [EObject current=null] : iv_ruleJoin= ruleJoin EOF ;
    public final EObject entryRuleJoin() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJoin = null;


        try {
            // InternalGitHubActionsParser.g:9431:45: (iv_ruleJoin= ruleJoin EOF )
            // InternalGitHubActionsParser.g:9432:2: iv_ruleJoin= ruleJoin EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getJoinRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleJoin=ruleJoin();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleJoin; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJoin"


    // $ANTLR start "ruleJoin"
    // InternalGitHubActionsParser.g:9438:1: ruleJoin returns [EObject current=null] : (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis ) ;
    public final EObject ruleJoin() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        EObject lv_array_2_0 = null;

        EObject lv_sep_4_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9444:2: ( (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9445:2: (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9445:2: (otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis )
            // InternalGitHubActionsParser.g:9446:3: otherlv_0= Join otherlv_1= LeftParenthesis ( (lv_array_2_0= ruleInsideBracketsExpression ) ) (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )? otherlv_5= RightParenthesis
            {
            otherlv_0=(Token)match(input,Join,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getJoinAccess().getJoinKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getJoinAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9454:3: ( (lv_array_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9455:4: (lv_array_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9455:4: (lv_array_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9456:5: lv_array_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getJoinAccess().getArrayInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_97);
            lv_array_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getJoinRule());
              					}
              					set(
              						current,
              						"array",
              						lv_array_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            // InternalGitHubActionsParser.g:9473:3: (otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) ) )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==Comma) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // InternalGitHubActionsParser.g:9474:4: otherlv_3= Comma ( (lv_sep_4_0= ruleInsideBracketsExpression ) )
                    {
                    otherlv_3=(Token)match(input,Comma,FOLLOW_86); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				newLeafNode(otherlv_3, grammarAccess.getJoinAccess().getCommaKeyword_3_0());
                      			
                    }
                    // InternalGitHubActionsParser.g:9478:4: ( (lv_sep_4_0= ruleInsideBracketsExpression ) )
                    // InternalGitHubActionsParser.g:9479:5: (lv_sep_4_0= ruleInsideBracketsExpression )
                    {
                    // InternalGitHubActionsParser.g:9479:5: (lv_sep_4_0= ruleInsideBracketsExpression )
                    // InternalGitHubActionsParser.g:9480:6: lv_sep_4_0= ruleInsideBracketsExpression
                    {
                    if ( state.backtracking==0 ) {

                      						newCompositeNode(grammarAccess.getJoinAccess().getSepInsideBracketsExpressionParserRuleCall_3_1_0());
                      					
                    }
                    pushFollow(FOLLOW_94);
                    lv_sep_4_0=ruleInsideBracketsExpression();

                    state._fsp--;
                    if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      						if (current==null) {
                      							current = createModelElementForParent(grammarAccess.getJoinRule());
                      						}
                      						set(
                      							current,
                      							"sep",
                      							lv_sep_4_0,
                      							"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
                      						afterParserOrEnumRuleCall();
                      					
                    }

                    }


                    }


                    }
                    break;

            }

            otherlv_5=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_5, grammarAccess.getJoinAccess().getRightParenthesisKeyword_4());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJoin"


    // $ANTLR start "entryRuleToJSON"
    // InternalGitHubActionsParser.g:9506:1: entryRuleToJSON returns [EObject current=null] : iv_ruleToJSON= ruleToJSON EOF ;
    public final EObject entryRuleToJSON() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleToJSON = null;


        try {
            // InternalGitHubActionsParser.g:9506:47: (iv_ruleToJSON= ruleToJSON EOF )
            // InternalGitHubActionsParser.g:9507:2: iv_ruleToJSON= ruleToJSON EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getToJSONRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleToJSON=ruleToJSON();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleToJSON; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleToJSON"


    // $ANTLR start "ruleToJSON"
    // InternalGitHubActionsParser.g:9513:1: ruleToJSON returns [EObject current=null] : (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleToJSON() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9519:2: ( (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9520:2: (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9520:2: (otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:9521:3: otherlv_0= ToJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,ToJSON,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getToJSONAccess().getToJSONKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getToJSONAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9529:3: ( (lv_value_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9530:4: (lv_value_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9530:4: (lv_value_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9531:5: lv_value_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getToJSONAccess().getValueInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_value_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getToJSONRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getToJSONAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleToJSON"


    // $ANTLR start "entryRuleFromJSON"
    // InternalGitHubActionsParser.g:9556:1: entryRuleFromJSON returns [EObject current=null] : iv_ruleFromJSON= ruleFromJSON EOF ;
    public final EObject entryRuleFromJSON() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFromJSON = null;


        try {
            // InternalGitHubActionsParser.g:9556:49: (iv_ruleFromJSON= ruleFromJSON EOF )
            // InternalGitHubActionsParser.g:9557:2: iv_ruleFromJSON= ruleFromJSON EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFromJSONRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFromJSON=ruleFromJSON();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFromJSON; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFromJSON"


    // $ANTLR start "ruleFromJSON"
    // InternalGitHubActionsParser.g:9563:1: ruleFromJSON returns [EObject current=null] : (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleFromJSON() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_value_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9569:2: ( (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9570:2: (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9570:2: (otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:9571:3: otherlv_0= FromJSON otherlv_1= LeftParenthesis ( (lv_value_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,FromJSON,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getFromJSONAccess().getFromJSONKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFromJSONAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9579:3: ( (lv_value_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9580:4: (lv_value_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9580:4: (lv_value_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9581:5: lv_value_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getFromJSONAccess().getValueInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_value_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getFromJSONRule());
              					}
              					set(
              						current,
              						"value",
              						lv_value_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFromJSONAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFromJSON"


    // $ANTLR start "entryRuleHashFiles"
    // InternalGitHubActionsParser.g:9606:1: entryRuleHashFiles returns [EObject current=null] : iv_ruleHashFiles= ruleHashFiles EOF ;
    public final EObject entryRuleHashFiles() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleHashFiles = null;


        try {
            // InternalGitHubActionsParser.g:9606:50: (iv_ruleHashFiles= ruleHashFiles EOF )
            // InternalGitHubActionsParser.g:9607:2: iv_ruleHashFiles= ruleHashFiles EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getHashFilesRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleHashFiles=ruleHashFiles();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleHashFiles; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleHashFiles"


    // $ANTLR start "ruleHashFiles"
    // InternalGitHubActionsParser.g:9613:1: ruleHashFiles returns [EObject current=null] : (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) ;
    public final EObject ruleHashFiles() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_3=null;
        EObject lv_path_2_0 = null;



        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9619:2: ( (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9620:2: (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9620:2: (otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:9621:3: otherlv_0= HashFiles otherlv_1= LeftParenthesis ( (lv_path_2_0= ruleInsideBracketsExpression ) ) otherlv_3= RightParenthesis
            {
            otherlv_0=(Token)match(input,HashFiles,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_0, grammarAccess.getHashFilesAccess().getHashFilesKeyword_0());
              		
            }
            otherlv_1=(Token)match(input,LeftParenthesis,FOLLOW_86); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getHashFilesAccess().getLeftParenthesisKeyword_1());
              		
            }
            // InternalGitHubActionsParser.g:9629:3: ( (lv_path_2_0= ruleInsideBracketsExpression ) )
            // InternalGitHubActionsParser.g:9630:4: (lv_path_2_0= ruleInsideBracketsExpression )
            {
            // InternalGitHubActionsParser.g:9630:4: (lv_path_2_0= ruleInsideBracketsExpression )
            // InternalGitHubActionsParser.g:9631:5: lv_path_2_0= ruleInsideBracketsExpression
            {
            if ( state.backtracking==0 ) {

              					newCompositeNode(grammarAccess.getHashFilesAccess().getPathInsideBracketsExpressionParserRuleCall_2_0());
              				
            }
            pushFollow(FOLLOW_94);
            lv_path_2_0=ruleInsideBracketsExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              					if (current==null) {
              						current = createModelElementForParent(grammarAccess.getHashFilesRule());
              					}
              					set(
              						current,
              						"path",
              						lv_path_2_0,
              						"d.fe.up.pt.cicd.gha.GitHubActions.InsideBracketsExpression");
              					afterParserOrEnumRuleCall();
              				
            }

            }


            }

            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getHashFilesAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleHashFiles"


    // $ANTLR start "entryRuleSuccess"
    // InternalGitHubActionsParser.g:9656:1: entryRuleSuccess returns [EObject current=null] : iv_ruleSuccess= ruleSuccess EOF ;
    public final EObject entryRuleSuccess() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleSuccess = null;


        try {
            // InternalGitHubActionsParser.g:9656:48: (iv_ruleSuccess= ruleSuccess EOF )
            // InternalGitHubActionsParser.g:9657:2: iv_ruleSuccess= ruleSuccess EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getSuccessRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleSuccess=ruleSuccess();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleSuccess; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSuccess"


    // $ANTLR start "ruleSuccess"
    // InternalGitHubActionsParser.g:9663:1: ruleSuccess returns [EObject current=null] : ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleSuccess() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9669:2: ( ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9670:2: ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9670:2: ( () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:9671:3: () otherlv_1= Success otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:9671:3: ()
            // InternalGitHubActionsParser.g:9672:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getSuccessAccess().getSuccessAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Success,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getSuccessAccess().getSuccessKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getSuccessAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getSuccessAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSuccess"


    // $ANTLR start "entryRuleAlways"
    // InternalGitHubActionsParser.g:9697:1: entryRuleAlways returns [EObject current=null] : iv_ruleAlways= ruleAlways EOF ;
    public final EObject entryRuleAlways() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAlways = null;


        try {
            // InternalGitHubActionsParser.g:9697:47: (iv_ruleAlways= ruleAlways EOF )
            // InternalGitHubActionsParser.g:9698:2: iv_ruleAlways= ruleAlways EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getAlwaysRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleAlways=ruleAlways();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleAlways; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAlways"


    // $ANTLR start "ruleAlways"
    // InternalGitHubActionsParser.g:9704:1: ruleAlways returns [EObject current=null] : ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleAlways() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9710:2: ( ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9711:2: ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9711:2: ( () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:9712:3: () otherlv_1= Always otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:9712:3: ()
            // InternalGitHubActionsParser.g:9713:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getAlwaysAccess().getAlwaysAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Always,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getAlwaysAccess().getAlwaysKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getAlwaysAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getAlwaysAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAlways"


    // $ANTLR start "entryRuleCancelled"
    // InternalGitHubActionsParser.g:9738:1: entryRuleCancelled returns [EObject current=null] : iv_ruleCancelled= ruleCancelled EOF ;
    public final EObject entryRuleCancelled() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleCancelled = null;


        try {
            // InternalGitHubActionsParser.g:9738:50: (iv_ruleCancelled= ruleCancelled EOF )
            // InternalGitHubActionsParser.g:9739:2: iv_ruleCancelled= ruleCancelled EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getCancelledRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleCancelled=ruleCancelled();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleCancelled; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleCancelled"


    // $ANTLR start "ruleCancelled"
    // InternalGitHubActionsParser.g:9745:1: ruleCancelled returns [EObject current=null] : ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleCancelled() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9751:2: ( ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9752:2: ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9752:2: ( () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:9753:3: () otherlv_1= Cancelled otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:9753:3: ()
            // InternalGitHubActionsParser.g:9754:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getCancelledAccess().getCancelledAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Cancelled,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getCancelledAccess().getCancelledKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getCancelledAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getCancelledAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCancelled"


    // $ANTLR start "entryRuleFailure"
    // InternalGitHubActionsParser.g:9779:1: entryRuleFailure returns [EObject current=null] : iv_ruleFailure= ruleFailure EOF ;
    public final EObject entryRuleFailure() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleFailure = null;


        try {
            // InternalGitHubActionsParser.g:9779:48: (iv_ruleFailure= ruleFailure EOF )
            // InternalGitHubActionsParser.g:9780:2: iv_ruleFailure= ruleFailure EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getFailureRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleFailure=ruleFailure();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleFailure; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFailure"


    // $ANTLR start "ruleFailure"
    // InternalGitHubActionsParser.g:9786:1: ruleFailure returns [EObject current=null] : ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) ;
    public final EObject ruleFailure() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9792:2: ( ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis ) )
            // InternalGitHubActionsParser.g:9793:2: ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            {
            // InternalGitHubActionsParser.g:9793:2: ( () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis )
            // InternalGitHubActionsParser.g:9794:3: () otherlv_1= Failure otherlv_2= LeftParenthesis otherlv_3= RightParenthesis
            {
            // InternalGitHubActionsParser.g:9794:3: ()
            // InternalGitHubActionsParser.g:9795:4: 
            {
            if ( state.backtracking==0 ) {

              				/* */
              			
            }
            if ( state.backtracking==0 ) {

              				current = forceCreateModelElement(
              					grammarAccess.getFailureAccess().getFailureAction_0(),
              					current);
              			
            }

            }

            otherlv_1=(Token)match(input,Failure,FOLLOW_95); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_1, grammarAccess.getFailureAccess().getFailureKeyword_1());
              		
            }
            otherlv_2=(Token)match(input,LeftParenthesis,FOLLOW_94); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_2, grammarAccess.getFailureAccess().getLeftParenthesisKeyword_2());
              		
            }
            otherlv_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			newLeafNode(otherlv_3, grammarAccess.getFailureAccess().getRightParenthesisKeyword_3());
              		
            }

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFailure"


    // $ANTLR start "ruleCOMPARISON_OP"
    // InternalGitHubActionsParser.g:9820:1: ruleCOMPARISON_OP returns [Enumerator current=null] : ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) ) ;
    public final Enumerator ruleCOMPARISON_OP() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9826:2: ( ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) ) )
            // InternalGitHubActionsParser.g:9827:2: ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) )
            {
            // InternalGitHubActionsParser.g:9827:2: ( (enumLiteral_0= GreaterThanSign ) | (enumLiteral_1= GreaterThanSignEqualsSign ) | (enumLiteral_2= LessThanSign ) | (enumLiteral_3= LessThanSignEqualsSign ) )
            int alt141=4;
            switch ( input.LA(1) ) {
            case GreaterThanSign:
                {
                alt141=1;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt141=2;
                }
                break;
            case LessThanSign:
                {
                alt141=3;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt141=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // InternalGitHubActionsParser.g:9828:3: (enumLiteral_0= GreaterThanSign )
                    {
                    // InternalGitHubActionsParser.g:9828:3: (enumLiteral_0= GreaterThanSign )
                    // InternalGitHubActionsParser.g:9829:4: enumLiteral_0= GreaterThanSign
                    {
                    enumLiteral_0=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getGTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getCOMPARISON_OPAccess().getGTEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:9836:3: (enumLiteral_1= GreaterThanSignEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:9836:3: (enumLiteral_1= GreaterThanSignEqualsSign )
                    // InternalGitHubActionsParser.g:9837:4: enumLiteral_1= GreaterThanSignEqualsSign
                    {
                    enumLiteral_1=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getGTEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getCOMPARISON_OPAccess().getGTEEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:9844:3: (enumLiteral_2= LessThanSign )
                    {
                    // InternalGitHubActionsParser.g:9844:3: (enumLiteral_2= LessThanSign )
                    // InternalGitHubActionsParser.g:9845:4: enumLiteral_2= LessThanSign
                    {
                    enumLiteral_2=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getLTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getCOMPARISON_OPAccess().getLTEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:9852:3: (enumLiteral_3= LessThanSignEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:9852:3: (enumLiteral_3= LessThanSignEqualsSign )
                    // InternalGitHubActionsParser.g:9853:4: enumLiteral_3= LessThanSignEqualsSign
                    {
                    enumLiteral_3=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCOMPARISON_OPAccess().getLTEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getCOMPARISON_OPAccess().getLTEEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCOMPARISON_OP"


    // $ANTLR start "ruleEQUALITY_OP"
    // InternalGitHubActionsParser.g:9863:1: ruleEQUALITY_OP returns [Enumerator current=null] : ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) ) ;
    public final Enumerator ruleEQUALITY_OP() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9869:2: ( ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) ) )
            // InternalGitHubActionsParser.g:9870:2: ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) )
            {
            // InternalGitHubActionsParser.g:9870:2: ( (enumLiteral_0= EqualsSignEqualsSign ) | (enumLiteral_1= ExclamationMarkEqualsSign ) )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==EqualsSignEqualsSign) ) {
                alt142=1;
            }
            else if ( (LA142_0==ExclamationMarkEqualsSign) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // InternalGitHubActionsParser.g:9871:3: (enumLiteral_0= EqualsSignEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:9871:3: (enumLiteral_0= EqualsSignEqualsSign )
                    // InternalGitHubActionsParser.g:9872:4: enumLiteral_0= EqualsSignEqualsSign
                    {
                    enumLiteral_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEQUALITY_OPAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEQUALITY_OPAccess().getEQUALSEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:9879:3: (enumLiteral_1= ExclamationMarkEqualsSign )
                    {
                    // InternalGitHubActionsParser.g:9879:3: (enumLiteral_1= ExclamationMarkEqualsSign )
                    // InternalGitHubActionsParser.g:9880:4: enumLiteral_1= ExclamationMarkEqualsSign
                    {
                    enumLiteral_1=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEQUALITY_OPAccess().getNOT_EQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEQUALITY_OPAccess().getNOT_EQUALSEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEQUALITY_OP"


    // $ANTLR start "ruleCONTEXT"
    // InternalGitHubActionsParser.g:9890:1: ruleCONTEXT returns [Enumerator current=null] : ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) ) ;
    public final Enumerator ruleCONTEXT() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:9896:2: ( ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) ) )
            // InternalGitHubActionsParser.g:9897:2: ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) )
            {
            // InternalGitHubActionsParser.g:9897:2: ( (enumLiteral_0= Github ) | (enumLiteral_1= Env ) | (enumLiteral_2= Vars ) | (enumLiteral_3= Job ) | (enumLiteral_4= Jobs ) | (enumLiteral_5= Steps ) | (enumLiteral_6= Runner ) | (enumLiteral_7= Secrets ) | (enumLiteral_8= Strategy ) | (enumLiteral_9= Matrix ) | (enumLiteral_10= Needs ) | (enumLiteral_11= Inputs ) )
            int alt143=12;
            switch ( input.LA(1) ) {
            case Github:
                {
                alt143=1;
                }
                break;
            case Env:
                {
                alt143=2;
                }
                break;
            case Vars:
                {
                alt143=3;
                }
                break;
            case Job:
                {
                alt143=4;
                }
                break;
            case Jobs:
                {
                alt143=5;
                }
                break;
            case Steps:
                {
                alt143=6;
                }
                break;
            case Runner:
                {
                alt143=7;
                }
                break;
            case Secrets:
                {
                alt143=8;
                }
                break;
            case Strategy:
                {
                alt143=9;
                }
                break;
            case Matrix:
                {
                alt143=10;
                }
                break;
            case Needs:
                {
                alt143=11;
                }
                break;
            case Inputs:
                {
                alt143=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }

            switch (alt143) {
                case 1 :
                    // InternalGitHubActionsParser.g:9898:3: (enumLiteral_0= Github )
                    {
                    // InternalGitHubActionsParser.g:9898:3: (enumLiteral_0= Github )
                    // InternalGitHubActionsParser.g:9899:4: enumLiteral_0= Github
                    {
                    enumLiteral_0=(Token)match(input,Github,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getGITHUBEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getCONTEXTAccess().getGITHUBEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:9906:3: (enumLiteral_1= Env )
                    {
                    // InternalGitHubActionsParser.g:9906:3: (enumLiteral_1= Env )
                    // InternalGitHubActionsParser.g:9907:4: enumLiteral_1= Env
                    {
                    enumLiteral_1=(Token)match(input,Env,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getENVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getCONTEXTAccess().getENVEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:9914:3: (enumLiteral_2= Vars )
                    {
                    // InternalGitHubActionsParser.g:9914:3: (enumLiteral_2= Vars )
                    // InternalGitHubActionsParser.g:9915:4: enumLiteral_2= Vars
                    {
                    enumLiteral_2=(Token)match(input,Vars,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getVARSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getCONTEXTAccess().getVARSEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:9922:3: (enumLiteral_3= Job )
                    {
                    // InternalGitHubActionsParser.g:9922:3: (enumLiteral_3= Job )
                    // InternalGitHubActionsParser.g:9923:4: enumLiteral_3= Job
                    {
                    enumLiteral_3=(Token)match(input,Job,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getJOBEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getCONTEXTAccess().getJOBEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:9930:3: (enumLiteral_4= Jobs )
                    {
                    // InternalGitHubActionsParser.g:9930:3: (enumLiteral_4= Jobs )
                    // InternalGitHubActionsParser.g:9931:4: enumLiteral_4= Jobs
                    {
                    enumLiteral_4=(Token)match(input,Jobs,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getJOBSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getCONTEXTAccess().getJOBSEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:9938:3: (enumLiteral_5= Steps )
                    {
                    // InternalGitHubActionsParser.g:9938:3: (enumLiteral_5= Steps )
                    // InternalGitHubActionsParser.g:9939:4: enumLiteral_5= Steps
                    {
                    enumLiteral_5=(Token)match(input,Steps,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getSTEPSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getCONTEXTAccess().getSTEPSEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:9946:3: (enumLiteral_6= Runner )
                    {
                    // InternalGitHubActionsParser.g:9946:3: (enumLiteral_6= Runner )
                    // InternalGitHubActionsParser.g:9947:4: enumLiteral_6= Runner
                    {
                    enumLiteral_6=(Token)match(input,Runner,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getRUNNEREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getCONTEXTAccess().getRUNNEREnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:9954:3: (enumLiteral_7= Secrets )
                    {
                    // InternalGitHubActionsParser.g:9954:3: (enumLiteral_7= Secrets )
                    // InternalGitHubActionsParser.g:9955:4: enumLiteral_7= Secrets
                    {
                    enumLiteral_7=(Token)match(input,Secrets,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getSECRETSEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getCONTEXTAccess().getSECRETSEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:9962:3: (enumLiteral_8= Strategy )
                    {
                    // InternalGitHubActionsParser.g:9962:3: (enumLiteral_8= Strategy )
                    // InternalGitHubActionsParser.g:9963:4: enumLiteral_8= Strategy
                    {
                    enumLiteral_8=(Token)match(input,Strategy,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getSTRATEGYEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getCONTEXTAccess().getSTRATEGYEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:9970:3: (enumLiteral_9= Matrix )
                    {
                    // InternalGitHubActionsParser.g:9970:3: (enumLiteral_9= Matrix )
                    // InternalGitHubActionsParser.g:9971:4: enumLiteral_9= Matrix
                    {
                    enumLiteral_9=(Token)match(input,Matrix,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getMATRIXEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getCONTEXTAccess().getMATRIXEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:9978:3: (enumLiteral_10= Needs )
                    {
                    // InternalGitHubActionsParser.g:9978:3: (enumLiteral_10= Needs )
                    // InternalGitHubActionsParser.g:9979:4: enumLiteral_10= Needs
                    {
                    enumLiteral_10=(Token)match(input,Needs,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getNEEDSEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getCONTEXTAccess().getNEEDSEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:9986:3: (enumLiteral_11= Inputs )
                    {
                    // InternalGitHubActionsParser.g:9986:3: (enumLiteral_11= Inputs )
                    // InternalGitHubActionsParser.g:9987:4: enumLiteral_11= Inputs
                    {
                    enumLiteral_11=(Token)match(input,Inputs,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getCONTEXTAccess().getINPUTSEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getCONTEXTAccess().getINPUTSEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleCONTEXT"


    // $ANTLR start "ruleTYPE"
    // InternalGitHubActionsParser.g:9997:1: ruleTYPE returns [Enumerator current=null] : ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) ) ;
    public final Enumerator ruleTYPE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:10003:2: ( ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) ) )
            // InternalGitHubActionsParser.g:10004:2: ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) )
            {
            // InternalGitHubActionsParser.g:10004:2: ( (enumLiteral_0= Boolean ) | (enumLiteral_1= Number ) | (enumLiteral_2= String ) | (enumLiteral_3= Environment ) | (enumLiteral_4= Choice ) )
            int alt144=5;
            switch ( input.LA(1) ) {
            case Boolean:
                {
                alt144=1;
                }
                break;
            case Number:
                {
                alt144=2;
                }
                break;
            case String:
                {
                alt144=3;
                }
                break;
            case Environment:
                {
                alt144=4;
                }
                break;
            case Choice:
                {
                alt144=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // InternalGitHubActionsParser.g:10005:3: (enumLiteral_0= Boolean )
                    {
                    // InternalGitHubActionsParser.g:10005:3: (enumLiteral_0= Boolean )
                    // InternalGitHubActionsParser.g:10006:4: enumLiteral_0= Boolean
                    {
                    enumLiteral_0=(Token)match(input,Boolean,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getBOOLEANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getTYPEAccess().getBOOLEANEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:10013:3: (enumLiteral_1= Number )
                    {
                    // InternalGitHubActionsParser.g:10013:3: (enumLiteral_1= Number )
                    // InternalGitHubActionsParser.g:10014:4: enumLiteral_1= Number
                    {
                    enumLiteral_1=(Token)match(input,Number,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getNUMBEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getTYPEAccess().getNUMBEREnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:10021:3: (enumLiteral_2= String )
                    {
                    // InternalGitHubActionsParser.g:10021:3: (enumLiteral_2= String )
                    // InternalGitHubActionsParser.g:10022:4: enumLiteral_2= String
                    {
                    enumLiteral_2=(Token)match(input,String,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getSTRINGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getTYPEAccess().getSTRINGEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:10029:3: (enumLiteral_3= Environment )
                    {
                    // InternalGitHubActionsParser.g:10029:3: (enumLiteral_3= Environment )
                    // InternalGitHubActionsParser.g:10030:4: enumLiteral_3= Environment
                    {
                    enumLiteral_3=(Token)match(input,Environment,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getENVIRONMENTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getTYPEAccess().getENVIRONMENTEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:10037:3: (enumLiteral_4= Choice )
                    {
                    // InternalGitHubActionsParser.g:10037:3: (enumLiteral_4= Choice )
                    // InternalGitHubActionsParser.g:10038:4: enumLiteral_4= Choice
                    {
                    enumLiteral_4=(Token)match(input,Choice,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getTYPEAccess().getCHOICEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getTYPEAccess().getCHOICEEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTYPE"


    // $ANTLR start "ruleWEBHOOK_ACTIVITY_TYPE"
    // InternalGitHubActionsParser.g:10048:1: ruleWEBHOOK_ACTIVITY_TYPE returns [Enumerator current=null] : ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) ) ;
    public final Enumerator ruleWEBHOOK_ACTIVITY_TYPE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:10054:2: ( ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) ) )
            // InternalGitHubActionsParser.g:10055:2: ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) )
            {
            // InternalGitHubActionsParser.g:10055:2: ( (enumLiteral_0= Assigned ) | (enumLiteral_1= Auto_merge_disabled ) | (enumLiteral_2= Auto_merge_enabled ) | (enumLiteral_3= Closed ) | (enumLiteral_4= Converted_to_draft ) | (enumLiteral_5= Edited ) | (enumLiteral_6= Labeled ) | (enumLiteral_7= Locked ) | (enumLiteral_8= Opened ) | (enumLiteral_9= Ready_for_review ) | (enumLiteral_10= Reopened ) | (enumLiteral_11= Review_request_removed ) | (enumLiteral_12= Review_requested ) | (enumLiteral_13= Synchronize ) | (enumLiteral_14= Unassigned ) | (enumLiteral_15= Unlabeled ) | (enumLiteral_16= Unlocked ) | (enumLiteral_17= Created ) | (enumLiteral_18= Deleted ) )
            int alt145=19;
            switch ( input.LA(1) ) {
            case Assigned:
                {
                alt145=1;
                }
                break;
            case Auto_merge_disabled:
                {
                alt145=2;
                }
                break;
            case Auto_merge_enabled:
                {
                alt145=3;
                }
                break;
            case Closed:
                {
                alt145=4;
                }
                break;
            case Converted_to_draft:
                {
                alt145=5;
                }
                break;
            case Edited:
                {
                alt145=6;
                }
                break;
            case Labeled:
                {
                alt145=7;
                }
                break;
            case Locked:
                {
                alt145=8;
                }
                break;
            case Opened:
                {
                alt145=9;
                }
                break;
            case Ready_for_review:
                {
                alt145=10;
                }
                break;
            case Reopened:
                {
                alt145=11;
                }
                break;
            case Review_request_removed:
                {
                alt145=12;
                }
                break;
            case Review_requested:
                {
                alt145=13;
                }
                break;
            case Synchronize:
                {
                alt145=14;
                }
                break;
            case Unassigned:
                {
                alt145=15;
                }
                break;
            case Unlabeled:
                {
                alt145=16;
                }
                break;
            case Unlocked:
                {
                alt145=17;
                }
                break;
            case Created:
                {
                alt145=18;
                }
                break;
            case Deleted:
                {
                alt145=19;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // InternalGitHubActionsParser.g:10056:3: (enumLiteral_0= Assigned )
                    {
                    // InternalGitHubActionsParser.g:10056:3: (enumLiteral_0= Assigned )
                    // InternalGitHubActionsParser.g:10057:4: enumLiteral_0= Assigned
                    {
                    enumLiteral_0=(Token)match(input,Assigned,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getASSIGNEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getASSIGNEDEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:10064:3: (enumLiteral_1= Auto_merge_disabled )
                    {
                    // InternalGitHubActionsParser.g:10064:3: (enumLiteral_1= Auto_merge_disabled )
                    // InternalGitHubActionsParser.g:10065:4: enumLiteral_1= Auto_merge_disabled
                    {
                    enumLiteral_1=(Token)match(input,Auto_merge_disabled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_DISABLEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_DISABLEDEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:10072:3: (enumLiteral_2= Auto_merge_enabled )
                    {
                    // InternalGitHubActionsParser.g:10072:3: (enumLiteral_2= Auto_merge_enabled )
                    // InternalGitHubActionsParser.g:10073:4: enumLiteral_2= Auto_merge_enabled
                    {
                    enumLiteral_2=(Token)match(input,Auto_merge_enabled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_ENABLEDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getAUTO_MERGE_ENABLEDEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:10080:3: (enumLiteral_3= Closed )
                    {
                    // InternalGitHubActionsParser.g:10080:3: (enumLiteral_3= Closed )
                    // InternalGitHubActionsParser.g:10081:4: enumLiteral_3= Closed
                    {
                    enumLiteral_3=(Token)match(input,Closed,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCLOSEDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCLOSEDEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:10088:3: (enumLiteral_4= Converted_to_draft )
                    {
                    // InternalGitHubActionsParser.g:10088:3: (enumLiteral_4= Converted_to_draft )
                    // InternalGitHubActionsParser.g:10089:4: enumLiteral_4= Converted_to_draft
                    {
                    enumLiteral_4=(Token)match(input,Converted_to_draft,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCONVERTED_TO_DRAFTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCONVERTED_TO_DRAFTEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:10096:3: (enumLiteral_5= Edited )
                    {
                    // InternalGitHubActionsParser.g:10096:3: (enumLiteral_5= Edited )
                    // InternalGitHubActionsParser.g:10097:4: enumLiteral_5= Edited
                    {
                    enumLiteral_5=(Token)match(input,Edited,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getEDITEDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getEDITEDEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:10104:3: (enumLiteral_6= Labeled )
                    {
                    // InternalGitHubActionsParser.g:10104:3: (enumLiteral_6= Labeled )
                    // InternalGitHubActionsParser.g:10105:4: enumLiteral_6= Labeled
                    {
                    enumLiteral_6=(Token)match(input,Labeled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLABELEDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLABELEDEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:10112:3: (enumLiteral_7= Locked )
                    {
                    // InternalGitHubActionsParser.g:10112:3: (enumLiteral_7= Locked )
                    // InternalGitHubActionsParser.g:10113:4: enumLiteral_7= Locked
                    {
                    enumLiteral_7=(Token)match(input,Locked,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLOCKEDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getLOCKEDEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:10120:3: (enumLiteral_8= Opened )
                    {
                    // InternalGitHubActionsParser.g:10120:3: (enumLiteral_8= Opened )
                    // InternalGitHubActionsParser.g:10121:4: enumLiteral_8= Opened
                    {
                    enumLiteral_8=(Token)match(input,Opened,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getOPENEDEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getOPENEDEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:10128:3: (enumLiteral_9= Ready_for_review )
                    {
                    // InternalGitHubActionsParser.g:10128:3: (enumLiteral_9= Ready_for_review )
                    // InternalGitHubActionsParser.g:10129:4: enumLiteral_9= Ready_for_review
                    {
                    enumLiteral_9=(Token)match(input,Ready_for_review,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREADY_FOR_REVIEWEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREADY_FOR_REVIEWEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:10136:3: (enumLiteral_10= Reopened )
                    {
                    // InternalGitHubActionsParser.g:10136:3: (enumLiteral_10= Reopened )
                    // InternalGitHubActionsParser.g:10137:4: enumLiteral_10= Reopened
                    {
                    enumLiteral_10=(Token)match(input,Reopened,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREOPENEDEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREOPENEDEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:10144:3: (enumLiteral_11= Review_request_removed )
                    {
                    // InternalGitHubActionsParser.g:10144:3: (enumLiteral_11= Review_request_removed )
                    // InternalGitHubActionsParser.g:10145:4: enumLiteral_11= Review_request_removed
                    {
                    enumLiteral_11=(Token)match(input,Review_request_removed,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUEST_REMOVEDEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUEST_REMOVEDEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalGitHubActionsParser.g:10152:3: (enumLiteral_12= Review_requested )
                    {
                    // InternalGitHubActionsParser.g:10152:3: (enumLiteral_12= Review_requested )
                    // InternalGitHubActionsParser.g:10153:4: enumLiteral_12= Review_requested
                    {
                    enumLiteral_12=(Token)match(input,Review_requested,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUESTEDEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getREVIEW_REQUESTEDEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalGitHubActionsParser.g:10160:3: (enumLiteral_13= Synchronize )
                    {
                    // InternalGitHubActionsParser.g:10160:3: (enumLiteral_13= Synchronize )
                    // InternalGitHubActionsParser.g:10161:4: enumLiteral_13= Synchronize
                    {
                    enumLiteral_13=(Token)match(input,Synchronize,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getSYNCHRONIZEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_13, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getSYNCHRONIZEEnumLiteralDeclaration_13());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalGitHubActionsParser.g:10168:3: (enumLiteral_14= Unassigned )
                    {
                    // InternalGitHubActionsParser.g:10168:3: (enumLiteral_14= Unassigned )
                    // InternalGitHubActionsParser.g:10169:4: enumLiteral_14= Unassigned
                    {
                    enumLiteral_14=(Token)match(input,Unassigned,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNASSIGNEDEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_14, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNASSIGNEDEnumLiteralDeclaration_14());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalGitHubActionsParser.g:10176:3: (enumLiteral_15= Unlabeled )
                    {
                    // InternalGitHubActionsParser.g:10176:3: (enumLiteral_15= Unlabeled )
                    // InternalGitHubActionsParser.g:10177:4: enumLiteral_15= Unlabeled
                    {
                    enumLiteral_15=(Token)match(input,Unlabeled,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLABELEDEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_15, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLABELEDEnumLiteralDeclaration_15());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalGitHubActionsParser.g:10184:3: (enumLiteral_16= Unlocked )
                    {
                    // InternalGitHubActionsParser.g:10184:3: (enumLiteral_16= Unlocked )
                    // InternalGitHubActionsParser.g:10185:4: enumLiteral_16= Unlocked
                    {
                    enumLiteral_16=(Token)match(input,Unlocked,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLOCKEDEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_16, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getUNLOCKEDEnumLiteralDeclaration_16());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalGitHubActionsParser.g:10192:3: (enumLiteral_17= Created )
                    {
                    // InternalGitHubActionsParser.g:10192:3: (enumLiteral_17= Created )
                    // InternalGitHubActionsParser.g:10193:4: enumLiteral_17= Created
                    {
                    enumLiteral_17=(Token)match(input,Created,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCREATEDEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_17, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getCREATEDEnumLiteralDeclaration_17());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalGitHubActionsParser.g:10200:3: (enumLiteral_18= Deleted )
                    {
                    // InternalGitHubActionsParser.g:10200:3: (enumLiteral_18= Deleted )
                    // InternalGitHubActionsParser.g:10201:4: enumLiteral_18= Deleted
                    {
                    enumLiteral_18=(Token)match(input,Deleted,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getDELETEDEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_18, grammarAccess.getWEBHOOK_ACTIVITY_TYPEAccess().getDELETEDEnumLiteralDeclaration_18());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleWEBHOOK_ACTIVITY_TYPE"


    // $ANTLR start "ruleEVENT"
    // InternalGitHubActionsParser.g:10211:1: ruleEVENT returns [Enumerator current=null] : ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) ) ;
    public final Enumerator ruleEVENT() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;
        Token enumLiteral_20=null;
        Token enumLiteral_21=null;
        Token enumLiteral_22=null;
        Token enumLiteral_23=null;
        Token enumLiteral_24=null;
        Token enumLiteral_25=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:10217:2: ( ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) ) )
            // InternalGitHubActionsParser.g:10218:2: ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) )
            {
            // InternalGitHubActionsParser.g:10218:2: ( (enumLiteral_0= Branch_protection_rule ) | (enumLiteral_1= Check_run ) | (enumLiteral_2= Check_suite ) | (enumLiteral_3= Create ) | (enumLiteral_4= Delete ) | (enumLiteral_5= Deployment ) | (enumLiteral_6= Deployment_status ) | (enumLiteral_7= Discussion ) | (enumLiteral_8= Fork ) | (enumLiteral_9= Gollum ) | (enumLiteral_10= Issues ) | (enumLiteral_11= Label ) | (enumLiteral_12= Merge_group ) | (enumLiteral_13= Milestone ) | (enumLiteral_14= Page_build ) | (enumLiteral_15= Project ) | (enumLiteral_16= Project_card ) | (enumLiteral_17= Project_column ) | (enumLiteral_18= Public ) | (enumLiteral_19= Pull_request_review ) | (enumLiteral_20= Pull_request_review_comment ) | (enumLiteral_21= Registry_package ) | (enumLiteral_22= Release ) | (enumLiteral_23= Repository_dispatch ) | (enumLiteral_24= Watch ) | (enumLiteral_25= Status ) )
            int alt146=26;
            switch ( input.LA(1) ) {
            case Branch_protection_rule:
                {
                alt146=1;
                }
                break;
            case Check_run:
                {
                alt146=2;
                }
                break;
            case Check_suite:
                {
                alt146=3;
                }
                break;
            case Create:
                {
                alt146=4;
                }
                break;
            case Delete:
                {
                alt146=5;
                }
                break;
            case Deployment:
                {
                alt146=6;
                }
                break;
            case Deployment_status:
                {
                alt146=7;
                }
                break;
            case Discussion:
                {
                alt146=8;
                }
                break;
            case Fork:
                {
                alt146=9;
                }
                break;
            case Gollum:
                {
                alt146=10;
                }
                break;
            case Issues:
                {
                alt146=11;
                }
                break;
            case Label:
                {
                alt146=12;
                }
                break;
            case Merge_group:
                {
                alt146=13;
                }
                break;
            case Milestone:
                {
                alt146=14;
                }
                break;
            case Page_build:
                {
                alt146=15;
                }
                break;
            case Project:
                {
                alt146=16;
                }
                break;
            case Project_card:
                {
                alt146=17;
                }
                break;
            case Project_column:
                {
                alt146=18;
                }
                break;
            case Public:
                {
                alt146=19;
                }
                break;
            case Pull_request_review:
                {
                alt146=20;
                }
                break;
            case Pull_request_review_comment:
                {
                alt146=21;
                }
                break;
            case Registry_package:
                {
                alt146=22;
                }
                break;
            case Release:
                {
                alt146=23;
                }
                break;
            case Repository_dispatch:
                {
                alt146=24;
                }
                break;
            case Watch:
                {
                alt146=25;
                }
                break;
            case Status:
                {
                alt146=26;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // InternalGitHubActionsParser.g:10219:3: (enumLiteral_0= Branch_protection_rule )
                    {
                    // InternalGitHubActionsParser.g:10219:3: (enumLiteral_0= Branch_protection_rule )
                    // InternalGitHubActionsParser.g:10220:4: enumLiteral_0= Branch_protection_rule
                    {
                    enumLiteral_0=(Token)match(input,Branch_protection_rule,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getBRANCH_PROTECTION_RULEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getEVENTAccess().getBRANCH_PROTECTION_RULEEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:10227:3: (enumLiteral_1= Check_run )
                    {
                    // InternalGitHubActionsParser.g:10227:3: (enumLiteral_1= Check_run )
                    // InternalGitHubActionsParser.g:10228:4: enumLiteral_1= Check_run
                    {
                    enumLiteral_1=(Token)match(input,Check_run,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getCHECK_RUNEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getEVENTAccess().getCHECK_RUNEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:10235:3: (enumLiteral_2= Check_suite )
                    {
                    // InternalGitHubActionsParser.g:10235:3: (enumLiteral_2= Check_suite )
                    // InternalGitHubActionsParser.g:10236:4: enumLiteral_2= Check_suite
                    {
                    enumLiteral_2=(Token)match(input,Check_suite,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getCHECK_SUITEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getEVENTAccess().getCHECK_SUITEEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:10243:3: (enumLiteral_3= Create )
                    {
                    // InternalGitHubActionsParser.g:10243:3: (enumLiteral_3= Create )
                    // InternalGitHubActionsParser.g:10244:4: enumLiteral_3= Create
                    {
                    enumLiteral_3=(Token)match(input,Create,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getCREATEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getEVENTAccess().getCREATEEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:10251:3: (enumLiteral_4= Delete )
                    {
                    // InternalGitHubActionsParser.g:10251:3: (enumLiteral_4= Delete )
                    // InternalGitHubActionsParser.g:10252:4: enumLiteral_4= Delete
                    {
                    enumLiteral_4=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDELETEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getEVENTAccess().getDELETEEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:10259:3: (enumLiteral_5= Deployment )
                    {
                    // InternalGitHubActionsParser.g:10259:3: (enumLiteral_5= Deployment )
                    // InternalGitHubActionsParser.g:10260:4: enumLiteral_5= Deployment
                    {
                    enumLiteral_5=(Token)match(input,Deployment,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDEPLOYMENTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getEVENTAccess().getDEPLOYMENTEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:10267:3: (enumLiteral_6= Deployment_status )
                    {
                    // InternalGitHubActionsParser.g:10267:3: (enumLiteral_6= Deployment_status )
                    // InternalGitHubActionsParser.g:10268:4: enumLiteral_6= Deployment_status
                    {
                    enumLiteral_6=(Token)match(input,Deployment_status,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDEPLOYMENT_STATUSEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getEVENTAccess().getDEPLOYMENT_STATUSEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:10275:3: (enumLiteral_7= Discussion )
                    {
                    // InternalGitHubActionsParser.g:10275:3: (enumLiteral_7= Discussion )
                    // InternalGitHubActionsParser.g:10276:4: enumLiteral_7= Discussion
                    {
                    enumLiteral_7=(Token)match(input,Discussion,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getDISCUSSIONEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getEVENTAccess().getDISCUSSIONEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:10283:3: (enumLiteral_8= Fork )
                    {
                    // InternalGitHubActionsParser.g:10283:3: (enumLiteral_8= Fork )
                    // InternalGitHubActionsParser.g:10284:4: enumLiteral_8= Fork
                    {
                    enumLiteral_8=(Token)match(input,Fork,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getFORKEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getEVENTAccess().getFORKEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:10291:3: (enumLiteral_9= Gollum )
                    {
                    // InternalGitHubActionsParser.g:10291:3: (enumLiteral_9= Gollum )
                    // InternalGitHubActionsParser.g:10292:4: enumLiteral_9= Gollum
                    {
                    enumLiteral_9=(Token)match(input,Gollum,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getGOLLUMEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getEVENTAccess().getGOLLUMEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:10299:3: (enumLiteral_10= Issues )
                    {
                    // InternalGitHubActionsParser.g:10299:3: (enumLiteral_10= Issues )
                    // InternalGitHubActionsParser.g:10300:4: enumLiteral_10= Issues
                    {
                    enumLiteral_10=(Token)match(input,Issues,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getISSUESEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getEVENTAccess().getISSUESEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:10307:3: (enumLiteral_11= Label )
                    {
                    // InternalGitHubActionsParser.g:10307:3: (enumLiteral_11= Label )
                    // InternalGitHubActionsParser.g:10308:4: enumLiteral_11= Label
                    {
                    enumLiteral_11=(Token)match(input,Label,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getLABELEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getEVENTAccess().getLABELEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalGitHubActionsParser.g:10315:3: (enumLiteral_12= Merge_group )
                    {
                    // InternalGitHubActionsParser.g:10315:3: (enumLiteral_12= Merge_group )
                    // InternalGitHubActionsParser.g:10316:4: enumLiteral_12= Merge_group
                    {
                    enumLiteral_12=(Token)match(input,Merge_group,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getMERGE_GROUPEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getEVENTAccess().getMERGE_GROUPEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;
                case 14 :
                    // InternalGitHubActionsParser.g:10323:3: (enumLiteral_13= Milestone )
                    {
                    // InternalGitHubActionsParser.g:10323:3: (enumLiteral_13= Milestone )
                    // InternalGitHubActionsParser.g:10324:4: enumLiteral_13= Milestone
                    {
                    enumLiteral_13=(Token)match(input,Milestone,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getMILESTONEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_13, grammarAccess.getEVENTAccess().getMILESTONEEnumLiteralDeclaration_13());
                      			
                    }

                    }


                    }
                    break;
                case 15 :
                    // InternalGitHubActionsParser.g:10331:3: (enumLiteral_14= Page_build )
                    {
                    // InternalGitHubActionsParser.g:10331:3: (enumLiteral_14= Page_build )
                    // InternalGitHubActionsParser.g:10332:4: enumLiteral_14= Page_build
                    {
                    enumLiteral_14=(Token)match(input,Page_build,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPAGE_BUILDEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_14, grammarAccess.getEVENTAccess().getPAGE_BUILDEnumLiteralDeclaration_14());
                      			
                    }

                    }


                    }
                    break;
                case 16 :
                    // InternalGitHubActionsParser.g:10339:3: (enumLiteral_15= Project )
                    {
                    // InternalGitHubActionsParser.g:10339:3: (enumLiteral_15= Project )
                    // InternalGitHubActionsParser.g:10340:4: enumLiteral_15= Project
                    {
                    enumLiteral_15=(Token)match(input,Project,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPROJECTEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_15, grammarAccess.getEVENTAccess().getPROJECTEnumLiteralDeclaration_15());
                      			
                    }

                    }


                    }
                    break;
                case 17 :
                    // InternalGitHubActionsParser.g:10347:3: (enumLiteral_16= Project_card )
                    {
                    // InternalGitHubActionsParser.g:10347:3: (enumLiteral_16= Project_card )
                    // InternalGitHubActionsParser.g:10348:4: enumLiteral_16= Project_card
                    {
                    enumLiteral_16=(Token)match(input,Project_card,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPROJECT_CARDEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_16, grammarAccess.getEVENTAccess().getPROJECT_CARDEnumLiteralDeclaration_16());
                      			
                    }

                    }


                    }
                    break;
                case 18 :
                    // InternalGitHubActionsParser.g:10355:3: (enumLiteral_17= Project_column )
                    {
                    // InternalGitHubActionsParser.g:10355:3: (enumLiteral_17= Project_column )
                    // InternalGitHubActionsParser.g:10356:4: enumLiteral_17= Project_column
                    {
                    enumLiteral_17=(Token)match(input,Project_column,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPROJECT_COLUMNEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_17, grammarAccess.getEVENTAccess().getPROJECT_COLUMNEnumLiteralDeclaration_17());
                      			
                    }

                    }


                    }
                    break;
                case 19 :
                    // InternalGitHubActionsParser.g:10363:3: (enumLiteral_18= Public )
                    {
                    // InternalGitHubActionsParser.g:10363:3: (enumLiteral_18= Public )
                    // InternalGitHubActionsParser.g:10364:4: enumLiteral_18= Public
                    {
                    enumLiteral_18=(Token)match(input,Public,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPUBLICEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_18, grammarAccess.getEVENTAccess().getPUBLICEnumLiteralDeclaration_18());
                      			
                    }

                    }


                    }
                    break;
                case 20 :
                    // InternalGitHubActionsParser.g:10371:3: (enumLiteral_19= Pull_request_review )
                    {
                    // InternalGitHubActionsParser.g:10371:3: (enumLiteral_19= Pull_request_review )
                    // InternalGitHubActionsParser.g:10372:4: enumLiteral_19= Pull_request_review
                    {
                    enumLiteral_19=(Token)match(input,Pull_request_review,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEWEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_19, grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEWEnumLiteralDeclaration_19());
                      			
                    }

                    }


                    }
                    break;
                case 21 :
                    // InternalGitHubActionsParser.g:10379:3: (enumLiteral_20= Pull_request_review_comment )
                    {
                    // InternalGitHubActionsParser.g:10379:3: (enumLiteral_20= Pull_request_review_comment )
                    // InternalGitHubActionsParser.g:10380:4: enumLiteral_20= Pull_request_review_comment
                    {
                    enumLiteral_20=(Token)match(input,Pull_request_review_comment,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_20, grammarAccess.getEVENTAccess().getPULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_20());
                      			
                    }

                    }


                    }
                    break;
                case 22 :
                    // InternalGitHubActionsParser.g:10387:3: (enumLiteral_21= Registry_package )
                    {
                    // InternalGitHubActionsParser.g:10387:3: (enumLiteral_21= Registry_package )
                    // InternalGitHubActionsParser.g:10388:4: enumLiteral_21= Registry_package
                    {
                    enumLiteral_21=(Token)match(input,Registry_package,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getREGISTRY_PACKAGEEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_21, grammarAccess.getEVENTAccess().getREGISTRY_PACKAGEEnumLiteralDeclaration_21());
                      			
                    }

                    }


                    }
                    break;
                case 23 :
                    // InternalGitHubActionsParser.g:10395:3: (enumLiteral_22= Release )
                    {
                    // InternalGitHubActionsParser.g:10395:3: (enumLiteral_22= Release )
                    // InternalGitHubActionsParser.g:10396:4: enumLiteral_22= Release
                    {
                    enumLiteral_22=(Token)match(input,Release,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getRELEASEEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_22, grammarAccess.getEVENTAccess().getRELEASEEnumLiteralDeclaration_22());
                      			
                    }

                    }


                    }
                    break;
                case 24 :
                    // InternalGitHubActionsParser.g:10403:3: (enumLiteral_23= Repository_dispatch )
                    {
                    // InternalGitHubActionsParser.g:10403:3: (enumLiteral_23= Repository_dispatch )
                    // InternalGitHubActionsParser.g:10404:4: enumLiteral_23= Repository_dispatch
                    {
                    enumLiteral_23=(Token)match(input,Repository_dispatch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getREPOSITORY_DISPATCHEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_23, grammarAccess.getEVENTAccess().getREPOSITORY_DISPATCHEnumLiteralDeclaration_23());
                      			
                    }

                    }


                    }
                    break;
                case 25 :
                    // InternalGitHubActionsParser.g:10411:3: (enumLiteral_24= Watch )
                    {
                    // InternalGitHubActionsParser.g:10411:3: (enumLiteral_24= Watch )
                    // InternalGitHubActionsParser.g:10412:4: enumLiteral_24= Watch
                    {
                    enumLiteral_24=(Token)match(input,Watch,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getWATCHEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_24, grammarAccess.getEVENTAccess().getWATCHEnumLiteralDeclaration_24());
                      			
                    }

                    }


                    }
                    break;
                case 26 :
                    // InternalGitHubActionsParser.g:10419:3: (enumLiteral_25= Status )
                    {
                    // InternalGitHubActionsParser.g:10419:3: (enumLiteral_25= Status )
                    // InternalGitHubActionsParser.g:10420:4: enumLiteral_25= Status
                    {
                    enumLiteral_25=(Token)match(input,Status,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getEVENTAccess().getSTATUSEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_25, grammarAccess.getEVENTAccess().getSTATUSEnumLiteralDeclaration_25());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEVENT"


    // $ANTLR start "rulePERMISSION_SCOPE"
    // InternalGitHubActionsParser.g:10430:1: rulePERMISSION_SCOPE returns [Enumerator current=null] : ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) ) ;
    public final Enumerator rulePERMISSION_SCOPE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:10436:2: ( ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) ) )
            // InternalGitHubActionsParser.g:10437:2: ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) )
            {
            // InternalGitHubActionsParser.g:10437:2: ( (enumLiteral_0= Actions ) | (enumLiteral_1= Checks ) | (enumLiteral_2= Contents ) | (enumLiteral_3= Deployments ) | (enumLiteral_4= Discussions ) | (enumLiteral_5= IdToken ) | (enumLiteral_6= Issues ) | (enumLiteral_7= Packages ) | (enumLiteral_8= Pages ) | (enumLiteral_9= Pull_requests ) | (enumLiteral_10= Repository_projects ) | (enumLiteral_11= Security_events ) | (enumLiteral_12= Statuses ) )
            int alt147=13;
            switch ( input.LA(1) ) {
            case Actions:
                {
                alt147=1;
                }
                break;
            case Checks:
                {
                alt147=2;
                }
                break;
            case Contents:
                {
                alt147=3;
                }
                break;
            case Deployments:
                {
                alt147=4;
                }
                break;
            case Discussions:
                {
                alt147=5;
                }
                break;
            case IdToken:
                {
                alt147=6;
                }
                break;
            case Issues:
                {
                alt147=7;
                }
                break;
            case Packages:
                {
                alt147=8;
                }
                break;
            case Pages:
                {
                alt147=9;
                }
                break;
            case Pull_requests:
                {
                alt147=10;
                }
                break;
            case Repository_projects:
                {
                alt147=11;
                }
                break;
            case Security_events:
                {
                alt147=12;
                }
                break;
            case Statuses:
                {
                alt147=13;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // InternalGitHubActionsParser.g:10438:3: (enumLiteral_0= Actions )
                    {
                    // InternalGitHubActionsParser.g:10438:3: (enumLiteral_0= Actions )
                    // InternalGitHubActionsParser.g:10439:4: enumLiteral_0= Actions
                    {
                    enumLiteral_0=(Token)match(input,Actions,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getACTIONSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPERMISSION_SCOPEAccess().getACTIONSEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:10446:3: (enumLiteral_1= Checks )
                    {
                    // InternalGitHubActionsParser.g:10446:3: (enumLiteral_1= Checks )
                    // InternalGitHubActionsParser.g:10447:4: enumLiteral_1= Checks
                    {
                    enumLiteral_1=(Token)match(input,Checks,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getCHECKSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPERMISSION_SCOPEAccess().getCHECKSEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:10454:3: (enumLiteral_2= Contents )
                    {
                    // InternalGitHubActionsParser.g:10454:3: (enumLiteral_2= Contents )
                    // InternalGitHubActionsParser.g:10455:4: enumLiteral_2= Contents
                    {
                    enumLiteral_2=(Token)match(input,Contents,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getCONTENTSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getPERMISSION_SCOPEAccess().getCONTENTSEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalGitHubActionsParser.g:10462:3: (enumLiteral_3= Deployments )
                    {
                    // InternalGitHubActionsParser.g:10462:3: (enumLiteral_3= Deployments )
                    // InternalGitHubActionsParser.g:10463:4: enumLiteral_3= Deployments
                    {
                    enumLiteral_3=(Token)match(input,Deployments,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getDEPLOYMENTSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_3, grammarAccess.getPERMISSION_SCOPEAccess().getDEPLOYMENTSEnumLiteralDeclaration_3());
                      			
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalGitHubActionsParser.g:10470:3: (enumLiteral_4= Discussions )
                    {
                    // InternalGitHubActionsParser.g:10470:3: (enumLiteral_4= Discussions )
                    // InternalGitHubActionsParser.g:10471:4: enumLiteral_4= Discussions
                    {
                    enumLiteral_4=(Token)match(input,Discussions,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getDISCUSSIONSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_4, grammarAccess.getPERMISSION_SCOPEAccess().getDISCUSSIONSEnumLiteralDeclaration_4());
                      			
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalGitHubActionsParser.g:10478:3: (enumLiteral_5= IdToken )
                    {
                    // InternalGitHubActionsParser.g:10478:3: (enumLiteral_5= IdToken )
                    // InternalGitHubActionsParser.g:10479:4: enumLiteral_5= IdToken
                    {
                    enumLiteral_5=(Token)match(input,IdToken,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getID_TOKENEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_5, grammarAccess.getPERMISSION_SCOPEAccess().getID_TOKENEnumLiteralDeclaration_5());
                      			
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalGitHubActionsParser.g:10486:3: (enumLiteral_6= Issues )
                    {
                    // InternalGitHubActionsParser.g:10486:3: (enumLiteral_6= Issues )
                    // InternalGitHubActionsParser.g:10487:4: enumLiteral_6= Issues
                    {
                    enumLiteral_6=(Token)match(input,Issues,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getISSUESEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_6, grammarAccess.getPERMISSION_SCOPEAccess().getISSUESEnumLiteralDeclaration_6());
                      			
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalGitHubActionsParser.g:10494:3: (enumLiteral_7= Packages )
                    {
                    // InternalGitHubActionsParser.g:10494:3: (enumLiteral_7= Packages )
                    // InternalGitHubActionsParser.g:10495:4: enumLiteral_7= Packages
                    {
                    enumLiteral_7=(Token)match(input,Packages,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getPACKAGESEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_7, grammarAccess.getPERMISSION_SCOPEAccess().getPACKAGESEnumLiteralDeclaration_7());
                      			
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalGitHubActionsParser.g:10502:3: (enumLiteral_8= Pages )
                    {
                    // InternalGitHubActionsParser.g:10502:3: (enumLiteral_8= Pages )
                    // InternalGitHubActionsParser.g:10503:4: enumLiteral_8= Pages
                    {
                    enumLiteral_8=(Token)match(input,Pages,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getPAGESEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_8, grammarAccess.getPERMISSION_SCOPEAccess().getPAGESEnumLiteralDeclaration_8());
                      			
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalGitHubActionsParser.g:10510:3: (enumLiteral_9= Pull_requests )
                    {
                    // InternalGitHubActionsParser.g:10510:3: (enumLiteral_9= Pull_requests )
                    // InternalGitHubActionsParser.g:10511:4: enumLiteral_9= Pull_requests
                    {
                    enumLiteral_9=(Token)match(input,Pull_requests,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getPULL_REQUESTSEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_9, grammarAccess.getPERMISSION_SCOPEAccess().getPULL_REQUESTSEnumLiteralDeclaration_9());
                      			
                    }

                    }


                    }
                    break;
                case 11 :
                    // InternalGitHubActionsParser.g:10518:3: (enumLiteral_10= Repository_projects )
                    {
                    // InternalGitHubActionsParser.g:10518:3: (enumLiteral_10= Repository_projects )
                    // InternalGitHubActionsParser.g:10519:4: enumLiteral_10= Repository_projects
                    {
                    enumLiteral_10=(Token)match(input,Repository_projects,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getREPOSITORY_PROJECTSEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_10, grammarAccess.getPERMISSION_SCOPEAccess().getREPOSITORY_PROJECTSEnumLiteralDeclaration_10());
                      			
                    }

                    }


                    }
                    break;
                case 12 :
                    // InternalGitHubActionsParser.g:10526:3: (enumLiteral_11= Security_events )
                    {
                    // InternalGitHubActionsParser.g:10526:3: (enumLiteral_11= Security_events )
                    // InternalGitHubActionsParser.g:10527:4: enumLiteral_11= Security_events
                    {
                    enumLiteral_11=(Token)match(input,Security_events,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getSECURITY_EVENTSEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_11, grammarAccess.getPERMISSION_SCOPEAccess().getSECURITY_EVENTSEnumLiteralDeclaration_11());
                      			
                    }

                    }


                    }
                    break;
                case 13 :
                    // InternalGitHubActionsParser.g:10534:3: (enumLiteral_12= Statuses )
                    {
                    // InternalGitHubActionsParser.g:10534:3: (enumLiteral_12= Statuses )
                    // InternalGitHubActionsParser.g:10535:4: enumLiteral_12= Statuses
                    {
                    enumLiteral_12=(Token)match(input,Statuses,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_SCOPEAccess().getSTATUSESEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_12, grammarAccess.getPERMISSION_SCOPEAccess().getSTATUSESEnumLiteralDeclaration_12());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePERMISSION_SCOPE"


    // $ANTLR start "rulePERMISSION_VALUE"
    // InternalGitHubActionsParser.g:10545:1: rulePERMISSION_VALUE returns [Enumerator current=null] : ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) ) ;
    public final Enumerator rulePERMISSION_VALUE() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;


        	enterRule();

        try {
            // InternalGitHubActionsParser.g:10551:2: ( ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) ) )
            // InternalGitHubActionsParser.g:10552:2: ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) )
            {
            // InternalGitHubActionsParser.g:10552:2: ( (enumLiteral_0= Read ) | (enumLiteral_1= Write ) | (enumLiteral_2= None ) )
            int alt148=3;
            switch ( input.LA(1) ) {
            case Read:
                {
                alt148=1;
                }
                break;
            case Write:
                {
                alt148=2;
                }
                break;
            case None:
                {
                alt148=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return current;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // InternalGitHubActionsParser.g:10553:3: (enumLiteral_0= Read )
                    {
                    // InternalGitHubActionsParser.g:10553:3: (enumLiteral_0= Read )
                    // InternalGitHubActionsParser.g:10554:4: enumLiteral_0= Read
                    {
                    enumLiteral_0=(Token)match(input,Read,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_VALUEAccess().getREADEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_0, grammarAccess.getPERMISSION_VALUEAccess().getREADEnumLiteralDeclaration_0());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalGitHubActionsParser.g:10561:3: (enumLiteral_1= Write )
                    {
                    // InternalGitHubActionsParser.g:10561:3: (enumLiteral_1= Write )
                    // InternalGitHubActionsParser.g:10562:4: enumLiteral_1= Write
                    {
                    enumLiteral_1=(Token)match(input,Write,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_VALUEAccess().getWRITEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_1, grammarAccess.getPERMISSION_VALUEAccess().getWRITEEnumLiteralDeclaration_1());
                      			
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalGitHubActionsParser.g:10569:3: (enumLiteral_2= None )
                    {
                    // InternalGitHubActionsParser.g:10569:3: (enumLiteral_2= None )
                    // InternalGitHubActionsParser.g:10570:4: enumLiteral_2= None
                    {
                    enumLiteral_2=(Token)match(input,None,FOLLOW_2); if (state.failed) return current;
                    if ( state.backtracking==0 ) {

                      				current = grammarAccess.getPERMISSION_VALUEAccess().getNONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                      				newLeafNode(enumLiteral_2, grammarAccess.getPERMISSION_VALUEAccess().getNONEEnumLiteralDeclaration_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePERMISSION_VALUE"

    // $ANTLR start synpred1_InternalGitHubActionsParser
    public final void synpred1_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_2=null;
        EObject lv_name_3_0 = null;


        // InternalGitHubActionsParser.g:96:3: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:96:3: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:96:3: ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:97:4: {...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred1_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:97:102: ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:98:5: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:101:8: ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:101:9: {...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred1_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:101:18: (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:101:19: otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) )
        {
        otherlv_1=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:109:8: ( (lv_name_3_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:110:9: (lv_name_3_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:110:9: (lv_name_3_0= ruleExpression )
        // InternalGitHubActionsParser.g:111:10: lv_name_3_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getWorkflowAccess().getNameExpressionParserRuleCall_0_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_name_3_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred1_InternalGitHubActionsParser

    // $ANTLR start synpred2_InternalGitHubActionsParser
    public final void synpred2_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_4=null;
        Token otherlv_5=null;
        EObject lv_runName_6_0 = null;


        // InternalGitHubActionsParser.g:134:3: ( ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:134:3: ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:134:3: ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:135:4: {...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:135:102: ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:136:5: ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:139:8: ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:139:9: {...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred2_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:139:18: (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:139:19: otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) )
        {
        otherlv_4=(Token)match(input,RunName,FOLLOW_3); if (state.failed) return ;
        otherlv_5=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:147:8: ( (lv_runName_6_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:148:9: (lv_runName_6_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:148:9: (lv_runName_6_0= ruleExpression )
        // InternalGitHubActionsParser.g:149:10: lv_runName_6_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getWorkflowAccess().getRunNameExpressionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_runName_6_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred2_InternalGitHubActionsParser

    // $ANTLR start synpred9_InternalGitHubActionsParser
    public final void synpred9_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token otherlv_14=null;
        Token this_BEGIN_15=null;
        Token otherlv_16=null;
        Token this_NEWLINE_18=null;
        Token this_END_19=null;
        EObject lv_triggers_9_0 = null;

        EObject lv_triggers_11_0 = null;

        EObject lv_triggers_13_0 = null;

        EObject lv_triggers_17_0 = null;

        EObject lv_triggers_20_0 = null;


        // InternalGitHubActionsParser.g:172:3: ( ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) )
        // InternalGitHubActionsParser.g:172:3: ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:172:3: ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:173:4: {...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:173:102: ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:174:5: ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:177:8: ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) )
        // InternalGitHubActionsParser.g:177:9: {...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred9_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:177:18: (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) )
        // InternalGitHubActionsParser.g:177:19: otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ )
        {
        otherlv_7=(Token)match(input,On,FOLLOW_3); if (state.failed) return ;
        otherlv_8=(Token)match(input,Colon,FOLLOW_6); if (state.failed) return ;
        // InternalGitHubActionsParser.g:185:8: ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ )
        int alt154=4;
        alt154 = dfa154.predict(input);
        switch (alt154) {
            case 1 :
                // InternalGitHubActionsParser.g:186:9: ( (lv_triggers_9_0= ruleSimpleTrigger ) )
                {
                // InternalGitHubActionsParser.g:186:9: ( (lv_triggers_9_0= ruleSimpleTrigger ) )
                // InternalGitHubActionsParser.g:187:10: (lv_triggers_9_0= ruleSimpleTrigger )
                {
                // InternalGitHubActionsParser.g:187:10: (lv_triggers_9_0= ruleSimpleTrigger )
                // InternalGitHubActionsParser.g:188:11: lv_triggers_9_0= ruleSimpleTrigger
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_0_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_triggers_9_0=ruleSimpleTrigger();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:206:9: (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:206:9: (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket )
                // InternalGitHubActionsParser.g:207:10: otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket
                {
                otherlv_10=(Token)match(input,LeftSquareBracket,FOLLOW_7); if (state.failed) return ;
                // InternalGitHubActionsParser.g:211:10: ( (lv_triggers_11_0= ruleSimpleTrigger ) )
                // InternalGitHubActionsParser.g:212:11: (lv_triggers_11_0= ruleSimpleTrigger )
                {
                // InternalGitHubActionsParser.g:212:11: (lv_triggers_11_0= ruleSimpleTrigger )
                // InternalGitHubActionsParser.g:213:12: lv_triggers_11_0= ruleSimpleTrigger
                {
                if ( state.backtracking==0 ) {

                  												newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_1_1_0());
                  											
                }
                pushFollow(FOLLOW_8);
                lv_triggers_11_0=ruleSimpleTrigger();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:230:10: (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )*
                loop151:
                do {
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==Comma) ) {
                        alt151=1;
                    }


                    switch (alt151) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:231:11: otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) )
                	    {
                	    otherlv_12=(Token)match(input,Comma,FOLLOW_7); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:235:11: ( (lv_triggers_13_0= ruleSimpleTrigger ) )
                	    // InternalGitHubActionsParser.g:236:12: (lv_triggers_13_0= ruleSimpleTrigger )
                	    {
                	    // InternalGitHubActionsParser.g:236:12: (lv_triggers_13_0= ruleSimpleTrigger )
                	    // InternalGitHubActionsParser.g:237:13: lv_triggers_13_0= ruleSimpleTrigger
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_1_2_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_triggers_13_0=ruleSimpleTrigger();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop151;
                    }
                } while (true);

                otherlv_14=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:261:9: (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END )
                {
                // InternalGitHubActionsParser.g:261:9: (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END )
                // InternalGitHubActionsParser.g:262:10: this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END
                {
                this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:266:10: (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+
                int cnt152=0;
                loop152:
                do {
                    int alt152=2;
                    int LA152_0 = input.LA(1);

                    if ( (LA152_0==HyphenMinus) ) {
                        alt152=1;
                    }


                    switch (alt152) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:267:11: otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE
                	    {
                	    otherlv_16=(Token)match(input,HyphenMinus,FOLLOW_7); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:271:11: ( (lv_triggers_17_0= ruleSimpleTrigger ) )
                	    // InternalGitHubActionsParser.g:272:12: (lv_triggers_17_0= ruleSimpleTrigger )
                	    {
                	    // InternalGitHubActionsParser.g:272:12: (lv_triggers_17_0= ruleSimpleTrigger )
                	    // InternalGitHubActionsParser.g:273:13: lv_triggers_17_0= ruleSimpleTrigger
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersSimpleTriggerParserRuleCall_2_2_2_1_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_triggers_17_0=ruleSimpleTrigger();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_18=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt152 >= 1 ) break loop152;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(152, input);
                            throw eee;
                    }
                    cnt152++;
                } while (true);

                this_END_19=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 4 :
                // InternalGitHubActionsParser.g:301:9: ( (lv_triggers_20_0= ruleOptionedTrigger ) )+
                {
                // InternalGitHubActionsParser.g:301:9: ( (lv_triggers_20_0= ruleOptionedTrigger ) )+
                int cnt153=0;
                loop153:
                do {
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==Pull_request_target||LA153_0==Workflow_dispatch||LA153_0==Workflow_call||(LA153_0>=Pull_request && LA153_0<=Workflow_run)||LA153_0==Schedule||LA153_0==Push||LA153_0==LeftSquareBracket||LA153_0==RULE_BEGIN) ) {
                        alt153=1;
                    }


                    switch (alt153) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:302:10: (lv_triggers_20_0= ruleOptionedTrigger )
                	    {
                	    // InternalGitHubActionsParser.g:302:10: (lv_triggers_20_0= ruleOptionedTrigger )
                	    // InternalGitHubActionsParser.g:303:11: lv_triggers_20_0= ruleOptionedTrigger
                	    {
                	    if ( state.backtracking==0 ) {

                	      											newCompositeNode(grammarAccess.getWorkflowAccess().getTriggersOptionedTriggerParserRuleCall_2_2_3_0());
                	      										
                	    }
                	    pushFollow(FOLLOW_98);
                	    lv_triggers_20_0=ruleOptionedTrigger();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt153 >= 1 ) break loop153;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(153, input);
                            throw eee;
                    }
                    cnt153++;
                } while (true);


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred9_InternalGitHubActionsParser

    // $ANTLR start synpred11_InternalGitHubActionsParser
    public final void synpred11_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_21=null;
        Token otherlv_22=null;
        EObject lv_permissions_23_0 = null;


        // InternalGitHubActionsParser.g:327:3: ( ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:327:3: ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:327:3: ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:328:4: {...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred11_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:328:102: ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) )
        // InternalGitHubActionsParser.g:329:5: ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:332:8: ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) )
        // InternalGitHubActionsParser.g:332:9: {...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred11_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:332:18: (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ )
        // InternalGitHubActionsParser.g:332:19: otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+
        {
        otherlv_21=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return ;
        otherlv_22=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:340:8: ( (lv_permissions_23_0= rulePermission ) )+
        int cnt155=0;
        loop155:
        do {
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==RULE_BEGIN) ) {
                alt155=1;
            }


            switch (alt155) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:341:9: (lv_permissions_23_0= rulePermission )
        	    {
        	    // InternalGitHubActionsParser.g:341:9: (lv_permissions_23_0= rulePermission )
        	    // InternalGitHubActionsParser.g:342:10: lv_permissions_23_0= rulePermission
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getWorkflowAccess().getPermissionsPermissionParserRuleCall_3_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_permissions_23_0=rulePermission();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt155 >= 1 ) break loop155;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(155, input);
                    throw eee;
            }
            cnt155++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred11_InternalGitHubActionsParser

    // $ANTLR start synpred13_InternalGitHubActionsParser
    public final void synpred13_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_24=null;
        Token otherlv_25=null;
        EObject lv_environmentVariables_26_0 = null;


        // InternalGitHubActionsParser.g:365:3: ( ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:365:3: ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:365:3: ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:366:4: {...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred13_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:366:102: ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:367:5: ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:370:8: ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:370:9: {...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred13_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:370:18: (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ )
        // InternalGitHubActionsParser.g:370:19: otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+
        {
        otherlv_24=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_25=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:378:8: ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+
        int cnt156=0;
        loop156:
        do {
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==RULE_BEGIN) ) {
                alt156=1;
            }


            switch (alt156) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:379:9: (lv_environmentVariables_26_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:379:9: (lv_environmentVariables_26_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:380:10: lv_environmentVariables_26_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getWorkflowAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_4_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_environmentVariables_26_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt156 >= 1 ) break loop156;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(156, input);
                    throw eee;
            }
            cnt156++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred13_InternalGitHubActionsParser

    // $ANTLR start synpred14_InternalGitHubActionsParser
    public final void synpred14_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_27=null;
        Token otherlv_28=null;
        EObject lv_defaults_29_0 = null;


        // InternalGitHubActionsParser.g:403:3: ( ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:403:3: ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:403:3: ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) )
        // InternalGitHubActionsParser.g:404:4: {...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred14_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:404:102: ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) )
        // InternalGitHubActionsParser.g:405:5: ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:408:8: ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) )
        // InternalGitHubActionsParser.g:408:9: {...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred14_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:408:18: (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) )
        // InternalGitHubActionsParser.g:408:19: otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) )
        {
        otherlv_27=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return ;
        otherlv_28=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:416:8: ( (lv_defaults_29_0= ruleDefaults ) )
        // InternalGitHubActionsParser.g:417:9: (lv_defaults_29_0= ruleDefaults )
        {
        // InternalGitHubActionsParser.g:417:9: (lv_defaults_29_0= ruleDefaults )
        // InternalGitHubActionsParser.g:418:10: lv_defaults_29_0= ruleDefaults
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getWorkflowAccess().getDefaultsDefaultsParserRuleCall_5_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_defaults_29_0=ruleDefaults();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred14_InternalGitHubActionsParser

    // $ANTLR start synpred15_InternalGitHubActionsParser
    public final void synpred15_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_30=null;
        Token otherlv_31=null;
        EObject lv_concurrencyGroup_32_0 = null;


        // InternalGitHubActionsParser.g:441:3: ( ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:441:3: ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:441:3: ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) )
        // InternalGitHubActionsParser.g:442:4: {...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:442:102: ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) )
        // InternalGitHubActionsParser.g:443:5: ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:446:8: ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) )
        // InternalGitHubActionsParser.g:446:9: {...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred15_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:446:18: (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) )
        // InternalGitHubActionsParser.g:446:19: otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) )
        {
        otherlv_30=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return ;
        otherlv_31=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:454:8: ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) )
        // InternalGitHubActionsParser.g:455:9: (lv_concurrencyGroup_32_0= ruleConcurrencyGroup )
        {
        // InternalGitHubActionsParser.g:455:9: (lv_concurrencyGroup_32_0= ruleConcurrencyGroup )
        // InternalGitHubActionsParser.g:456:10: lv_concurrencyGroup_32_0= ruleConcurrencyGroup
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getWorkflowAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_concurrencyGroup_32_0=ruleConcurrencyGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred15_InternalGitHubActionsParser

    // $ANTLR start synpred16_InternalGitHubActionsParser
    public final void synpred16_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_jobs_35_0 = null;


        // InternalGitHubActionsParser.g:493:9: ( (lv_jobs_35_0= ruleJob ) )
        // InternalGitHubActionsParser.g:493:9: (lv_jobs_35_0= ruleJob )
        {
        // InternalGitHubActionsParser.g:493:9: (lv_jobs_35_0= ruleJob )
        // InternalGitHubActionsParser.g:494:10: lv_jobs_35_0= ruleJob
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getWorkflowAccess().getJobsJobParserRuleCall_7_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_jobs_35_0=ruleJob();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred16_InternalGitHubActionsParser

    // $ANTLR start synpred17_InternalGitHubActionsParser
    public final void synpred17_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_33=null;
        Token otherlv_34=null;
        EObject lv_jobs_35_0 = null;


        // InternalGitHubActionsParser.g:479:3: ( ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:479:3: ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:479:3: ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:480:4: {...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:480:102: ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) )
        // InternalGitHubActionsParser.g:481:5: ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:484:8: ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) )
        // InternalGitHubActionsParser.g:484:9: {...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred17_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:484:18: (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ )
        // InternalGitHubActionsParser.g:484:19: otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+
        {
        otherlv_33=(Token)match(input,Jobs,FOLLOW_3); if (state.failed) return ;
        otherlv_34=(Token)match(input,Colon,FOLLOW_15); if (state.failed) return ;
        // InternalGitHubActionsParser.g:492:8: ( (lv_jobs_35_0= ruleJob ) )+
        int cnt157=0;
        loop157:
        do {
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==ContinueOnError||LA157_0==TimeoutMinutes||LA157_0==Concurrency||LA157_0==Environment||LA157_0==Permissions||LA157_0==Container||LA157_0==Defaults||LA157_0==Services||LA157_0==Strategy||(LA157_0>=RunsOn && LA157_0<=Secrets)||LA157_0==Needs||LA157_0==Steps||LA157_0==Uses||LA157_0==With||LA157_0==Env||LA157_0==If||LA157_0==LeftSquareBracket||(LA157_0>=RULE_BEGIN && LA157_0<=RULE_END)) ) {
                alt157=1;
            }


            switch (alt157) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:493:9: (lv_jobs_35_0= ruleJob )
        	    {
        	    // InternalGitHubActionsParser.g:493:9: (lv_jobs_35_0= ruleJob )
        	    // InternalGitHubActionsParser.g:494:10: lv_jobs_35_0= ruleJob
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getWorkflowAccess().getJobsJobParserRuleCall_7_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_100);
        	    lv_jobs_35_0=ruleJob();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt157 >= 1 ) break loop157;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(157, input);
                    throw eee;
            }
            cnt157++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred17_InternalGitHubActionsParser

    // $ANTLR start synpred18_InternalGitHubActionsParser
    public final void synpred18_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject this_ScriptJob_0 = null;


        // InternalGitHubActionsParser.g:546:3: (this_ScriptJob_0= ruleScriptJob )
        // InternalGitHubActionsParser.g:546:3: this_ScriptJob_0= ruleScriptJob
        {
        if ( state.backtracking==0 ) {

          			/* */
          		
        }
        pushFollow(FOLLOW_2);
        this_ScriptJob_0=ruleScriptJob();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred18_InternalGitHubActionsParser

    // $ANTLR start synpred19_InternalGitHubActionsParser
    public final void synpred19_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jobName_7_0 = null;


        // InternalGitHubActionsParser.g:640:9: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:640:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) )
        {
        otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:648:9: ( (lv_jobName_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:649:10: (lv_jobName_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:649:10: (lv_jobName_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:650:11: lv_jobName_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getScriptJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_jobName_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred19_InternalGitHubActionsParser

    // $ANTLR start synpred20_InternalGitHubActionsParser
    public final void synpred20_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_1=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jobName_7_0 = null;


        // InternalGitHubActionsParser.g:604:3: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:604:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:604:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
        // InternalGitHubActionsParser.g:605:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred20_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:605:103: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
        // InternalGitHubActionsParser.g:606:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:609:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
        // InternalGitHubActionsParser.g:609:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred20_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:609:18: (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
        // InternalGitHubActionsParser.g:609:19: this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
        {
        this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return ;
        // InternalGitHubActionsParser.g:613:8: ( (lv_name_2_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:614:9: (lv_name_2_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:614:9: (lv_name_2_0= RULE_ID )
        // InternalGitHubActionsParser.g:615:10: lv_name_2_0= RULE_ID
        {
        lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_101); if (state.failed) return ;
        // InternalGitHubActionsParser.g:639:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
        int alt158=2;
        int LA158_0 = input.LA(1);

        if ( (LA158_0==Name) ) {
            alt158=1;
        }
        switch (alt158) {
            case 1 :
                // InternalGitHubActionsParser.g:640:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) )
                {
                otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:648:9: ( (lv_jobName_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:649:10: (lv_jobName_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:649:10: (lv_jobName_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:650:11: lv_jobName_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getScriptJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_jobName_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred20_InternalGitHubActionsParser

    // $ANTLR start synpred22_InternalGitHubActionsParser
    public final void synpred22_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_permissions_10_0 = null;


        // InternalGitHubActionsParser.g:674:3: ( ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:674:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:674:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:675:4: {...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred22_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:675:103: ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
        // InternalGitHubActionsParser.g:676:5: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:679:8: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
        // InternalGitHubActionsParser.g:679:9: {...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred22_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:679:18: (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
        // InternalGitHubActionsParser.g:679:19: otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+
        {
        otherlv_8=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:687:8: ( (lv_permissions_10_0= rulePermission ) )+
        int cnt159=0;
        loop159:
        do {
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==RULE_BEGIN) ) {
                alt159=1;
            }


            switch (alt159) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:688:9: (lv_permissions_10_0= rulePermission )
        	    {
        	    // InternalGitHubActionsParser.g:688:9: (lv_permissions_10_0= rulePermission )
        	    // InternalGitHubActionsParser.g:689:10: lv_permissions_10_0= rulePermission
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getPermissionsPermissionParserRuleCall_1_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_permissions_10_0=rulePermission();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt159 >= 1 ) break loop159;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(159, input);
                    throw eee;
            }
            cnt159++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred22_InternalGitHubActionsParser

    // $ANTLR start synpred27_InternalGitHubActionsParser
    public final void synpred27_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_BEGIN_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token this_NEWLINE_22=null;
        Token this_END_23=null;

        // InternalGitHubActionsParser.g:712:3: ( ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:712:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:712:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:713:4: {...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred27_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:713:103: ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:714:5: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:717:8: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
        // InternalGitHubActionsParser.g:717:9: {...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred27_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:717:18: ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
        int alt163=3;
        switch ( input.LA(1) ) {
        case Needs:
            {
            alt163=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt163=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt163=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 163, 0, input);

            throw nvae;
        }

        switch (alt163) {
            case 1 :
                // InternalGitHubActionsParser.g:717:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
                {
                // InternalGitHubActionsParser.g:717:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
                // InternalGitHubActionsParser.g:718:9: otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) )
                {
                otherlv_11=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return ;
                otherlv_12=(Token)match(input,Colon,FOLLOW_17); if (state.failed) return ;
                // InternalGitHubActionsParser.g:726:9: ( (otherlv_13= RULE_ID ) )
                // InternalGitHubActionsParser.g:727:10: (otherlv_13= RULE_ID )
                {
                // InternalGitHubActionsParser.g:727:10: (otherlv_13= RULE_ID )
                // InternalGitHubActionsParser.g:728:11: otherlv_13= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  											/* */
                  										
                }
                otherlv_13=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:744:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:744:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
                // InternalGitHubActionsParser.g:745:9: otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket
                {
                otherlv_14=(Token)match(input,LeftSquareBracket,FOLLOW_17); if (state.failed) return ;
                // InternalGitHubActionsParser.g:749:9: ( (otherlv_15= RULE_ID ) )
                // InternalGitHubActionsParser.g:750:10: (otherlv_15= RULE_ID )
                {
                // InternalGitHubActionsParser.g:750:10: (otherlv_15= RULE_ID )
                // InternalGitHubActionsParser.g:751:11: otherlv_15= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  											/* */
                  										
                }
                otherlv_15=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:765:9: (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )*
                loop161:
                do {
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==Comma) ) {
                        alt161=1;
                    }


                    switch (alt161) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:766:10: otherlv_16= Comma ( (otherlv_17= RULE_ID ) )
                	    {
                	    otherlv_16=(Token)match(input,Comma,FOLLOW_17); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:770:10: ( (otherlv_17= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:771:11: (otherlv_17= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:771:11: (otherlv_17= RULE_ID )
                	    // InternalGitHubActionsParser.g:772:12: otherlv_17= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_17=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop161;
                    }
                } while (true);

                otherlv_18=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:793:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
                {
                // InternalGitHubActionsParser.g:793:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
                // InternalGitHubActionsParser.g:794:9: this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END
                {
                this_BEGIN_19=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:798:9: (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+
                int cnt162=0;
                loop162:
                do {
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==HyphenMinus) ) {
                        alt162=1;
                    }


                    switch (alt162) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:799:10: otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE
                	    {
                	    otherlv_20=(Token)match(input,HyphenMinus,FOLLOW_17); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:803:10: ( (otherlv_21= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:804:11: (otherlv_21= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:804:11: (otherlv_21= RULE_ID )
                	    // InternalGitHubActionsParser.g:805:12: otherlv_21= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_21=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_22=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt162 >= 1 ) break loop162;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(162, input);
                            throw eee;
                    }
                    cnt162++;
                } while (true);

                this_END_23=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred27_InternalGitHubActionsParser

    // $ANTLR start synpred28_InternalGitHubActionsParser
    public final void synpred28_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_24_0 = null;


        // InternalGitHubActionsParser.g:835:3: ( ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:835:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:835:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:836:4: {...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred28_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:836:103: ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:837:5: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:840:8: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:840:9: {...}? => ( (lv_if_24_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred28_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:840:18: ( (lv_if_24_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:840:19: (lv_if_24_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:840:19: (lv_if_24_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:841:9: lv_if_24_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getScriptJobAccess().getIfIfStatementParserRuleCall_3_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_24_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred28_InternalGitHubActionsParser

    // $ANTLR start synpred29_InternalGitHubActionsParser
    public final void synpred29_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_25=null;
        Token otherlv_26=null;
        EObject lv_agent_27_0 = null;


        // InternalGitHubActionsParser.g:863:3: ( ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:863:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:863:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
        // InternalGitHubActionsParser.g:864:4: {...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred29_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:864:103: ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
        // InternalGitHubActionsParser.g:865:5: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:868:8: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
        // InternalGitHubActionsParser.g:868:9: {...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred29_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:868:18: (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
        // InternalGitHubActionsParser.g:868:19: otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) )
        {
        otherlv_25=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return ;
        otherlv_26=(Token)match(input,Colon,FOLLOW_102); if (state.failed) return ;
        // InternalGitHubActionsParser.g:876:8: ( (lv_agent_27_0= ruleAgent ) )
        // InternalGitHubActionsParser.g:877:9: (lv_agent_27_0= ruleAgent )
        {
        // InternalGitHubActionsParser.g:877:9: (lv_agent_27_0= ruleAgent )
        // InternalGitHubActionsParser.g:878:10: lv_agent_27_0= ruleAgent
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getAgentAgentParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_agent_27_0=ruleAgent();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred29_InternalGitHubActionsParser

    // $ANTLR start synpred30_InternalGitHubActionsParser
    public final void synpred30_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_28=null;
        Token otherlv_29=null;
        EObject lv_stagingEnvironment_30_0 = null;


        // InternalGitHubActionsParser.g:901:3: ( ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:901:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:901:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
        // InternalGitHubActionsParser.g:902:4: {...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred30_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:902:103: ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
        // InternalGitHubActionsParser.g:903:5: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:906:8: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
        // InternalGitHubActionsParser.g:906:9: {...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred30_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:906:18: (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
        // InternalGitHubActionsParser.g:906:19: otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
        {
        otherlv_28=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return ;
        otherlv_29=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return ;
        // InternalGitHubActionsParser.g:914:8: ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
        // InternalGitHubActionsParser.g:915:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
        {
        // InternalGitHubActionsParser.g:915:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
        // InternalGitHubActionsParser.g:916:10: lv_stagingEnvironment_30_0= ruleStagingEnvironment
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_stagingEnvironment_30_0=ruleStagingEnvironment();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred30_InternalGitHubActionsParser

    // $ANTLR start synpred31_InternalGitHubActionsParser
    public final void synpred31_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_31=null;
        Token otherlv_32=null;
        EObject lv_concurrencyGroup_33_0 = null;


        // InternalGitHubActionsParser.g:939:3: ( ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:939:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:939:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
        // InternalGitHubActionsParser.g:940:4: {...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred31_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:940:103: ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
        // InternalGitHubActionsParser.g:941:5: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:944:8: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
        // InternalGitHubActionsParser.g:944:9: {...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred31_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:944:18: (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
        // InternalGitHubActionsParser.g:944:19: otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
        {
        otherlv_31=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return ;
        otherlv_32=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:952:8: ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
        // InternalGitHubActionsParser.g:953:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
        {
        // InternalGitHubActionsParser.g:953:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
        // InternalGitHubActionsParser.g:954:10: lv_concurrencyGroup_33_0= ruleConcurrencyGroup
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_concurrencyGroup_33_0=ruleConcurrencyGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred31_InternalGitHubActionsParser

    // $ANTLR start synpred33_InternalGitHubActionsParser
    public final void synpred33_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_34=null;
        Token otherlv_35=null;
        EObject lv_environmentVariables_36_0 = null;


        // InternalGitHubActionsParser.g:977:3: ( ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:977:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:977:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:978:4: {...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred33_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:978:103: ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:979:5: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:982:8: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:982:9: {...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred33_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:982:18: (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
        // InternalGitHubActionsParser.g:982:19: otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
        {
        otherlv_34=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_35=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:990:8: ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
        int cnt164=0;
        loop164:
        do {
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==RULE_BEGIN) ) {
                alt164=1;
            }


            switch (alt164) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:991:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:991:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:992:10: lv_environmentVariables_36_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_environmentVariables_36_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt164 >= 1 ) break loop164;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(164, input);
                    throw eee;
            }
            cnt164++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred33_InternalGitHubActionsParser

    // $ANTLR start synpred34_InternalGitHubActionsParser
    public final void synpred34_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_37=null;
        Token otherlv_38=null;
        EObject lv_defaults_39_0 = null;


        // InternalGitHubActionsParser.g:1015:3: ( ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1015:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1015:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1016:4: {...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred34_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8)");
        }
        // InternalGitHubActionsParser.g:1016:103: ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
        // InternalGitHubActionsParser.g:1017:5: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8);
        // InternalGitHubActionsParser.g:1020:8: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
        // InternalGitHubActionsParser.g:1020:9: {...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred34_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1020:18: (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
        // InternalGitHubActionsParser.g:1020:19: otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) )
        {
        otherlv_37=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return ;
        otherlv_38=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1028:8: ( (lv_defaults_39_0= ruleDefaults ) )
        // InternalGitHubActionsParser.g:1029:9: (lv_defaults_39_0= ruleDefaults )
        {
        // InternalGitHubActionsParser.g:1029:9: (lv_defaults_39_0= ruleDefaults )
        // InternalGitHubActionsParser.g:1030:10: lv_defaults_39_0= ruleDefaults
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getDefaultsDefaultsParserRuleCall_8_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_defaults_39_0=ruleDefaults();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred34_InternalGitHubActionsParser

    // $ANTLR start synpred36_InternalGitHubActionsParser
    public final void synpred36_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_40=null;
        Token otherlv_41=null;
        EObject lv_steps_42_0 = null;


        // InternalGitHubActionsParser.g:1053:3: ( ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:1053:3: ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:1053:3: ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:1054:4: {...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred36_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9)");
        }
        // InternalGitHubActionsParser.g:1054:103: ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) )
        // InternalGitHubActionsParser.g:1055:5: ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9);
        // InternalGitHubActionsParser.g:1058:8: ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) )
        // InternalGitHubActionsParser.g:1058:9: {...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred36_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1058:18: (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ )
        // InternalGitHubActionsParser.g:1058:19: otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+
        {
        otherlv_40=(Token)match(input,Steps,FOLLOW_3); if (state.failed) return ;
        otherlv_41=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1066:8: ( (lv_steps_42_0= ruleStep ) )+
        int cnt165=0;
        loop165:
        do {
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==RULE_BEGIN) ) {
                alt165=1;
            }


            switch (alt165) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1067:9: (lv_steps_42_0= ruleStep )
        	    {
        	    // InternalGitHubActionsParser.g:1067:9: (lv_steps_42_0= ruleStep )
        	    // InternalGitHubActionsParser.g:1068:10: lv_steps_42_0= ruleStep
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getStepsStepParserRuleCall_9_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_steps_42_0=ruleStep();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt165 >= 1 ) break loop165;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(165, input);
                    throw eee;
            }
            cnt165++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred36_InternalGitHubActionsParser

    // $ANTLR start synpred37_InternalGitHubActionsParser
    public final void synpred37_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_43=null;
        Token otherlv_44=null;
        EObject lv_strategy_45_0 = null;


        // InternalGitHubActionsParser.g:1091:3: ( ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1091:3: ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1091:3: ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1092:4: {...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred37_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10)");
        }
        // InternalGitHubActionsParser.g:1092:104: ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) )
        // InternalGitHubActionsParser.g:1093:5: ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10);
        // InternalGitHubActionsParser.g:1096:8: ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) )
        // InternalGitHubActionsParser.g:1096:9: {...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred37_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1096:18: (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) )
        // InternalGitHubActionsParser.g:1096:19: otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) )
        {
        otherlv_43=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return ;
        otherlv_44=(Token)match(input,Colon,FOLLOW_22); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1104:8: ( (lv_strategy_45_0= ruleStrategy ) )
        // InternalGitHubActionsParser.g:1105:9: (lv_strategy_45_0= ruleStrategy )
        {
        // InternalGitHubActionsParser.g:1105:9: (lv_strategy_45_0= ruleStrategy )
        // InternalGitHubActionsParser.g:1106:10: lv_strategy_45_0= ruleStrategy
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getStrategyStrategyParserRuleCall_10_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_strategy_45_0=ruleStrategy();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred37_InternalGitHubActionsParser

    // $ANTLR start synpred38_InternalGitHubActionsParser
    public final void synpred38_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_46=null;
        Token otherlv_47=null;
        EObject lv_container_48_0 = null;


        // InternalGitHubActionsParser.g:1129:3: ( ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1129:3: ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1129:3: ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1130:4: {...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred38_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11)");
        }
        // InternalGitHubActionsParser.g:1130:104: ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) )
        // InternalGitHubActionsParser.g:1131:5: ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11);
        // InternalGitHubActionsParser.g:1134:8: ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) )
        // InternalGitHubActionsParser.g:1134:9: {...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred38_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1134:18: (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) )
        // InternalGitHubActionsParser.g:1134:19: otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) )
        {
        otherlv_46=(Token)match(input,Container,FOLLOW_3); if (state.failed) return ;
        otherlv_47=(Token)match(input,Colon,FOLLOW_23); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1142:8: ( (lv_container_48_0= ruleContainer ) )
        // InternalGitHubActionsParser.g:1143:9: (lv_container_48_0= ruleContainer )
        {
        // InternalGitHubActionsParser.g:1143:9: (lv_container_48_0= ruleContainer )
        // InternalGitHubActionsParser.g:1144:10: lv_container_48_0= ruleContainer
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getContainerContainerParserRuleCall_11_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_container_48_0=ruleContainer();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred38_InternalGitHubActionsParser

    // $ANTLR start synpred39_InternalGitHubActionsParser
    public final void synpred39_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_services_51_0 = null;


        // InternalGitHubActionsParser.g:1181:9: ( (lv_services_51_0= ruleService ) )
        // InternalGitHubActionsParser.g:1181:9: (lv_services_51_0= ruleService )
        {
        // InternalGitHubActionsParser.g:1181:9: (lv_services_51_0= ruleService )
        // InternalGitHubActionsParser.g:1182:10: lv_services_51_0= ruleService
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getServicesServiceParserRuleCall_12_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_services_51_0=ruleService();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred39_InternalGitHubActionsParser

    // $ANTLR start synpred40_InternalGitHubActionsParser
    public final void synpred40_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_49=null;
        Token otherlv_50=null;
        EObject lv_services_51_0 = null;


        // InternalGitHubActionsParser.g:1167:3: ( ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:1167:3: ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:1167:3: ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:1168:4: {...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred40_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12)");
        }
        // InternalGitHubActionsParser.g:1168:104: ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) )
        // InternalGitHubActionsParser.g:1169:5: ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12);
        // InternalGitHubActionsParser.g:1172:8: ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) )
        // InternalGitHubActionsParser.g:1172:9: {...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred40_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1172:18: (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ )
        // InternalGitHubActionsParser.g:1172:19: otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+
        {
        otherlv_49=(Token)match(input,Services,FOLLOW_3); if (state.failed) return ;
        otherlv_50=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1180:8: ( (lv_services_51_0= ruleService ) )+
        int cnt166=0;
        loop166:
        do {
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==RULE_BEGIN) ) {
                alt166=1;
            }


            switch (alt166) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1181:9: (lv_services_51_0= ruleService )
        	    {
        	    // InternalGitHubActionsParser.g:1181:9: (lv_services_51_0= ruleService )
        	    // InternalGitHubActionsParser.g:1182:10: lv_services_51_0= ruleService
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getScriptJobAccess().getServicesServiceParserRuleCall_12_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_services_51_0=ruleService();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt166 >= 1 ) break loop166;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(166, input);
                    throw eee;
            }
            cnt166++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred40_InternalGitHubActionsParser

    // $ANTLR start synpred41_InternalGitHubActionsParser
    public final void synpred41_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_52=null;
        Token otherlv_53=null;
        EObject lv_continueOnError_54_0 = null;


        // InternalGitHubActionsParser.g:1205:3: ( ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1205:3: ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1205:3: ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1206:4: {...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred41_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13)");
        }
        // InternalGitHubActionsParser.g:1206:104: ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:1207:5: ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13);
        // InternalGitHubActionsParser.g:1210:8: ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:1210:9: {...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred41_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1210:18: (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:1210:19: otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) )
        {
        otherlv_52=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_53=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1218:8: ( (lv_continueOnError_54_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:1219:9: (lv_continueOnError_54_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:1219:9: (lv_continueOnError_54_0= ruleExpression )
        // InternalGitHubActionsParser.g:1220:10: lv_continueOnError_54_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getScriptJobAccess().getContinueOnErrorExpressionParserRuleCall_13_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_continueOnError_54_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred41_InternalGitHubActionsParser

    // $ANTLR start synpred43_InternalGitHubActionsParser
    public final void synpred43_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_55=null;
        Token otherlv_56=null;
        Token this_END_58=null;
        Token this_END_59=null;
        EObject lv_timeoutMinutes_57_0 = null;


        // InternalGitHubActionsParser.g:1243:3: ( ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1243:3: ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:1243:3: ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1244:4: {...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred43_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14)");
        }
        // InternalGitHubActionsParser.g:1244:104: ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1245:5: ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14);
        // InternalGitHubActionsParser.g:1248:8: ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) )
        // InternalGitHubActionsParser.g:1248:9: {...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred43_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1248:18: ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END )
        // InternalGitHubActionsParser.g:1248:19: (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END
        {
        // InternalGitHubActionsParser.g:1248:19: (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )?
        int alt167=2;
        int LA167_0 = input.LA(1);

        if ( (LA167_0==TimeoutMinutes) ) {
            alt167=1;
        }
        switch (alt167) {
            case 1 :
                // InternalGitHubActionsParser.g:1249:9: otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) )
                {
                otherlv_55=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_56=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1257:9: ( (lv_timeoutMinutes_57_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:1258:10: (lv_timeoutMinutes_57_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:1258:10: (lv_timeoutMinutes_57_0= ruleExpression )
                // InternalGitHubActionsParser.g:1259:11: lv_timeoutMinutes_57_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getScriptJobAccess().getTimeoutMinutesExpressionParserRuleCall_14_0_2_0());
                  										
                }
                pushFollow(FOLLOW_24);
                lv_timeoutMinutes_57_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        this_END_58=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;
        this_END_59=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred43_InternalGitHubActionsParser

    // $ANTLR start synpred44_InternalGitHubActionsParser
    public final void synpred44_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jobName_7_0 = null;


        // InternalGitHubActionsParser.g:1372:9: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:1372:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) )
        {
        otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1380:9: ( (lv_jobName_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:1381:10: (lv_jobName_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:1381:10: (lv_jobName_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:1382:11: lv_jobName_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_jobName_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    // $ANTLR end synpred44_InternalGitHubActionsParser

    // $ANTLR start synpred45_InternalGitHubActionsParser
    public final void synpred45_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_1=null;
        Token lv_name_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_jobName_7_0 = null;


        // InternalGitHubActionsParser.g:1336:3: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:1336:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:1336:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) )
        // InternalGitHubActionsParser.g:1337:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred45_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:1337:110: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) )
        // InternalGitHubActionsParser.g:1338:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:1341:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) )
        // InternalGitHubActionsParser.g:1341:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred45_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1341:18: (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? )
        // InternalGitHubActionsParser.g:1341:19: this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
        {
        this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1345:8: ( (lv_name_2_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:1346:9: (lv_name_2_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:1346:9: (lv_name_2_0= RULE_ID )
        // InternalGitHubActionsParser.g:1347:10: lv_name_2_0= RULE_ID
        {
        lv_name_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_101); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1371:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?
        int alt168=2;
        int LA168_0 = input.LA(1);

        if ( (LA168_0==Name) ) {
            alt168=1;
        }
        switch (alt168) {
            case 1 :
                // InternalGitHubActionsParser.g:1372:9: otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) )
                {
                otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1380:9: ( (lv_jobName_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:1381:10: (lv_jobName_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:1381:10: (lv_jobName_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:1382:11: lv_jobName_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getJobNameExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_jobName_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred45_InternalGitHubActionsParser

    // $ANTLR start synpred47_InternalGitHubActionsParser
    public final void synpred47_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_permissions_10_0 = null;


        // InternalGitHubActionsParser.g:1406:3: ( ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:1406:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:1406:3: ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:1407:4: {...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred47_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:1407:110: ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) )
        // InternalGitHubActionsParser.g:1408:5: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:1411:8: ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) )
        // InternalGitHubActionsParser.g:1411:9: {...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred47_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1411:18: (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ )
        // InternalGitHubActionsParser.g:1411:19: otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+
        {
        otherlv_8=(Token)match(input,Permissions,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1419:8: ( (lv_permissions_10_0= rulePermission ) )+
        int cnt169=0;
        loop169:
        do {
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==RULE_BEGIN) ) {
                alt169=1;
            }


            switch (alt169) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1420:9: (lv_permissions_10_0= rulePermission )
        	    {
        	    // InternalGitHubActionsParser.g:1420:9: (lv_permissions_10_0= rulePermission )
        	    // InternalGitHubActionsParser.g:1421:10: lv_permissions_10_0= rulePermission
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getPermissionsPermissionParserRuleCall_1_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_permissions_10_0=rulePermission();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt169 >= 1 ) break loop169;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(169, input);
                    throw eee;
            }
            cnt169++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred47_InternalGitHubActionsParser

    // $ANTLR start synpred52_InternalGitHubActionsParser
    public final void synpred52_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token otherlv_16=null;
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_BEGIN_19=null;
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token this_NEWLINE_22=null;
        Token this_END_23=null;

        // InternalGitHubActionsParser.g:1444:3: ( ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1444:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1444:3: ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:1445:4: {...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred52_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:1445:110: ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:1446:5: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:1449:8: ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) )
        // InternalGitHubActionsParser.g:1449:9: {...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred52_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1449:18: ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) )
        int alt173=3;
        switch ( input.LA(1) ) {
        case Needs:
            {
            alt173=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt173=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt173=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 173, 0, input);

            throw nvae;
        }

        switch (alt173) {
            case 1 :
                // InternalGitHubActionsParser.g:1449:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
                {
                // InternalGitHubActionsParser.g:1449:19: (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) )
                // InternalGitHubActionsParser.g:1450:9: otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) )
                {
                otherlv_11=(Token)match(input,Needs,FOLLOW_3); if (state.failed) return ;
                otherlv_12=(Token)match(input,Colon,FOLLOW_17); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1458:9: ( (otherlv_13= RULE_ID ) )
                // InternalGitHubActionsParser.g:1459:10: (otherlv_13= RULE_ID )
                {
                // InternalGitHubActionsParser.g:1459:10: (otherlv_13= RULE_ID )
                // InternalGitHubActionsParser.g:1460:11: otherlv_13= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  											/* */
                  										
                }
                otherlv_13=(Token)match(input,RULE_ID,FOLLOW_2); if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:1476:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:1476:8: (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket )
                // InternalGitHubActionsParser.g:1477:9: otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket
                {
                otherlv_14=(Token)match(input,LeftSquareBracket,FOLLOW_17); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1481:9: ( (otherlv_15= RULE_ID ) )
                // InternalGitHubActionsParser.g:1482:10: (otherlv_15= RULE_ID )
                {
                // InternalGitHubActionsParser.g:1482:10: (otherlv_15= RULE_ID )
                // InternalGitHubActionsParser.g:1483:11: otherlv_15= RULE_ID
                {
                if ( state.backtracking==0 ) {

                  											/* */
                  										
                }
                otherlv_15=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:1497:9: (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )*
                loop171:
                do {
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==Comma) ) {
                        alt171=1;
                    }


                    switch (alt171) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:1498:10: otherlv_16= Comma ( (otherlv_17= RULE_ID ) )
                	    {
                	    otherlv_16=(Token)match(input,Comma,FOLLOW_17); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:1502:10: ( (otherlv_17= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:1503:11: (otherlv_17= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:1503:11: (otherlv_17= RULE_ID )
                	    // InternalGitHubActionsParser.g:1504:12: otherlv_17= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_17=(Token)match(input,RULE_ID,FOLLOW_8); if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop171;
                    }
                } while (true);

                otherlv_18=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:1525:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
                {
                // InternalGitHubActionsParser.g:1525:8: (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END )
                // InternalGitHubActionsParser.g:1526:9: this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END
                {
                this_BEGIN_19=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:1530:9: (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+
                int cnt172=0;
                loop172:
                do {
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==HyphenMinus) ) {
                        alt172=1;
                    }


                    switch (alt172) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:1531:10: otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE
                	    {
                	    otherlv_20=(Token)match(input,HyphenMinus,FOLLOW_17); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:1535:10: ( (otherlv_21= RULE_ID ) )
                	    // InternalGitHubActionsParser.g:1536:11: (otherlv_21= RULE_ID )
                	    {
                	    // InternalGitHubActionsParser.g:1536:11: (otherlv_21= RULE_ID )
                	    // InternalGitHubActionsParser.g:1537:12: otherlv_21= RULE_ID
                	    {
                	    if ( state.backtracking==0 ) {

                	      												/* */
                	      											
                	    }
                	    otherlv_21=(Token)match(input,RULE_ID,FOLLOW_10); if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_22=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt172 >= 1 ) break loop172;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(172, input);
                            throw eee;
                    }
                    cnt172++;
                } while (true);

                this_END_23=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred52_InternalGitHubActionsParser

    // $ANTLR start synpred53_InternalGitHubActionsParser
    public final void synpred53_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_24_0 = null;


        // InternalGitHubActionsParser.g:1567:3: ( ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1567:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1567:3: ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:1568:4: {...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred53_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:1568:110: ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:1569:5: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:1572:8: ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:1572:9: {...}? => ( (lv_if_24_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred53_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1572:18: ( (lv_if_24_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:1572:19: (lv_if_24_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:1572:19: (lv_if_24_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:1573:9: lv_if_24_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getIfIfStatementParserRuleCall_3_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_24_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred53_InternalGitHubActionsParser

    // $ANTLR start synpred54_InternalGitHubActionsParser
    public final void synpred54_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_25=null;
        Token otherlv_26=null;
        EObject lv_agent_27_0 = null;


        // InternalGitHubActionsParser.g:1595:3: ( ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1595:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1595:3: ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1596:4: {...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred54_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:1596:110: ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) )
        // InternalGitHubActionsParser.g:1597:5: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:1600:8: ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) )
        // InternalGitHubActionsParser.g:1600:9: {...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred54_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1600:18: (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) )
        // InternalGitHubActionsParser.g:1600:19: otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) )
        {
        otherlv_25=(Token)match(input,RunsOn,FOLLOW_3); if (state.failed) return ;
        otherlv_26=(Token)match(input,Colon,FOLLOW_102); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1608:8: ( (lv_agent_27_0= ruleAgent ) )
        // InternalGitHubActionsParser.g:1609:9: (lv_agent_27_0= ruleAgent )
        {
        // InternalGitHubActionsParser.g:1609:9: (lv_agent_27_0= ruleAgent )
        // InternalGitHubActionsParser.g:1610:10: lv_agent_27_0= ruleAgent
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getAgentAgentParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_agent_27_0=ruleAgent();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred54_InternalGitHubActionsParser

    // $ANTLR start synpred55_InternalGitHubActionsParser
    public final void synpred55_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_28=null;
        Token otherlv_29=null;
        EObject lv_stagingEnvironment_30_0 = null;


        // InternalGitHubActionsParser.g:1633:3: ( ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1633:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1633:3: ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1634:4: {...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred55_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:1634:110: ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) )
        // InternalGitHubActionsParser.g:1635:5: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:1638:8: ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) )
        // InternalGitHubActionsParser.g:1638:9: {...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred55_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1638:18: (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) )
        // InternalGitHubActionsParser.g:1638:19: otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
        {
        otherlv_28=(Token)match(input,Environment,FOLLOW_3); if (state.failed) return ;
        otherlv_29=(Token)match(input,Colon,FOLLOW_21); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1646:8: ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) )
        // InternalGitHubActionsParser.g:1647:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
        {
        // InternalGitHubActionsParser.g:1647:9: (lv_stagingEnvironment_30_0= ruleStagingEnvironment )
        // InternalGitHubActionsParser.g:1648:10: lv_stagingEnvironment_30_0= ruleStagingEnvironment
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStagingEnvironmentStagingEnvironmentParserRuleCall_5_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_stagingEnvironment_30_0=ruleStagingEnvironment();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred55_InternalGitHubActionsParser

    // $ANTLR start synpred56_InternalGitHubActionsParser
    public final void synpred56_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_31=null;
        Token otherlv_32=null;
        EObject lv_concurrencyGroup_33_0 = null;


        // InternalGitHubActionsParser.g:1671:3: ( ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1671:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1671:3: ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1672:4: {...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred56_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:1672:110: ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) )
        // InternalGitHubActionsParser.g:1673:5: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:1676:8: ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) )
        // InternalGitHubActionsParser.g:1676:9: {...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred56_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1676:18: (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) )
        // InternalGitHubActionsParser.g:1676:19: otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
        {
        otherlv_31=(Token)match(input,Concurrency,FOLLOW_3); if (state.failed) return ;
        otherlv_32=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1684:8: ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) )
        // InternalGitHubActionsParser.g:1685:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
        {
        // InternalGitHubActionsParser.g:1685:9: (lv_concurrencyGroup_33_0= ruleConcurrencyGroup )
        // InternalGitHubActionsParser.g:1686:10: lv_concurrencyGroup_33_0= ruleConcurrencyGroup
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getConcurrencyGroupConcurrencyGroupParserRuleCall_6_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_concurrencyGroup_33_0=ruleConcurrencyGroup();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred56_InternalGitHubActionsParser

    // $ANTLR start synpred58_InternalGitHubActionsParser
    public final void synpred58_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_34=null;
        Token otherlv_35=null;
        EObject lv_environmentVariables_36_0 = null;


        // InternalGitHubActionsParser.g:1709:3: ( ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:1709:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:1709:3: ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:1710:4: {...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred58_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:1710:110: ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:1711:5: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:1714:8: ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:1714:9: {...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred58_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1714:18: (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ )
        // InternalGitHubActionsParser.g:1714:19: otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
        {
        otherlv_34=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_35=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1722:8: ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+
        int cnt174=0;
        loop174:
        do {
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==RULE_BEGIN) ) {
                alt174=1;
            }


            switch (alt174) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1723:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:1723:9: (lv_environmentVariables_36_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:1724:10: lv_environmentVariables_36_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_7_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_environmentVariables_36_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt174 >= 1 ) break loop174;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(174, input);
                    throw eee;
            }
            cnt174++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred58_InternalGitHubActionsParser

    // $ANTLR start synpred59_InternalGitHubActionsParser
    public final void synpred59_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_37=null;
        Token otherlv_38=null;
        EObject lv_defaults_39_0 = null;


        // InternalGitHubActionsParser.g:1747:3: ( ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1747:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1747:3: ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1748:4: {...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred59_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8)");
        }
        // InternalGitHubActionsParser.g:1748:110: ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) )
        // InternalGitHubActionsParser.g:1749:5: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8);
        // InternalGitHubActionsParser.g:1752:8: ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) )
        // InternalGitHubActionsParser.g:1752:9: {...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred59_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1752:18: (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) )
        // InternalGitHubActionsParser.g:1752:19: otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) )
        {
        otherlv_37=(Token)match(input,Defaults,FOLLOW_3); if (state.failed) return ;
        otherlv_38=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1760:8: ( (lv_defaults_39_0= ruleDefaults ) )
        // InternalGitHubActionsParser.g:1761:9: (lv_defaults_39_0= ruleDefaults )
        {
        // InternalGitHubActionsParser.g:1761:9: (lv_defaults_39_0= ruleDefaults )
        // InternalGitHubActionsParser.g:1762:10: lv_defaults_39_0= ruleDefaults
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getDefaultsDefaultsParserRuleCall_8_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_defaults_39_0=ruleDefaults();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred59_InternalGitHubActionsParser

    // $ANTLR start synpred60_InternalGitHubActionsParser
    public final void synpred60_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_40=null;
        Token otherlv_41=null;
        EObject lv_strategy_42_0 = null;


        // InternalGitHubActionsParser.g:1785:3: ( ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1785:3: ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1785:3: ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1786:4: {...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred60_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9)");
        }
        // InternalGitHubActionsParser.g:1786:110: ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) )
        // InternalGitHubActionsParser.g:1787:5: ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9);
        // InternalGitHubActionsParser.g:1790:8: ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) )
        // InternalGitHubActionsParser.g:1790:9: {...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred60_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1790:18: (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) )
        // InternalGitHubActionsParser.g:1790:19: otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) )
        {
        otherlv_40=(Token)match(input,Strategy,FOLLOW_3); if (state.failed) return ;
        otherlv_41=(Token)match(input,Colon,FOLLOW_22); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1798:8: ( (lv_strategy_42_0= ruleStrategy ) )
        // InternalGitHubActionsParser.g:1799:9: (lv_strategy_42_0= ruleStrategy )
        {
        // InternalGitHubActionsParser.g:1799:9: (lv_strategy_42_0= ruleStrategy )
        // InternalGitHubActionsParser.g:1800:10: lv_strategy_42_0= ruleStrategy
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getStrategyStrategyParserRuleCall_9_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_strategy_42_0=ruleStrategy();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred60_InternalGitHubActionsParser

    // $ANTLR start synpred61_InternalGitHubActionsParser
    public final void synpred61_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_43=null;
        Token otherlv_44=null;
        EObject lv_container_45_0 = null;


        // InternalGitHubActionsParser.g:1823:3: ( ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1823:3: ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1823:3: ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1824:4: {...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred61_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10)");
        }
        // InternalGitHubActionsParser.g:1824:111: ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) )
        // InternalGitHubActionsParser.g:1825:5: ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10);
        // InternalGitHubActionsParser.g:1828:8: ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) )
        // InternalGitHubActionsParser.g:1828:9: {...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred61_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1828:18: (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) )
        // InternalGitHubActionsParser.g:1828:19: otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) )
        {
        otherlv_43=(Token)match(input,Container,FOLLOW_3); if (state.failed) return ;
        otherlv_44=(Token)match(input,Colon,FOLLOW_23); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1836:8: ( (lv_container_45_0= ruleContainer ) )
        // InternalGitHubActionsParser.g:1837:9: (lv_container_45_0= ruleContainer )
        {
        // InternalGitHubActionsParser.g:1837:9: (lv_container_45_0= ruleContainer )
        // InternalGitHubActionsParser.g:1838:10: lv_container_45_0= ruleContainer
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContainerContainerParserRuleCall_10_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_container_45_0=ruleContainer();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred61_InternalGitHubActionsParser

    // $ANTLR start synpred62_InternalGitHubActionsParser
    public final void synpred62_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_services_48_0 = null;


        // InternalGitHubActionsParser.g:1875:9: ( (lv_services_48_0= ruleService ) )
        // InternalGitHubActionsParser.g:1875:9: (lv_services_48_0= ruleService )
        {
        // InternalGitHubActionsParser.g:1875:9: (lv_services_48_0= ruleService )
        // InternalGitHubActionsParser.g:1876:10: lv_services_48_0= ruleService
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getServicesServiceParserRuleCall_11_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_services_48_0=ruleService();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred62_InternalGitHubActionsParser

    // $ANTLR start synpred63_InternalGitHubActionsParser
    public final void synpred63_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_46=null;
        Token otherlv_47=null;
        EObject lv_services_48_0 = null;


        // InternalGitHubActionsParser.g:1861:3: ( ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:1861:3: ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:1861:3: ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:1862:4: {...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred63_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11)");
        }
        // InternalGitHubActionsParser.g:1862:111: ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) )
        // InternalGitHubActionsParser.g:1863:5: ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11);
        // InternalGitHubActionsParser.g:1866:8: ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) )
        // InternalGitHubActionsParser.g:1866:9: {...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred63_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1866:18: (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ )
        // InternalGitHubActionsParser.g:1866:19: otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+
        {
        otherlv_46=(Token)match(input,Services,FOLLOW_3); if (state.failed) return ;
        otherlv_47=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1874:8: ( (lv_services_48_0= ruleService ) )+
        int cnt175=0;
        loop175:
        do {
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==RULE_BEGIN) ) {
                alt175=1;
            }


            switch (alt175) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1875:9: (lv_services_48_0= ruleService )
        	    {
        	    // InternalGitHubActionsParser.g:1875:9: (lv_services_48_0= ruleService )
        	    // InternalGitHubActionsParser.g:1876:10: lv_services_48_0= ruleService
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getServicesServiceParserRuleCall_11_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_services_48_0=ruleService();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt175 >= 1 ) break loop175;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(175, input);
                    throw eee;
            }
            cnt175++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred63_InternalGitHubActionsParser

    // $ANTLR start synpred64_InternalGitHubActionsParser
    public final void synpred64_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_49=null;
        Token otherlv_50=null;
        EObject lv_workflowPath_51_0 = null;


        // InternalGitHubActionsParser.g:1899:3: ( ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1899:3: ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1899:3: ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1900:4: {...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred64_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12)");
        }
        // InternalGitHubActionsParser.g:1900:111: ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:1901:5: ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12);
        // InternalGitHubActionsParser.g:1904:8: ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:1904:9: {...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred64_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1904:18: (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:1904:19: otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) )
        {
        otherlv_49=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return ;
        otherlv_50=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1912:8: ( (lv_workflowPath_51_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:1913:9: (lv_workflowPath_51_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:1913:9: (lv_workflowPath_51_0= ruleExpression )
        // InternalGitHubActionsParser.g:1914:10: lv_workflowPath_51_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getWorkflowPathExpressionParserRuleCall_12_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_workflowPath_51_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred64_InternalGitHubActionsParser

    // $ANTLR start synpred66_InternalGitHubActionsParser
    public final void synpred66_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_52=null;
        Token otherlv_53=null;
        EObject lv_args_54_0 = null;


        // InternalGitHubActionsParser.g:1937:3: ( ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:1937:3: ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:1937:3: ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:1938:4: {...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred66_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13)");
        }
        // InternalGitHubActionsParser.g:1938:111: ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:1939:5: ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13);
        // InternalGitHubActionsParser.g:1942:8: ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:1942:9: {...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred66_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1942:18: (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ )
        // InternalGitHubActionsParser.g:1942:19: otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+
        {
        otherlv_52=(Token)match(input,With,FOLLOW_3); if (state.failed) return ;
        otherlv_53=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1950:8: ( (lv_args_54_0= ruleVariableAssignment ) )+
        int cnt176=0;
        loop176:
        do {
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==RULE_BEGIN) ) {
                alt176=1;
            }


            switch (alt176) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:1951:9: (lv_args_54_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:1951:9: (lv_args_54_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:1952:10: lv_args_54_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getArgsVariableAssignmentParserRuleCall_13_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_args_54_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt176 >= 1 ) break loop176;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(176, input);
                    throw eee;
            }
            cnt176++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred66_InternalGitHubActionsParser

    // $ANTLR start synpred69_InternalGitHubActionsParser
    public final void synpred69_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_55=null;
        Token otherlv_56=null;
        Token lv_inheritSecrets_57_0=null;
        EObject lv_secrets_58_0 = null;


        // InternalGitHubActionsParser.g:1975:3: ( ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) )
        // InternalGitHubActionsParser.g:1975:3: ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:1975:3: ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:1976:4: {...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred69_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14)");
        }
        // InternalGitHubActionsParser.g:1976:111: ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:1977:5: ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14);
        // InternalGitHubActionsParser.g:1980:8: ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:1980:9: {...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred69_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:1980:18: (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:1980:19: otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ )
        {
        otherlv_55=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return ;
        otherlv_56=(Token)match(input,Colon,FOLLOW_28); if (state.failed) return ;
        // InternalGitHubActionsParser.g:1988:8: ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ )
        int alt178=2;
        int LA178_0 = input.LA(1);

        if ( (LA178_0==Inherit) ) {
            alt178=1;
        }
        else if ( (LA178_0==RULE_BEGIN) ) {
            alt178=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 178, 0, input);

            throw nvae;
        }
        switch (alt178) {
            case 1 :
                // InternalGitHubActionsParser.g:1989:9: ( (lv_inheritSecrets_57_0= Inherit ) )
                {
                // InternalGitHubActionsParser.g:1989:9: ( (lv_inheritSecrets_57_0= Inherit ) )
                // InternalGitHubActionsParser.g:1990:10: (lv_inheritSecrets_57_0= Inherit )
                {
                // InternalGitHubActionsParser.g:1990:10: (lv_inheritSecrets_57_0= Inherit )
                // InternalGitHubActionsParser.g:1991:11: lv_inheritSecrets_57_0= Inherit
                {
                lv_inheritSecrets_57_0=(Token)match(input,Inherit,FOLLOW_2); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:2004:9: ( (lv_secrets_58_0= ruleVariableAssignment ) )+
                {
                // InternalGitHubActionsParser.g:2004:9: ( (lv_secrets_58_0= ruleVariableAssignment ) )+
                int cnt177=0;
                loop177:
                do {
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==RULE_BEGIN) ) {
                        alt177=1;
                    }


                    switch (alt177) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:2005:10: (lv_secrets_58_0= ruleVariableAssignment )
                	    {
                	    // InternalGitHubActionsParser.g:2005:10: (lv_secrets_58_0= ruleVariableAssignment )
                	    // InternalGitHubActionsParser.g:2006:11: lv_secrets_58_0= ruleVariableAssignment
                	    {
                	    if ( state.backtracking==0 ) {

                	      											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getSecretsVariableAssignmentParserRuleCall_14_2_1_0());
                	      										
                	    }
                	    pushFollow(FOLLOW_99);
                	    lv_secrets_58_0=ruleVariableAssignment();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt177 >= 1 ) break loop177;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(177, input);
                            throw eee;
                    }
                    cnt177++;
                } while (true);


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred69_InternalGitHubActionsParser

    // $ANTLR start synpred70_InternalGitHubActionsParser
    public final void synpred70_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_59=null;
        Token otherlv_60=null;
        EObject lv_continueOnError_61_0 = null;


        // InternalGitHubActionsParser.g:2030:3: ( ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2030:3: ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2030:3: ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2031:4: {...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred70_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15)");
        }
        // InternalGitHubActionsParser.g:2031:111: ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:2032:5: ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15);
        // InternalGitHubActionsParser.g:2035:8: ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:2035:9: {...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred70_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2035:18: (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:2035:19: otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) )
        {
        otherlv_59=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_60=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2043:8: ( (lv_continueOnError_61_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2044:9: (lv_continueOnError_61_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2044:9: (lv_continueOnError_61_0= ruleExpression )
        // InternalGitHubActionsParser.g:2045:10: lv_continueOnError_61_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getContinueOnErrorExpressionParserRuleCall_15_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_continueOnError_61_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred70_InternalGitHubActionsParser

    // $ANTLR start synpred72_InternalGitHubActionsParser
    public final void synpred72_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_62=null;
        Token otherlv_63=null;
        Token this_END_65=null;
        Token this_END_66=null;
        EObject lv_timeoutMinutes_64_0 = null;


        // InternalGitHubActionsParser.g:2068:3: ( ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2068:3: ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:2068:3: ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2069:4: {...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred72_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16)");
        }
        // InternalGitHubActionsParser.g:2069:111: ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2070:5: ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16);
        // InternalGitHubActionsParser.g:2073:8: ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) )
        // InternalGitHubActionsParser.g:2073:9: {...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred72_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2073:18: ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END )
        // InternalGitHubActionsParser.g:2073:19: (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END
        {
        // InternalGitHubActionsParser.g:2073:19: (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )?
        int alt179=2;
        int LA179_0 = input.LA(1);

        if ( (LA179_0==TimeoutMinutes) ) {
            alt179=1;
        }
        switch (alt179) {
            case 1 :
                // InternalGitHubActionsParser.g:2074:9: otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) )
                {
                otherlv_62=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_63=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2082:9: ( (lv_timeoutMinutes_64_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:2083:10: (lv_timeoutMinutes_64_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:2083:10: (lv_timeoutMinutes_64_0= ruleExpression )
                // InternalGitHubActionsParser.g:2084:11: lv_timeoutMinutes_64_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getReuseWorkflowJobAccess().getTimeoutMinutesExpressionParserRuleCall_16_0_2_0());
                  										
                }
                pushFollow(FOLLOW_24);
                lv_timeoutMinutes_64_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        this_END_65=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;
        this_END_66=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred72_InternalGitHubActionsParser

    // $ANTLR start synpred77_InternalGitHubActionsParser
    public final void synpred77_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_5=null;
        Token this_BEGIN_6=null;
        Token otherlv_7=null;
        Token this_NEWLINE_9=null;
        Token this_END_10=null;
        EObject lv_labels_0_0 = null;

        EObject lv_labels_2_0 = null;

        EObject lv_labels_4_0 = null;

        EObject lv_labels_8_0 = null;


        // InternalGitHubActionsParser.g:2155:3: ( ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2155:3: ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) )
        {
        // InternalGitHubActionsParser.g:2155:3: ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) )
        int alt183=3;
        switch ( input.LA(1) ) {
        case DollarSignLeftCurlyBracketLeftCurlyBracket:
        case RULE_STRING:
            {
            alt183=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt183=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt183=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 183, 0, input);

            throw nvae;
        }

        switch (alt183) {
            case 1 :
                // InternalGitHubActionsParser.g:2156:4: ( (lv_labels_0_0= ruleExpression ) )
                {
                // InternalGitHubActionsParser.g:2156:4: ( (lv_labels_0_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:2157:5: (lv_labels_0_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:2157:5: (lv_labels_0_0= ruleExpression )
                // InternalGitHubActionsParser.g:2158:6: lv_labels_0_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  						newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_0_0());
                  					
                }
                pushFollow(FOLLOW_2);
                lv_labels_0_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:2176:4: (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:2176:4: (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket )
                // InternalGitHubActionsParser.g:2177:5: otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket
                {
                otherlv_1=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2181:5: ( (lv_labels_2_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:2182:6: (lv_labels_2_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:2182:6: (lv_labels_2_0= ruleExpression )
                // InternalGitHubActionsParser.g:2183:7: lv_labels_2_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  							newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_1_1_0());
                  						
                }
                pushFollow(FOLLOW_8);
                lv_labels_2_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:2200:5: (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )*
                loop181:
                do {
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==Comma) ) {
                        alt181=1;
                    }


                    switch (alt181) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:2201:6: otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) )
                	    {
                	    otherlv_3=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:2205:6: ( (lv_labels_4_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:2206:7: (lv_labels_4_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:2206:7: (lv_labels_4_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:2207:8: lv_labels_4_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      								newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_1_2_1_0());
                	      							
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_labels_4_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop181;
                    }
                } while (true);

                otherlv_5=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:2231:4: (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END )
                {
                // InternalGitHubActionsParser.g:2231:4: (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END )
                // InternalGitHubActionsParser.g:2232:5: this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END
                {
                this_BEGIN_6=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2236:5: (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+
                int cnt182=0;
                loop182:
                do {
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==HyphenMinus) ) {
                        alt182=1;
                    }


                    switch (alt182) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:2237:6: otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE
                	    {
                	    otherlv_7=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:2241:6: ( (lv_labels_8_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:2242:7: (lv_labels_8_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:2242:7: (lv_labels_8_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:2243:8: lv_labels_8_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      								newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_0_2_1_1_0());
                	      							
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_labels_8_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_9=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt182 >= 1 ) break loop182;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(182, input);
                            throw eee;
                    }
                    cnt182++;
                } while (true);

                this_END_10=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred77_InternalGitHubActionsParser

    // $ANTLR start synpred82_InternalGitHubActionsParser
    public final void synpred82_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token this_BEGIN_21=null;
        Token otherlv_22=null;
        Token this_NEWLINE_24=null;
        Token this_END_25=null;
        EObject lv_labels_15_0 = null;

        EObject lv_labels_17_0 = null;

        EObject lv_labels_19_0 = null;

        EObject lv_labels_23_0 = null;


        // InternalGitHubActionsParser.g:2290:5: ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2290:5: ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2290:5: ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2291:6: {...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred82_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0)");
        }
        // InternalGitHubActionsParser.g:2291:105: ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2292:7: ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0);
        // InternalGitHubActionsParser.g:2295:10: ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2295:11: {...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred82_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2295:20: ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) )
        int alt187=3;
        switch ( input.LA(1) ) {
        case Labels:
            {
            alt187=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt187=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt187=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 187, 0, input);

            throw nvae;
        }

        switch (alt187) {
            case 1 :
                // InternalGitHubActionsParser.g:2295:21: (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:2295:21: (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:2296:11: otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) )
                {
                otherlv_13=(Token)match(input,Labels,FOLLOW_3); if (state.failed) return ;
                otherlv_14=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2304:11: ( (lv_labels_15_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:2305:12: (lv_labels_15_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:2305:12: (lv_labels_15_0= ruleExpression )
                // InternalGitHubActionsParser.g:2306:13: lv_labels_15_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_0_2_0());
                  												
                }
                pushFollow(FOLLOW_2);
                lv_labels_15_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:2325:10: (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:2325:10: (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket )
                // InternalGitHubActionsParser.g:2326:11: otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket
                {
                otherlv_16=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2330:11: ( (lv_labels_17_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:2331:12: (lv_labels_17_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:2331:12: (lv_labels_17_0= ruleExpression )
                // InternalGitHubActionsParser.g:2332:13: lv_labels_17_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_1_0());
                  												
                }
                pushFollow(FOLLOW_8);
                lv_labels_17_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:2349:11: (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )*
                loop185:
                do {
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==Comma) ) {
                        alt185=1;
                    }


                    switch (alt185) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:2350:12: otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) )
                	    {
                	    otherlv_18=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:2354:12: ( (lv_labels_19_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:2355:13: (lv_labels_19_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:2355:13: (lv_labels_19_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:2356:14: lv_labels_19_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_labels_19_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop185;
                    }
                } while (true);

                otherlv_20=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:2380:10: (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END )
                {
                // InternalGitHubActionsParser.g:2380:10: (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END )
                // InternalGitHubActionsParser.g:2381:11: this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END
                {
                this_BEGIN_21=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2385:11: (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+
                int cnt186=0;
                loop186:
                do {
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==HyphenMinus) ) {
                        alt186=1;
                    }


                    switch (alt186) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:2386:12: otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE
                	    {
                	    otherlv_22=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:2390:12: ( (lv_labels_23_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:2391:13: (lv_labels_23_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:2391:13: (lv_labels_23_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:2392:14: lv_labels_23_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getAgentAccess().getLabelsExpressionParserRuleCall_1_1_0_2_1_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_labels_23_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_24=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt186 >= 1 ) break loop186;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(186, input);
                            throw eee;
                    }
                    cnt186++;
                } while (true);

                this_END_25=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred82_InternalGitHubActionsParser

    // $ANTLR start synpred83_InternalGitHubActionsParser
    public final void synpred83_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token this_END_30=null;
        EObject lv_group_29_0 = null;


        // InternalGitHubActionsParser.g:2425:5: ( ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:2425:5: ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:2425:5: ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:2426:6: {...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred83_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 1)");
        }
        // InternalGitHubActionsParser.g:2426:105: ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) )
        // InternalGitHubActionsParser.g:2427:7: ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 1);
        // InternalGitHubActionsParser.g:2430:10: ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) )
        // InternalGitHubActionsParser.g:2430:11: {...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred83_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2430:20: (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END )
        // InternalGitHubActionsParser.g:2430:21: otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END
        {
        otherlv_26=(Token)match(input,Group,FOLLOW_3); if (state.failed) return ;
        otherlv_27=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2442:10: ( (lv_group_29_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2443:11: (lv_group_29_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2443:11: (lv_group_29_0= ruleExpression )
        // InternalGitHubActionsParser.g:2444:12: lv_group_29_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          												newCompositeNode(grammarAccess.getAgentAccess().getGroupExpressionParserRuleCall_1_1_1_3_0());
          											
        }
        pushFollow(FOLLOW_24);
        lv_group_29_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        this_END_30=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred83_InternalGitHubActionsParser

    // $ANTLR start synpred84_InternalGitHubActionsParser
    public final void synpred84_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject this_Command_2 = null;


        // InternalGitHubActionsParser.g:2510:4: (this_Command_2= ruleCommand )
        // InternalGitHubActionsParser.g:2510:4: this_Command_2= ruleCommand
        {
        if ( state.backtracking==0 ) {

          				/* */
          			
        }
        pushFollow(FOLLOW_2);
        this_Command_2=ruleCommand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_InternalGitHubActionsParser

    // $ANTLR start synpred85_InternalGitHubActionsParser
    public final void synpred85_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;

        // InternalGitHubActionsParser.g:2573:3: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2573:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2573:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2574:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred85_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:2574:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
        // InternalGitHubActionsParser.g:2575:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:2578:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
        // InternalGitHubActionsParser.g:2578:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred85_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2578:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
        // InternalGitHubActionsParser.g:2578:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) )
        {
        otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return ;
        otherlv_2=(Token)match(input,Colon,FOLLOW_31); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2586:8: ( (lv_id_3_0= RULE_STRING ) )
        // InternalGitHubActionsParser.g:2587:9: (lv_id_3_0= RULE_STRING )
        {
        // InternalGitHubActionsParser.g:2587:9: (lv_id_3_0= RULE_STRING )
        // InternalGitHubActionsParser.g:2588:10: lv_id_3_0= RULE_STRING
        {
        lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred85_InternalGitHubActionsParser

    // $ANTLR start synpred86_InternalGitHubActionsParser
    public final void synpred86_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_4_0 = null;


        // InternalGitHubActionsParser.g:2610:3: ( ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2610:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2610:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:2611:4: {...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred86_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:2611:101: ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:2612:5: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:2615:8: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:2615:9: {...}? => ( (lv_if_4_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred86_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2615:18: ( (lv_if_4_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:2615:19: (lv_if_4_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:2615:19: (lv_if_4_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:2616:9: lv_if_4_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getCommandAccess().getIfIfStatementParserRuleCall_1_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_4_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred86_InternalGitHubActionsParser

    // $ANTLR start synpred87_InternalGitHubActionsParser
    public final void synpred87_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_name_7_0 = null;


        // InternalGitHubActionsParser.g:2638:3: ( ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2638:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2638:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2639:4: {...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred87_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:2639:101: ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:2640:5: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:2643:8: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:2643:9: {...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred87_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2643:18: (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:2643:19: otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) )
        {
        otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2651:8: ( (lv_name_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2652:9: (lv_name_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2652:9: (lv_name_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:2653:10: lv_name_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getNameExpressionParserRuleCall_2_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_name_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred87_InternalGitHubActionsParser

    // $ANTLR start synpred88_InternalGitHubActionsParser
    public final void synpred88_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_shell_10_0 = null;


        // InternalGitHubActionsParser.g:2676:3: ( ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2676:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2676:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2677:4: {...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred88_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:2677:101: ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:2678:5: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:2681:8: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:2681:9: {...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred88_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2681:18: (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:2681:19: otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) )
        {
        otherlv_8=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2689:8: ( (lv_shell_10_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2690:9: (lv_shell_10_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2690:9: (lv_shell_10_0= ruleExpression )
        // InternalGitHubActionsParser.g:2691:10: lv_shell_10_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getShellExpressionParserRuleCall_3_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_shell_10_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred88_InternalGitHubActionsParser

    // $ANTLR start synpred89_InternalGitHubActionsParser
    public final void synpred89_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_11=null;
        Token otherlv_12=null;
        EObject lv_workingDirectory_13_0 = null;


        // InternalGitHubActionsParser.g:2714:3: ( ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2714:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2714:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2715:4: {...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred89_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:2715:101: ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:2716:5: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:2719:8: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:2719:9: {...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred89_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2719:18: (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:2719:19: otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) )
        {
        otherlv_11=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return ;
        otherlv_12=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2727:8: ( (lv_workingDirectory_13_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2728:9: (lv_workingDirectory_13_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2728:9: (lv_workingDirectory_13_0= ruleExpression )
        // InternalGitHubActionsParser.g:2729:10: lv_workingDirectory_13_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_workingDirectory_13_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred89_InternalGitHubActionsParser

    // $ANTLR start synpred91_InternalGitHubActionsParser
    public final void synpred91_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        EObject lv_environmentVariables_16_0 = null;


        // InternalGitHubActionsParser.g:2752:3: ( ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:2752:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:2752:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:2753:4: {...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred91_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:2753:101: ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:2754:5: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:2757:8: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:2757:9: {...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred91_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2757:18: (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
        // InternalGitHubActionsParser.g:2757:19: otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
        {
        otherlv_14=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_15=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2765:8: ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
        int cnt188=0;
        loop188:
        do {
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==RULE_BEGIN) ) {
                alt188=1;
            }


            switch (alt188) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:2766:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:2766:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:2767:10: lv_environmentVariables_16_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getCommandAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_environmentVariables_16_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt188 >= 1 ) break loop188;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(188, input);
                    throw eee;
            }
            cnt188++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred91_InternalGitHubActionsParser

    // $ANTLR start synpred92_InternalGitHubActionsParser
    public final void synpred92_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_17=null;
        Token otherlv_18=null;
        EObject lv_continueOnError_19_0 = null;


        // InternalGitHubActionsParser.g:2790:3: ( ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2790:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2790:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2791:4: {...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred92_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:2791:101: ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:2792:5: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:2795:8: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:2795:9: {...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred92_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2795:18: (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:2795:19: otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) )
        {
        otherlv_17=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_18=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2803:8: ( (lv_continueOnError_19_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2804:9: (lv_continueOnError_19_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2804:9: (lv_continueOnError_19_0= ruleExpression )
        // InternalGitHubActionsParser.g:2805:10: lv_continueOnError_19_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getCommandAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_continueOnError_19_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred92_InternalGitHubActionsParser

    // $ANTLR start synpred94_InternalGitHubActionsParser
    public final void synpred94_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_24=null;
        EObject lv_timeoutMinutes_22_0 = null;

        EObject lv_command_25_0 = null;


        // InternalGitHubActionsParser.g:2828:3: ( ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2828:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2828:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2829:4: {...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred94_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:2829:101: ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2830:5: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getCommandAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:2833:8: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:2833:9: {...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred94_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2833:18: ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:2833:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) )
        {
        // InternalGitHubActionsParser.g:2833:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )?
        int alt189=2;
        int LA189_0 = input.LA(1);

        if ( (LA189_0==TimeoutMinutes) ) {
            alt189=1;
        }
        switch (alt189) {
            case 1 :
                // InternalGitHubActionsParser.g:2834:9: otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) )
                {
                otherlv_20=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:2842:9: ( (lv_timeoutMinutes_22_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:2843:10: (lv_timeoutMinutes_22_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:2843:10: (lv_timeoutMinutes_22_0= ruleExpression )
                // InternalGitHubActionsParser.g:2844:11: lv_timeoutMinutes_22_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getCommandAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
                  										
                }
                pushFollow(FOLLOW_34);
                lv_timeoutMinutes_22_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:2862:8: (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:2863:9: otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) )
        {
        otherlv_23=(Token)match(input,Run,FOLLOW_3); if (state.failed) return ;
        otherlv_24=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2871:9: ( (lv_command_25_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:2872:10: (lv_command_25_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:2872:10: (lv_command_25_0= ruleExpression )
        // InternalGitHubActionsParser.g:2873:11: lv_command_25_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getCommandAccess().getCommandExpressionParserRuleCall_7_1_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_command_25_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred94_InternalGitHubActionsParser

    // $ANTLR start synpred95_InternalGitHubActionsParser
    public final void synpred95_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_id_3_0=null;

        // InternalGitHubActionsParser.g:2944:3: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2944:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2944:3: ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2945:4: {...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:2945:101: ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) )
        // InternalGitHubActionsParser.g:2946:5: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:2949:8: ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) )
        // InternalGitHubActionsParser.g:2949:9: {...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred95_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2949:18: (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) )
        // InternalGitHubActionsParser.g:2949:19: otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) )
        {
        otherlv_1=(Token)match(input,Id,FOLLOW_3); if (state.failed) return ;
        otherlv_2=(Token)match(input,Colon,FOLLOW_31); if (state.failed) return ;
        // InternalGitHubActionsParser.g:2957:8: ( (lv_id_3_0= RULE_STRING ) )
        // InternalGitHubActionsParser.g:2958:9: (lv_id_3_0= RULE_STRING )
        {
        // InternalGitHubActionsParser.g:2958:9: (lv_id_3_0= RULE_STRING )
        // InternalGitHubActionsParser.g:2959:10: lv_id_3_0= RULE_STRING
        {
        lv_id_3_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred95_InternalGitHubActionsParser

    // $ANTLR start synpred96_InternalGitHubActionsParser
    public final void synpred96_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_if_4_0 = null;


        // InternalGitHubActionsParser.g:2981:3: ( ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) )
        // InternalGitHubActionsParser.g:2981:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:2981:3: ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) )
        // InternalGitHubActionsParser.g:2982:4: {...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred96_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:2982:101: ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) )
        // InternalGitHubActionsParser.g:2983:5: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:2986:8: ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) )
        // InternalGitHubActionsParser.g:2986:9: {...}? => ( (lv_if_4_0= ruleIfStatement ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred96_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:2986:18: ( (lv_if_4_0= ruleIfStatement ) )
        // InternalGitHubActionsParser.g:2986:19: (lv_if_4_0= ruleIfStatement )
        {
        // InternalGitHubActionsParser.g:2986:19: (lv_if_4_0= ruleIfStatement )
        // InternalGitHubActionsParser.g:2987:9: lv_if_4_0= ruleIfStatement
        {
        if ( state.backtracking==0 ) {

          									newCompositeNode(grammarAccess.getPackageAccess().getIfIfStatementParserRuleCall_1_0());
          								
        }
        pushFollow(FOLLOW_2);
        lv_if_4_0=ruleIfStatement();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred96_InternalGitHubActionsParser

    // $ANTLR start synpred97_InternalGitHubActionsParser
    public final void synpred97_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_name_7_0 = null;


        // InternalGitHubActionsParser.g:3009:3: ( ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3009:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3009:3: ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3010:4: {...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred97_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:3010:101: ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3011:5: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:3014:8: ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3014:9: {...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred97_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3014:18: (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3014:19: otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) )
        {
        otherlv_5=(Token)match(input,Name,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3022:8: ( (lv_name_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3023:9: (lv_name_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3023:9: (lv_name_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:3024:10: lv_name_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getNameExpressionParserRuleCall_2_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_name_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred97_InternalGitHubActionsParser

    // $ANTLR start synpred98_InternalGitHubActionsParser
    public final void synpred98_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_shell_10_0 = null;


        // InternalGitHubActionsParser.g:3047:3: ( ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3047:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3047:3: ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3048:4: {...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred98_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:3048:101: ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3049:5: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:3052:8: ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3052:9: {...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred98_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3052:18: (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3052:19: otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) )
        {
        otherlv_8=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3060:8: ( (lv_shell_10_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3061:9: (lv_shell_10_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3061:9: (lv_shell_10_0= ruleExpression )
        // InternalGitHubActionsParser.g:3062:10: lv_shell_10_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getShellExpressionParserRuleCall_3_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_shell_10_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred98_InternalGitHubActionsParser

    // $ANTLR start synpred99_InternalGitHubActionsParser
    public final void synpred99_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_11=null;
        Token otherlv_12=null;
        EObject lv_workingDirectory_13_0 = null;


        // InternalGitHubActionsParser.g:3085:3: ( ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3085:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3085:3: ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3086:4: {...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred99_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:3086:101: ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3087:5: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:3090:8: ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3090:9: {...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred99_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3090:18: (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3090:19: otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) )
        {
        otherlv_11=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return ;
        otherlv_12=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3098:8: ( (lv_workingDirectory_13_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3099:9: (lv_workingDirectory_13_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3099:9: (lv_workingDirectory_13_0= ruleExpression )
        // InternalGitHubActionsParser.g:3100:10: lv_workingDirectory_13_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getWorkingDirectoryExpressionParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_workingDirectory_13_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred99_InternalGitHubActionsParser

    // $ANTLR start synpred100_InternalGitHubActionsParser
    public final void synpred100_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_environmentVariables_16_0 = null;


        // InternalGitHubActionsParser.g:3137:9: ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )
        // InternalGitHubActionsParser.g:3137:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
        {
        // InternalGitHubActionsParser.g:3137:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
        // InternalGitHubActionsParser.g:3138:10: lv_environmentVariables_16_0= ruleVariableAssignment
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_environmentVariables_16_0=ruleVariableAssignment();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred100_InternalGitHubActionsParser

    // $ANTLR start synpred101_InternalGitHubActionsParser
    public final void synpred101_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        EObject lv_environmentVariables_16_0 = null;


        // InternalGitHubActionsParser.g:3123:3: ( ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:3123:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:3123:3: ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:3124:4: {...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred101_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:3124:101: ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:3125:5: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:3128:8: ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:3128:9: {...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred101_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3128:18: (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ )
        // InternalGitHubActionsParser.g:3128:19: otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
        {
        otherlv_14=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_15=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3136:8: ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+
        int cnt190=0;
        loop190:
        do {
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==RULE_BEGIN) ) {
                alt190=1;
            }


            switch (alt190) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:3137:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:3137:9: (lv_environmentVariables_16_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:3138:10: lv_environmentVariables_16_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getPackageAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_5_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_environmentVariables_16_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt190 >= 1 ) break loop190;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(190, input);
                    throw eee;
            }
            cnt190++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred101_InternalGitHubActionsParser

    // $ANTLR start synpred102_InternalGitHubActionsParser
    public final void synpred102_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_17=null;
        Token otherlv_18=null;
        EObject lv_continueOnError_19_0 = null;


        // InternalGitHubActionsParser.g:3161:3: ( ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3161:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3161:3: ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3162:4: {...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred102_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6)");
        }
        // InternalGitHubActionsParser.g:3162:101: ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3163:5: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 6);
        // InternalGitHubActionsParser.g:3166:8: ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3166:9: {...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred102_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3166:18: (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3166:19: otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) )
        {
        otherlv_17=(Token)match(input,ContinueOnError,FOLLOW_3); if (state.failed) return ;
        otherlv_18=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3174:8: ( (lv_continueOnError_19_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3175:9: (lv_continueOnError_19_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3175:9: (lv_continueOnError_19_0= ruleExpression )
        // InternalGitHubActionsParser.g:3176:10: lv_continueOnError_19_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getPackageAccess().getContinueOnErrorExpressionParserRuleCall_6_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_continueOnError_19_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred102_InternalGitHubActionsParser

    // $ANTLR start synpred104_InternalGitHubActionsParser
    public final void synpred104_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_20=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_24=null;
        EObject lv_timeoutMinutes_22_0 = null;

        EObject lv_uses_25_0 = null;


        // InternalGitHubActionsParser.g:3199:3: ( ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3199:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3199:3: ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3200:4: {...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred104_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7)");
        }
        // InternalGitHubActionsParser.g:3200:101: ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3201:5: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 7);
        // InternalGitHubActionsParser.g:3204:8: ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3204:9: {...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred104_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3204:18: ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3204:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) )
        {
        // InternalGitHubActionsParser.g:3204:19: (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )?
        int alt191=2;
        int LA191_0 = input.LA(1);

        if ( (LA191_0==TimeoutMinutes) ) {
            alt191=1;
        }
        switch (alt191) {
            case 1 :
                // InternalGitHubActionsParser.g:3205:9: otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) )
                {
                otherlv_20=(Token)match(input,TimeoutMinutes,FOLLOW_3); if (state.failed) return ;
                otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:3213:9: ( (lv_timeoutMinutes_22_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:3214:10: (lv_timeoutMinutes_22_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:3214:10: (lv_timeoutMinutes_22_0= ruleExpression )
                // InternalGitHubActionsParser.g:3215:11: lv_timeoutMinutes_22_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getPackageAccess().getTimeoutMinutesExpressionParserRuleCall_7_0_2_0());
                  										
                }
                pushFollow(FOLLOW_36);
                lv_timeoutMinutes_22_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        // InternalGitHubActionsParser.g:3233:8: (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3234:9: otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) )
        {
        otherlv_23=(Token)match(input,Uses,FOLLOW_3); if (state.failed) return ;
        otherlv_24=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3242:9: ( (lv_uses_25_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3243:10: (lv_uses_25_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3243:10: (lv_uses_25_0= ruleExpression )
        // InternalGitHubActionsParser.g:3244:11: lv_uses_25_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getPackageAccess().getUsesExpressionParserRuleCall_7_1_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_uses_25_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred104_InternalGitHubActionsParser

    // $ANTLR start synpred105_InternalGitHubActionsParser
    public final void synpred105_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_30=null;
        Token otherlv_31=null;
        EObject lv_entrypoint_32_0 = null;


        // InternalGitHubActionsParser.g:3293:10: ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3293:10: ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3293:10: ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3294:11: {...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred105_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0)");
        }
        // InternalGitHubActionsParser.g:3294:114: ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3295:12: ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0);
        // InternalGitHubActionsParser.g:3298:15: ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3298:16: {...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred105_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3298:25: (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3298:26: otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) )
        {
        otherlv_30=(Token)match(input,Entrypoint,FOLLOW_3); if (state.failed) return ;
        otherlv_31=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3306:15: ( (lv_entrypoint_32_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3307:16: (lv_entrypoint_32_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3307:16: (lv_entrypoint_32_0= ruleExpression )
        // InternalGitHubActionsParser.g:3308:17: lv_entrypoint_32_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																	newCompositeNode(grammarAccess.getPackageAccess().getEntrypointExpressionParserRuleCall_8_0_3_0_2_0());
          																
        }
        pushFollow(FOLLOW_2);
        lv_entrypoint_32_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred105_InternalGitHubActionsParser

    // $ANTLR start synpred106_InternalGitHubActionsParser
    public final void synpred106_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_33=null;
        Token otherlv_34=null;
        EObject lv_containerArgs_35_0 = null;


        // InternalGitHubActionsParser.g:3331:10: ( ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3331:10: ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3331:10: ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3332:11: {...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred106_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1)");
        }
        // InternalGitHubActionsParser.g:3332:114: ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3333:12: ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1);
        // InternalGitHubActionsParser.g:3336:15: ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3336:16: {...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred106_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3336:25: (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3336:26: otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) )
        {
        otherlv_33=(Token)match(input,Args,FOLLOW_3); if (state.failed) return ;
        otherlv_34=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3344:15: ( (lv_containerArgs_35_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3345:16: (lv_containerArgs_35_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3345:16: (lv_containerArgs_35_0= ruleExpression )
        // InternalGitHubActionsParser.g:3346:17: lv_containerArgs_35_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																	newCompositeNode(grammarAccess.getPackageAccess().getContainerArgsExpressionParserRuleCall_8_0_3_1_2_0());
          																
        }
        pushFollow(FOLLOW_2);
        lv_containerArgs_35_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred106_InternalGitHubActionsParser

    // $ANTLR start synpred109_InternalGitHubActionsParser
    public final void synpred109_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token otherlv_30=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_34=null;
        Token this_END_37=null;
        EObject lv_entrypoint_32_0 = null;

        EObject lv_containerArgs_35_0 = null;

        EObject lv_args_36_0 = null;


        // InternalGitHubActionsParser.g:3268:3: ( ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3268:3: ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3268:3: ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:3269:4: {...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred109_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8)");
        }
        // InternalGitHubActionsParser.g:3269:101: ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:3270:5: ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup(), 8);
        // InternalGitHubActionsParser.g:3273:8: ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) )
        // InternalGitHubActionsParser.g:3273:9: {...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred109_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3273:18: ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) )
        int alt195=2;
        int LA195_0 = input.LA(1);

        if ( (LA195_0==With) ) {
            alt195=1;
        }
        else if ( (LA195_0==RULE_BEGIN) ) {
            alt195=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 195, 0, input);

            throw nvae;
        }
        switch (alt195) {
            case 1 :
                // InternalGitHubActionsParser.g:3273:19: (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) )
                {
                // InternalGitHubActionsParser.g:3273:19: (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) )
                // InternalGitHubActionsParser.g:3274:9: otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) )
                {
                otherlv_26=(Token)match(input,With,FOLLOW_3); if (state.failed) return ;
                otherlv_27=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
                this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_37); if (state.failed) return ;
                // InternalGitHubActionsParser.g:3286:9: ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) )
                // InternalGitHubActionsParser.g:3287:10: ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
                {
                // InternalGitHubActionsParser.g:3287:10: ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) )
                // InternalGitHubActionsParser.g:3288:11: ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
                {
                getUnorderedGroupHelper().enter(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3());
                // InternalGitHubActionsParser.g:3291:11: ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?)
                // InternalGitHubActionsParser.g:3292:12: ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?
                {
                // InternalGitHubActionsParser.g:3292:12: ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+
                int cnt193=0;
                loop193:
                do {
                    int alt193=3;
                    int LA193_0 = input.LA(1);

                    if ( LA193_0 == Entrypoint && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0) ) {
                        alt193=1;
                    }
                    else if ( LA193_0 == Args && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1) ) {
                        alt193=2;
                    }


                    switch (alt193) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:3293:10: ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:3293:10: ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) )
                	    // InternalGitHubActionsParser.g:3294:11: {...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred109_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0)");
                	    }
                	    // InternalGitHubActionsParser.g:3294:114: ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) )
                	    // InternalGitHubActionsParser.g:3295:12: ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 0);
                	    // InternalGitHubActionsParser.g:3298:15: ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) )
                	    // InternalGitHubActionsParser.g:3298:16: {...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred109_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:3298:25: (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) )
                	    // InternalGitHubActionsParser.g:3298:26: otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) )
                	    {
                	    otherlv_30=(Token)match(input,Entrypoint,FOLLOW_3); if (state.failed) return ;
                	    otherlv_31=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:3306:15: ( (lv_entrypoint_32_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:3307:16: (lv_entrypoint_32_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:3307:16: (lv_entrypoint_32_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:3308:17: lv_entrypoint_32_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																	newCompositeNode(grammarAccess.getPackageAccess().getEntrypointExpressionParserRuleCall_8_0_3_0_2_0());
                	      																
                	    }
                	    pushFollow(FOLLOW_103);
                	    lv_entrypoint_32_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;
                	case 2 :
                	    // InternalGitHubActionsParser.g:3331:10: ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:3331:10: ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) )
                	    // InternalGitHubActionsParser.g:3332:11: {...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred109_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1)");
                	    }
                	    // InternalGitHubActionsParser.g:3332:114: ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) )
                	    // InternalGitHubActionsParser.g:3333:12: ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3(), 1);
                	    // InternalGitHubActionsParser.g:3336:15: ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) )
                	    // InternalGitHubActionsParser.g:3336:16: {...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred109_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:3336:25: (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) )
                	    // InternalGitHubActionsParser.g:3336:26: otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) )
                	    {
                	    otherlv_33=(Token)match(input,Args,FOLLOW_3); if (state.failed) return ;
                	    otherlv_34=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:3344:15: ( (lv_containerArgs_35_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:3345:16: (lv_containerArgs_35_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:3345:16: (lv_containerArgs_35_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:3346:17: lv_containerArgs_35_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																	newCompositeNode(grammarAccess.getPackageAccess().getContainerArgsExpressionParserRuleCall_8_0_3_1_2_0());
                	      																
                	    }
                	    pushFollow(FOLLOW_103);
                	    lv_containerArgs_35_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt193 >= 1 ) break loop193;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(193, input);
                            throw eee;
                    }
                    cnt193++;
                } while (true);

                if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3()) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred109_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getPackageAccess().getUnorderedGroup_8_0_3())");
                }

                }


                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:3379:8: ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
                {
                // InternalGitHubActionsParser.g:3379:8: ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END )
                // InternalGitHubActionsParser.g:3380:9: ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END
                {
                // InternalGitHubActionsParser.g:3380:9: ( (lv_args_36_0= ruleVariableAssignment ) )+
                int cnt194=0;
                loop194:
                do {
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==RULE_BEGIN) ) {
                        alt194=1;
                    }


                    switch (alt194) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:3381:10: (lv_args_36_0= ruleVariableAssignment )
                	    {
                	    // InternalGitHubActionsParser.g:3381:10: (lv_args_36_0= ruleVariableAssignment )
                	    // InternalGitHubActionsParser.g:3382:11: lv_args_36_0= ruleVariableAssignment
                	    {
                	    if ( state.backtracking==0 ) {

                	      											newCompositeNode(grammarAccess.getPackageAccess().getArgsVariableAssignmentParserRuleCall_8_1_0_0());
                	      										
                	    }
                	    pushFollow(FOLLOW_39);
                	    lv_args_36_0=ruleVariableAssignment();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt194 >= 1 ) break loop194;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(194, input);
                            throw eee;
                    }
                    cnt194++;
                } while (true);

                this_END_37=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred109_InternalGitHubActionsParser

    // $ANTLR start synpred110_InternalGitHubActionsParser
    public final void synpred110_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_name_4_0 = null;


        // InternalGitHubActionsParser.g:3498:4: ( ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3498:4: ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3498:4: ({...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3499:5: {...}? => ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred110_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 0)");
        }
        // InternalGitHubActionsParser.g:3499:113: ( ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3500:6: ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 0);
        // InternalGitHubActionsParser.g:3503:9: ({...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3503:10: {...}? => (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred110_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3503:19: (otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3503:20: otherlv_2= Group otherlv_3= Colon ( (lv_name_4_0= ruleExpression ) )
        {
        otherlv_2=(Token)match(input,Group,FOLLOW_3); if (state.failed) return ;
        otherlv_3=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3511:9: ( (lv_name_4_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3512:10: (lv_name_4_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3512:10: (lv_name_4_0= ruleExpression )
        // InternalGitHubActionsParser.g:3513:11: lv_name_4_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getNameExpressionParserRuleCall_1_0_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_name_4_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred110_InternalGitHubActionsParser

    // $ANTLR start synpred111_InternalGitHubActionsParser
    public final void synpred111_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_cancelInProgress_7_0 = null;


        // InternalGitHubActionsParser.g:3536:4: ( ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3536:4: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:3536:4: ({...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:3537:5: {...}? => ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred111_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 1)");
        }
        // InternalGitHubActionsParser.g:3537:113: ( ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:3538:6: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getConcurrencyGroupAccess().getUnorderedGroup_1(), 1);
        // InternalGitHubActionsParser.g:3541:9: ({...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:3541:10: {...}? => (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred111_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:3541:19: (otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:3541:20: otherlv_5= CancelInProgress otherlv_6= Colon ( (lv_cancelInProgress_7_0= ruleExpression ) )
        {
        otherlv_5=(Token)match(input,CancelInProgress,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:3549:9: ( (lv_cancelInProgress_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:3550:10: (lv_cancelInProgress_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:3550:10: (lv_cancelInProgress_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:3551:11: lv_cancelInProgress_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getConcurrencyGroupAccess().getCancelInProgressExpressionParserRuleCall_1_1_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_cancelInProgress_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred111_InternalGitHubActionsParser

    // $ANTLR start synpred135_InternalGitHubActionsParser
    public final void synpred135_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Enumerator lv_eventTypes_10_0 = null;

        Enumerator lv_eventTypes_12_0 = null;


        // InternalGitHubActionsParser.g:4419:10: ( (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) )
        // InternalGitHubActionsParser.g:4419:10: (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket )
        {
        // InternalGitHubActionsParser.g:4419:10: (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket )
        // InternalGitHubActionsParser.g:4420:11: otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket
        {
        otherlv_9=(Token)match(input,LeftSquareBracket,FOLLOW_43); if (state.failed) return ;
        // InternalGitHubActionsParser.g:4424:11: ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        // InternalGitHubActionsParser.g:4425:12: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
        {
        // InternalGitHubActionsParser.g:4425:12: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
        // InternalGitHubActionsParser.g:4426:13: lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE
        {
        if ( state.backtracking==0 ) {

          													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_1_1_0());
          												
        }
        pushFollow(FOLLOW_8);
        lv_eventTypes_10_0=ruleWEBHOOK_ACTIVITY_TYPE();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalGitHubActionsParser.g:4443:11: (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
        loop199:
        do {
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==Comma) ) {
                alt199=1;
            }


            switch (alt199) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:4444:12: otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	    {
        	    otherlv_11=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:4448:12: ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	    // InternalGitHubActionsParser.g:4449:13: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	    {
        	    // InternalGitHubActionsParser.g:4449:13: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	    // InternalGitHubActionsParser.g:4450:14: lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE
        	    {
        	    if ( state.backtracking==0 ) {

        	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_1_2_1_0());
        	      													
        	    }
        	    pushFollow(FOLLOW_8);
        	    lv_eventTypes_12_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop199;
            }
        } while (true);

        otherlv_13=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred135_InternalGitHubActionsParser

    // $ANTLR start synpred137_InternalGitHubActionsParser
    public final void synpred137_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token this_END_18=null;
        Enumerator lv_eventTypes_16_0 = null;


        // InternalGitHubActionsParser.g:4474:10: ( (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )
        // InternalGitHubActionsParser.g:4474:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
        {
        // InternalGitHubActionsParser.g:4474:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
        // InternalGitHubActionsParser.g:4475:11: this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END
        {
        this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
        // InternalGitHubActionsParser.g:4479:11: (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+
        int cnt200=0;
        loop200:
        do {
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==HyphenMinus) ) {
                alt200=1;
            }


            switch (alt200) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:4480:12: otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE
        	    {
        	    otherlv_15=(Token)match(input,HyphenMinus,FOLLOW_43); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:4484:12: ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
        	    // InternalGitHubActionsParser.g:4485:13: (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	    {
        	    // InternalGitHubActionsParser.g:4485:13: (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE )
        	    // InternalGitHubActionsParser.g:4486:14: lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE
        	    {
        	    if ( state.backtracking==0 ) {

        	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_2_1_1_0());
        	      													
        	    }
        	    pushFollow(FOLLOW_10);
        	    lv_eventTypes_16_0=ruleWEBHOOK_ACTIVITY_TYPE();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt200 >= 1 ) break loop200;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(200, input);
                    throw eee;
            }
            cnt200++;
        } while (true);

        this_END_18=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred137_InternalGitHubActionsParser

    // $ANTLR start synpred138_InternalGitHubActionsParser
    public final void synpred138_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token this_BEGIN_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token this_END_18=null;
        Enumerator lv_eventTypes_8_0 = null;

        Enumerator lv_eventTypes_10_0 = null;

        Enumerator lv_eventTypes_12_0 = null;

        Enumerator lv_eventTypes_16_0 = null;


        // InternalGitHubActionsParser.g:4379:4: ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:4379:4: ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:4379:4: ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:4380:5: {...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred138_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 0)");
        }
        // InternalGitHubActionsParser.g:4380:123: ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:4381:6: ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 0);
        // InternalGitHubActionsParser.g:4384:9: ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:4384:10: {...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred138_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:4384:19: (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
        // InternalGitHubActionsParser.g:4384:20: this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
        {
        this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_104); if (state.failed) return ;
        // InternalGitHubActionsParser.g:4388:9: ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
        int alt203=4;
        switch ( input.LA(1) ) {
            case Types:
                {
                alt203=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt203=2;
                }
                break;
            case RULE_BEGIN:
                {
                alt203=3;
                }
                break;
        }

        switch (alt203) {
            case 1 :
                // InternalGitHubActionsParser.g:4389:10: (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )
                {
                // InternalGitHubActionsParser.g:4389:10: (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )
                // InternalGitHubActionsParser.g:4390:11: otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                {
                otherlv_6=(Token)match(input,Types,FOLLOW_3); if (state.failed) return ;
                otherlv_7=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4398:11: ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:4399:12: (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:4399:12: (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:4400:13: lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_0_2_0());
                  												
                }
                pushFollow(FOLLOW_2);
                lv_eventTypes_8_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:4419:10: (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:4419:10: (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket )
                // InternalGitHubActionsParser.g:4420:11: otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket
                {
                otherlv_9=(Token)match(input,LeftSquareBracket,FOLLOW_43); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4424:11: ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                // InternalGitHubActionsParser.g:4425:12: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
                {
                // InternalGitHubActionsParser.g:4425:12: (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE )
                // InternalGitHubActionsParser.g:4426:13: lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_1_1_0());
                  												
                }
                pushFollow(FOLLOW_8);
                lv_eventTypes_10_0=ruleWEBHOOK_ACTIVITY_TYPE();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:4443:11: (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )*
                loop201:
                do {
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==Comma) ) {
                        alt201=1;
                    }


                    switch (alt201) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:4444:12: otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    {
                	    otherlv_11=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:4448:12: ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:4449:13: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:4449:13: (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:4450:14: lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_eventTypes_12_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop201;
                    }
                } while (true);

                otherlv_13=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:4474:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
                {
                // InternalGitHubActionsParser.g:4474:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
                // InternalGitHubActionsParser.g:4475:11: this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END
                {
                this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4479:11: (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+
                int cnt202=0;
                loop202:
                do {
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==HyphenMinus) ) {
                        alt202=1;
                    }


                    switch (alt202) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:4480:12: otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE
                	    {
                	    otherlv_15=(Token)match(input,HyphenMinus,FOLLOW_43); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:4484:12: ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) )
                	    // InternalGitHubActionsParser.g:4485:13: (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    {
                	    // InternalGitHubActionsParser.g:4485:13: (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE )
                	    // InternalGitHubActionsParser.g:4486:14: lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getEventTypesWEBHOOK_ACTIVITY_TYPEEnumRuleCall_3_0_1_2_1_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_eventTypes_16_0=ruleWEBHOOK_ACTIVITY_TYPE();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt202 >= 1 ) break loop202;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(202, input);
                            throw eee;
                    }
                    cnt202++;
                } while (true);

                this_END_18=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred138_InternalGitHubActionsParser

    // $ANTLR start synpred144_InternalGitHubActionsParser
    public final void synpred144_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_19=null;
        Token lv_ignoreSpecifiedBranches_20_0=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token this_END_32=null;
        EObject lv_branches_22_0 = null;

        EObject lv_branches_24_0 = null;

        EObject lv_branches_26_0 = null;

        EObject lv_branches_30_0 = null;


        // InternalGitHubActionsParser.g:4520:4: ( ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:4520:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:4520:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:4521:5: {...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred144_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1)");
        }
        // InternalGitHubActionsParser.g:4521:123: ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:4522:6: ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1);
        // InternalGitHubActionsParser.g:4525:9: ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
        // InternalGitHubActionsParser.g:4525:10: {...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred144_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:4525:19: ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
        int alt209=3;
        switch ( input.LA(1) ) {
        case BranchesIgnore:
        case Branches:
            {
            alt209=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt209=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt209=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 209, 0, input);

            throw nvae;
        }

        switch (alt209) {
            case 1 :
                // InternalGitHubActionsParser.g:4525:20: ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:4525:20: ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:4526:10: (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) )
                {
                // InternalGitHubActionsParser.g:4526:10: (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) )
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==Branches) ) {
                    alt206=1;
                }
                else if ( (LA206_0==BranchesIgnore) ) {
                    alt206=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 206, 0, input);

                    throw nvae;
                }
                switch (alt206) {
                    case 1 :
                        // InternalGitHubActionsParser.g:4527:11: otherlv_19= Branches
                        {
                        otherlv_19=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:4532:11: ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:4532:11: ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:4533:12: (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:4533:12: (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:4534:13: lv_ignoreSpecifiedBranches_20_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_20_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4551:10: ( (lv_branches_22_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:4552:11: (lv_branches_22_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:4552:11: (lv_branches_22_0= ruleExpression )
                // InternalGitHubActionsParser.g:4553:12: lv_branches_22_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  												newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_0_2_0());
                  											
                }
                pushFollow(FOLLOW_2);
                lv_branches_22_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:4572:9: (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:4572:9: (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
                // InternalGitHubActionsParser.g:4573:10: otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket
                {
                otherlv_23=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4577:10: ( (lv_branches_24_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:4578:11: (lv_branches_24_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:4578:11: (lv_branches_24_0= ruleExpression )
                // InternalGitHubActionsParser.g:4579:12: lv_branches_24_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  												newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_1_1_0());
                  											
                }
                pushFollow(FOLLOW_8);
                lv_branches_24_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:4596:10: (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )*
                loop207:
                do {
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==Comma) ) {
                        alt207=1;
                    }


                    switch (alt207) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:4597:11: otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) )
                	    {
                	    otherlv_25=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:4601:11: ( (lv_branches_26_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:4602:12: (lv_branches_26_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:4602:12: (lv_branches_26_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:4603:13: lv_branches_26_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_1_2_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_branches_26_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop207;
                    }
                } while (true);

                otherlv_27=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:4627:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
                {
                // InternalGitHubActionsParser.g:4627:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
                // InternalGitHubActionsParser.g:4628:10: this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END
                {
                this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4632:10: (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+
                int cnt208=0;
                loop208:
                do {
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==HyphenMinus) ) {
                        alt208=1;
                    }


                    switch (alt208) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:4633:11: otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
                	    {
                	    otherlv_29=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:4637:11: ( (lv_branches_30_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:4638:12: (lv_branches_30_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:4638:12: (lv_branches_30_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:4639:13: lv_branches_30_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getBranchesExpressionParserRuleCall_3_1_2_1_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_branches_30_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt208 >= 1 ) break loop208;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(208, input);
                            throw eee;
                    }
                    cnt208++;
                } while (true);

                this_END_32=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred144_InternalGitHubActionsParser

    // $ANTLR start synpred151_InternalGitHubActionsParser
    public final void synpred151_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_33=null;
        Token lv_ignoreSpecifiedPaths_34_0=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_39=null;
        Token otherlv_41=null;
        Token this_BEGIN_42=null;
        Token otherlv_43=null;
        Token this_NEWLINE_45=null;
        Token this_END_46=null;
        Token this_END_47=null;
        EObject lv_paths_36_0 = null;

        EObject lv_paths_38_0 = null;

        EObject lv_paths_40_0 = null;

        EObject lv_paths_44_0 = null;


        // InternalGitHubActionsParser.g:4672:4: ( ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:4672:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:4672:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:4673:5: {...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred151_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2)");
        }
        // InternalGitHubActionsParser.g:4673:123: ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
        // InternalGitHubActionsParser.g:4674:6: ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2);
        // InternalGitHubActionsParser.g:4677:9: ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
        // InternalGitHubActionsParser.g:4677:10: {...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred151_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:4677:19: ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
        // InternalGitHubActionsParser.g:4677:20: ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END
        {
        // InternalGitHubActionsParser.g:4677:20: ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )?
        int alt216=4;
        switch ( input.LA(1) ) {
            case PathsIgnore:
            case Paths:
                {
                alt216=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt216=2;
                }
                break;
            case RULE_BEGIN:
                {
                alt216=3;
                }
                break;
        }

        switch (alt216) {
            case 1 :
                // InternalGitHubActionsParser.g:4678:10: ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:4678:10: ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:4679:11: (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) )
                {
                // InternalGitHubActionsParser.g:4679:11: (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) )
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==Paths) ) {
                    alt213=1;
                }
                else if ( (LA213_0==PathsIgnore) ) {
                    alt213=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 213, 0, input);

                    throw nvae;
                }
                switch (alt213) {
                    case 1 :
                        // InternalGitHubActionsParser.g:4680:12: otherlv_33= Paths
                        {
                        otherlv_33=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:4685:12: ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:4685:12: ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:4686:13: (lv_ignoreSpecifiedPaths_34_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:4686:13: (lv_ignoreSpecifiedPaths_34_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:4687:14: lv_ignoreSpecifiedPaths_34_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_34_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_35=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4704:11: ( (lv_paths_36_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:4705:12: (lv_paths_36_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:4705:12: (lv_paths_36_0= ruleExpression )
                // InternalGitHubActionsParser.g:4706:13: lv_paths_36_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_0_2_0());
                  												
                }
                pushFollow(FOLLOW_24);
                lv_paths_36_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:4725:10: (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:4725:10: (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
                // InternalGitHubActionsParser.g:4726:11: otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket
                {
                otherlv_37=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4730:11: ( (lv_paths_38_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:4731:12: (lv_paths_38_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:4731:12: (lv_paths_38_0= ruleExpression )
                // InternalGitHubActionsParser.g:4732:13: lv_paths_38_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_1_0());
                  												
                }
                pushFollow(FOLLOW_8);
                lv_paths_38_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:4749:11: (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )*
                loop214:
                do {
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==Comma) ) {
                        alt214=1;
                    }


                    switch (alt214) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:4750:12: otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) )
                	    {
                	    otherlv_39=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:4754:12: ( (lv_paths_40_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:4755:13: (lv_paths_40_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:4755:13: (lv_paths_40_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:4756:14: lv_paths_40_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_paths_40_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop214;
                    }
                } while (true);

                otherlv_41=(Token)match(input,RightSquareBracket,FOLLOW_24); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:4780:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
                {
                // InternalGitHubActionsParser.g:4780:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
                // InternalGitHubActionsParser.g:4781:11: this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END
                {
                this_BEGIN_42=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4785:11: (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+
                int cnt215=0;
                loop215:
                do {
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==HyphenMinus) ) {
                        alt215=1;
                    }


                    switch (alt215) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:4786:12: otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE
                	    {
                	    otherlv_43=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:4790:12: ( (lv_paths_44_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:4791:13: (lv_paths_44_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:4791:13: (lv_paths_44_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:4792:14: lv_paths_44_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPullRequestTriggerAccess().getPathsExpressionParserRuleCall_3_2_0_2_1_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_paths_44_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_45=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt215 >= 1 ) break loop215;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(215, input);
                            throw eee;
                    }
                    cnt215++;
                } while (true);

                this_END_46=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;

                }


                }
                break;

        }

        this_END_47=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred151_InternalGitHubActionsParser

    // $ANTLR start synpred155_InternalGitHubActionsParser
    public final void synpred155_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        EObject lv_branches_10_0 = null;

        EObject lv_branches_12_0 = null;


        // InternalGitHubActionsParser.g:4952:10: ( (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) )
        // InternalGitHubActionsParser.g:4952:10: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket )
        {
        // InternalGitHubActionsParser.g:4952:10: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket )
        // InternalGitHubActionsParser.g:4953:11: otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket
        {
        otherlv_9=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:4957:11: ( (lv_branches_10_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:4958:12: (lv_branches_10_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:4958:12: (lv_branches_10_0= ruleExpression )
        // InternalGitHubActionsParser.g:4959:13: lv_branches_10_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_1_1_0());
          												
        }
        pushFollow(FOLLOW_8);
        lv_branches_10_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        // InternalGitHubActionsParser.g:4976:11: (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )*
        loop218:
        do {
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==Comma) ) {
                alt218=1;
            }


            switch (alt218) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:4977:12: otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) )
        	    {
        	    otherlv_11=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:4981:12: ( (lv_branches_12_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:4982:13: (lv_branches_12_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:4982:13: (lv_branches_12_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:4983:14: lv_branches_12_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_1_2_1_0());
        	      													
        	    }
        	    pushFollow(FOLLOW_8);
        	    lv_branches_12_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }
        	    break;

        	default :
        	    break loop218;
            }
        } while (true);

        otherlv_13=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred155_InternalGitHubActionsParser

    // $ANTLR start synpred157_InternalGitHubActionsParser
    public final void synpred157_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token this_END_18=null;
        EObject lv_branches_16_0 = null;


        // InternalGitHubActionsParser.g:5007:10: ( (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )
        // InternalGitHubActionsParser.g:5007:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
        {
        // InternalGitHubActionsParser.g:5007:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
        // InternalGitHubActionsParser.g:5008:11: this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END
        {
        this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5012:11: (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+
        int cnt219=0;
        loop219:
        do {
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==HyphenMinus) ) {
                alt219=1;
            }


            switch (alt219) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:5013:12: otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
        	    {
        	    otherlv_15=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:5017:12: ( (lv_branches_16_0= ruleExpression ) )
        	    // InternalGitHubActionsParser.g:5018:13: (lv_branches_16_0= ruleExpression )
        	    {
        	    // InternalGitHubActionsParser.g:5018:13: (lv_branches_16_0= ruleExpression )
        	    // InternalGitHubActionsParser.g:5019:14: lv_branches_16_0= ruleExpression
        	    {
        	    if ( state.backtracking==0 ) {

        	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_2_1_1_0());
        	      													
        	    }
        	    pushFollow(FOLLOW_10);
        	    lv_branches_16_0=ruleExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }

        	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt219 >= 1 ) break loop219;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(219, input);
                    throw eee;
            }
            cnt219++;
        } while (true);

        this_END_18=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred157_InternalGitHubActionsParser

    // $ANTLR start synpred158_InternalGitHubActionsParser
    public final void synpred158_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token lv_ignoreSpecifiedBranches_6_0=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token this_BEGIN_14=null;
        Token otherlv_15=null;
        Token this_NEWLINE_17=null;
        Token this_END_18=null;
        EObject lv_branches_8_0 = null;

        EObject lv_branches_10_0 = null;

        EObject lv_branches_12_0 = null;

        EObject lv_branches_16_0 = null;


        // InternalGitHubActionsParser.g:4895:4: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:4895:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:4895:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) )
        // InternalGitHubActionsParser.g:4896:5: {...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred158_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 0)");
        }
        // InternalGitHubActionsParser.g:4896:116: ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) )
        // InternalGitHubActionsParser.g:4897:6: ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 0);
        // InternalGitHubActionsParser.g:4900:9: ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) )
        // InternalGitHubActionsParser.g:4900:10: {...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred158_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:4900:19: (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? )
        // InternalGitHubActionsParser.g:4900:20: this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
        {
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_105); if (state.failed) return ;
        // InternalGitHubActionsParser.g:4904:9: ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?
        int alt223=4;
        switch ( input.LA(1) ) {
            case BranchesIgnore:
            case Branches:
                {
                alt223=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt223=2;
                }
                break;
            case RULE_BEGIN:
                {
                alt223=3;
                }
                break;
        }

        switch (alt223) {
            case 1 :
                // InternalGitHubActionsParser.g:4905:10: ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:4905:10: ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:4906:11: (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) )
                {
                // InternalGitHubActionsParser.g:4906:11: (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) )
                int alt220=2;
                int LA220_0 = input.LA(1);

                if ( (LA220_0==Branches) ) {
                    alt220=1;
                }
                else if ( (LA220_0==BranchesIgnore) ) {
                    alt220=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 0, input);

                    throw nvae;
                }
                switch (alt220) {
                    case 1 :
                        // InternalGitHubActionsParser.g:4907:12: otherlv_5= Branches
                        {
                        otherlv_5=(Token)match(input,Branches,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:4912:12: ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:4912:12: ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) )
                        // InternalGitHubActionsParser.g:4913:13: (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore )
                        {
                        // InternalGitHubActionsParser.g:4913:13: (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore )
                        // InternalGitHubActionsParser.g:4914:14: lv_ignoreSpecifiedBranches_6_0= BranchesIgnore
                        {
                        lv_ignoreSpecifiedBranches_6_0=(Token)match(input,BranchesIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_7=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4931:11: ( (lv_branches_8_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:4932:12: (lv_branches_8_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:4932:12: (lv_branches_8_0= ruleExpression )
                // InternalGitHubActionsParser.g:4933:13: lv_branches_8_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_0_2_0());
                  												
                }
                pushFollow(FOLLOW_2);
                lv_branches_8_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:4952:10: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:4952:10: (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket )
                // InternalGitHubActionsParser.g:4953:11: otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket
                {
                otherlv_9=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:4957:11: ( (lv_branches_10_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:4958:12: (lv_branches_10_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:4958:12: (lv_branches_10_0= ruleExpression )
                // InternalGitHubActionsParser.g:4959:13: lv_branches_10_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_1_1_0());
                  												
                }
                pushFollow(FOLLOW_8);
                lv_branches_10_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:4976:11: (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )*
                loop221:
                do {
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==Comma) ) {
                        alt221=1;
                    }


                    switch (alt221) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:4977:12: otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) )
                	    {
                	    otherlv_11=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:4981:12: ( (lv_branches_12_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:4982:13: (lv_branches_12_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:4982:13: (lv_branches_12_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:4983:14: lv_branches_12_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_branches_12_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop221;
                    }
                } while (true);

                otherlv_13=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5007:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
                {
                // InternalGitHubActionsParser.g:5007:10: (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END )
                // InternalGitHubActionsParser.g:5008:11: this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END
                {
                this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5012:11: (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+
                int cnt222=0;
                loop222:
                do {
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==HyphenMinus) ) {
                        alt222=1;
                    }


                    switch (alt222) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5013:12: otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE
                	    {
                	    otherlv_15=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5017:12: ( (lv_branches_16_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5018:13: (lv_branches_16_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5018:13: (lv_branches_16_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5019:14: lv_branches_16_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getBranchesExpressionParserRuleCall_3_0_1_2_1_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_branches_16_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_17=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt222 >= 1 ) break loop222;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(222, input);
                            throw eee;
                    }
                    cnt222++;
                } while (true);

                this_END_18=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred158_InternalGitHubActionsParser

    // $ANTLR start synpred164_InternalGitHubActionsParser
    public final void synpred164_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_19=null;
        Token lv_ignoreSpecifiedPaths_20_0=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token this_BEGIN_28=null;
        Token otherlv_29=null;
        Token this_NEWLINE_31=null;
        Token this_END_32=null;
        EObject lv_paths_22_0 = null;

        EObject lv_paths_24_0 = null;

        EObject lv_paths_26_0 = null;

        EObject lv_paths_30_0 = null;


        // InternalGitHubActionsParser.g:5053:4: ( ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5053:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:5053:4: ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:5054:5: {...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred164_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1)");
        }
        // InternalGitHubActionsParser.g:5054:116: ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:5055:6: ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1);
        // InternalGitHubActionsParser.g:5058:9: ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) )
        // InternalGitHubActionsParser.g:5058:10: {...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred164_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5058:19: ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) )
        int alt229=3;
        switch ( input.LA(1) ) {
        case PathsIgnore:
        case Paths:
            {
            alt229=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt229=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt229=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 229, 0, input);

            throw nvae;
        }

        switch (alt229) {
            case 1 :
                // InternalGitHubActionsParser.g:5058:20: ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:5058:20: ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:5059:10: (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) )
                {
                // InternalGitHubActionsParser.g:5059:10: (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) )
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==Paths) ) {
                    alt226=1;
                }
                else if ( (LA226_0==PathsIgnore) ) {
                    alt226=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 226, 0, input);

                    throw nvae;
                }
                switch (alt226) {
                    case 1 :
                        // InternalGitHubActionsParser.g:5060:11: otherlv_19= Paths
                        {
                        otherlv_19=(Token)match(input,Paths,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:5065:11: ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:5065:11: ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) )
                        // InternalGitHubActionsParser.g:5066:12: (lv_ignoreSpecifiedPaths_20_0= PathsIgnore )
                        {
                        // InternalGitHubActionsParser.g:5066:12: (lv_ignoreSpecifiedPaths_20_0= PathsIgnore )
                        // InternalGitHubActionsParser.g:5067:13: lv_ignoreSpecifiedPaths_20_0= PathsIgnore
                        {
                        lv_ignoreSpecifiedPaths_20_0=(Token)match(input,PathsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_21=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5084:10: ( (lv_paths_22_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5085:11: (lv_paths_22_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5085:11: (lv_paths_22_0= ruleExpression )
                // InternalGitHubActionsParser.g:5086:12: lv_paths_22_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  												newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_0_2_0());
                  											
                }
                pushFollow(FOLLOW_2);
                lv_paths_22_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5105:9: (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:5105:9: (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket )
                // InternalGitHubActionsParser.g:5106:10: otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket
                {
                otherlv_23=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5110:10: ( (lv_paths_24_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5111:11: (lv_paths_24_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5111:11: (lv_paths_24_0= ruleExpression )
                // InternalGitHubActionsParser.g:5112:12: lv_paths_24_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  												newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_1_0());
                  											
                }
                pushFollow(FOLLOW_8);
                lv_paths_24_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5129:10: (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )*
                loop227:
                do {
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==Comma) ) {
                        alt227=1;
                    }


                    switch (alt227) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5130:11: otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) )
                	    {
                	    otherlv_25=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5134:11: ( (lv_paths_26_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5135:12: (lv_paths_26_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5135:12: (lv_paths_26_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5136:13: lv_paths_26_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_1_2_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_paths_26_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop227;
                    }
                } while (true);

                otherlv_27=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5160:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
                {
                // InternalGitHubActionsParser.g:5160:9: (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END )
                // InternalGitHubActionsParser.g:5161:10: this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END
                {
                this_BEGIN_28=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5165:10: (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+
                int cnt228=0;
                loop228:
                do {
                    int alt228=2;
                    int LA228_0 = input.LA(1);

                    if ( (LA228_0==HyphenMinus) ) {
                        alt228=1;
                    }


                    switch (alt228) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5166:11: otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE
                	    {
                	    otherlv_29=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5170:11: ( (lv_paths_30_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5171:12: (lv_paths_30_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5171:12: (lv_paths_30_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5172:13: lv_paths_30_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getPathsExpressionParserRuleCall_3_1_2_1_1_0());
                	      												
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_paths_30_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_31=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt228 >= 1 ) break loop228;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(228, input);
                            throw eee;
                    }
                    cnt228++;
                } while (true);

                this_END_32=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred164_InternalGitHubActionsParser

    // $ANTLR start synpred171_InternalGitHubActionsParser
    public final void synpred171_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_33=null;
        Token lv_ignoreSpecifiedTags_34_0=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token otherlv_39=null;
        Token otherlv_41=null;
        Token this_BEGIN_42=null;
        Token otherlv_43=null;
        Token this_NEWLINE_45=null;
        Token this_END_46=null;
        Token this_END_47=null;
        EObject lv_tags_36_0 = null;

        EObject lv_tags_38_0 = null;

        EObject lv_tags_40_0 = null;

        EObject lv_tags_44_0 = null;


        // InternalGitHubActionsParser.g:5205:4: ( ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:5205:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:5205:4: ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:5206:5: {...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred171_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2)");
        }
        // InternalGitHubActionsParser.g:5206:116: ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) )
        // InternalGitHubActionsParser.g:5207:6: ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2);
        // InternalGitHubActionsParser.g:5210:9: ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) )
        // InternalGitHubActionsParser.g:5210:10: {...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred171_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5210:19: ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END )
        // InternalGitHubActionsParser.g:5210:20: ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END
        {
        // InternalGitHubActionsParser.g:5210:20: ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )?
        int alt236=4;
        switch ( input.LA(1) ) {
            case TagsIgnore:
            case Tags:
                {
                alt236=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt236=2;
                }
                break;
            case RULE_BEGIN:
                {
                alt236=3;
                }
                break;
        }

        switch (alt236) {
            case 1 :
                // InternalGitHubActionsParser.g:5211:10: ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:5211:10: ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:5212:11: (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) )
                {
                // InternalGitHubActionsParser.g:5212:11: (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) )
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( (LA233_0==Tags) ) {
                    alt233=1;
                }
                else if ( (LA233_0==TagsIgnore) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 0, input);

                    throw nvae;
                }
                switch (alt233) {
                    case 1 :
                        // InternalGitHubActionsParser.g:5213:12: otherlv_33= Tags
                        {
                        otherlv_33=(Token)match(input,Tags,FOLLOW_3); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // InternalGitHubActionsParser.g:5218:12: ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) )
                        {
                        // InternalGitHubActionsParser.g:5218:12: ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) )
                        // InternalGitHubActionsParser.g:5219:13: (lv_ignoreSpecifiedTags_34_0= TagsIgnore )
                        {
                        // InternalGitHubActionsParser.g:5219:13: (lv_ignoreSpecifiedTags_34_0= TagsIgnore )
                        // InternalGitHubActionsParser.g:5220:14: lv_ignoreSpecifiedTags_34_0= TagsIgnore
                        {
                        lv_ignoreSpecifiedTags_34_0=(Token)match(input,TagsIgnore,FOLLOW_3); if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }

                otherlv_35=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5237:11: ( (lv_tags_36_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5238:12: (lv_tags_36_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5238:12: (lv_tags_36_0= ruleExpression )
                // InternalGitHubActionsParser.g:5239:13: lv_tags_36_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_0_2_0());
                  												
                }
                pushFollow(FOLLOW_24);
                lv_tags_36_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5258:10: (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:5258:10: (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket )
                // InternalGitHubActionsParser.g:5259:11: otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket
                {
                otherlv_37=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5263:11: ( (lv_tags_38_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5264:12: (lv_tags_38_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5264:12: (lv_tags_38_0= ruleExpression )
                // InternalGitHubActionsParser.g:5265:13: lv_tags_38_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  													newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_1_1_0());
                  												
                }
                pushFollow(FOLLOW_8);
                lv_tags_38_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5282:11: (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )*
                loop234:
                do {
                    int alt234=2;
                    int LA234_0 = input.LA(1);

                    if ( (LA234_0==Comma) ) {
                        alt234=1;
                    }


                    switch (alt234) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5283:12: otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) )
                	    {
                	    otherlv_39=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5287:12: ( (lv_tags_40_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5288:13: (lv_tags_40_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5288:13: (lv_tags_40_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5289:14: lv_tags_40_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_1_2_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_tags_40_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop234;
                    }
                } while (true);

                otherlv_41=(Token)match(input,RightSquareBracket,FOLLOW_24); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:5313:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
                {
                // InternalGitHubActionsParser.g:5313:10: (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END )
                // InternalGitHubActionsParser.g:5314:11: this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END
                {
                this_BEGIN_42=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5318:11: (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+
                int cnt235=0;
                loop235:
                do {
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==HyphenMinus) ) {
                        alt235=1;
                    }


                    switch (alt235) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5319:12: otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE
                	    {
                	    otherlv_43=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5323:12: ( (lv_tags_44_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:5324:13: (lv_tags_44_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:5324:13: (lv_tags_44_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:5325:14: lv_tags_44_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      														newCompositeNode(grammarAccess.getOptionedPushTriggerAccess().getTagsExpressionParserRuleCall_3_2_0_2_1_1_0());
                	      													
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_tags_44_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_45=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt235 >= 1 ) break loop235;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(235, input);
                            throw eee;
                    }
                    cnt235++;
                } while (true);

                this_END_46=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;

                }


                }
                break;

        }

        this_END_47=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred171_InternalGitHubActionsParser

    // $ANTLR start synpred175_InternalGitHubActionsParser
    public final void synpred175_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_inputs_7_0 = null;


        // InternalGitHubActionsParser.g:5498:4: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) )
        // InternalGitHubActionsParser.g:5498:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:5498:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) )
        // InternalGitHubActionsParser.g:5499:5: {...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred175_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0)");
        }
        // InternalGitHubActionsParser.g:5499:124: ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) )
        // InternalGitHubActionsParser.g:5500:6: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0);
        // InternalGitHubActionsParser.g:5503:9: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) )
        // InternalGitHubActionsParser.g:5503:10: {...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred175_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5503:19: (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? )
        // InternalGitHubActionsParser.g:5503:20: this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )?
        {
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_106); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5507:9: (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )?
        int alt239=2;
        int LA239_0 = input.LA(1);

        if ( (LA239_0==Inputs) ) {
            alt239=1;
        }
        switch (alt239) {
            case 1 :
                // InternalGitHubActionsParser.g:5508:10: otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+
                {
                otherlv_5=(Token)match(input,Inputs,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5516:10: ( (lv_inputs_7_0= ruleInput ) )+
                int cnt238=0;
                loop238:
                do {
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==Required||LA238_0==Default||LA238_0==Options||LA238_0==Type||LA238_0==LeftSquareBracket||LA238_0==RULE_BEGIN) ) {
                        alt238=1;
                    }


                    switch (alt238) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5517:11: (lv_inputs_7_0= ruleInput )
                	    {
                	    // InternalGitHubActionsParser.g:5517:11: (lv_inputs_7_0= ruleInput )
                	    // InternalGitHubActionsParser.g:5518:12: lv_inputs_7_0= ruleInput
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsInputParserRuleCall_3_0_1_2_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_63);
                	    lv_inputs_7_0=ruleInput();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt238 >= 1 ) break loop238;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(238, input);
                            throw eee;
                    }
                    cnt238++;
                } while (true);


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred175_InternalGitHubActionsParser

    // $ANTLR start synpred177_InternalGitHubActionsParser
    public final void synpred177_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_outputs_10_0 = null;


        // InternalGitHubActionsParser.g:5542:4: ( ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:5542:4: ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:5542:4: ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:5543:5: {...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred177_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 1)");
        }
        // InternalGitHubActionsParser.g:5543:124: ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) )
        // InternalGitHubActionsParser.g:5544:6: ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 1);
        // InternalGitHubActionsParser.g:5547:9: ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) )
        // InternalGitHubActionsParser.g:5547:10: {...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred177_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5547:19: (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ )
        // InternalGitHubActionsParser.g:5547:20: otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+
        {
        otherlv_8=(Token)match(input,Outputs,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_56); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5555:9: ( (lv_outputs_10_0= ruleOutput ) )+
        int cnt240=0;
        loop240:
        do {
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==Value||LA240_0==RULE_BEGIN) ) {
                alt240=1;
            }


            switch (alt240) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:5556:10: (lv_outputs_10_0= ruleOutput )
        	    {
        	    // InternalGitHubActionsParser.g:5556:10: (lv_outputs_10_0= ruleOutput )
        	    // InternalGitHubActionsParser.g:5557:11: lv_outputs_10_0= ruleOutput
        	    {
        	    if ( state.backtracking==0 ) {

        	      											newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsOutputParserRuleCall_3_1_2_0());
        	      										
        	    }
        	    pushFollow(FOLLOW_66);
        	    lv_outputs_10_0=ruleOutput();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt240 >= 1 ) break loop240;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(240, input);
                    throw eee;
            }
            cnt240++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred177_InternalGitHubActionsParser

    // $ANTLR start synpred178_InternalGitHubActionsParser
    public final void synpred178_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        EObject lv_secrets_13_0 = null;


        // InternalGitHubActionsParser.g:5595:11: ( (lv_secrets_13_0= ruleSecret ) )
        // InternalGitHubActionsParser.g:5595:11: (lv_secrets_13_0= ruleSecret )
        {
        // InternalGitHubActionsParser.g:5595:11: (lv_secrets_13_0= ruleSecret )
        // InternalGitHubActionsParser.g:5596:12: lv_secrets_13_0= ruleSecret
        {
        if ( state.backtracking==0 ) {

          												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_2_0_2_0());
          											
        }
        pushFollow(FOLLOW_2);
        lv_secrets_13_0=ruleSecret();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred178_InternalGitHubActionsParser

    // $ANTLR start synpred180_InternalGitHubActionsParser
    public final void synpred180_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token this_END_14=null;
        EObject lv_secrets_13_0 = null;


        // InternalGitHubActionsParser.g:5580:4: ( ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:5580:4: ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:5580:4: ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:5581:5: {...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred180_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2)");
        }
        // InternalGitHubActionsParser.g:5581:124: ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) )
        // InternalGitHubActionsParser.g:5582:6: ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2);
        // InternalGitHubActionsParser.g:5585:9: ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) )
        // InternalGitHubActionsParser.g:5585:10: {...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred180_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5585:19: ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END )
        // InternalGitHubActionsParser.g:5585:20: (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END
        {
        // InternalGitHubActionsParser.g:5585:20: (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )?
        int alt243=2;
        int LA243_0 = input.LA(1);

        if ( (LA243_0==Secrets) ) {
            alt243=1;
        }
        switch (alt243) {
            case 1 :
                // InternalGitHubActionsParser.g:5586:10: otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+
                {
                otherlv_11=(Token)match(input,Secrets,FOLLOW_3); if (state.failed) return ;
                otherlv_12=(Token)match(input,Colon,FOLLOW_58); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5594:10: ( (lv_secrets_13_0= ruleSecret ) )+
                int cnt242=0;
                loop242:
                do {
                    int alt242=2;
                    int LA242_0 = input.LA(1);

                    if ( (LA242_0==RULE_END) ) {
                        int LA242_1 = input.LA(2);

                        if ( (LA242_1==RULE_END) ) {
                            alt242=1;
                        }


                    }
                    else if ( (LA242_0==Required||LA242_0==RULE_BEGIN) ) {
                        alt242=1;
                    }


                    switch (alt242) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5595:11: (lv_secrets_13_0= ruleSecret )
                	    {
                	    // InternalGitHubActionsParser.g:5595:11: (lv_secrets_13_0= ruleSecret )
                	    // InternalGitHubActionsParser.g:5596:12: lv_secrets_13_0= ruleSecret
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsSecretParserRuleCall_3_2_0_2_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_58);
                	    lv_secrets_13_0=ruleSecret();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt242 >= 1 ) break loop242;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(242, input);
                            throw eee;
                    }
                    cnt242++;
                } while (true);


                }
                break;

        }

        this_END_14=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred180_InternalGitHubActionsParser

    // $ANTLR start synpred184_InternalGitHubActionsParser
    public final void synpred184_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_1=null;
        Token lv_id_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_description_7_0 = null;


        // InternalGitHubActionsParser.g:5744:3: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:5744:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:5744:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
        // InternalGitHubActionsParser.g:5745:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred184_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:5745:99: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
        // InternalGitHubActionsParser.g:5746:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:5749:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
        // InternalGitHubActionsParser.g:5749:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred184_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5749:18: (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
        // InternalGitHubActionsParser.g:5749:19: this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
        {
        this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5753:8: ( (lv_id_2_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:5754:9: (lv_id_2_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:5754:9: (lv_id_2_0= RULE_ID )
        // InternalGitHubActionsParser.g:5755:10: lv_id_2_0= RULE_ID
        {
        lv_id_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_107); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5779:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
        int alt245=2;
        int LA245_0 = input.LA(1);

        if ( (LA245_0==Description) ) {
            alt245=1;
        }
        switch (alt245) {
            case 1 :
                // InternalGitHubActionsParser.g:5780:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) )
                {
                otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5788:9: ( (lv_description_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:5789:10: (lv_description_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:5789:10: (lv_description_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:5790:11: lv_description_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getInputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_description_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred184_InternalGitHubActionsParser

    // $ANTLR start synpred185_InternalGitHubActionsParser
    public final void synpred185_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_default_10_0 = null;


        // InternalGitHubActionsParser.g:5814:3: ( ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5814:3: ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:5814:3: ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5815:4: {...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred185_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:5815:99: ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:5816:5: ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:5819:8: ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:5819:9: {...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred185_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5819:18: (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:5819:19: otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) )
        {
        otherlv_8=(Token)match(input,Default,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5827:8: ( (lv_default_10_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:5828:9: (lv_default_10_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:5828:9: (lv_default_10_0= ruleExpression )
        // InternalGitHubActionsParser.g:5829:10: lv_default_10_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getInputAccess().getDefaultExpressionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_default_10_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred185_InternalGitHubActionsParser

    // $ANTLR start synpred186_InternalGitHubActionsParser
    public final void synpred186_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_11=null;
        Token otherlv_12=null;
        EObject lv_isRequired_13_0 = null;


        // InternalGitHubActionsParser.g:5852:3: ( ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5852:3: ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:5852:3: ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5853:4: {...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred186_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:5853:99: ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:5854:5: ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:5857:8: ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:5857:9: {...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred186_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5857:18: (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:5857:19: otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) )
        {
        otherlv_11=(Token)match(input,Required,FOLLOW_3); if (state.failed) return ;
        otherlv_12=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5865:8: ( (lv_isRequired_13_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:5866:9: (lv_isRequired_13_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:5866:9: (lv_isRequired_13_0= ruleExpression )
        // InternalGitHubActionsParser.g:5867:10: lv_isRequired_13_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getInputAccess().getIsRequiredExpressionParserRuleCall_2_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_isRequired_13_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred186_InternalGitHubActionsParser

    // $ANTLR start synpred187_InternalGitHubActionsParser
    public final void synpred187_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        Enumerator lv_type_16_0 = null;


        // InternalGitHubActionsParser.g:5890:3: ( ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5890:3: ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:5890:3: ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) )
        // InternalGitHubActionsParser.g:5891:4: {...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred187_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:5891:99: ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) )
        // InternalGitHubActionsParser.g:5892:5: ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:5895:8: ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) )
        // InternalGitHubActionsParser.g:5895:9: {...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred187_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5895:18: (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) )
        // InternalGitHubActionsParser.g:5895:19: otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) )
        {
        otherlv_14=(Token)match(input,Type,FOLLOW_3); if (state.failed) return ;
        otherlv_15=(Token)match(input,Colon,FOLLOW_64); if (state.failed) return ;
        // InternalGitHubActionsParser.g:5903:8: ( (lv_type_16_0= ruleTYPE ) )
        // InternalGitHubActionsParser.g:5904:9: (lv_type_16_0= ruleTYPE )
        {
        // InternalGitHubActionsParser.g:5904:9: (lv_type_16_0= ruleTYPE )
        // InternalGitHubActionsParser.g:5905:10: lv_type_16_0= ruleTYPE
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getInputAccess().getTypeTYPEEnumRuleCall_3_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_type_16_0=ruleTYPE();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred187_InternalGitHubActionsParser

    // $ANTLR start synpred192_InternalGitHubActionsParser
    public final void synpred192_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token lv_options_19_0=null;
        Token otherlv_20=null;
        Token lv_options_21_0=null;
        Token otherlv_22=null;
        Token lv_options_23_0=null;
        Token otherlv_24=null;
        Token this_BEGIN_25=null;
        Token otherlv_26=null;
        Token lv_options_27_0=null;
        Token this_NEWLINE_28=null;
        Token this_END_29=null;
        Token this_END_30=null;
        Token this_END_31=null;

        // InternalGitHubActionsParser.g:5928:3: ( ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:5928:3: ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:5928:3: ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:5929:4: {...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred192_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:5929:99: ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) )
        // InternalGitHubActionsParser.g:5930:5: ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getInputAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:5933:8: ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) )
        // InternalGitHubActionsParser.g:5933:9: {...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred192_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:5933:18: ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END )
        // InternalGitHubActionsParser.g:5933:19: ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END
        {
        // InternalGitHubActionsParser.g:5933:19: ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) )
        int alt249=3;
        switch ( input.LA(1) ) {
        case Options:
            {
            alt249=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt249=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt249=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 249, 0, input);

            throw nvae;
        }

        switch (alt249) {
            case 1 :
                // InternalGitHubActionsParser.g:5934:9: (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) )
                {
                // InternalGitHubActionsParser.g:5934:9: (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) )
                // InternalGitHubActionsParser.g:5935:10: otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) )
                {
                otherlv_17=(Token)match(input,Options,FOLLOW_3); if (state.failed) return ;
                otherlv_18=(Token)match(input,Colon,FOLLOW_31); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5943:10: ( (lv_options_19_0= RULE_STRING ) )
                // InternalGitHubActionsParser.g:5944:11: (lv_options_19_0= RULE_STRING )
                {
                // InternalGitHubActionsParser.g:5944:11: (lv_options_19_0= RULE_STRING )
                // InternalGitHubActionsParser.g:5945:12: lv_options_19_0= RULE_STRING
                {
                lv_options_19_0=(Token)match(input,RULE_STRING,FOLLOW_24); if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:5963:9: (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:5963:9: (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket )
                // InternalGitHubActionsParser.g:5964:10: otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket
                {
                otherlv_20=(Token)match(input,LeftSquareBracket,FOLLOW_31); if (state.failed) return ;
                // InternalGitHubActionsParser.g:5968:10: ( (lv_options_21_0= RULE_STRING ) )
                // InternalGitHubActionsParser.g:5969:11: (lv_options_21_0= RULE_STRING )
                {
                // InternalGitHubActionsParser.g:5969:11: (lv_options_21_0= RULE_STRING )
                // InternalGitHubActionsParser.g:5970:12: lv_options_21_0= RULE_STRING
                {
                lv_options_21_0=(Token)match(input,RULE_STRING,FOLLOW_8); if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:5986:10: (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )*
                loop247:
                do {
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==Comma) ) {
                        alt247=1;
                    }


                    switch (alt247) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:5987:11: otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) )
                	    {
                	    otherlv_22=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:5991:11: ( (lv_options_23_0= RULE_STRING ) )
                	    // InternalGitHubActionsParser.g:5992:12: (lv_options_23_0= RULE_STRING )
                	    {
                	    // InternalGitHubActionsParser.g:5992:12: (lv_options_23_0= RULE_STRING )
                	    // InternalGitHubActionsParser.g:5993:13: lv_options_23_0= RULE_STRING
                	    {
                	    lv_options_23_0=(Token)match(input,RULE_STRING,FOLLOW_8); if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop247;
                    }
                } while (true);

                otherlv_24=(Token)match(input,RightSquareBracket,FOLLOW_24); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:6016:9: (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END )
                {
                // InternalGitHubActionsParser.g:6016:9: (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END )
                // InternalGitHubActionsParser.g:6017:10: this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END
                {
                this_BEGIN_25=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6021:10: (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+
                int cnt248=0;
                loop248:
                do {
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==HyphenMinus) ) {
                        alt248=1;
                    }


                    switch (alt248) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:6022:11: otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE
                	    {
                	    otherlv_26=(Token)match(input,HyphenMinus,FOLLOW_31); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:6026:11: ( (lv_options_27_0= RULE_STRING ) )
                	    // InternalGitHubActionsParser.g:6027:12: (lv_options_27_0= RULE_STRING )
                	    {
                	    // InternalGitHubActionsParser.g:6027:12: (lv_options_27_0= RULE_STRING )
                	    // InternalGitHubActionsParser.g:6028:13: lv_options_27_0= RULE_STRING
                	    {
                	    lv_options_27_0=(Token)match(input,RULE_STRING,FOLLOW_10); if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_28=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt248 >= 1 ) break loop248;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(248, input);
                            throw eee;
                    }
                    cnt248++;
                } while (true);

                this_END_29=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;

                }


                }
                break;

        }

        this_END_30=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;
        this_END_31=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred192_InternalGitHubActionsParser

    // $ANTLR start synpred194_InternalGitHubActionsParser
    public final void synpred194_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_1=null;
        Token lv_id_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_description_7_0 = null;


        // InternalGitHubActionsParser.g:6114:3: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:6114:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:6114:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
        // InternalGitHubActionsParser.g:6115:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred194_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:6115:100: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
        // InternalGitHubActionsParser.g:6116:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:6119:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
        // InternalGitHubActionsParser.g:6119:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred194_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6119:18: (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
        // InternalGitHubActionsParser.g:6119:19: this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
        {
        this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6123:8: ( (lv_id_2_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:6124:9: (lv_id_2_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:6124:9: (lv_id_2_0= RULE_ID )
        // InternalGitHubActionsParser.g:6125:10: lv_id_2_0= RULE_ID
        {
        lv_id_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_107); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6149:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
        int alt250=2;
        int LA250_0 = input.LA(1);

        if ( (LA250_0==Description) ) {
            alt250=1;
        }
        switch (alt250) {
            case 1 :
                // InternalGitHubActionsParser.g:6150:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) )
                {
                otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6158:9: ( (lv_description_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6159:10: (lv_description_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6159:10: (lv_description_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:6160:11: lv_description_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getOutputAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_description_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred194_InternalGitHubActionsParser

    // $ANTLR start synpred195_InternalGitHubActionsParser
    public final void synpred195_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token this_END_11=null;
        Token this_END_12=null;
        EObject lv_value_10_0 = null;


        // InternalGitHubActionsParser.g:6184:3: ( ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:6184:3: ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:6184:3: ({...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:6185:4: {...}? => ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred195_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getOutputAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:6185:100: ( ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) ) )
        // InternalGitHubActionsParser.g:6186:5: ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getOutputAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:6189:8: ({...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END ) )
        // InternalGitHubActionsParser.g:6189:9: {...}? => ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred195_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6189:18: ( (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END )
        // InternalGitHubActionsParser.g:6189:19: (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) ) this_END_11= RULE_END this_END_12= RULE_END
        {
        // InternalGitHubActionsParser.g:6189:19: (otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:6190:9: otherlv_8= Value otherlv_9= Colon ( (lv_value_10_0= ruleExpression ) )
        {
        otherlv_8=(Token)match(input,Value,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6198:9: ( (lv_value_10_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:6199:10: (lv_value_10_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:6199:10: (lv_value_10_0= ruleExpression )
        // InternalGitHubActionsParser.g:6200:11: lv_value_10_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getOutputAccess().getValueExpressionParserRuleCall_1_0_2_0());
          										
        }
        pushFollow(FOLLOW_24);
        lv_value_10_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }

        this_END_11=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;
        this_END_12=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred195_InternalGitHubActionsParser

    // $ANTLR start synpred197_InternalGitHubActionsParser
    public final void synpred197_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_1=null;
        Token lv_id_2_0=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_description_7_0 = null;


        // InternalGitHubActionsParser.g:6277:3: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:6277:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:6277:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) )
        // InternalGitHubActionsParser.g:6278:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred197_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:6278:100: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) )
        // InternalGitHubActionsParser.g:6279:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:6282:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) )
        // InternalGitHubActionsParser.g:6282:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred197_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6282:18: (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? )
        // InternalGitHubActionsParser.g:6282:19: this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
        {
        this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_17); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6286:8: ( (lv_id_2_0= RULE_ID ) )
        // InternalGitHubActionsParser.g:6287:9: (lv_id_2_0= RULE_ID )
        {
        // InternalGitHubActionsParser.g:6287:9: (lv_id_2_0= RULE_ID )
        // InternalGitHubActionsParser.g:6288:10: lv_id_2_0= RULE_ID
        {
        lv_id_2_0=(Token)match(input,RULE_ID,FOLLOW_3); if (state.failed) return ;

        }


        }

        otherlv_3=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_107); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6312:8: (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )?
        int alt251=2;
        int LA251_0 = input.LA(1);

        if ( (LA251_0==Description) ) {
            alt251=1;
        }
        switch (alt251) {
            case 1 :
                // InternalGitHubActionsParser.g:6313:9: otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) )
                {
                otherlv_5=(Token)match(input,Description,FOLLOW_3); if (state.failed) return ;
                otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6321:9: ( (lv_description_7_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6322:10: (lv_description_7_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6322:10: (lv_description_7_0= ruleExpression )
                // InternalGitHubActionsParser.g:6323:11: lv_description_7_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getSecretAccess().getDescriptionExpressionParserRuleCall_0_4_2_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_description_7_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred197_InternalGitHubActionsParser

    // $ANTLR start synpred199_InternalGitHubActionsParser
    public final void synpred199_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token this_END_11=null;
        Token this_END_12=null;
        EObject lv_isRequired_10_0 = null;


        // InternalGitHubActionsParser.g:6347:3: ( ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:6347:3: ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:6347:3: ({...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:6348:4: {...}? => ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred199_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getSecretAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:6348:100: ( ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) ) )
        // InternalGitHubActionsParser.g:6349:5: ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getSecretAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:6352:8: ({...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END ) )
        // InternalGitHubActionsParser.g:6352:9: {...}? => ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred199_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6352:18: ( (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END )
        // InternalGitHubActionsParser.g:6352:19: (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )? this_END_11= RULE_END this_END_12= RULE_END
        {
        // InternalGitHubActionsParser.g:6352:19: (otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) ) )?
        int alt252=2;
        int LA252_0 = input.LA(1);

        if ( (LA252_0==Required) ) {
            alt252=1;
        }
        switch (alt252) {
            case 1 :
                // InternalGitHubActionsParser.g:6353:9: otherlv_8= Required otherlv_9= Colon ( (lv_isRequired_10_0= ruleExpression ) )
                {
                otherlv_8=(Token)match(input,Required,FOLLOW_3); if (state.failed) return ;
                otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6361:9: ( (lv_isRequired_10_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6362:10: (lv_isRequired_10_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6362:10: (lv_isRequired_10_0= ruleExpression )
                // InternalGitHubActionsParser.g:6363:11: lv_isRequired_10_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getSecretAccess().getIsRequiredExpressionParserRuleCall_1_0_2_0());
                  										
                }
                pushFollow(FOLLOW_24);
                lv_isRequired_10_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        this_END_11=(Token)match(input,RULE_END,FOLLOW_24); if (state.failed) return ;
        this_END_12=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred199_InternalGitHubActionsParser

    // $ANTLR start synpred200_InternalGitHubActionsParser
    public final void synpred200_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_shell_7_0 = null;


        // InternalGitHubActionsParser.g:6528:4: ( ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6528:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:6528:4: ({...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6529:5: {...}? => ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred200_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0)");
        }
        // InternalGitHubActionsParser.g:6529:105: ( ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:6530:6: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 0);
        // InternalGitHubActionsParser.g:6533:9: ({...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:6533:10: {...}? => (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred200_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6533:19: (otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:6533:20: otherlv_5= Shell otherlv_6= Colon ( (lv_shell_7_0= ruleExpression ) )
        {
        otherlv_5=(Token)match(input,Shell,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6541:9: ( (lv_shell_7_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:6542:10: (lv_shell_7_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:6542:10: (lv_shell_7_0= ruleExpression )
        // InternalGitHubActionsParser.g:6543:11: lv_shell_7_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getDefaultsAccess().getShellExpressionParserRuleCall_4_0_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_shell_7_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred200_InternalGitHubActionsParser

    // $ANTLR start synpred201_InternalGitHubActionsParser
    public final void synpred201_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        EObject lv_workingDirectory_10_0 = null;


        // InternalGitHubActionsParser.g:6566:4: ( ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6566:4: ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:6566:4: ({...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6567:5: {...}? => ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred201_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1)");
        }
        // InternalGitHubActionsParser.g:6567:105: ( ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:6568:6: ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getDefaultsAccess().getUnorderedGroup_4(), 1);
        // InternalGitHubActionsParser.g:6571:9: ({...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:6571:10: {...}? => (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred201_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6571:19: (otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:6571:20: otherlv_8= WorkingDirectory otherlv_9= Colon ( (lv_workingDirectory_10_0= ruleExpression ) )
        {
        otherlv_8=(Token)match(input,WorkingDirectory,FOLLOW_3); if (state.failed) return ;
        otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6579:9: ( (lv_workingDirectory_10_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:6580:10: (lv_workingDirectory_10_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:6580:10: (lv_workingDirectory_10_0= ruleExpression )
        // InternalGitHubActionsParser.g:6581:11: lv_workingDirectory_10_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getDefaultsAccess().getWorkingDirectoryExpressionParserRuleCall_4_1_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_workingDirectory_10_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred201_InternalGitHubActionsParser

    // $ANTLR start synpred205_InternalGitHubActionsParser
    public final void synpred205_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        EObject lv_includes_8_0 = null;


        // InternalGitHubActionsParser.g:6783:9: ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) )
        // InternalGitHubActionsParser.g:6783:9: ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) )
        {
        // InternalGitHubActionsParser.g:6783:9: ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) )
        // InternalGitHubActionsParser.g:6784:10: {...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred205_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0)");
        }
        // InternalGitHubActionsParser.g:6784:112: ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) )
        // InternalGitHubActionsParser.g:6785:11: ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0);
        // InternalGitHubActionsParser.g:6788:14: ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) )
        // InternalGitHubActionsParser.g:6788:15: {...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred205_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6788:24: (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? )
        // InternalGitHubActionsParser.g:6788:25: otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )?
        {
        otherlv_3=(Token)match(input,Matrix,FOLLOW_3); if (state.failed) return ;
        otherlv_4=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_108); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6800:14: (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )?
        int alt253=2;
        int LA253_0 = input.LA(1);

        if ( (LA253_0==Includes) ) {
            alt253=1;
        }
        switch (alt253) {
            case 1 :
                // InternalGitHubActionsParser.g:6801:15: otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) )
                {
                otherlv_6=(Token)match(input,Includes,FOLLOW_3); if (state.failed) return ;
                otherlv_7=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6809:15: ( (lv_includes_8_0= ruleMatrixCombination ) )
                // InternalGitHubActionsParser.g:6810:16: (lv_includes_8_0= ruleMatrixCombination )
                {
                // InternalGitHubActionsParser.g:6810:16: (lv_includes_8_0= ruleMatrixCombination )
                // InternalGitHubActionsParser.g:6811:17: lv_includes_8_0= ruleMatrixCombination
                {
                if ( state.backtracking==0 ) {

                  																	newCompositeNode(grammarAccess.getStrategyAccess().getIncludesMatrixCombinationParserRuleCall_0_1_0_3_2_0());
                  																
                }
                pushFollow(FOLLOW_2);
                lv_includes_8_0=ruleMatrixCombination();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred205_InternalGitHubActionsParser

    // $ANTLR start synpred206_InternalGitHubActionsParser
    public final void synpred206_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_9=null;
        Token otherlv_10=null;
        EObject lv_excludes_11_0 = null;


        // InternalGitHubActionsParser.g:6835:9: ( ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6835:9: ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:6835:9: ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6836:10: {...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred206_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1)");
        }
        // InternalGitHubActionsParser.g:6836:112: ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) )
        // InternalGitHubActionsParser.g:6837:11: ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1);
        // InternalGitHubActionsParser.g:6840:14: ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) )
        // InternalGitHubActionsParser.g:6840:15: {...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred206_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6840:24: (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) )
        // InternalGitHubActionsParser.g:6840:25: otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) )
        {
        otherlv_9=(Token)match(input,Exludes,FOLLOW_3); if (state.failed) return ;
        otherlv_10=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6848:14: ( (lv_excludes_11_0= ruleMatrixCombination ) )
        // InternalGitHubActionsParser.g:6849:15: (lv_excludes_11_0= ruleMatrixCombination )
        {
        // InternalGitHubActionsParser.g:6849:15: (lv_excludes_11_0= ruleMatrixCombination )
        // InternalGitHubActionsParser.g:6850:16: lv_excludes_11_0= ruleMatrixCombination
        {
        if ( state.backtracking==0 ) {

          																newCompositeNode(grammarAccess.getStrategyAccess().getExcludesMatrixCombinationParserRuleCall_0_1_1_2_0());
          															
        }
        pushFollow(FOLLOW_2);
        lv_excludes_11_0=ruleMatrixCombination();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred206_InternalGitHubActionsParser

    // $ANTLR start synpred208_InternalGitHubActionsParser
    public final void synpred208_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_END_13=null;
        EObject lv_axes_12_0 = null;


        // InternalGitHubActionsParser.g:6873:9: ( ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:6873:9: ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:6873:9: ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:6874:10: {...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred208_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2)");
        }
        // InternalGitHubActionsParser.g:6874:112: ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) )
        // InternalGitHubActionsParser.g:6875:11: ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2);
        // InternalGitHubActionsParser.g:6878:14: ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) )
        // InternalGitHubActionsParser.g:6878:15: {...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred208_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6878:24: ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END )
        // InternalGitHubActionsParser.g:6878:25: ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END
        {
        // InternalGitHubActionsParser.g:6878:25: ( (lv_axes_12_0= ruleMatrixAxis ) )+
        int cnt254=0;
        loop254:
        do {
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==RULE_BEGIN) ) {
                alt254=1;
            }


            switch (alt254) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:6879:15: (lv_axes_12_0= ruleMatrixAxis )
        	    {
        	    // InternalGitHubActionsParser.g:6879:15: (lv_axes_12_0= ruleMatrixAxis )
        	    // InternalGitHubActionsParser.g:6880:16: lv_axes_12_0= ruleMatrixAxis
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getStrategyAccess().getAxesMatrixAxisParserRuleCall_0_1_2_0_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_78);
        	    lv_axes_12_0=ruleMatrixAxis();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt254 >= 1 ) break loop254;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(254, input);
                    throw eee;
            }
            cnt254++;
        } while (true);

        this_END_13=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred208_InternalGitHubActionsParser

    // $ANTLR start synpred209_InternalGitHubActionsParser
    public final void synpred209_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_1=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token this_BEGIN_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token this_END_13=null;
        EObject lv_includes_8_0 = null;

        EObject lv_excludes_11_0 = null;

        EObject lv_axes_12_0 = null;


        // InternalGitHubActionsParser.g:6767:3: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6767:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:6767:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6768:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:6768:102: ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
        // InternalGitHubActionsParser.g:6769:5: ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:6772:8: ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
        // InternalGitHubActionsParser.g:6772:9: {...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6772:18: (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) )
        // InternalGitHubActionsParser.g:6772:19: this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) )
        {
        this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_75); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6776:8: ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) )
        // InternalGitHubActionsParser.g:6777:9: ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) )
        {
        // InternalGitHubActionsParser.g:6777:9: ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) )
        // InternalGitHubActionsParser.g:6778:10: ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?)
        {
        getUnorderedGroupHelper().enter(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1());
        // InternalGitHubActionsParser.g:6781:10: ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?)
        // InternalGitHubActionsParser.g:6782:11: ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?
        {
        // InternalGitHubActionsParser.g:6782:11: ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+
        int cnt257=0;
        loop257:
        do {
            int alt257=4;
            int LA257_0 = input.LA(1);

            if ( LA257_0 == Matrix && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0) ) {
                alt257=1;
            }
            else if ( LA257_0 == Exludes && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1) ) {
                alt257=2;
            }
            else if ( LA257_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {
                alt257=3;
            }


            switch (alt257) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:6783:9: ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:6783:9: ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) )
        	    // InternalGitHubActionsParser.g:6784:10: {...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0)");
        	    }
        	    // InternalGitHubActionsParser.g:6784:112: ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) )
        	    // InternalGitHubActionsParser.g:6785:11: ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0);
        	    // InternalGitHubActionsParser.g:6788:14: ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) )
        	    // InternalGitHubActionsParser.g:6788:15: {...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:6788:24: (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? )
        	    // InternalGitHubActionsParser.g:6788:25: otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )?
        	    {
        	    otherlv_3=(Token)match(input,Matrix,FOLLOW_3); if (state.failed) return ;
        	    otherlv_4=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        	    this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_109); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:6800:14: (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )?
        	    int alt255=2;
        	    int LA255_0 = input.LA(1);

        	    if ( (LA255_0==Includes) ) {
        	        alt255=1;
        	    }
        	    switch (alt255) {
        	        case 1 :
        	            // InternalGitHubActionsParser.g:6801:15: otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) )
        	            {
        	            otherlv_6=(Token)match(input,Includes,FOLLOW_3); if (state.failed) return ;
        	            otherlv_7=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        	            // InternalGitHubActionsParser.g:6809:15: ( (lv_includes_8_0= ruleMatrixCombination ) )
        	            // InternalGitHubActionsParser.g:6810:16: (lv_includes_8_0= ruleMatrixCombination )
        	            {
        	            // InternalGitHubActionsParser.g:6810:16: (lv_includes_8_0= ruleMatrixCombination )
        	            // InternalGitHubActionsParser.g:6811:17: lv_includes_8_0= ruleMatrixCombination
        	            {
        	            if ( state.backtracking==0 ) {

        	              																	newCompositeNode(grammarAccess.getStrategyAccess().getIncludesMatrixCombinationParserRuleCall_0_1_0_3_2_0());
        	              																
        	            }
        	            pushFollow(FOLLOW_110);
        	            lv_includes_8_0=ruleMatrixCombination();

        	            state._fsp--;
        	            if (state.failed) return ;

        	            }


        	            }


        	            }
        	            break;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 2 :
        	    // InternalGitHubActionsParser.g:6835:9: ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:6835:9: ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) )
        	    // InternalGitHubActionsParser.g:6836:10: {...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1)");
        	    }
        	    // InternalGitHubActionsParser.g:6836:112: ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) )
        	    // InternalGitHubActionsParser.g:6837:11: ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1);
        	    // InternalGitHubActionsParser.g:6840:14: ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) )
        	    // InternalGitHubActionsParser.g:6840:15: {...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:6840:24: (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) )
        	    // InternalGitHubActionsParser.g:6840:25: otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) )
        	    {
        	    otherlv_9=(Token)match(input,Exludes,FOLLOW_3); if (state.failed) return ;
        	    otherlv_10=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        	    // InternalGitHubActionsParser.g:6848:14: ( (lv_excludes_11_0= ruleMatrixCombination ) )
        	    // InternalGitHubActionsParser.g:6849:15: (lv_excludes_11_0= ruleMatrixCombination )
        	    {
        	    // InternalGitHubActionsParser.g:6849:15: (lv_excludes_11_0= ruleMatrixCombination )
        	    // InternalGitHubActionsParser.g:6850:16: lv_excludes_11_0= ruleMatrixCombination
        	    {
        	    if ( state.backtracking==0 ) {

        	      																newCompositeNode(grammarAccess.getStrategyAccess().getExcludesMatrixCombinationParserRuleCall_0_1_1_2_0());
        	      															
        	    }
        	    pushFollow(FOLLOW_110);
        	    lv_excludes_11_0=ruleMatrixCombination();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }


        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;
        	case 3 :
        	    // InternalGitHubActionsParser.g:6873:9: ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) )
        	    {
        	    // InternalGitHubActionsParser.g:6873:9: ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) )
        	    // InternalGitHubActionsParser.g:6874:10: {...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) )
        	    {
        	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2)");
        	    }
        	    // InternalGitHubActionsParser.g:6874:112: ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) )
        	    // InternalGitHubActionsParser.g:6875:11: ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) )
        	    {
        	    getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2);
        	    // InternalGitHubActionsParser.g:6878:14: ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) )
        	    // InternalGitHubActionsParser.g:6878:15: {...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END )
        	    {
        	    if ( !((true)) ) {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "true");
        	    }
        	    // InternalGitHubActionsParser.g:6878:24: ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END )
        	    // InternalGitHubActionsParser.g:6878:25: ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END
        	    {
        	    // InternalGitHubActionsParser.g:6878:25: ( (lv_axes_12_0= ruleMatrixAxis ) )+
        	    int cnt256=0;
        	    loop256:
        	    do {
        	        int alt256=2;
        	        int LA256_0 = input.LA(1);

        	        if ( (LA256_0==RULE_BEGIN) ) {
        	            alt256=1;
        	        }


        	        switch (alt256) {
        	    	case 1 :
        	    	    // InternalGitHubActionsParser.g:6879:15: (lv_axes_12_0= ruleMatrixAxis )
        	    	    {
        	    	    // InternalGitHubActionsParser.g:6879:15: (lv_axes_12_0= ruleMatrixAxis )
        	    	    // InternalGitHubActionsParser.g:6880:16: lv_axes_12_0= ruleMatrixAxis
        	    	    {
        	    	    if ( state.backtracking==0 ) {

        	    	      																newCompositeNode(grammarAccess.getStrategyAccess().getAxesMatrixAxisParserRuleCall_0_1_2_0_0());
        	    	      															
        	    	    }
        	    	    pushFollow(FOLLOW_78);
        	    	    lv_axes_12_0=ruleMatrixAxis();

        	    	    state._fsp--;
        	    	    if (state.failed) return ;

        	    	    }


        	    	    }
        	    	    break;

        	    	default :
        	    	    if ( cnt256 >= 1 ) break loop256;
        	    	    if (state.backtracking>0) {state.failed=true; return ;}
        	                EarlyExitException eee =
        	                    new EarlyExitException(256, input);
        	                throw eee;
        	        }
        	        cnt256++;
        	    } while (true);

        	    this_END_13=(Token)match(input,RULE_END,FOLLOW_110); if (state.failed) return ;

        	    }


        	    }


        	    }


        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt257 >= 1 ) break loop257;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(257, input);
                    throw eee;
            }
            cnt257++;
        } while (true);

        if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1()) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred209_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1())");
        }

        }


        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred209_InternalGitHubActionsParser

    // $ANTLR start synpred210_InternalGitHubActionsParser
    public final void synpred210_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_14=null;
        Token otherlv_15=null;
        EObject lv_failFast_16_0 = null;


        // InternalGitHubActionsParser.g:6921:3: ( ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6921:3: ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:6921:3: ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:6922:4: {...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred210_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:6922:102: ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:6923:5: ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:6926:8: ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:6926:9: {...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred210_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6926:18: (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:6926:19: otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) )
        {
        otherlv_14=(Token)match(input,FailFast,FOLLOW_3); if (state.failed) return ;
        otherlv_15=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:6934:8: ( (lv_failFast_16_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:6935:9: (lv_failFast_16_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:6935:9: (lv_failFast_16_0= ruleExpression )
        // InternalGitHubActionsParser.g:6936:10: lv_failFast_16_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getStrategyAccess().getFailFastExpressionParserRuleCall_1_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_failFast_16_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred210_InternalGitHubActionsParser

    // $ANTLR start synpred212_InternalGitHubActionsParser
    public final void synpred212_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_17=null;
        Token otherlv_18=null;
        Token this_END_20=null;
        EObject lv_maxParallel_19_0 = null;


        // InternalGitHubActionsParser.g:6959:3: ( ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:6959:3: ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:6959:3: ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:6960:4: {...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred212_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:6960:102: ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) )
        // InternalGitHubActionsParser.g:6961:5: ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:6964:8: ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) )
        // InternalGitHubActionsParser.g:6964:9: {...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred212_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:6964:18: ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END )
        // InternalGitHubActionsParser.g:6964:19: (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END
        {
        // InternalGitHubActionsParser.g:6964:19: (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )?
        int alt258=2;
        int LA258_0 = input.LA(1);

        if ( (LA258_0==MaxParalell) ) {
            alt258=1;
        }
        switch (alt258) {
            case 1 :
                // InternalGitHubActionsParser.g:6965:9: otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) )
                {
                otherlv_17=(Token)match(input,MaxParalell,FOLLOW_3); if (state.failed) return ;
                otherlv_18=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:6973:9: ( (lv_maxParallel_19_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:6974:10: (lv_maxParallel_19_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:6974:10: (lv_maxParallel_19_0= ruleExpression )
                // InternalGitHubActionsParser.g:6975:11: lv_maxParallel_19_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getStrategyAccess().getMaxParallelExpressionParserRuleCall_2_0_2_0());
                  										
                }
                pushFollow(FOLLOW_24);
                lv_maxParallel_19_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        this_END_20=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred212_InternalGitHubActionsParser

    // $ANTLR start synpred217_InternalGitHubActionsParser
    public final void synpred217_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token this_BEGIN_1=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        EObject lv_image_4_0 = null;


        // InternalGitHubActionsParser.g:7273:3: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7273:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:7273:3: ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7274:4: {...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred217_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 0)");
        }
        // InternalGitHubActionsParser.g:7274:103: ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7275:5: ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 0);
        // InternalGitHubActionsParser.g:7278:8: ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:7278:9: {...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred217_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7278:18: (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:7278:19: this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) )
        {
        this_BEGIN_1=(Token)match(input,RULE_BEGIN,FOLLOW_81); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7282:8: (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:7283:9: otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) )
        {
        otherlv_2=(Token)match(input,Image,FOLLOW_3); if (state.failed) return ;
        otherlv_3=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7291:9: ( (lv_image_4_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:7292:10: (lv_image_4_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:7292:10: (lv_image_4_0= ruleExpression )
        // InternalGitHubActionsParser.g:7293:11: lv_image_4_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          											newCompositeNode(grammarAccess.getContainerAccess().getImageExpressionParserRuleCall_0_1_2_0());
          										
        }
        pushFollow(FOLLOW_2);
        lv_image_4_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred217_InternalGitHubActionsParser

    // $ANTLR start synpred219_InternalGitHubActionsParser
    public final void synpred219_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_5=null;
        Token otherlv_6=null;
        EObject lv_environmentVariables_7_0 = null;


        // InternalGitHubActionsParser.g:7317:3: ( ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) )
        // InternalGitHubActionsParser.g:7317:3: ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) )
        {
        // InternalGitHubActionsParser.g:7317:3: ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) )
        // InternalGitHubActionsParser.g:7318:4: {...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred219_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 1)");
        }
        // InternalGitHubActionsParser.g:7318:103: ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) )
        // InternalGitHubActionsParser.g:7319:5: ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 1);
        // InternalGitHubActionsParser.g:7322:8: ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) )
        // InternalGitHubActionsParser.g:7322:9: {...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred219_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7322:18: (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ )
        // InternalGitHubActionsParser.g:7322:19: otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+
        {
        otherlv_5=(Token)match(input,Env,FOLLOW_3); if (state.failed) return ;
        otherlv_6=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7330:8: ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+
        int cnt260=0;
        loop260:
        do {
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==RULE_BEGIN) ) {
                alt260=1;
            }


            switch (alt260) {
        	case 1 :
        	    // InternalGitHubActionsParser.g:7331:9: (lv_environmentVariables_7_0= ruleVariableAssignment )
        	    {
        	    // InternalGitHubActionsParser.g:7331:9: (lv_environmentVariables_7_0= ruleVariableAssignment )
        	    // InternalGitHubActionsParser.g:7332:10: lv_environmentVariables_7_0= ruleVariableAssignment
        	    {
        	    if ( state.backtracking==0 ) {

        	      										newCompositeNode(grammarAccess.getContainerAccess().getEnvironmentVariablesVariableAssignmentParserRuleCall_1_2_0());
        	      									
        	    }
        	    pushFollow(FOLLOW_99);
        	    lv_environmentVariables_7_0=ruleVariableAssignment();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    if ( cnt260 >= 1 ) break loop260;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(260, input);
                    throw eee;
            }
            cnt260++;
        } while (true);


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred219_InternalGitHubActionsParser

    // $ANTLR start synpred224_InternalGitHubActionsParser
    public final void synpred224_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_BEGIN_16=null;
        Token otherlv_17=null;
        Token this_NEWLINE_19=null;
        Token this_END_20=null;
        EObject lv_ports_10_0 = null;

        EObject lv_ports_12_0 = null;

        EObject lv_ports_14_0 = null;

        EObject lv_ports_18_0 = null;


        // InternalGitHubActionsParser.g:7355:3: ( ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7355:3: ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:7355:3: ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:7356:4: {...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 2) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred224_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 2)");
        }
        // InternalGitHubActionsParser.g:7356:103: ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:7357:5: ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 2);
        // InternalGitHubActionsParser.g:7360:8: ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) )
        // InternalGitHubActionsParser.g:7360:9: {...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred224_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7360:18: ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) )
        int alt264=3;
        switch ( input.LA(1) ) {
        case Ports:
            {
            alt264=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt264=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt264=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 264, 0, input);

            throw nvae;
        }

        switch (alt264) {
            case 1 :
                // InternalGitHubActionsParser.g:7360:19: (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:7360:19: (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:7361:9: otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) )
                {
                otherlv_8=(Token)match(input,Ports,FOLLOW_3); if (state.failed) return ;
                otherlv_9=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7369:9: ( (lv_ports_10_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7370:10: (lv_ports_10_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7370:10: (lv_ports_10_0= ruleExpression )
                // InternalGitHubActionsParser.g:7371:11: lv_ports_10_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_0_2_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_ports_10_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7390:8: (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:7390:8: (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket )
                // InternalGitHubActionsParser.g:7391:9: otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket
                {
                otherlv_11=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7395:9: ( (lv_ports_12_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7396:10: (lv_ports_12_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7396:10: (lv_ports_12_0= ruleExpression )
                // InternalGitHubActionsParser.g:7397:11: lv_ports_12_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_1_1_0());
                  										
                }
                pushFollow(FOLLOW_8);
                lv_ports_12_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7414:9: (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )*
                loop262:
                do {
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==Comma) ) {
                        alt262=1;
                    }


                    switch (alt262) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7415:10: otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) )
                	    {
                	    otherlv_13=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7419:10: ( (lv_ports_14_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7420:11: (lv_ports_14_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7420:11: (lv_ports_14_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7421:12: lv_ports_14_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_1_2_1_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_ports_14_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop262;
                    }
                } while (true);

                otherlv_15=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7445:8: (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END )
                {
                // InternalGitHubActionsParser.g:7445:8: (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END )
                // InternalGitHubActionsParser.g:7446:9: this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END
                {
                this_BEGIN_16=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7450:9: (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+
                int cnt263=0;
                loop263:
                do {
                    int alt263=2;
                    int LA263_0 = input.LA(1);

                    if ( (LA263_0==HyphenMinus) ) {
                        alt263=1;
                    }


                    switch (alt263) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7451:10: otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE
                	    {
                	    otherlv_17=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7455:10: ( (lv_ports_18_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7456:11: (lv_ports_18_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7456:11: (lv_ports_18_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7457:12: lv_ports_18_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getContainerAccess().getPortsExpressionParserRuleCall_2_2_1_1_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_ports_18_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_19=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt263 >= 1 ) break loop263;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(263, input);
                            throw eee;
                    }
                    cnt263++;
                } while (true);

                this_END_20=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred224_InternalGitHubActionsParser

    // $ANTLR start synpred229_InternalGitHubActionsParser
    public final void synpred229_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_21=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token this_BEGIN_29=null;
        Token otherlv_30=null;
        Token this_NEWLINE_32=null;
        Token this_END_33=null;
        EObject lv_volumes_23_0 = null;

        EObject lv_volumes_25_0 = null;

        EObject lv_volumes_27_0 = null;

        EObject lv_volumes_31_0 = null;


        // InternalGitHubActionsParser.g:7490:3: ( ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7490:3: ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:7490:3: ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:7491:4: {...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 3) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred229_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 3)");
        }
        // InternalGitHubActionsParser.g:7491:103: ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:7492:5: ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 3);
        // InternalGitHubActionsParser.g:7495:8: ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) )
        // InternalGitHubActionsParser.g:7495:9: {...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred229_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7495:18: ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) )
        int alt268=3;
        switch ( input.LA(1) ) {
        case Volumes:
            {
            alt268=1;
            }
            break;
        case LeftSquareBracket:
            {
            alt268=2;
            }
            break;
        case RULE_BEGIN:
            {
            alt268=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 268, 0, input);

            throw nvae;
        }

        switch (alt268) {
            case 1 :
                // InternalGitHubActionsParser.g:7495:19: (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) )
                {
                // InternalGitHubActionsParser.g:7495:19: (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) )
                // InternalGitHubActionsParser.g:7496:9: otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) )
                {
                otherlv_21=(Token)match(input,Volumes,FOLLOW_3); if (state.failed) return ;
                otherlv_22=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7504:9: ( (lv_volumes_23_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7505:10: (lv_volumes_23_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7505:10: (lv_volumes_23_0= ruleExpression )
                // InternalGitHubActionsParser.g:7506:11: lv_volumes_23_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_0_2_0());
                  										
                }
                pushFollow(FOLLOW_2);
                lv_volumes_23_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }


                }
                break;
            case 2 :
                // InternalGitHubActionsParser.g:7525:8: (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket )
                {
                // InternalGitHubActionsParser.g:7525:8: (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket )
                // InternalGitHubActionsParser.g:7526:9: otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket
                {
                otherlv_24=(Token)match(input,LeftSquareBracket,FOLLOW_4); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7530:9: ( (lv_volumes_25_0= ruleExpression ) )
                // InternalGitHubActionsParser.g:7531:10: (lv_volumes_25_0= ruleExpression )
                {
                // InternalGitHubActionsParser.g:7531:10: (lv_volumes_25_0= ruleExpression )
                // InternalGitHubActionsParser.g:7532:11: lv_volumes_25_0= ruleExpression
                {
                if ( state.backtracking==0 ) {

                  											newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_1_1_0());
                  										
                }
                pushFollow(FOLLOW_8);
                lv_volumes_25_0=ruleExpression();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                // InternalGitHubActionsParser.g:7549:9: (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )*
                loop266:
                do {
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==Comma) ) {
                        alt266=1;
                    }


                    switch (alt266) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7550:10: otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) )
                	    {
                	    otherlv_26=(Token)match(input,Comma,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7554:10: ( (lv_volumes_27_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7555:11: (lv_volumes_27_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7555:11: (lv_volumes_27_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7556:12: lv_volumes_27_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_1_2_1_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_8);
                	    lv_volumes_27_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop266;
                    }
                } while (true);

                otherlv_28=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 3 :
                // InternalGitHubActionsParser.g:7580:8: (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END )
                {
                // InternalGitHubActionsParser.g:7580:8: (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END )
                // InternalGitHubActionsParser.g:7581:9: this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END
                {
                this_BEGIN_29=(Token)match(input,RULE_BEGIN,FOLLOW_9); if (state.failed) return ;
                // InternalGitHubActionsParser.g:7585:9: (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+
                int cnt267=0;
                loop267:
                do {
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==HyphenMinus) ) {
                        alt267=1;
                    }


                    switch (alt267) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7586:10: otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE
                	    {
                	    otherlv_30=(Token)match(input,HyphenMinus,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7590:10: ( (lv_volumes_31_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7591:11: (lv_volumes_31_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7591:11: (lv_volumes_31_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7592:12: lv_volumes_31_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      												newCompositeNode(grammarAccess.getContainerAccess().getVolumesExpressionParserRuleCall_3_2_1_1_0());
                	      											
                	    }
                	    pushFollow(FOLLOW_10);
                	    lv_volumes_31_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }

                	    this_NEWLINE_32=(Token)match(input,RULE_NEWLINE,FOLLOW_11); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt267 >= 1 ) break loop267;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(267, input);
                            throw eee;
                    }
                    cnt267++;
                } while (true);

                this_END_33=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred229_InternalGitHubActionsParser

    // $ANTLR start synpred230_InternalGitHubActionsParser
    public final void synpred230_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_34=null;
        Token otherlv_35=null;
        EObject lv_options_36_0 = null;


        // InternalGitHubActionsParser.g:7625:3: ( ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7625:3: ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:7625:3: ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7626:4: {...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 4) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred230_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 4)");
        }
        // InternalGitHubActionsParser.g:7626:103: ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:7627:5: ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 4);
        // InternalGitHubActionsParser.g:7630:8: ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:7630:9: {...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred230_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7630:18: (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:7630:19: otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) )
        {
        otherlv_34=(Token)match(input,Options,FOLLOW_3); if (state.failed) return ;
        otherlv_35=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7638:8: ( (lv_options_36_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:7639:9: (lv_options_36_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:7639:9: (lv_options_36_0= ruleExpression )
        // InternalGitHubActionsParser.g:7640:10: lv_options_36_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          										newCompositeNode(grammarAccess.getContainerAccess().getOptionsExpressionParserRuleCall_4_2_0());
          									
        }
        pushFollow(FOLLOW_2);
        lv_options_36_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred230_InternalGitHubActionsParser

    // $ANTLR start synpred231_InternalGitHubActionsParser
    public final void synpred231_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_BEGIN_40=null;
        Token otherlv_41=null;
        Token otherlv_42=null;
        EObject lv_username_43_0 = null;


        // InternalGitHubActionsParser.g:7675:9: ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7675:9: ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) )
        {
        // InternalGitHubActionsParser.g:7675:9: ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7676:10: {...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred231_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0)");
        }
        // InternalGitHubActionsParser.g:7676:113: ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) )
        // InternalGitHubActionsParser.g:7677:11: ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0);
        // InternalGitHubActionsParser.g:7680:14: ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) )
        // InternalGitHubActionsParser.g:7680:15: {...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred231_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7680:24: (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) )
        // InternalGitHubActionsParser.g:7680:25: otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) )
        {
        otherlv_38=(Token)match(input,Credentials,FOLLOW_3); if (state.failed) return ;
        otherlv_39=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
        this_BEGIN_40=(Token)match(input,RULE_BEGIN,FOLLOW_83); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7692:14: (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:7693:15: otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) )
        {
        otherlv_41=(Token)match(input,Username,FOLLOW_3); if (state.failed) return ;
        otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7701:15: ( (lv_username_43_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:7702:16: (lv_username_43_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:7702:16: (lv_username_43_0= ruleExpression )
        // InternalGitHubActionsParser.g:7703:17: lv_username_43_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																	newCompositeNode(grammarAccess.getContainerAccess().getUsernameExpressionParserRuleCall_5_0_0_3_2_0());
          																
        }
        pushFollow(FOLLOW_2);
        lv_username_43_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred231_InternalGitHubActionsParser

    // $ANTLR start synpred232_InternalGitHubActionsParser
    public final void synpred232_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_END_47=null;
        EObject lv_password_46_0 = null;


        // InternalGitHubActionsParser.g:7727:9: ( ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:7727:9: ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:7727:9: ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:7728:10: {...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred232_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1)");
        }
        // InternalGitHubActionsParser.g:7728:113: ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) )
        // InternalGitHubActionsParser.g:7729:11: ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1);
        // InternalGitHubActionsParser.g:7732:14: ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) )
        // InternalGitHubActionsParser.g:7732:15: {...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred232_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7732:24: ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END )
        // InternalGitHubActionsParser.g:7732:25: (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END
        {
        // InternalGitHubActionsParser.g:7732:25: (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) )
        // InternalGitHubActionsParser.g:7733:15: otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) )
        {
        otherlv_44=(Token)match(input,Password,FOLLOW_3); if (state.failed) return ;
        otherlv_45=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
        // InternalGitHubActionsParser.g:7741:15: ( (lv_password_46_0= ruleExpression ) )
        // InternalGitHubActionsParser.g:7742:16: (lv_password_46_0= ruleExpression )
        {
        // InternalGitHubActionsParser.g:7742:16: (lv_password_46_0= ruleExpression )
        // InternalGitHubActionsParser.g:7743:17: lv_password_46_0= ruleExpression
        {
        if ( state.backtracking==0 ) {

          																	newCompositeNode(grammarAccess.getContainerAccess().getPasswordExpressionParserRuleCall_5_0_1_0_2_0());
          																
        }
        pushFollow(FOLLOW_24);
        lv_password_46_0=ruleExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }

        this_END_47=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred232_InternalGitHubActionsParser

    // $ANTLR start synpred234_InternalGitHubActionsParser
    public final void synpred234_InternalGitHubActionsParser_fragment() throws RecognitionException {   
        Token otherlv_38=null;
        Token otherlv_39=null;
        Token this_BEGIN_40=null;
        Token otherlv_41=null;
        Token otherlv_42=null;
        Token otherlv_44=null;
        Token otherlv_45=null;
        Token this_END_47=null;
        Token this_END_48=null;
        EObject lv_username_43_0 = null;

        EObject lv_password_46_0 = null;


        // InternalGitHubActionsParser.g:7663:3: ( ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )
        // InternalGitHubActionsParser.g:7663:3: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) )
        {
        // InternalGitHubActionsParser.g:7663:3: ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) )
        // InternalGitHubActionsParser.g:7664:4: {...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) )
        {
        if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 5) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred234_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 5)");
        }
        // InternalGitHubActionsParser.g:7664:103: ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) )
        // InternalGitHubActionsParser.g:7665:5: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) )
        {
        getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup(), 5);
        // InternalGitHubActionsParser.g:7668:8: ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) )
        // InternalGitHubActionsParser.g:7668:9: {...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END )
        {
        if ( !((true)) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred234_InternalGitHubActionsParser", "true");
        }
        // InternalGitHubActionsParser.g:7668:18: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END )
        // InternalGitHubActionsParser.g:7668:19: ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END
        {
        // InternalGitHubActionsParser.g:7668:19: ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )?
        int alt271=2;
        int LA271_0 = input.LA(1);

        if ( (LA271_0==Credentials||LA271_0==Password) ) {
            alt271=1;
        }
        switch (alt271) {
            case 1 :
                // InternalGitHubActionsParser.g:7669:9: ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) )
                {
                // InternalGitHubActionsParser.g:7669:9: ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) )
                // InternalGitHubActionsParser.g:7670:10: ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?)
                {
                getUnorderedGroupHelper().enter(grammarAccess.getContainerAccess().getUnorderedGroup_5_0());
                // InternalGitHubActionsParser.g:7673:10: ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?)
                // InternalGitHubActionsParser.g:7674:11: ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?
                {
                // InternalGitHubActionsParser.g:7674:11: ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+
                int cnt270=0;
                loop270:
                do {
                    int alt270=3;
                    int LA270_0 = input.LA(1);

                    if ( LA270_0 == Credentials && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0) ) {
                        alt270=1;
                    }
                    else if ( LA270_0 == Password && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1) ) {
                        alt270=2;
                    }


                    switch (alt270) {
                	case 1 :
                	    // InternalGitHubActionsParser.g:7675:9: ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:7675:9: ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) )
                	    // InternalGitHubActionsParser.g:7676:10: {...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred234_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0)");
                	    }
                	    // InternalGitHubActionsParser.g:7676:113: ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) )
                	    // InternalGitHubActionsParser.g:7677:11: ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 0);
                	    // InternalGitHubActionsParser.g:7680:14: ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) )
                	    // InternalGitHubActionsParser.g:7680:15: {...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred234_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:7680:24: (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) )
                	    // InternalGitHubActionsParser.g:7680:25: otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) )
                	    {
                	    otherlv_38=(Token)match(input,Credentials,FOLLOW_3); if (state.failed) return ;
                	    otherlv_39=(Token)match(input,Colon,FOLLOW_13); if (state.failed) return ;
                	    this_BEGIN_40=(Token)match(input,RULE_BEGIN,FOLLOW_83); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7692:14: (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) )
                	    // InternalGitHubActionsParser.g:7693:15: otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) )
                	    {
                	    otherlv_41=(Token)match(input,Username,FOLLOW_3); if (state.failed) return ;
                	    otherlv_42=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7701:15: ( (lv_username_43_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7702:16: (lv_username_43_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7702:16: (lv_username_43_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7703:17: lv_username_43_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																	newCompositeNode(grammarAccess.getContainerAccess().getUsernameExpressionParserRuleCall_5_0_0_3_2_0());
                	      																
                	    }
                	    pushFollow(FOLLOW_84);
                	    lv_username_43_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;
                	case 2 :
                	    // InternalGitHubActionsParser.g:7727:9: ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) )
                	    {
                	    // InternalGitHubActionsParser.g:7727:9: ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) )
                	    // InternalGitHubActionsParser.g:7728:10: {...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) )
                	    {
                	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred234_InternalGitHubActionsParser", "getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1)");
                	    }
                	    // InternalGitHubActionsParser.g:7728:113: ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) )
                	    // InternalGitHubActionsParser.g:7729:11: ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) )
                	    {
                	    getUnorderedGroupHelper().select(grammarAccess.getContainerAccess().getUnorderedGroup_5_0(), 1);
                	    // InternalGitHubActionsParser.g:7732:14: ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) )
                	    // InternalGitHubActionsParser.g:7732:15: {...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END )
                	    {
                	    if ( !((true)) ) {
                	        if (state.backtracking>0) {state.failed=true; return ;}
                	        throw new FailedPredicateException(input, "synpred234_InternalGitHubActionsParser", "true");
                	    }
                	    // InternalGitHubActionsParser.g:7732:24: ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END )
                	    // InternalGitHubActionsParser.g:7732:25: (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END
                	    {
                	    // InternalGitHubActionsParser.g:7732:25: (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) )
                	    // InternalGitHubActionsParser.g:7733:15: otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) )
                	    {
                	    otherlv_44=(Token)match(input,Password,FOLLOW_3); if (state.failed) return ;
                	    otherlv_45=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return ;
                	    // InternalGitHubActionsParser.g:7741:15: ( (lv_password_46_0= ruleExpression ) )
                	    // InternalGitHubActionsParser.g:7742:16: (lv_password_46_0= ruleExpression )
                	    {
                	    // InternalGitHubActionsParser.g:7742:16: (lv_password_46_0= ruleExpression )
                	    // InternalGitHubActionsParser.g:7743:17: lv_password_46_0= ruleExpression
                	    {
                	    if ( state.backtracking==0 ) {

                	      																	newCompositeNode(grammarAccess.getContainerAccess().getPasswordExpressionParserRuleCall_5_0_1_0_2_0());
                	      																
                	    }
                	    pushFollow(FOLLOW_24);
                	    lv_password_46_0=ruleExpression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }

                	    this_END_47=(Token)match(input,RULE_END,FOLLOW_84); if (state.failed) return ;

                	    }


                	    }


                	    }


                	    }


                	    }
                	    break;

                	default :
                	    if ( cnt270 >= 1 ) break loop270;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(270, input);
                            throw eee;
                    }
                    cnt270++;
                } while (true);

                if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_5_0()) ) {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    throw new FailedPredicateException(input, "synpred234_InternalGitHubActionsParser", "getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup_5_0())");
                }

                }


                }


                }
                break;

        }

        this_END_48=(Token)match(input,RULE_END,FOLLOW_2); if (state.failed) return ;

        }


        }


        }


        }


        }
    }
    // $ANTLR end synpred234_InternalGitHubActionsParser

    // Delegated rules

    public final boolean synpred212_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalGitHubActionsParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalGitHubActionsParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA17 dfa17 = new DFA17(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA20 dfa20 = new DFA20(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA154 dfa154 = new DFA154(this);
    static final String dfa_1s = "\12\uffff";
    static final String dfa_2s = "\1\1\11\uffff";
    static final String dfa_3s = "\1\42\11\uffff";
    static final String dfa_4s = "\1\u009b\11\uffff";
    static final String dfa_5s = "\1\uffff\1\11\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10";
    static final String dfa_6s = "\1\0\11\uffff}>";
    static final String[] dfa_7s = {
            "\1\10\6\uffff\1\5\23\uffff\1\7\10\uffff\1\3\75\uffff\1\11\1\uffff\1\2\11\uffff\1\6\12\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "()+ loopback of 95:5: ( ({...}? => ( ({...}? => (otherlv_1= Name otherlv_2= Colon ( (lv_name_3_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_4= RunName otherlv_5= Colon ( (lv_runName_6_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= On otherlv_8= Colon ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions otherlv_22= Colon ( (lv_permissions_23_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= Env otherlv_25= Colon ( (lv_environmentVariables_26_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_27= Defaults otherlv_28= Colon ( (lv_defaults_29_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= Concurrency otherlv_31= Colon ( (lv_concurrencyGroup_32_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Jobs otherlv_34= Colon ( (lv_jobs_35_0= ruleJob ) )+ ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_0 = input.LA(1);

                         
                        int index8_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_0==EOF) ) {s = 1;}

                        else if ( LA8_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 0) ) {s = 2;}

                        else if ( LA8_0 == RunName && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 1) ) {s = 3;}

                        else if ( LA8_0 == On && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 2) ) {s = 4;}

                        else if ( LA8_0 == Permissions && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 3) ) {s = 5;}

                        else if ( LA8_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 4) ) {s = 6;}

                        else if ( LA8_0 == Defaults && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 5) ) {s = 7;}

                        else if ( LA8_0 == Concurrency && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 6) ) {s = 8;}

                        else if ( LA8_0 == Jobs && getUnorderedGroupHelper().canSelect(grammarAccess.getWorkflowAccess().getUnorderedGroup(), 7) ) {s = 9;}

                         
                        input.seek(index8_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_8s = "\15\uffff";
    static final String dfa_9s = "\1\uffff\5\6\7\uffff";
    static final String dfa_10s = "\1\4\5\42\1\uffff\2\4\2\uffff\1\4\1\uffff";
    static final String dfa_11s = "\1\u00ac\5\u00a4\1\uffff\1\u00b0\1\u00a2\2\uffff\1\u00b0\1\uffff";
    static final String dfa_12s = "\6\uffff\1\1\2\uffff\1\4\1\2\1\uffff\1\3";
    static final String dfa_13s = "\15\uffff}>";
    static final String[] dfa_14s = {
            "\2\6\2\uffff\1\6\1\5\1\6\5\uffff\1\6\1\1\2\uffff\1\6\4\uffff\1\6\1\uffff\1\2\2\uffff\1\6\1\4\1\11\1\6\6\uffff\1\6\3\uffff\2\6\1\uffff\1\6\3\uffff\1\6\3\uffff\1\6\17\uffff\1\11\20\uffff\2\6\10\uffff\2\6\3\uffff\1\6\1\uffff\1\6\5\uffff\1\6\1\uffff\1\6\4\uffff\1\6\10\uffff\1\6\3\uffff\1\6\4\uffff\1\3\36\uffff\1\7\4\uffff\1\10",
            "\1\6\6\uffff\1\6\23\uffff\1\6\10\uffff\1\6\75\uffff\1\6\1\uffff\1\6\11\uffff\1\6\12\uffff\1\6\10\uffff\1\11",
            "\1\6\6\uffff\1\6\23\uffff\1\6\10\uffff\1\6\75\uffff\1\6\1\uffff\1\6\11\uffff\1\6\12\uffff\1\6\10\uffff\1\11",
            "\1\6\6\uffff\1\6\23\uffff\1\6\10\uffff\1\6\75\uffff\1\6\1\uffff\1\6\11\uffff\1\6\12\uffff\1\6\10\uffff\1\11",
            "\1\6\6\uffff\1\6\23\uffff\1\6\10\uffff\1\6\75\uffff\1\6\1\uffff\1\6\11\uffff\1\6\12\uffff\1\6\10\uffff\1\11",
            "\1\6\6\uffff\1\6\23\uffff\1\6\10\uffff\1\6\75\uffff\1\6\1\uffff\1\6\11\uffff\1\6\12\uffff\1\6\10\uffff\1\11",
            "",
            "\2\12\2\11\3\12\1\uffff\1\11\1\uffff\1\11\1\uffff\2\12\1\uffff\1\11\1\12\1\11\3\uffff\1\12\1\uffff\1\12\2\uffff\2\12\1\uffff\1\12\6\uffff\1\12\1\uffff\1\11\1\uffff\2\12\1\uffff\1\12\1\uffff\1\11\1\uffff\1\12\3\uffff\1\12\2\11\12\uffff\1\11\6\uffff\1\11\3\uffff\1\11\1\uffff\1\11\3\uffff\1\11\2\uffff\2\12\7\uffff\1\11\2\12\1\11\2\uffff\1\12\1\uffff\1\12\1\uffff\1\11\2\uffff\1\11\1\12\1\uffff\1\12\4\uffff\1\12\10\uffff\1\12\3\uffff\1\12\4\uffff\1\12\6\uffff\1\11\40\uffff\1\11",
            "\2\11\2\uffff\1\11\1\uffff\1\11\5\uffff\1\11\3\uffff\1\11\4\uffff\1\11\4\uffff\1\11\2\uffff\1\11\6\uffff\1\11\3\uffff\2\11\1\uffff\1\11\3\uffff\1\11\3\uffff\1\11\40\uffff\2\11\10\uffff\2\11\3\uffff\1\11\1\uffff\1\11\5\uffff\1\11\1\uffff\1\11\4\uffff\1\11\10\uffff\1\11\3\uffff\1\11\36\uffff\1\13",
            "",
            "",
            "\2\14\2\11\3\14\1\uffff\1\11\1\uffff\1\11\1\uffff\2\14\1\uffff\1\11\1\14\1\11\3\uffff\1\14\1\uffff\1\14\2\uffff\2\14\1\uffff\1\14\6\uffff\1\14\1\uffff\1\11\1\uffff\2\14\1\uffff\1\14\1\uffff\1\11\1\uffff\1\14\3\uffff\1\14\2\11\12\uffff\1\11\6\uffff\1\11\3\uffff\1\11\1\uffff\1\11\3\uffff\1\11\2\uffff\2\14\7\uffff\1\11\2\14\1\11\2\uffff\1\14\1\uffff\1\14\1\uffff\1\11\2\uffff\1\11\1\14\1\uffff\1\14\4\uffff\1\14\10\uffff\1\14\3\uffff\1\14\4\uffff\1\14\6\uffff\1\11\40\uffff\1\11",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final short[] dfa_9 = DFA.unpackEncodedString(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final char[] dfa_11 = DFA.unpackEncodedStringToUnsignedChars(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final short[][] dfa_14 = unpackEncodedStringArray(dfa_14s);

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = dfa_8;
            this.eof = dfa_9;
            this.min = dfa_10;
            this.max = dfa_11;
            this.accept = dfa_12;
            this.special = dfa_13;
            this.transition = dfa_14;
        }
        public String getDescription() {
            return "185:8: ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ )";
        }
    }
    static final String dfa_15s = "\32\uffff";
    static final String dfa_16s = "\1\1\31\uffff";
    static final String dfa_17s = "\1\17\4\uffff\4\0\21\uffff";
    static final String dfa_18s = "\1\u00ad\4\uffff\4\0\21\uffff";
    static final String dfa_19s = "\1\uffff\1\2\10\uffff\1\1\17\uffff";
    static final String dfa_20s = "\5\uffff\1\0\1\1\1\2\1\3\21\uffff}>";
    static final String[] dfa_21s = {
            "\1\12\10\uffff\1\12\11\uffff\1\10\4\uffff\1\12\1\uffff\1\5\12\uffff\1\12\10\uffff\1\7\10\uffff\1\1\1\uffff\1\12\1\uffff\1\12\17\uffff\2\12\33\uffff\1\12\4\uffff\1\12\7\uffff\1\1\1\uffff\1\1\5\uffff\1\12\1\uffff\1\12\1\uffff\1\6\11\uffff\1\12\1\1\13\uffff\1\12\4\uffff\2\12",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final char[] dfa_18 = DFA.unpackEncodedStringToUnsignedChars(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final short[][] dfa_21 = unpackEncodedStringArray(dfa_21s);

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = dfa_15;
            this.eof = dfa_16;
            this.min = dfa_17;
            this.max = dfa_18;
            this.accept = dfa_19;
            this.special = dfa_20;
            this.transition = dfa_21;
        }
        public String getDescription() {
            return "()+ loopback of 492:8: ( (lv_jobs_35_0= ruleJob ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_5 = input.LA(1);

                         
                        int index7_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA7_6 = input.LA(1);

                         
                        int index7_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA7_7 = input.LA(1);

                         
                        int index7_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA7_8 = input.LA(1);

                         
                        int index7_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_InternalGitHubActionsParser()) ) {s = 10;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index7_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_22s = "\25\uffff";
    static final String dfa_23s = "\1\17\12\0\1\uffff\6\0\3\uffff";
    static final String dfa_24s = "\1\u00ad\12\0\1\uffff\6\0\3\uffff";
    static final String dfa_25s = "\13\uffff\1\1\6\uffff\1\2\2\uffff";
    static final String dfa_26s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\12\1\13\1\14\1\15\1\16\1\17\3\uffff}>";
    static final String[] dfa_27s = {
            "\1\17\10\uffff\1\20\11\uffff\1\10\4\uffff\1\7\1\uffff\1\2\12\uffff\1\15\10\uffff\1\12\12\uffff\1\16\1\uffff\1\14\17\uffff\1\6\1\22\33\uffff\1\3\4\uffff\1\13\17\uffff\1\22\1\uffff\1\22\1\uffff\1\11\11\uffff\1\5\14\uffff\1\4\4\uffff\1\1\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final char[] dfa_24 = DFA.unpackEncodedStringToUnsignedChars(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final short[][] dfa_27 = unpackEncodedStringArray(dfa_27s);

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = dfa_22;
            this.eof = dfa_22;
            this.min = dfa_23;
            this.max = dfa_24;
            this.accept = dfa_25;
            this.special = dfa_26;
            this.transition = dfa_27;
        }
        public String getDescription() {
            return "545:2: (this_ScriptJob_0= ruleScriptJob | this_ReuseWorkflowJob_1= ruleReuseWorkflowJob )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA9_1 = input.LA(1);

                         
                        int index9_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA9_2 = input.LA(1);

                         
                        int index9_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA9_3 = input.LA(1);

                         
                        int index9_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA9_4 = input.LA(1);

                         
                        int index9_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA9_5 = input.LA(1);

                         
                        int index9_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA9_6 = input.LA(1);

                         
                        int index9_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA9_7 = input.LA(1);

                         
                        int index9_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA9_8 = input.LA(1);

                         
                        int index9_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA9_9 = input.LA(1);

                         
                        int index9_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA9_10 = input.LA(1);

                         
                        int index9_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA9_12 = input.LA(1);

                         
                        int index9_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA9_13 = input.LA(1);

                         
                        int index9_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA9_14 = input.LA(1);

                         
                        int index9_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA9_15 = input.LA(1);

                         
                        int index9_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA9_16 = input.LA(1);

                         
                        int index9_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA9_17 = input.LA(1);

                         
                        int index9_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred18_InternalGitHubActionsParser()) ) {s = 11;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index9_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 9, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_28s = "\42\uffff";
    static final String dfa_29s = "\1\1\41\uffff";
    static final String dfa_30s = "\1\17\1\uffff\21\0\17\uffff";
    static final String dfa_31s = "\1\u00ad\1\uffff\21\0\17\uffff";
    static final String dfa_32s = "\1\uffff\1\20\21\uffff\1\2\1\10\1\11\1\7\1\1\1\3\1\4\1\5\1\6\1\12\1\13\1\14\1\15\1\16\1\17";
    static final String dfa_33s = "\2\uffff\1\20\1\11\1\5\1\14\1\17\1\0\1\2\1\12\1\6\1\3\1\15\1\7\1\4\1\1\1\10\1\13\1\16\17\uffff}>";
    static final String[] dfa_34s = {
            "\1\20\10\uffff\1\21\11\uffff\1\5\4\uffff\1\13\1\uffff\1\2\12\uffff\1\16\10\uffff\1\4\10\uffff\1\1\1\uffff\1\17\1\uffff\1\15\17\uffff\1\12\1\1\33\uffff\1\7\4\uffff\1\14\7\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\3\11\uffff\1\11\1\1\13\uffff\1\10\4\uffff\1\6\1\22",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final char[] dfa_30 = DFA.unpackEncodedStringToUnsignedChars(dfa_30s);
    static final char[] dfa_31 = DFA.unpackEncodedStringToUnsignedChars(dfa_31s);
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[][] dfa_34 = unpackEncodedStringArray(dfa_34s);

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_28;
            this.eof = dfa_29;
            this.min = dfa_30;
            this.max = dfa_31;
            this.accept = dfa_32;
            this.special = dfa_33;
            this.transition = dfa_34;
        }
        public String getDescription() {
            return "()+ loopback of 603:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Steps otherlv_41= Colon ( (lv_steps_42_0= ruleStep ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Strategy otherlv_44= Colon ( (lv_strategy_45_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Container otherlv_47= Colon ( (lv_container_48_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Services otherlv_50= Colon ( (lv_services_51_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= ContinueOnError otherlv_53= Colon ( (lv_continueOnError_54_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_55= TimeoutMinutes otherlv_56= Colon ( (lv_timeoutMinutes_57_0= ruleExpression ) ) )? this_END_58= RULE_END this_END_59= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred27_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {s = 24;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_15 = input.LA(1);

                         
                        int index19_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred40_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 12) ) {s = 31;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred27_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {s = 24;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred30_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 5) ) {s = 27;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred38_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 11) ) {s = 30;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred34_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 8) ) {s = 21;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred29_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 4) ) {s = 26;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred37_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 10) ) {s = 29;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_16 = input.LA(1);

                         
                        int index19_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred41_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 13) ) {s = 32;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred33_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 7) ) {s = 20;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_9 = input.LA(1);

                         
                        int index19_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred28_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 3) ) {s = 25;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_9);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_17 = input.LA(1);

                         
                        int index19_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred43_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {s = 33;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_17);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred31_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 6) ) {s = 22;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_12 = input.LA(1);

                         
                        int index19_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred36_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 9) ) {s = 28;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_12);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA19_18 = input.LA(1);

                         
                        int index19_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred43_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 14) ) {s = 33;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_18);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred20_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 0) ) {s = 23;}

                        else if ( synpred27_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 2) ) {s = 24;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred22_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getScriptJobAccess().getUnorderedGroup(), 1) ) {s = 19;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getScriptJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_35s = "\33\uffff";
    static final String dfa_36s = "\1\2\32\uffff";
    static final String dfa_37s = "\1\17\1\0\31\uffff";
    static final String dfa_38s = "\1\u00ad\1\0\31\uffff";
    static final String dfa_39s = "\2\uffff\1\2\27\uffff\1\1";
    static final String dfa_40s = "\1\uffff\1\0\31\uffff}>";
    static final String[] dfa_41s = {
            "\1\2\10\uffff\1\2\11\uffff\1\2\4\uffff\1\2\1\uffff\1\2\12\uffff\1\2\10\uffff\1\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2\17\uffff\2\2\33\uffff\1\2\4\uffff\1\2\7\uffff\1\2\1\uffff\1\1\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\11\uffff\2\2\13\uffff\1\2\4\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final char[] dfa_37 = DFA.unpackEncodedStringToUnsignedChars(dfa_37s);
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[][] dfa_41 = unpackEncodedStringArray(dfa_41s);

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = dfa_35;
            this.eof = dfa_36;
            this.min = dfa_37;
            this.max = dfa_38;
            this.accept = dfa_39;
            this.special = dfa_40;
            this.transition = dfa_41;
        }
        public String getDescription() {
            return "639:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA10_1 = input.LA(1);

                         
                        int index10_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred19_InternalGitHubActionsParser()) ) {s = 26;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index10_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 10, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_42s = "\1\1\32\uffff";
    static final String dfa_43s = "\1\17\11\uffff\1\0\20\uffff";
    static final String dfa_44s = "\1\u00ad\11\uffff\1\0\20\uffff";
    static final String dfa_45s = "\1\uffff\1\2\30\uffff\1\1";
    static final String dfa_46s = "\12\uffff\1\0\20\uffff}>";
    static final String[] dfa_47s = {
            "\1\1\10\uffff\1\1\11\uffff\1\1\4\uffff\1\1\1\uffff\1\1\12\uffff\1\1\10\uffff\1\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\17\uffff\2\1\33\uffff\1\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\11\uffff\2\1\13\uffff\1\1\4\uffff\1\12\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final char[] dfa_43 = DFA.unpackEncodedStringToUnsignedChars(dfa_43s);
    static final char[] dfa_44 = DFA.unpackEncodedStringToUnsignedChars(dfa_44s);
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[][] dfa_47 = unpackEncodedStringArray(dfa_47s);

    class DFA17 extends DFA {

        public DFA17(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 17;
            this.eot = dfa_35;
            this.eof = dfa_42;
            this.min = dfa_43;
            this.max = dfa_44;
            this.accept = dfa_45;
            this.special = dfa_46;
            this.transition = dfa_47;
        }
        public String getDescription() {
            return "()+ loopback of 1180:8: ( (lv_services_51_0= ruleService ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA17_10 = input.LA(1);

                         
                        int index17_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred39_InternalGitHubActionsParser()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index17_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 17, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_48s = "\46\uffff";
    static final String dfa_49s = "\1\1\45\uffff";
    static final String dfa_50s = "\1\17\1\uffff\23\0\21\uffff";
    static final String dfa_51s = "\1\u00ad\1\uffff\23\0\21\uffff";
    static final String dfa_52s = "\1\uffff\1\22\23\uffff\1\2\1\10\1\11\1\7\1\1\1\3\1\4\1\5\1\6\1\12\1\13\1\14\1\20\1\21\1\15\1\16\1\17";
    static final String dfa_53s = "\2\uffff\1\12\1\6\1\0\1\10\1\15\1\11\1\5\1\21\1\1\1\16\1\2\1\17\1\14\1\22\1\3\1\4\1\13\1\7\1\20\21\uffff}>";
    static final String[] dfa_54s = {
            "\1\17\10\uffff\1\20\11\uffff\1\5\4\uffff\1\13\1\uffff\1\2\12\uffff\1\15\10\uffff\1\4\10\uffff\1\1\1\uffff\1\16\1\uffff\1\14\17\uffff\1\12\1\24\33\uffff\1\7\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff\1\22\1\uffff\1\23\1\uffff\1\3\11\uffff\1\11\1\1\13\uffff\1\10\4\uffff\1\6\1\21",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final char[] dfa_50 = DFA.unpackEncodedStringToUnsignedChars(dfa_50s);
    static final char[] dfa_51 = DFA.unpackEncodedStringToUnsignedChars(dfa_51s);
    static final short[] dfa_52 = DFA.unpackEncodedString(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[][] dfa_54 = unpackEncodedStringArray(dfa_54s);

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = dfa_48;
            this.eof = dfa_49;
            this.min = dfa_50;
            this.max = dfa_51;
            this.accept = dfa_52;
            this.special = dfa_53;
            this.transition = dfa_54;
        }
        public String getDescription() {
            return "()+ loopback of 1335:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_name_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Permissions otherlv_9= Colon ( (lv_permissions_10_0= rulePermission ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Needs otherlv_12= Colon ( (otherlv_13= RULE_ID ) ) ) | (otherlv_14= LeftSquareBracket ( (otherlv_15= RULE_ID ) ) (otherlv_16= Comma ( (otherlv_17= RULE_ID ) ) )* otherlv_18= RightSquareBracket ) | (this_BEGIN_19= RULE_BEGIN (otherlv_20= HyphenMinus ( (otherlv_21= RULE_ID ) ) this_NEWLINE_22= RULE_NEWLINE )+ this_END_23= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_24_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_25= RunsOn otherlv_26= Colon ( (lv_agent_27_0= ruleAgent ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_28= Environment otherlv_29= Colon ( (lv_stagingEnvironment_30_0= ruleStagingEnvironment ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= Concurrency otherlv_32= Colon ( (lv_concurrencyGroup_33_0= ruleConcurrencyGroup ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Env otherlv_35= Colon ( (lv_environmentVariables_36_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_37= Defaults otherlv_38= Colon ( (lv_defaults_39_0= ruleDefaults ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Strategy otherlv_41= Colon ( (lv_strategy_42_0= ruleStrategy ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Container otherlv_44= Colon ( (lv_container_45_0= ruleContainer ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_46= Services otherlv_47= Colon ( (lv_services_48_0= ruleService ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Uses otherlv_50= Colon ( (lv_workflowPath_51_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_52= With otherlv_53= Colon ( (lv_args_54_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_55= Secrets otherlv_56= Colon ( ( (lv_inheritSecrets_57_0= Inherit ) ) | ( (lv_secrets_58_0= ruleVariableAssignment ) )+ ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= ContinueOnError otherlv_60= Colon ( (lv_continueOnError_61_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_62= TimeoutMinutes otherlv_63= Colon ( (lv_timeoutMinutes_64_0= ruleExpression ) ) )? this_END_65= RULE_END this_END_66= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_4 = input.LA(1);

                         
                        int index31_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred59_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 8) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA31_10 = input.LA(1);

                         
                        int index31_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred54_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 4) ) {s = 28;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA31_12 = input.LA(1);

                         
                        int index31_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred60_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 9) ) {s = 30;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA31_16 = input.LA(1);

                         
                        int index31_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred72_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {s = 34;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA31_17 = input.LA(1);

                         
                        int index31_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred72_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 16) ) {s = 34;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA31_8 = input.LA(1);

                         
                        int index31_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred52_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {s = 26;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA31_3 = input.LA(1);

                         
                        int index31_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred58_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 7) ) {s = 22;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA31_19 = input.LA(1);

                         
                        int index31_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred66_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 13) ) {s = 36;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_19);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA31_5 = input.LA(1);

                         
                        int index31_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred56_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 6) ) {s = 24;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA31_7 = input.LA(1);

                         
                        int index31_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred52_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {s = 26;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA31_2 = input.LA(1);

                         
                        int index31_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred47_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 1) ) {s = 21;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_2);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA31_18 = input.LA(1);

                         
                        int index31_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred64_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 12) ) {s = 35;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_18);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA31_14 = input.LA(1);

                         
                        int index31_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred63_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 11) ) {s = 32;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA31_6 = input.LA(1);

                         
                        int index31_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred45_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 0) ) {s = 25;}

                        else if ( synpred52_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 2) ) {s = 26;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_6);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA31_11 = input.LA(1);

                         
                        int index31_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred55_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 5) ) {s = 29;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_11);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA31_13 = input.LA(1);

                         
                        int index31_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred61_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 10) ) {s = 31;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_13);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA31_20 = input.LA(1);

                         
                        int index31_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred69_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 14) ) {s = 37;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_20);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA31_9 = input.LA(1);

                         
                        int index31_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred53_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 3) ) {s = 27;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_9);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA31_15 = input.LA(1);

                         
                        int index31_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred70_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup(), 15) ) {s = 33;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getReuseWorkflowJobAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index31_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA20 extends DFA {

        public DFA20(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 20;
            this.eot = dfa_35;
            this.eof = dfa_36;
            this.min = dfa_37;
            this.max = dfa_38;
            this.accept = dfa_39;
            this.special = dfa_40;
            this.transition = dfa_41;
        }
        public String getDescription() {
            return "1371:8: (otherlv_5= Name otherlv_6= Colon ( (lv_jobName_7_0= ruleExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA20_1 = input.LA(1);

                         
                        int index20_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_InternalGitHubActionsParser()) ) {s = 26;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index20_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 20, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_35;
            this.eof = dfa_42;
            this.min = dfa_43;
            this.max = dfa_44;
            this.accept = dfa_45;
            this.special = dfa_46;
            this.transition = dfa_47;
        }
        public String getDescription() {
            return "()+ loopback of 1874:8: ( (lv_services_48_0= ruleService ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_10 = input.LA(1);

                         
                        int index26_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalGitHubActionsParser()) ) {s = 26;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_55s = "\36\uffff";
    static final String dfa_56s = "\1\5\35\uffff";
    static final String dfa_57s = "\1\17\2\uffff\2\0\31\uffff";
    static final String dfa_58s = "\1\u00b0\2\uffff\2\0\31\uffff";
    static final String dfa_59s = "\1\uffff\1\1\3\uffff\1\2\30\uffff";
    static final String dfa_60s = "\3\uffff\1\0\1\1\31\uffff}>";
    static final String[] dfa_61s = {
            "\1\5\10\uffff\1\5\11\uffff\1\5\4\uffff\1\5\1\uffff\1\5\12\uffff\1\5\10\uffff\1\5\10\uffff\1\5\1\uffff\1\5\1\uffff\1\5\17\uffff\2\5\16\uffff\1\5\11\uffff\1\5\2\uffff\1\5\4\uffff\1\5\7\uffff\1\5\1\uffff\1\5\5\uffff\1\5\1\uffff\1\5\1\1\1\5\11\uffff\2\5\13\uffff\1\3\4\uffff\1\4\1\5\2\uffff\1\1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final short[] dfa_56 = DFA.unpackEncodedString(dfa_56s);
    static final char[] dfa_57 = DFA.unpackEncodedStringToUnsignedChars(dfa_57s);
    static final char[] dfa_58 = DFA.unpackEncodedStringToUnsignedChars(dfa_58s);
    static final short[] dfa_59 = DFA.unpackEncodedString(dfa_59s);
    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[][] dfa_61 = unpackEncodedStringArray(dfa_61s);

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = dfa_55;
            this.eof = dfa_56;
            this.min = dfa_57;
            this.max = dfa_58;
            this.accept = dfa_59;
            this.special = dfa_60;
            this.transition = dfa_61;
        }
        public String getDescription() {
            return "2154:2: ( ( ( (lv_labels_0_0= ruleExpression ) ) | (otherlv_1= LeftSquareBracket ( (lv_labels_2_0= ruleExpression ) ) (otherlv_3= Comma ( (lv_labels_4_0= ruleExpression ) ) )* otherlv_5= RightSquareBracket ) | (this_BEGIN_6= RULE_BEGIN (otherlv_7= HyphenMinus ( (lv_labels_8_0= ruleExpression ) ) this_NEWLINE_9= RULE_NEWLINE )+ this_END_10= RULE_END ) ) | ( () ( ( ( ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )* ) ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_InternalGitHubActionsParser()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred77_InternalGitHubActionsParser()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_62s = "\13\uffff";
    static final String dfa_63s = "\1\1\12\uffff";
    static final String dfa_64s = "\1\17\1\uffff\1\u00a2\1\u008f\2\uffff\1\u008f\4\uffff";
    static final String dfa_65s = "\1\u00ad\1\uffff\1\u00af\1\u00b0\2\uffff\1\u00b0\4\uffff";
    static final String dfa_66s = "\1\uffff\1\3\2\uffff\1\1\1\2\1\uffff\4\1";
    static final String dfa_67s = "\1\0\2\uffff\1\1\2\uffff\1\2\4\uffff}>";
    static final String[] dfa_68s = {
            "\1\1\10\uffff\1\1\11\uffff\1\1\4\uffff\1\1\1\uffff\1\1\12\uffff\1\1\10\uffff\1\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\17\uffff\2\1\16\uffff\1\4\11\uffff\1\5\2\uffff\1\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\11\uffff\2\1\13\uffff\1\3\4\uffff\1\2\1\1",
            "",
            "\1\6\14\uffff\1\1",
            "\1\7\37\uffff\1\1\1\10",
            "",
            "",
            "\1\11\37\uffff\1\1\1\12",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final char[] dfa_64 = DFA.unpackEncodedStringToUnsignedChars(dfa_64s);
    static final char[] dfa_65 = DFA.unpackEncodedStringToUnsignedChars(dfa_65s);
    static final short[] dfa_66 = DFA.unpackEncodedString(dfa_66s);
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final short[][] dfa_68 = unpackEncodedStringArray(dfa_68s);

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = dfa_62;
            this.eof = dfa_63;
            this.min = dfa_64;
            this.max = dfa_65;
            this.accept = dfa_66;
            this.special = dfa_67;
            this.transition = dfa_68;
        }
        public String getDescription() {
            return "()* loopback of 2289:7: ( ({...}? => ( ({...}? => ( (otherlv_13= Labels otherlv_14= Colon ( (lv_labels_15_0= ruleExpression ) ) ) | (otherlv_16= LeftSquareBracket ( (lv_labels_17_0= ruleExpression ) ) (otherlv_18= Comma ( (lv_labels_19_0= ruleExpression ) ) )* otherlv_20= RightSquareBracket ) | (this_BEGIN_21= RULE_BEGIN (otherlv_22= HyphenMinus ( (lv_labels_23_0= ruleExpression ) ) this_NEWLINE_24= RULE_NEWLINE )+ this_END_25= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Group otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( (lv_group_29_0= ruleExpression ) ) this_END_30= RULE_END ) ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_0 = input.LA(1);

                         
                        int index38_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA38_0==EOF||LA38_0==ContinueOnError||LA38_0==TimeoutMinutes||LA38_0==Concurrency||LA38_0==Environment||LA38_0==Permissions||LA38_0==Container||LA38_0==Defaults||LA38_0==RunName||LA38_0==Services||LA38_0==Strategy||(LA38_0>=RunsOn && LA38_0<=Secrets)||LA38_0==Needs||LA38_0==Steps||LA38_0==Jobs||LA38_0==Name||LA38_0==Uses||LA38_0==With||LA38_0==Env||(LA38_0>=If && LA38_0<=On)||LA38_0==RULE_END) ) {s = 1;}

                        else if ( (LA38_0==RULE_BEGIN) ) {s = 2;}

                        else if ( (LA38_0==LeftSquareBracket) ) {s = 3;}

                        else if ( LA38_0 == Labels && getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0) ) {s = 4;}

                        else if ( LA38_0 == Group && getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 1) ) {s = 5;}

                         
                        input.seek(index38_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA38_3 = input.LA(1);

                         
                        int index38_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA38_3==RULE_ID) ) {s = 1;}

                        else if ( LA38_3 == DollarSignLeftCurlyBracketLeftCurlyBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0) ) {s = 7;}

                        else if ( LA38_3 == RULE_STRING && getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0) ) {s = 8;}

                         
                        input.seek(index38_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA38_6 = input.LA(1);

                         
                        int index38_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA38_6==RULE_ID) ) {s = 1;}

                        else if ( LA38_6 == DollarSignLeftCurlyBracketLeftCurlyBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0) ) {s = 9;}

                        else if ( LA38_6 == RULE_STRING && getUnorderedGroupHelper().canSelect(grammarAccess.getAgentAccess().getUnorderedGroup_1_1(), 0) ) {s = 10;}

                         
                        input.seek(index38_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_69s = "\1\17\10\0\4\uffff";
    static final String dfa_70s = "\1\u00ac\10\0\4\uffff";
    static final String dfa_71s = "\11\uffff\1\1\1\2\2\uffff";
    static final String dfa_72s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\4\uffff}>";
    static final String[] dfa_73s = {
            "\1\7\2\uffff\1\5\5\uffff\1\10\142\uffff\1\4\12\uffff\1\3\5\uffff\1\12\1\uffff\1\12\1\uffff\1\6\1\uffff\1\11\6\uffff\1\1\1\2\21\uffff\1\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final char[] dfa_70 = DFA.unpackEncodedStringToUnsignedChars(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[] dfa_72 = DFA.unpackEncodedString(dfa_72s);
    static final short[][] dfa_73 = unpackEncodedStringArray(dfa_73s);

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_69;
            this.max = dfa_70;
            this.accept = dfa_71;
            this.special = dfa_72;
            this.transition = dfa_73;
        }
        public String getDescription() {
            return "2509:3: (this_Command_2= ruleCommand | this_Package_3= rulePackage )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_1 = input.LA(1);

                         
                        int index40_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA40_2 = input.LA(1);

                         
                        int index40_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA40_3 = input.LA(1);

                         
                        int index40_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA40_4 = input.LA(1);

                         
                        int index40_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA40_5 = input.LA(1);

                         
                        int index40_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA40_6 = input.LA(1);

                         
                        int index40_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA40_7 = input.LA(1);

                         
                        int index40_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA40_8 = input.LA(1);

                         
                        int index40_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred84_InternalGitHubActionsParser()) ) {s = 9;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index40_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_74s = "\1\17\12\uffff";
    static final String dfa_75s = "\1\u00ad\12\uffff";
    static final String dfa_76s = "\1\uffff\1\11\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\10";
    static final String dfa_77s = "\1\0\12\uffff}>";
    static final String[] dfa_78s = {
            "\1\10\2\uffff\1\6\5\uffff\1\11\142\uffff\1\5\12\uffff\1\4\11\uffff\1\7\1\uffff\1\12\6\uffff\1\2\1\3\22\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = dfa_62;
            this.eof = dfa_63;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "()+ loopback of 2572:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Run otherlv_24= Colon ( (lv_command_25_0= ruleExpression ) ) ) ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_0 = input.LA(1);

                         
                        int index43_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA43_0==EOF||LA43_0==RULE_END) ) {s = 1;}

                        else if ( LA43_0 == Id && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 0) ) {s = 2;}

                        else if ( LA43_0 == If && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 1) ) {s = 3;}

                        else if ( LA43_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 2) ) {s = 4;}

                        else if ( LA43_0 == Shell && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 3) ) {s = 5;}

                        else if ( LA43_0 == WorkingDirectory && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 4) ) {s = 6;}

                        else if ( LA43_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 5) ) {s = 7;}

                        else if ( LA43_0 == ContinueOnError && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 6) ) {s = 8;}

                        else if ( LA43_0 == TimeoutMinutes && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {s = 9;}

                        else if ( LA43_0 == Run && getUnorderedGroupHelper().canSelect(grammarAccess.getCommandAccess().getUnorderedGroup(), 7) ) {s = 10;}

                         
                        input.seek(index43_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\1\1\14\uffff";
    static final String dfa_80s = "\1\17\14\uffff";
    static final String dfa_81s = "\1\u00ad\14\uffff";
    static final String dfa_82s = "\1\uffff\1\12\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\10\2\11";
    static final String dfa_83s = "\1\0\14\uffff}>";
    static final String[] dfa_84s = {
            "\1\10\2\uffff\1\6\5\uffff\1\11\142\uffff\1\5\12\uffff\1\4\5\uffff\1\12\1\uffff\1\13\1\uffff\1\7\10\uffff\1\2\1\3\21\uffff\1\14\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[] dfa_83 = DFA.unpackEncodedString(dfa_83s);
    static final short[][] dfa_84 = unpackEncodedStringArray(dfa_84s);

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = dfa_8;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_83;
            this.transition = dfa_84;
        }
        public String getDescription() {
            return "()+ loopback of 2943:5: ( ({...}? => ( ({...}? => (otherlv_1= Id otherlv_2= Colon ( (lv_id_3_0= RULE_STRING ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (lv_if_4_0= ruleIfStatement ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Name otherlv_6= Colon ( (lv_name_7_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Shell otherlv_9= Colon ( (lv_shell_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= WorkingDirectory otherlv_12= Colon ( (lv_workingDirectory_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Env otherlv_15= Colon ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= ContinueOnError otherlv_18= Colon ( (lv_continueOnError_19_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_20= TimeoutMinutes otherlv_21= Colon ( (lv_timeoutMinutes_22_0= ruleExpression ) ) )? (otherlv_23= Uses otherlv_24= Colon ( (lv_uses_25_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= With otherlv_27= Colon this_BEGIN_28= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_30= Entrypoint otherlv_31= Colon ( (lv_entrypoint_32_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Args otherlv_34= Colon ( (lv_containerArgs_35_0= ruleExpression ) ) ) ) ) ) )+ {...}?) ) ) ) | ( ( (lv_args_36_0= ruleVariableAssignment ) )+ this_END_37= RULE_END ) ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_0 = input.LA(1);

                         
                        int index49_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA49_0==EOF||LA49_0==RULE_END) ) {s = 1;}

                        else if ( LA49_0 == Id && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 0) ) {s = 2;}

                        else if ( LA49_0 == If && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 1) ) {s = 3;}

                        else if ( LA49_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 2) ) {s = 4;}

                        else if ( LA49_0 == Shell && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 3) ) {s = 5;}

                        else if ( LA49_0 == WorkingDirectory && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 4) ) {s = 6;}

                        else if ( LA49_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 5) ) {s = 7;}

                        else if ( LA49_0 == ContinueOnError && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 6) ) {s = 8;}

                        else if ( LA49_0 == TimeoutMinutes && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {s = 9;}

                        else if ( LA49_0 == Uses && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 7) ) {s = 10;}

                        else if ( LA49_0 == With && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {s = 11;}

                        else if ( LA49_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getPackageAccess().getUnorderedGroup(), 8) ) {s = 12;}

                         
                        input.seek(index49_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_85s = "\17\uffff";
    static final String dfa_86s = "\1\1\16\uffff";
    static final String dfa_87s = "\1\17\14\uffff\1\0\1\uffff";
    static final String dfa_88s = "\1\u00ad\14\uffff\1\0\1\uffff";
    static final String dfa_89s = "\1\uffff\1\2\14\uffff\1\1";
    static final String dfa_90s = "\15\uffff\1\0\1\uffff}>";
    static final String[] dfa_91s = {
            "\1\1\2\uffff\1\1\5\uffff\1\1\142\uffff\1\1\12\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\10\uffff\2\1\21\uffff\1\15\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[] dfa_86 = DFA.unpackEncodedString(dfa_86s);
    static final char[] dfa_87 = DFA.unpackEncodedStringToUnsignedChars(dfa_87s);
    static final char[] dfa_88 = DFA.unpackEncodedStringToUnsignedChars(dfa_88s);
    static final short[] dfa_89 = DFA.unpackEncodedString(dfa_89s);
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final short[][] dfa_91 = unpackEncodedStringArray(dfa_91s);

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = dfa_85;
            this.eof = dfa_86;
            this.min = dfa_87;
            this.max = dfa_88;
            this.accept = dfa_89;
            this.special = dfa_90;
            this.transition = dfa_91;
        }
        public String getDescription() {
            return "()+ loopback of 3136:8: ( (lv_environmentVariables_16_0= ruleVariableAssignment ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalGitHubActionsParser()) ) {s = 14;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index44_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_92s = "\1\11\3\uffff\1\4\1\6\3\uffff\1\6\1\uffff";
    static final String dfa_93s = "\1\u00ac\3\uffff\1\u00a2\1\u00b0\3\uffff\1\u00b0\1\uffff";
    static final String dfa_94s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\5\1\6\1\7\1\uffff\1\4";
    static final String dfa_95s = "\13\uffff}>";
    static final String[] dfa_96s = {
            "\1\1\7\uffff\1\10\11\uffff\1\6\3\uffff\1\1\1\7\46\uffff\1\3\100\uffff\1\2\36\uffff\1\5\4\uffff\1\4",
            "",
            "",
            "",
            "\2\12\2\uffff\1\12\1\uffff\1\12\5\uffff\1\12\3\uffff\1\12\4\uffff\1\12\4\uffff\1\12\2\uffff\1\12\6\uffff\1\12\3\uffff\2\12\1\uffff\1\12\3\uffff\1\12\3\uffff\1\12\40\uffff\2\12\10\uffff\2\12\3\uffff\1\12\1\uffff\1\12\5\uffff\1\12\1\uffff\1\12\4\uffff\1\12\10\uffff\1\12\3\uffff\1\12\36\uffff\1\11",
            "\2\12\4\uffff\1\12\1\uffff\1\12\4\uffff\1\12\1\uffff\1\12\24\uffff\1\12\6\uffff\1\12\6\uffff\2\12\12\uffff\1\12\6\uffff\1\12\3\uffff\1\12\1\uffff\1\12\3\uffff\1\12\13\uffff\1\12\2\uffff\1\12\6\uffff\1\12\2\uffff\1\12\40\uffff\1\7\40\uffff\1\7",
            "",
            "",
            "",
            "\2\12\4\uffff\1\12\1\uffff\1\12\4\uffff\1\12\1\uffff\1\12\24\uffff\1\12\6\uffff\1\12\6\uffff\2\12\12\uffff\1\12\6\uffff\1\12\3\uffff\1\12\1\uffff\1\12\3\uffff\1\12\13\uffff\1\12\2\uffff\1\12\6\uffff\1\12\2\uffff\1\12\40\uffff\1\7\40\uffff\1\7",
            ""
    };
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = dfa_62;
            this.eof = dfa_62;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "3872:2: (this_OptionedPullRequestTrigger_0= ruleOptionedPullRequestTrigger | this_OptionedPushTrigger_1= ruleOptionedPushTrigger | this_OptionedScheduleTrigger_2= ruleOptionedScheduleTrigger | this_OptionedStandardEventTrigger_3= ruleOptionedStandardEventTrigger | this_OptionedWorkflowCallTrigger_4= ruleOptionedWorkflowCallTrigger | this_OptionedWorkflowRunTrigger_5= ruleOptionedWorkflowRunTrigger | this_OptionedWorkflowDispatchTrigger_6= ruleOptionedWorkflowDispatchTrigger )";
        }
    }
    static final String dfa_97s = "\31\uffff";
    static final String dfa_98s = "\1\1\30\uffff";
    static final String dfa_99s = "\1\11\15\uffff\2\0\11\uffff";
    static final String dfa_100s = "\1\u00ad\15\uffff\2\0\11\uffff";
    static final String dfa_101s = "\1\uffff\1\4\21\uffff\2\2\3\3\1\1";
    static final String dfa_102s = "\1\0\15\uffff\1\1\1\2\11\uffff}>";
    static final String[] dfa_103s = {
            "\1\1\7\uffff\1\1\4\uffff\1\24\4\uffff\1\1\1\uffff\1\26\1\uffff\2\1\1\uffff\1\1\6\uffff\1\1\20\uffff\1\23\2\uffff\1\1\10\uffff\2\1\61\uffff\1\25\12\uffff\1\1\1\uffff\1\1\1\uffff\1\1\7\uffff\1\1\12\uffff\1\1\13\uffff\1\17\4\uffff\1\16\1\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_97 = DFA.unpackEncodedString(dfa_97s);
    static final short[] dfa_98 = DFA.unpackEncodedString(dfa_98s);
    static final char[] dfa_99 = DFA.unpackEncodedStringToUnsignedChars(dfa_99s);
    static final char[] dfa_100 = DFA.unpackEncodedStringToUnsignedChars(dfa_100s);
    static final short[] dfa_101 = DFA.unpackEncodedString(dfa_101s);
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final short[][] dfa_103 = unpackEncodedStringArray(dfa_103s);

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = dfa_97;
            this.eof = dfa_98;
            this.min = dfa_99;
            this.max = dfa_100;
            this.accept = dfa_101;
            this.special = dfa_102;
            this.transition = dfa_103;
        }
        public String getDescription() {
            return "()+ loopback of 4378:6: ( ({...}? => ( ({...}? => (this_BEGIN_5= RULE_BEGIN ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Branches | ( (lv_ignoreSpecifiedBranches_20_0= BranchesIgnore ) ) ) otherlv_21= Colon ( (lv_branches_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_branches_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_branches_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_branches_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Paths | ( (lv_ignoreSpecifiedPaths_34_0= PathsIgnore ) ) ) otherlv_35= Colon ( (lv_paths_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_paths_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_paths_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_paths_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_0 = input.LA(1);

                         
                        int index73_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA73_0==EOF||LA73_0==Pull_request_target||LA73_0==Workflow_dispatch||LA73_0==Workflow_call||(LA73_0>=Pull_request && LA73_0<=Workflow_run)||LA73_0==Concurrency||LA73_0==Permissions||LA73_0==Defaults||(LA73_0>=RunName && LA73_0<=Schedule)||LA73_0==Jobs||LA73_0==Name||LA73_0==Push||LA73_0==Env||LA73_0==On) ) {s = 1;}

                        else if ( (LA73_0==RULE_BEGIN) ) {s = 14;}

                        else if ( (LA73_0==LeftSquareBracket) ) {s = 15;}

                        else if ( LA73_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 19;}

                        else if ( LA73_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 20;}

                        else if ( LA73_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 21;}

                        else if ( LA73_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 22;}

                        else if ( LA73_0 == RULE_END && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 23;}

                         
                        input.seek(index73_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_14 = input.LA(1);

                         
                        int index73_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred138_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 24;}

                        else if ( synpred144_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 20;}

                        else if ( synpred151_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3()) ) {s = 1;}

                         
                        input.seek(index73_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_15 = input.LA(1);

                         
                        int index73_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred144_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 20;}

                        else if ( synpred151_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPullRequestTriggerAccess().getUnorderedGroup_3()) ) {s = 1;}

                         
                        input.seek(index73_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_104s = "\110\uffff";
    static final String dfa_105s = "\1\4\2\uffff\1\4\77\uffff\1\106\1\uffff\1\106\2\uffff";
    static final String dfa_106s = "\1\11\1\uffff\1\6\1\4\1\uffff\23\u00a1\2\6\1\0\23\u00ae\23\u00a1\1\uffff\1\u00a2\1\11\1\6\1\11\1\uffff\1\0";
    static final String dfa_107s = "\1\u00ad\1\uffff\1\u00b0\1\u00ad\1\uffff\23\u00a8\1\u00b0\1\156\1\0\23\u00ae\23\u00a8\1\uffff\2\u00ad\1\156\1\u00ad\1\uffff\1\0";
    static final String dfa_108s = "\1\uffff\1\1\2\uffff\1\4\74\uffff\1\2\4\uffff\1\3\1\uffff";
    static final String dfa_109s = "\32\uffff\1\1\54\uffff\1\0}>";
    static final String[] dfa_110s = {
            "\1\4\7\uffff\1\4\4\uffff\1\4\4\uffff\1\4\1\uffff\1\4\1\uffff\2\4\1\uffff\1\4\6\uffff\1\4\20\uffff\1\4\2\uffff\1\4\10\uffff\2\4\61\uffff\1\4\3\uffff\1\1\6\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\12\uffff\1\4\13\uffff\1\2\4\uffff\1\3\1\4",
            "",
            "\1\20\1\6\4\uffff\1\7\1\uffff\1\11\4\uffff\1\16\1\uffff\1\21\24\uffff\1\22\6\uffff\1\23\6\uffff\1\24\1\5\12\uffff\1\17\6\uffff\1\25\3\uffff\1\26\1\uffff\1\27\3\uffff\1\13\13\uffff\1\10\2\uffff\1\12\6\uffff\1\14\2\uffff\1\15\40\uffff\1\4\40\uffff\1\4",
            "\2\4\2\uffff\3\4\5\uffff\2\4\2\uffff\1\4\1\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\6\4\5\uffff\2\4\2\uffff\2\4\1\uffff\1\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\10\uffff\2\4\20\uffff\2\4\10\uffff\2\4\3\uffff\1\4\1\uffff\1\4\5\uffff\1\4\1\uffff\1\4\4\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\1\4\3\uffff\2\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\12\uffff\1\4\6\uffff\1\30\4\uffff\1\4\4\uffff\2\4",
            "",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\46\1\34\4\uffff\1\35\1\uffff\1\37\4\uffff\1\44\1\uffff\1\47\24\uffff\1\50\6\uffff\1\51\6\uffff\1\52\1\33\12\uffff\1\45\6\uffff\1\53\3\uffff\1\54\1\uffff\1\55\3\uffff\1\41\13\uffff\1\36\2\uffff\1\40\6\uffff\1\42\2\uffff\1\43\40\uffff\1\4\40\uffff\1\4",
            "\1\71\1\57\4\uffff\1\60\1\uffff\1\62\4\uffff\1\67\1\uffff\1\72\24\uffff\1\73\6\uffff\1\74\6\uffff\1\75\1\56\12\uffff\1\70\6\uffff\1\76\3\uffff\1\77\1\uffff\1\100\3\uffff\1\64\13\uffff\1\61\2\uffff\1\63\6\uffff\1\65\2\uffff\1\66",
            "\1\uffff",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\102",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "\1\31\6\uffff\1\32",
            "",
            "\1\104\12\uffff\1\103",
            "\1\106\7\uffff\1\106\4\uffff\1\106\4\uffff\1\106\1\uffff\1\106\1\uffff\2\106\1\uffff\1\106\6\uffff\1\106\20\uffff\1\106\2\uffff\1\106\10\uffff\2\106\61\uffff\1\106\12\uffff\1\106\1\uffff\1\106\1\uffff\1\106\7\uffff\1\106\12\uffff\1\106\13\uffff\1\106\4\uffff\1\106\1\105",
            "\1\46\1\34\4\uffff\1\35\1\uffff\1\37\4\uffff\1\44\1\uffff\1\47\24\uffff\1\50\6\uffff\1\51\6\uffff\1\52\1\33\12\uffff\1\45\6\uffff\1\53\3\uffff\1\54\1\uffff\1\55\3\uffff\1\41\13\uffff\1\36\2\uffff\1\40\6\uffff\1\42\2\uffff\1\43",
            "\1\106\7\uffff\1\106\4\uffff\1\106\4\uffff\1\106\1\uffff\1\106\1\uffff\2\106\1\uffff\1\106\6\uffff\1\106\20\uffff\1\106\2\uffff\1\106\10\uffff\2\106\61\uffff\1\106\12\uffff\1\106\1\uffff\1\106\1\uffff\1\106\7\uffff\1\106\12\uffff\1\106\13\uffff\1\106\4\uffff\1\106\1\107",
            "",
            "\1\uffff"
    };

    static final short[] dfa_104 = DFA.unpackEncodedString(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final char[] dfa_106 = DFA.unpackEncodedStringToUnsignedChars(dfa_106s);
    static final char[] dfa_107 = DFA.unpackEncodedStringToUnsignedChars(dfa_107s);
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final short[][] dfa_110 = unpackEncodedStringArray(dfa_110s);

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = dfa_104;
            this.eof = dfa_105;
            this.min = dfa_106;
            this.max = dfa_107;
            this.accept = dfa_108;
            this.special = dfa_109;
            this.transition = dfa_110;
        }
        public String getDescription() {
            return "4388:9: ( (otherlv_6= Types otherlv_7= Colon ( (lv_eventTypes_8_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_eventTypes_10_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) (otherlv_11= Comma ( (lv_eventTypes_12_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_eventTypes_16_0= ruleWEBHOOK_ACTIVITY_TYPE ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_71 = input.LA(1);

                         
                        int index64_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_InternalGitHubActionsParser()) ) {s = 70;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index64_71);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_26 = input.LA(1);

                         
                        int index64_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_InternalGitHubActionsParser()) ) {s = 65;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index64_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_111s = {
            "\1\1\7\uffff\1\1\11\uffff\1\1\1\uffff\1\24\1\uffff\2\1\1\uffff\1\1\6\uffff\1\1\1\uffff\1\26\21\uffff\1\1\10\uffff\2\1\61\uffff\1\23\12\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\25\5\uffff\1\1\12\uffff\1\1\13\uffff\1\17\4\uffff\1\16\1\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_111 = unpackEncodedStringArray(dfa_111s);

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = dfa_97;
            this.eof = dfa_98;
            this.min = dfa_99;
            this.max = dfa_100;
            this.accept = dfa_101;
            this.special = dfa_102;
            this.transition = dfa_111;
        }
        public String getDescription() {
            return "()+ loopback of 4894:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )? ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_19= Paths | ( (lv_ignoreSpecifiedPaths_20_0= PathsIgnore ) ) ) otherlv_21= Colon ( (lv_paths_22_0= ruleExpression ) ) ) | (otherlv_23= LeftSquareBracket ( (lv_paths_24_0= ruleExpression ) ) (otherlv_25= Comma ( (lv_paths_26_0= ruleExpression ) ) )* otherlv_27= RightSquareBracket ) | (this_BEGIN_28= RULE_BEGIN (otherlv_29= HyphenMinus ( (lv_paths_30_0= ruleExpression ) ) this_NEWLINE_31= RULE_NEWLINE )+ this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (otherlv_33= Tags | ( (lv_ignoreSpecifiedTags_34_0= TagsIgnore ) ) ) otherlv_35= Colon ( (lv_tags_36_0= ruleExpression ) ) ) | (otherlv_37= LeftSquareBracket ( (lv_tags_38_0= ruleExpression ) ) (otherlv_39= Comma ( (lv_tags_40_0= ruleExpression ) ) )* otherlv_41= RightSquareBracket ) | (this_BEGIN_42= RULE_BEGIN (otherlv_43= HyphenMinus ( (lv_tags_44_0= ruleExpression ) ) this_NEWLINE_45= RULE_NEWLINE )+ this_END_46= RULE_END ) )? this_END_47= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_0 = input.LA(1);

                         
                        int index86_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA86_0==EOF||LA86_0==Pull_request_target||LA86_0==Workflow_dispatch||LA86_0==Workflow_call||(LA86_0>=Pull_request && LA86_0<=Workflow_run)||LA86_0==Concurrency||LA86_0==Permissions||LA86_0==Defaults||(LA86_0>=RunName && LA86_0<=Schedule)||LA86_0==Jobs||LA86_0==Name||LA86_0==Push||LA86_0==Env||LA86_0==On) ) {s = 1;}

                        else if ( (LA86_0==RULE_BEGIN) ) {s = 14;}

                        else if ( (LA86_0==LeftSquareBracket) ) {s = 15;}

                        else if ( LA86_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 19;}

                        else if ( LA86_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 20;}

                        else if ( LA86_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 21;}

                        else if ( LA86_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 22;}

                        else if ( LA86_0 == RULE_END && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 23;}

                         
                        input.seek(index86_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA86_14 = input.LA(1);

                         
                        int index86_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred158_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 24;}

                        else if ( synpred164_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 20;}

                        else if ( synpred171_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3()) ) {s = 1;}

                         
                        input.seek(index86_14);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA86_15 = input.LA(1);

                         
                        int index86_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred164_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 20;}

                        else if ( synpred171_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 23;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getOptionedPushTriggerAccess().getUnorderedGroup_3()) ) {s = 1;}

                         
                        input.seek(index86_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_112s = "\34\uffff";
    static final String dfa_113s = "\1\5\33\uffff";
    static final String dfa_114s = "\1\11\2\uffff\2\0\27\uffff";
    static final String dfa_115s = "\1\u00ad\2\uffff\2\0\27\uffff";
    static final String dfa_116s = "\1\uffff\1\1\3\uffff\1\4\24\uffff\1\2\1\3";
    static final String dfa_117s = "\3\uffff\1\0\1\1\27\uffff}>";
    static final String[] dfa_118s = {
            "\1\5\7\uffff\1\5\4\uffff\1\1\4\uffff\1\5\1\uffff\1\5\1\uffff\2\5\1\uffff\1\5\6\uffff\1\5\1\uffff\1\5\16\uffff\1\1\2\uffff\1\5\10\uffff\2\5\61\uffff\1\5\12\uffff\1\5\1\uffff\1\5\1\uffff\1\5\1\uffff\1\5\5\uffff\1\5\12\uffff\1\5\13\uffff\1\3\4\uffff\1\4\1\5",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[] dfa_113 = DFA.unpackEncodedString(dfa_113s);
    static final char[] dfa_114 = DFA.unpackEncodedStringToUnsignedChars(dfa_114s);
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final short[] dfa_116 = DFA.unpackEncodedString(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[][] dfa_118 = unpackEncodedStringArray(dfa_118s);

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = dfa_112;
            this.eof = dfa_113;
            this.min = dfa_114;
            this.max = dfa_115;
            this.accept = dfa_116;
            this.special = dfa_117;
            this.transition = dfa_118;
        }
        public String getDescription() {
            return "4904:9: ( ( (otherlv_5= Branches | ( (lv_ignoreSpecifiedBranches_6_0= BranchesIgnore ) ) ) otherlv_7= Colon ( (lv_branches_8_0= ruleExpression ) ) ) | (otherlv_9= LeftSquareBracket ( (lv_branches_10_0= ruleExpression ) ) (otherlv_11= Comma ( (lv_branches_12_0= ruleExpression ) ) )* otherlv_13= RightSquareBracket ) | (this_BEGIN_14= RULE_BEGIN (otherlv_15= HyphenMinus ( (lv_branches_16_0= ruleExpression ) ) this_NEWLINE_17= RULE_NEWLINE )+ this_END_18= RULE_END ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_3 = input.LA(1);

                         
                        int index77_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred155_InternalGitHubActionsParser()) ) {s = 26;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index77_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_4 = input.LA(1);

                         
                        int index77_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_InternalGitHubActionsParser()) ) {s = 27;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index77_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_119s = "\1\1\1\uffff\1\7\31\uffff";
    static final String dfa_120s = "\1\11\1\uffff\1\4\31\uffff";
    static final String dfa_121s = "\1\u00ad\1\uffff\1\u00ad\31\uffff";
    static final String dfa_122s = "\1\uffff\1\4\1\uffff\1\2\2\3\26\1";
    static final String dfa_123s = "\1\0\1\uffff\1\1\31\uffff}>";
    static final String[] dfa_124s = {
            "\1\1\7\uffff\1\1\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\6\uffff\1\1\23\uffff\1\1\10\uffff\2\1\17\uffff\1\3\3\uffff\1\4\50\uffff\1\1\1\uffff\1\1\1\uffff\1\1\7\uffff\1\1\12\uffff\1\1\13\uffff\1\1\4\uffff\1\2\1\5",
            "",
            "\2\1\2\uffff\1\1\1\21\1\1\5\uffff\1\1\1\30\2\uffff\1\1\4\uffff\1\1\1\uffff\1\26\2\uffff\1\1\1\20\1\27\1\1\1\16\5\uffff\1\1\1\13\2\uffff\2\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1\5\uffff\1\15\10\uffff\1\11\1\23\17\uffff\1\31\2\1\1\uffff\1\32\6\uffff\2\1\3\uffff\1\1\1\6\1\1\5\uffff\1\1\1\uffff\1\1\4\uffff\1\1\10\uffff\1\1\3\uffff\1\1\1\17\1\uffff\1\10\1\uffff\1\22\7\uffff\1\14\12\uffff\1\12\6\uffff\1\1\4\uffff\1\25\4\uffff\1\24\1\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final char[] dfa_120 = DFA.unpackEncodedStringToUnsignedChars(dfa_120s);
    static final char[] dfa_121 = DFA.unpackEncodedStringToUnsignedChars(dfa_121s);
    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final short[][] dfa_124 = unpackEncodedStringArray(dfa_124s);

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = dfa_112;
            this.eof = dfa_119;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_124;
        }
        public String getDescription() {
            return "()+ loopback of 5497:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= Inputs otherlv_6= Colon ( (lv_inputs_7_0= ruleInput ) )+ )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Outputs otherlv_9= Colon ( (lv_outputs_10_0= ruleOutput ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_11= Secrets otherlv_12= Colon ( (lv_secrets_13_0= ruleSecret ) )+ )? this_END_14= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA93_0 = input.LA(1);

                         
                        int index93_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA93_0==EOF||LA93_0==Pull_request_target||LA93_0==Workflow_dispatch||LA93_0==Workflow_call||(LA93_0>=Pull_request && LA93_0<=Workflow_run)||LA93_0==Concurrency||LA93_0==Permissions||LA93_0==Defaults||(LA93_0>=RunName && LA93_0<=Schedule)||LA93_0==Jobs||LA93_0==Name||LA93_0==Push||LA93_0==Env||LA93_0==On||LA93_0==LeftSquareBracket) ) {s = 1;}

                        else if ( (LA93_0==RULE_BEGIN) ) {s = 2;}

                        else if ( LA93_0 == Outputs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 1) ) {s = 3;}

                        else if ( LA93_0 == Secrets && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 4;}

                        else if ( LA93_0 == RULE_END && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 2) ) {s = 5;}

                         
                        input.seek(index93_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA93_2 = input.LA(1);

                         
                        int index93_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA93_2 == Inputs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 6;}

                        else if ( LA93_2 == EOF && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 7;}

                        else if ( LA93_2 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 8;}

                        else if ( LA93_2 == RunName && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 9;}

                        else if ( LA93_2 == On && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 10;}

                        else if ( LA93_2 == Permissions && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 11;}

                        else if ( LA93_2 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 12;}

                        else if ( LA93_2 == Defaults && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 13;}

                        else if ( LA93_2 == Concurrency && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 14;}

                        else if ( LA93_2 == Jobs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 15;}

                        else if ( LA93_2 == Pull_request && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 16;}

                        else if ( LA93_2 == Pull_request_target && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 17;}

                        else if ( LA93_2 == Push && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 18;}

                        else if ( LA93_2 == Schedule && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 19;}

                        else if ( LA93_2 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 20;}

                        else if ( LA93_2 == LeftSquareBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 21;}

                        else if ( LA93_2 == Workflow_call && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 22;}

                        else if ( LA93_2 == Workflow_run && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 23;}

                        else if ( LA93_2 == Workflow_dispatch && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 24;}

                        else if ( LA93_2 == Outputs && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 25;}

                        else if ( LA93_2 == Secrets && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 26;}

                        else if ( LA93_2 == RULE_END && getUnorderedGroupHelper().canSelect(grammarAccess.getOptionedWorkflowCallTriggerAccess().getUnorderedGroup_3(), 0) ) {s = 27;}

                        else if ( ((LA93_2>=Pull_request_review_comment && LA93_2<=Branch_protection_rule)||LA93_2==Pull_request_review||LA93_2==Repository_dispatch||LA93_2==Deployment_status||LA93_2==Registry_package||LA93_2==Project_column||LA93_2==Project_card||LA93_2==Check_suite||LA93_2==Merge_group||(LA93_2>=Deployment && LA93_2<=Discussion)||LA93_2==Page_build||LA93_2==Check_run||LA93_2==Milestone||(LA93_2>=Project && LA93_2<=Release)||(LA93_2>=Create && LA93_2<=Delete)||LA93_2==Gollum||LA93_2==Issues||LA93_2==Public||LA93_2==Status||LA93_2==Label||LA93_2==Watch||LA93_2==Fork||LA93_2==HyphenMinus) ) {s = 1;}

                         
                        input.seek(index93_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_125s = "\1\1\1\uffff\1\1\6\uffff\1\1\4\uffff\1\1";
    static final String dfa_126s = "\1\11\1\uffff\1\4\1\6\1\uffff\1\6\3\u008f\1\11\1\u00a2\1\u008f\1\u00ad\1\u008f\1\11";
    static final String dfa_127s = "\1\u00ad\1\uffff\1\u00af\1\u00b0\1\uffff\4\u00b0\2\u00ad\1\u00b0\1\u00ad\1\u00b0\1\u00ad";
    static final String dfa_128s = "\1\uffff\1\2\2\uffff\1\1\12\uffff";
    static final String dfa_129s = "\17\uffff}>";
    static final String[] dfa_130s = {
            "\1\1\7\uffff\1\1\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\6\uffff\1\1\23\uffff\1\1\7\uffff\1\4\2\1\10\uffff\1\4\5\uffff\1\4\1\1\3\uffff\1\1\50\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\4\4\uffff\1\1\12\uffff\1\1\13\uffff\1\3\4\uffff\1\2\1\1",
            "",
            "\2\1\2\uffff\3\1\5\uffff\2\1\2\uffff\1\1\4\uffff\1\1\1\uffff\1\1\2\uffff\5\1\5\uffff\2\1\2\uffff\2\1\1\uffff\1\1\3\uffff\1\1\3\uffff\1\1\5\uffff\1\1\10\uffff\2\1\17\uffff\3\1\1\uffff\1\1\6\uffff\2\1\3\uffff\3\1\5\uffff\1\1\1\uffff\1\1\4\uffff\1\1\10\uffff\1\1\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\7\uffff\1\1\12\uffff\1\1\6\uffff\1\5\4\uffff\1\1\4\uffff\2\1\1\uffff\1\4",
            "\2\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\24\uffff\1\1\6\uffff\1\1\6\uffff\2\1\12\uffff\1\1\6\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\13\uffff\1\1\2\uffff\1\1\6\uffff\1\1\2\uffff\1\1\40\uffff\1\1\40\uffff\1\6",
            "",
            "\2\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\1\1\uffff\1\1\24\uffff\1\1\6\uffff\1\1\6\uffff\2\1\12\uffff\1\1\6\uffff\1\1\3\uffff\1\1\1\uffff\1\1\3\uffff\1\1\13\uffff\1\1\2\uffff\1\1\6\uffff\1\1\2\uffff\1\1\40\uffff\1\1\40\uffff\1\7",
            "\1\1\21\uffff\1\10\6\uffff\1\11\7\uffff\1\1",
            "\1\1\36\uffff\1\12\1\uffff\1\1",
            "\1\1\40\uffff\1\13",
            "\1\1\7\uffff\1\1\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\6\uffff\1\1\23\uffff\1\1\10\uffff\2\1\74\uffff\1\1\1\uffff\1\1\1\uffff\1\1\7\uffff\1\1\12\uffff\1\1\13\uffff\1\1\4\uffff\1\1\1\4",
            "\1\15\12\uffff\1\14",
            "\1\1\21\uffff\1\10\6\uffff\1\11\7\uffff\1\1",
            "\1\16",
            "\1\1\40\uffff\1\7",
            "\1\1\7\uffff\1\1\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\6\uffff\1\1\23\uffff\1\1\10\uffff\2\1\74\uffff\1\1\1\uffff\1\1\1\uffff\1\1\7\uffff\1\1\12\uffff\1\1\13\uffff\1\1\4\uffff\1\1\1\4"
    };
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final char[] dfa_126 = DFA.unpackEncodedStringToUnsignedChars(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[][] dfa_130 = unpackEncodedStringArray(dfa_130s);

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = dfa_85;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "()+ loopback of 5516:10: ( (lv_inputs_7_0= ruleInput ) )+";
        }
    }
    static final String dfa_131s = "\1\11\1\uffff\6\0\5\uffff";
    static final String dfa_132s = "\1\u00ad\1\uffff\6\0\5\uffff";
    static final String dfa_133s = "\1\uffff\1\6\6\uffff\1\1\1\5\1\2\1\3\1\4";
    static final String dfa_134s = "\2\uffff\1\0\1\4\1\5\1\3\1\1\1\2\5\uffff}>";
    static final String[] dfa_135s = {
            "\1\1\7\uffff\1\1\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\6\uffff\1\1\23\uffff\1\1\7\uffff\1\5\2\1\10\uffff\1\4\5\uffff\1\7\1\1\3\uffff\1\1\50\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\6\4\uffff\1\1\12\uffff\1\1\13\uffff\1\3\4\uffff\1\2\1\1",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_131 = DFA.unpackEncodedStringToUnsignedChars(dfa_131s);
    static final char[] dfa_132 = DFA.unpackEncodedStringToUnsignedChars(dfa_132s);
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final short[] dfa_134 = DFA.unpackEncodedString(dfa_134s);
    static final short[][] dfa_135 = unpackEncodedStringArray(dfa_135s);

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_8;
            this.eof = dfa_79;
            this.min = dfa_131;
            this.max = dfa_132;
            this.accept = dfa_133;
            this.special = dfa_134;
            this.transition = dfa_135;
        }
        public String getDescription() {
            return "()+ loopback of 5743:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( (lv_id_2_0= RULE_ID ) ) otherlv_3= Colon this_BEGIN_4= RULE_BEGIN (otherlv_5= Description otherlv_6= Colon ( (lv_description_7_0= ruleExpression ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Default otherlv_9= Colon ( (lv_default_10_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= Required otherlv_12= Colon ( (lv_isRequired_13_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Type otherlv_15= Colon ( (lv_type_16_0= ruleTYPE ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (otherlv_17= Options otherlv_18= Colon ( (lv_options_19_0= RULE_STRING ) ) ) | (otherlv_20= LeftSquareBracket ( (lv_options_21_0= RULE_STRING ) ) (otherlv_22= Comma ( (lv_options_23_0= RULE_STRING ) ) )* otherlv_24= RightSquareBracket ) | (this_BEGIN_25= RULE_BEGIN (otherlv_26= HyphenMinus ( (lv_options_27_0= RULE_STRING ) ) this_NEWLINE_28= RULE_NEWLINE )+ this_END_29= RULE_END ) ) this_END_30= RULE_END this_END_31= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_2 = input.LA(1);

                         
                        int index100_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred184_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 0) ) {s = 8;}

                        else if ( synpred192_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {s = 9;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index100_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA100_6 = input.LA(1);

                         
                        int index100_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred187_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 3) ) {s = 12;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index100_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA100_7 = input.LA(1);

                         
                        int index100_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred192_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {s = 9;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index100_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA100_5 = input.LA(1);

                         
                        int index100_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred186_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 2) ) {s = 11;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index100_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA100_3 = input.LA(1);

                         
                        int index100_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred192_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 4) ) {s = 9;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index100_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA100_4 = input.LA(1);

                         
                        int index100_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred185_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getInputAccess().getUnorderedGroup(), 1) ) {s = 10;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getInputAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index100_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_136s = "\43\uffff";
    static final String dfa_137s = "\1\1\2\uffff\1\12\37\uffff";
    static final String dfa_138s = "\1\17\1\uffff\1\122\1\17\5\uffff\1\0\31\uffff";
    static final String dfa_139s = "\1\u00ad\1\uffff\1\u00af\1\u00ad\5\uffff\1\0\31\uffff";
    static final String dfa_140s = "\1\uffff\1\4\2\uffff\1\2\1\3\3\1\1\uffff\31\3";
    static final String dfa_141s = "\1\0\1\uffff\1\2\1\3\5\uffff\1\1\31\uffff}>";
    static final String[] dfa_142s = {
            "\1\1\10\uffff\1\1\3\uffff\1\5\5\uffff\1\1\4\uffff\1\1\1\uffff\1\1\12\uffff\1\1\1\4\7\uffff\1\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\17\uffff\2\1\33\uffff\1\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\11\uffff\2\1\13\uffff\1\1\4\uffff\1\2\1\3",
            "",
            "\1\7\31\uffff\1\6\65\uffff\1\1\11\uffff\1\10\2\uffff\1\1",
            "\1\35\10\uffff\1\36\3\uffff\1\5\5\uffff\1\21\4\uffff\1\30\1\uffff\1\16\12\uffff\1\33\1\42\7\uffff\1\20\10\uffff\1\14\1\uffff\1\34\1\uffff\1\32\17\uffff\1\27\1\41\33\uffff\1\24\4\uffff\1\31\7\uffff\1\22\1\uffff\1\13\5\uffff\1\37\1\uffff\1\40\1\uffff\1\17\11\uffff\1\26\1\15\13\uffff\1\25\4\uffff\1\23\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = dfa_136;
            this.eof = dfa_137;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "()+ loopback of 6766:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= FailFast otherlv_15= Colon ( (lv_failFast_16_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_17= MaxParalell otherlv_18= Colon ( (lv_maxParallel_19_0= ruleExpression ) ) )? this_END_20= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_0 = input.LA(1);

                         
                        int index113_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA113_0==EOF||LA113_0==ContinueOnError||LA113_0==TimeoutMinutes||LA113_0==Concurrency||LA113_0==Environment||LA113_0==Permissions||LA113_0==Container||LA113_0==Defaults||LA113_0==RunName||LA113_0==Services||LA113_0==Strategy||(LA113_0>=RunsOn && LA113_0<=Secrets)||LA113_0==Needs||LA113_0==Steps||LA113_0==Jobs||LA113_0==Name||LA113_0==Uses||LA113_0==With||LA113_0==Env||(LA113_0>=If && LA113_0<=On)||LA113_0==LeftSquareBracket) ) {s = 1;}

                        else if ( (LA113_0==RULE_BEGIN) ) {s = 2;}

                        else if ( (LA113_0==RULE_END) ) {s = 3;}

                        else if ( LA113_0 == FailFast && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 1) ) {s = 4;}

                        else if ( LA113_0 == MaxParalell && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 5;}

                         
                        input.seek(index113_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA113_9 = input.LA(1);

                         
                        int index113_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred212_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 34;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getStrategyAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index113_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA113_2 = input.LA(1);

                         
                        int index113_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA113_2 == Matrix && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {s = 6;}

                        else if ( LA113_2 == Exludes && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {s = 7;}

                        else if ( LA113_2 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 0) ) {s = 8;}

                        else if ( (LA113_2==HyphenMinus||LA113_2==RULE_ID) ) {s = 1;}

                         
                        input.seek(index113_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA113_3 = input.LA(1);

                         
                        int index113_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA113_3==RULE_END) ) {s = 9;}

                        else if ( LA113_3 == EOF && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 10;}

                        else if ( LA113_3 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 11;}

                        else if ( LA113_3 == RunName && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 12;}

                        else if ( LA113_3 == On && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 13;}

                        else if ( LA113_3 == Permissions && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 14;}

                        else if ( LA113_3 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 15;}

                        else if ( LA113_3 == Defaults && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 16;}

                        else if ( LA113_3 == Concurrency && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 17;}

                        else if ( LA113_3 == Jobs && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 18;}

                        else if ( LA113_3 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 19;}

                        else if ( LA113_3 == Needs && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 20;}

                        else if ( LA113_3 == LeftSquareBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 21;}

                        else if ( LA113_3 == If && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 22;}

                        else if ( LA113_3 == RunsOn && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 23;}

                        else if ( LA113_3 == Environment && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 24;}

                        else if ( LA113_3 == Steps && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 25;}

                        else if ( LA113_3 == Strategy && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 26;}

                        else if ( LA113_3 == Container && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 27;}

                        else if ( LA113_3 == Services && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 28;}

                        else if ( LA113_3 == ContinueOnError && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 29;}

                        else if ( LA113_3 == TimeoutMinutes && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 30;}

                        else if ( LA113_3 == Uses && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 31;}

                        else if ( LA113_3 == With && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 32;}

                        else if ( LA113_3 == Secrets && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 33;}

                        else if ( LA113_3 == FailFast && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 34;}

                        else if ( LA113_3 == MaxParalell && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup(), 2) ) {s = 5;}

                         
                        input.seek(index113_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_143s = "\14\uffff";
    static final String dfa_144s = "\1\1\6\uffff\1\1\4\uffff";
    static final String dfa_145s = "\1\17\1\uffff\1\122\2\uffff\1\u00a4\1\u008f\1\17\4\uffff";
    static final String dfa_146s = "\1\u00ad\1\uffff\1\u00af\2\uffff\1\u00a4\1\u00b0\1\u00ad\4\uffff";
    static final String dfa_147s = "\1\uffff\1\4\1\uffff\1\1\1\2\3\uffff\4\3";
    static final String dfa_148s = "\1\2\5\uffff\1\1\1\0\4\uffff}>";
    static final String[] dfa_149s = {
            "\1\1\10\uffff\1\1\3\uffff\1\1\5\uffff\1\1\4\uffff\1\1\1\uffff\1\1\12\uffff\2\1\7\uffff\1\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\7\uffff\1\4\7\uffff\2\1\20\uffff\1\3\12\uffff\1\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\11\uffff\2\1\13\uffff\1\1\4\uffff\1\2\1\1",
            "",
            "\1\1\31\uffff\1\1\65\uffff\1\1\11\uffff\1\1\2\uffff\1\5",
            "",
            "",
            "\1\6",
            "\1\10\27\uffff\1\12\4\uffff\1\7\3\uffff\1\11",
            "\1\1\10\uffff\1\1\11\uffff\1\1\4\uffff\1\1\1\uffff\1\1\12\uffff\1\1\10\uffff\1\1\10\uffff\1\1\1\uffff\1\1\1\uffff\1\1\17\uffff\2\1\33\uffff\1\1\4\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\1\11\uffff\2\1\6\uffff\1\13\4\uffff\1\1\4\uffff\2\1",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = dfa_143;
            this.eof = dfa_144;
            this.min = dfa_145;
            this.max = dfa_146;
            this.accept = dfa_147;
            this.special = dfa_148;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "()+ loopback of 6782:11: ( ({...}? => ( ({...}? => (otherlv_3= Matrix otherlv_4= Colon this_BEGIN_5= RULE_BEGIN (otherlv_6= Includes otherlv_7= Colon ( (lv_includes_8_0= ruleMatrixCombination ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Exludes otherlv_10= Colon ( (lv_excludes_11_0= ruleMatrixCombination ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( (lv_axes_12_0= ruleMatrixAxis ) )+ this_END_13= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_7 = input.LA(1);

                         
                        int index111_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA111_7==EOF||LA111_7==ContinueOnError||LA111_7==TimeoutMinutes||LA111_7==Concurrency||LA111_7==Environment||LA111_7==Permissions||LA111_7==Container||LA111_7==Defaults||LA111_7==RunName||LA111_7==Services||LA111_7==Strategy||(LA111_7>=RunsOn && LA111_7<=Secrets)||LA111_7==Needs||LA111_7==Steps||LA111_7==Jobs||LA111_7==Name||LA111_7==Uses||LA111_7==With||LA111_7==Env||(LA111_7>=If && LA111_7<=On)||LA111_7==LeftSquareBracket||(LA111_7>=RULE_BEGIN && LA111_7<=RULE_END)) ) {s = 1;}

                        else if ( LA111_7 == HyphenMinus && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {s = 11;}

                         
                        input.seek(index111_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA111_6 = input.LA(1);

                         
                        int index111_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA111_6==RULE_BEGIN) ) {s = 7;}

                        else if ( LA111_6 == DollarSignLeftCurlyBracketLeftCurlyBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {s = 8;}

                        else if ( LA111_6 == RULE_STRING && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {s = 9;}

                        else if ( LA111_6 == LeftSquareBracket && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 2) ) {s = 10;}

                         
                        input.seek(index111_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA111_0 = input.LA(1);

                         
                        int index111_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA111_0==EOF||LA111_0==ContinueOnError||LA111_0==TimeoutMinutes||LA111_0==MaxParalell||LA111_0==Concurrency||LA111_0==Environment||LA111_0==Permissions||(LA111_0>=Container && LA111_0<=FailFast)||LA111_0==Defaults||LA111_0==RunName||LA111_0==Services||LA111_0==Strategy||(LA111_0>=RunsOn && LA111_0<=Secrets)||LA111_0==Needs||LA111_0==Steps||LA111_0==Jobs||LA111_0==Name||LA111_0==Uses||LA111_0==With||LA111_0==Env||(LA111_0>=If && LA111_0<=On)||LA111_0==LeftSquareBracket||LA111_0==RULE_END) ) {s = 1;}

                        else if ( (LA111_0==RULE_BEGIN) ) {s = 2;}

                        else if ( LA111_0 == Matrix && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 0) ) {s = 3;}

                        else if ( LA111_0 == Exludes && getUnorderedGroupHelper().canSelect(grammarAccess.getStrategyAccess().getUnorderedGroup_0_1(), 1) ) {s = 4;}

                         
                        input.seek(index111_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_150s = "\41\uffff";
    static final String dfa_151s = "\1\1\40\uffff";
    static final String dfa_152s = "\1\17\5\uffff\1\0\3\uffff\1\0\1\uffff\1\0\11\uffff\1\0\12\uffff";
    static final String dfa_153s = "\1\u00ad\5\uffff\1\0\3\uffff\1\0\1\uffff\1\0\11\uffff\1\0\12\uffff";
    static final String dfa_154s = "\1\uffff\1\7\30\uffff\1\3\1\4\1\5\2\6\1\2\1\1";
    static final String dfa_155s = "\1\0\5\uffff\1\1\3\uffff\1\2\1\uffff\1\3\11\uffff\1\4\12\uffff}>";
    static final String[] dfa_156s = {
            "\1\1\10\uffff\1\1\11\uffff\1\1\1\35\3\uffff\1\1\1\uffff\1\1\12\uffff\1\1\10\uffff\1\1\5\uffff\1\36\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\13\uffff\1\34\3\uffff\2\1\1\uffff\1\33\31\uffff\1\1\2\uffff\1\32\1\uffff\1\1\7\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\uffff\1\1\1\uffff\1\6\11\uffff\2\1\13\uffff\1\14\4\uffff\1\12\1\26",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_150 = DFA.unpackEncodedString(dfa_150s);
    static final short[] dfa_151 = DFA.unpackEncodedString(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final char[] dfa_153 = DFA.unpackEncodedStringToUnsignedChars(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[] dfa_155 = DFA.unpackEncodedString(dfa_155s);
    static final short[][] dfa_156 = unpackEncodedStringArray(dfa_156s);

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = dfa_150;
            this.eof = dfa_151;
            this.min = dfa_152;
            this.max = dfa_153;
            this.accept = dfa_154;
            this.special = dfa_155;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "()+ loopback of 7272:5: ( ({...}? => ( ({...}? => (this_BEGIN_1= RULE_BEGIN (otherlv_2= Image otherlv_3= Colon ( (lv_image_4_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_5= Env otherlv_6= Colon ( (lv_environmentVariables_7_0= ruleVariableAssignment ) )+ ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_8= Ports otherlv_9= Colon ( (lv_ports_10_0= ruleExpression ) ) ) | (otherlv_11= LeftSquareBracket ( (lv_ports_12_0= ruleExpression ) ) (otherlv_13= Comma ( (lv_ports_14_0= ruleExpression ) ) )* otherlv_15= RightSquareBracket ) | (this_BEGIN_16= RULE_BEGIN (otherlv_17= HyphenMinus ( (lv_ports_18_0= ruleExpression ) ) this_NEWLINE_19= RULE_NEWLINE )+ this_END_20= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_21= Volumes otherlv_22= Colon ( (lv_volumes_23_0= ruleExpression ) ) ) | (otherlv_24= LeftSquareBracket ( (lv_volumes_25_0= ruleExpression ) ) (otherlv_26= Comma ( (lv_volumes_27_0= ruleExpression ) ) )* otherlv_28= RightSquareBracket ) | (this_BEGIN_29= RULE_BEGIN (otherlv_30= HyphenMinus ( (lv_volumes_31_0= ruleExpression ) ) this_NEWLINE_32= RULE_NEWLINE )+ this_END_33= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Options otherlv_35= Colon ( (lv_options_36_0= ruleExpression ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_38= Credentials otherlv_39= Colon this_BEGIN_40= RULE_BEGIN (otherlv_41= Username otherlv_42= Colon ( (lv_username_43_0= ruleExpression ) ) ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_44= Password otherlv_45= Colon ( (lv_password_46_0= ruleExpression ) ) ) this_END_47= RULE_END ) ) ) ) )+ {...}?) ) )? this_END_48= RULE_END ) ) ) ) )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA126_0 = input.LA(1);

                         
                        int index126_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA126_0==EOF||LA126_0==ContinueOnError||LA126_0==TimeoutMinutes||LA126_0==Concurrency||LA126_0==Environment||LA126_0==Permissions||LA126_0==Container||LA126_0==Defaults||LA126_0==RunName||LA126_0==Services||LA126_0==Strategy||(LA126_0>=RunsOn && LA126_0<=Secrets)||LA126_0==Needs||LA126_0==Steps||LA126_0==Jobs||LA126_0==Name||LA126_0==Uses||LA126_0==With||(LA126_0>=If && LA126_0<=On)) ) {s = 1;}

                        else if ( (LA126_0==Env) ) {s = 6;}

                        else if ( (LA126_0==RULE_BEGIN) ) {s = 10;}

                        else if ( (LA126_0==LeftSquareBracket) ) {s = 12;}

                        else if ( (LA126_0==RULE_END) ) {s = 22;}

                        else if ( LA126_0 == Ports && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 2) ) {s = 26;}

                        else if ( LA126_0 == Volumes && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 3) ) {s = 27;}

                        else if ( LA126_0 == Options && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 4) ) {s = 28;}

                        else if ( LA126_0 == Credentials && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 5) ) {s = 29;}

                        else if ( LA126_0 == Password && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 5) ) {s = 30;}

                         
                        input.seek(index126_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA126_6 = input.LA(1);

                         
                        int index126_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred219_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 1) ) {s = 31;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index126_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA126_10 = input.LA(1);

                         
                        int index126_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred217_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 0) ) {s = 32;}

                        else if ( synpred224_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 2) ) {s = 26;}

                        else if ( synpred229_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 3) ) {s = 27;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index126_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA126_12 = input.LA(1);

                         
                        int index126_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred224_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 2) ) {s = 26;}

                        else if ( synpred229_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 3) ) {s = 27;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index126_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA126_22 = input.LA(1);

                         
                        int index126_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( synpred234_InternalGitHubActionsParser() && getUnorderedGroupHelper().canSelect(grammarAccess.getContainerAccess().getUnorderedGroup(), 5) ) {s = 30;}

                        else if ( getUnorderedGroupHelper().canLeave(grammarAccess.getContainerAccess().getUnorderedGroup()) ) {s = 1;}

                         
                        input.seek(index126_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 126, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_157s = "\1\4\5\u00a4\1\uffff\2\4\2\uffff\1\4\1\uffff";
    static final String[] dfa_158s = {
            "\2\6\2\uffff\1\6\1\5\1\6\5\uffff\1\6\1\1\2\uffff\1\6\4\uffff\1\6\1\uffff\1\2\2\uffff\1\6\1\4\1\11\1\6\6\uffff\1\6\3\uffff\2\6\1\uffff\1\6\3\uffff\1\6\3\uffff\1\6\17\uffff\1\11\20\uffff\2\6\10\uffff\2\6\3\uffff\1\6\1\uffff\1\6\5\uffff\1\6\1\uffff\1\6\4\uffff\1\6\10\uffff\1\6\3\uffff\1\6\4\uffff\1\3\36\uffff\1\7\4\uffff\1\10",
            "\1\11",
            "\1\11",
            "\1\11",
            "\1\11",
            "\1\11",
            "",
            "\2\12\2\11\3\12\1\uffff\1\11\1\uffff\1\11\1\uffff\2\12\1\uffff\1\11\1\12\1\11\3\uffff\1\12\1\uffff\1\12\2\uffff\2\12\1\uffff\1\12\6\uffff\1\12\1\uffff\1\11\1\uffff\2\12\1\uffff\1\12\1\uffff\1\11\1\uffff\1\12\3\uffff\1\12\2\11\12\uffff\1\11\6\uffff\1\11\3\uffff\1\11\1\uffff\1\11\3\uffff\1\11\2\uffff\2\12\7\uffff\1\11\2\12\1\11\2\uffff\1\12\1\uffff\1\12\1\uffff\1\11\2\uffff\1\11\1\12\1\uffff\1\12\4\uffff\1\12\10\uffff\1\12\3\uffff\1\12\4\uffff\1\12\6\uffff\1\11\40\uffff\1\11",
            "\2\11\2\uffff\1\11\1\uffff\1\11\5\uffff\1\11\3\uffff\1\11\4\uffff\1\11\4\uffff\1\11\2\uffff\1\11\6\uffff\1\11\3\uffff\2\11\1\uffff\1\11\3\uffff\1\11\3\uffff\1\11\40\uffff\2\11\10\uffff\2\11\3\uffff\1\11\1\uffff\1\11\5\uffff\1\11\1\uffff\1\11\4\uffff\1\11\10\uffff\1\11\3\uffff\1\11\36\uffff\1\13",
            "",
            "",
            "\2\14\2\11\3\14\1\uffff\1\11\1\uffff\1\11\1\uffff\2\14\1\uffff\1\11\1\14\1\11\3\uffff\1\14\1\uffff\1\14\2\uffff\2\14\1\uffff\1\14\6\uffff\1\14\1\uffff\1\11\1\uffff\2\14\1\uffff\1\14\1\uffff\1\11\1\uffff\1\14\3\uffff\1\14\2\11\12\uffff\1\11\6\uffff\1\11\3\uffff\1\11\1\uffff\1\11\3\uffff\1\11\2\uffff\2\14\7\uffff\1\11\2\14\1\11\2\uffff\1\14\1\uffff\1\14\1\uffff\1\11\2\uffff\1\11\1\14\1\uffff\1\14\4\uffff\1\14\10\uffff\1\14\3\uffff\1\14\4\uffff\1\14\6\uffff\1\11\40\uffff\1\11",
            ""
    };
    static final char[] dfa_157 = DFA.unpackEncodedStringToUnsignedChars(dfa_157s);
    static final short[][] dfa_158 = unpackEncodedStringArray(dfa_158s);

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = dfa_8;
            this.eof = dfa_9;
            this.min = dfa_157;
            this.max = dfa_11;
            this.accept = dfa_12;
            this.special = dfa_13;
            this.transition = dfa_158;
        }
        public String getDescription() {
            return "185:8: ( ( (lv_triggers_9_0= ruleSimpleTrigger ) ) | (otherlv_10= LeftSquareBracket ( (lv_triggers_11_0= ruleSimpleTrigger ) ) (otherlv_12= Comma ( (lv_triggers_13_0= ruleSimpleTrigger ) ) )* otherlv_14= RightSquareBracket ) | (this_BEGIN_15= RULE_BEGIN (otherlv_16= HyphenMinus ( (lv_triggers_17_0= ruleSimpleTrigger ) ) this_NEWLINE_18= RULE_NEWLINE )+ this_END_19= RULE_END ) | ( (lv_triggers_20_0= ruleOptionedTrigger ) )+ )";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000008000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x2000020400000002L,0x0000000000000040L,0x0000000008010050L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0088B103CA130730L,0x8042828C03000080L,0x0000108000000108L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0088B102CA130730L,0x8042828C03000000L,0x0000000000000108L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010200000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200400000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x2088B307CA130732L,0x8042828C030000C0L,0x0000108008010158L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x2000020400000002L,0x0000000000000040L,0x0000100008010050L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x2010028401008000L,0x108000000C000500L,0x0000308004015000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x2010028401008002L,0x108000000C000540L,0x000030800C015050L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x2010028401008002L,0x1080000004000500L,0x0000308004010040L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x2010028401008002L,0x1080000004000500L,0x0000308004010000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x2010028401008000L,0x1090040004000500L,0x0001308004018000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001100000008000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0020000010000000L,0x0000000000000000L,0x0000300000000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000800000000L,0x0400000020400008L,0x0000308000010000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x2010028401008002L,0x008000000C000500L,0x0000308004015040L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x2010028401008002L,0x008000000C000500L,0x0000308004015000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x2010028401008000L,0x009004000C000500L,0x000130800401D000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L,0x0000100000000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000002L,0x0010040000000000L,0x0000108000000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000001048000L,0x0800000000000000L,0x0000100006055040L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000001048002L,0x0800000000000000L,0x0000000006050040L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000001048002L,0x0800000000000000L,0x0000100006050040L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000001048002L,0x0800000000000000L,0x0000100006015040L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000400001048002L,0x0800000000000000L,0x0000100006015042L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000300000000000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000002000L,0x0010000000000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000002000L,0x0010000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x03020400002850C0L,0x0000481200228810L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0400000000400000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0400000020400000L,0x0200000000000000L,0x0000308000000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0400000020400002L,0x2200000000000000L,0x0000308000000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0400000020400002L,0x0200000000000000L,0x0000308000000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000080020000000L,0x0200000000000000L,0x0000308000000400L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0400080020400002L,0x0200000000000000L,0x0000308000000400L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000080020000002L,0x0200000000000000L,0x0000308000000400L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000008800000L,0x0000300000000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000002L,0x0000010008800000L,0x0000300000000000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000000410020L,0x0000108000000800L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000000002L,0x0000000008C10020L,0x0000308000000800L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000000002L,0x4000000008800000L,0x0000300000000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000300000000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000002L,0x0000000008800000L,0x0000300000000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000000000410020L,0x0000308000000800L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000002000000002L,0x0000000000410020L,0x0000108000000800L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000002L,0x0000000000410020L,0x0000108000000800L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000008000000000L,0x0004200100004000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000002000000002L,0x4000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000002000000002L,0x0000000000000020L,0x0000300000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L,0x0000300000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x1000005004800800L,0x0100020080002205L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000281L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000040000L,0x0800000000000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000040000L,0x0800000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000080000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000100000040000L,0x0000100000000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0020000010000002L,0x0000100000040002L,0x0000300000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0020000010000002L,0x0000100000040000L,0x0000300000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000100000040000L,0x0000300000000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0020000010000002L,0x0000000000000000L,0x0000300000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001108000008000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000800000002L,0x0400000020400008L,0x0000308000010000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000008L,0x0000200000000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000008000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0xC845000000000000L,0x1089116058080400L,0x00018E00C0032030L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000900000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000006001400000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0088B103CA130732L,0x8042828C03000080L,0x0000108000000108L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x2010028401008002L,0x108000000C000500L,0x0000308004015000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0010040000000000L,0x0001108000008000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000108000000000L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0400000000400002L,0x0000000000000000L,0x0000108000000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x0000000000000002L,0x0000100000040002L,0x0000100000000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000002L,0x0000100000040000L,0x0000100000000000L});

}
