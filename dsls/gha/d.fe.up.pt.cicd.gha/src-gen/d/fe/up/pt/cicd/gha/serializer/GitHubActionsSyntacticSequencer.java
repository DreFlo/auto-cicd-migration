/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.gha.serializer;

import com.google.inject.Inject;
import d.fe.up.pt.cicd.gha.services.GitHubActionsGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class GitHubActionsSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GitHubActionsGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Command___ENDTerminalRuleCall_5_5_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q;
	protected AbstractElementAlias match_Container_ENDTerminalRuleCall_1_5_1_a;
	protected AbstractElementAlias match_Container_ENDTerminalRuleCall_1_5_1_p;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_1_4_ENDTerminalRuleCall_1_5_1_a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_2_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_2_2_0__q;
	protected AbstractElementAlias match_Container___ENDTerminalRuleCall_1_3_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_3_2_0__q;
	protected AbstractElementAlias match_Input___ENDTerminalRuleCall_4_0_2_3_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_0_2_0_BEGINTerminalRuleCall_4_0_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q;
	protected AbstractElementAlias match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q;
	protected AbstractElementAlias match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_BEGINTerminalRuleCall_3_0_2_0_0_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_BEGINTerminalRuleCall_3_0_2_1_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_BEGINTerminalRuleCall_3_1_0_0_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_BEGINTerminalRuleCall_3_1_1_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_BEGINTerminalRuleCall_3_2_0_0_0_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_BEGINTerminalRuleCall_3_2_0_1_3__q;
	protected AbstractElementAlias match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q;
	protected AbstractElementAlias match_Package___ENDTerminalRuleCall_5_5___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q;
	protected AbstractElementAlias match_Package___ENDTerminalRuleCall_8_1_1___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a__q;
	protected AbstractElementAlias match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a;
	protected AbstractElementAlias match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__p;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_a;
	protected AbstractElementAlias match_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_p;
	protected AbstractElementAlias match_ReuseWorkflowJob_ScriptJob___ENDTerminalRuleCall_14_1_p_or_ENDTerminalRuleCall_16_1_p__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_ENDTerminalRuleCall_16_1_a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_BEGINTerminalRuleCall_11_3__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_ENDTerminalRuleCall_16_1_a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_BEGINTerminalRuleCall_13_3__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_ENDTerminalRuleCall_16_1_a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_BEGINTerminalRuleCall_14_2_1_1__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_16_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_16_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q;
	protected AbstractElementAlias match_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_16_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q;
	protected AbstractElementAlias match_ScriptJob_ENDTerminalRuleCall_14_1_a;
	protected AbstractElementAlias match_ScriptJob_ENDTerminalRuleCall_14_1_p;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_12_5_ENDTerminalRuleCall_14_1_a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_BEGINTerminalRuleCall_12_3__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_14_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_14_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_14_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q;
	protected AbstractElementAlias match_ScriptJob___ENDTerminalRuleCall_9_5_ENDTerminalRuleCall_14_1_a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_BEGINTerminalRuleCall_9_3__q;
	protected AbstractElementAlias match_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1;
	protected AbstractElementAlias match_Strategy___ENDTerminalRuleCall_0_2_0_2_ENDTerminalRuleCall_0_2_1___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q;
	protected AbstractElementAlias match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a;
	protected AbstractElementAlias match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__p;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q;
	protected AbstractElementAlias match_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q;
	protected AbstractElementAlias match_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GitHubActionsGrammarAccess) access;
		match_Command___ENDTerminalRuleCall_5_5_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCommandAccess().getENDTerminalRuleCall_5_5()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getEnvKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getColonKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getNEWLINETerminalRuleCall_5_2()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getBEGINTerminalRuleCall_5_3()));
		match_Container_ENDTerminalRuleCall_1_5_1_a = new TokenAlias(true, true, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1());
		match_Container_ENDTerminalRuleCall_1_5_1_p = new TokenAlias(true, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1());
		match_Container___ENDTerminalRuleCall_1_1_4_ENDTerminalRuleCall_1_5_1_a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_1_4()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getEnvKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getColonKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_1_2()));
		match_Container___ENDTerminalRuleCall_1_2_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_2_2_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_2_2_2()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_2_2_0()));
		match_Container___ENDTerminalRuleCall_1_3_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_3_2_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_3_2_2()), new TokenAlias(true, true, grammarAccess.getContainerAccess().getENDTerminalRuleCall_1_5_1()), new TokenAlias(false, false, grammarAccess.getContainerAccess().getBEGINTerminalRuleCall_1_3_2_0()));
		match_Input___ENDTerminalRuleCall_4_0_2_3_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_0_2_0_BEGINTerminalRuleCall_4_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_0_2_3()), new TokenAlias(false, false, grammarAccess.getInputAccess().getENDTerminalRuleCall_4_1()), new TokenAlias(false, false, grammarAccess.getInputAccess().getNEWLINETerminalRuleCall_4_0_2_0()), new TokenAlias(false, false, grammarAccess.getInputAccess().getBEGINTerminalRuleCall_4_0_2_1()));
		match_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_requestKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getPull_request_targetKeyword_1_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_0_2_1_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_1_1_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_1_1_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_0_1_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_2_1()));
		match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getNEWLINETerminalRuleCall_3_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getBEGINTerminalRuleCall_3_0_1())), new TokenAlias(false, false, grammarAccess.getOptionedPullRequestTriggerAccess().getENDTerminalRuleCall_3_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_0_2_1_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_1_1_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_1_1_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_0_1_2_3()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_2_1()));
		match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getNEWLINETerminalRuleCall_3_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getBEGINTerminalRuleCall_3_0_1())), new TokenAlias(false, false, grammarAccess.getOptionedPushTriggerAccess().getENDTerminalRuleCall_3_2_1()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_BEGINTerminalRuleCall_3_0_2_0_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_0_2_0_0_5()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getInputsKeyword_3_0_2_0_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_2_0_0_1()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_0_0_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_2_0_0_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_BEGINTerminalRuleCall_3_0_2_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_0_2_1_5()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_0_2_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_0_2_1_1()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_2_1_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_2_1_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_BEGINTerminalRuleCall_3_1_0_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_1_0_0_5()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_0_0_1()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_0_0_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_1_0_0_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_BEGINTerminalRuleCall_3_1_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_1_1_5()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_1_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_1_1_1()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_1_1_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_1_1_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_BEGINTerminalRuleCall_3_2_0_0_0_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_0_0_0_5()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getSecretsKeyword_3_2_0_0_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_0_0_1()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_0_0_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_2_0_0_0_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_BEGINTerminalRuleCall_3_2_0_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_0_1_5()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getOutputsKeyword_3_2_0_1_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getColonKeyword_3_2_0_1_1()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_2_0_1_2()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_2_0_1_3()));
		match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q = new AlternativeAlias(false, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getNEWLINETerminalRuleCall_3_0_0()), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getBEGINTerminalRuleCall_3_0_1())), new TokenAlias(false, false, grammarAccess.getOptionedWorkflowCallTriggerAccess().getENDTerminalRuleCall_3_2_1()));
		match_Package___ENDTerminalRuleCall_5_5___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getENDTerminalRuleCall_5_5()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3())), new TokenAlias(false, false, grammarAccess.getPackageAccess().getEnvKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_5_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_5_3()));
		match_Package___ENDTerminalRuleCall_8_1_1___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getENDTerminalRuleCall_8_1_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3())));
		match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3()));
		match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getPackageAccess().getWithKeyword_8_0_0()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getColonKeyword_8_0_1()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getNEWLINETerminalRuleCall_8_0_2()), new TokenAlias(false, false, grammarAccess.getPackageAccess().getBEGINTerminalRuleCall_8_0_3()));
		match_Primary_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_Primary_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
		match_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_a = new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1());
		match_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_p = new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1());
		match_ReuseWorkflowJob_ScriptJob___ENDTerminalRuleCall_14_1_p_or_ENDTerminalRuleCall_16_1_p__q = new AlternativeAlias(false, true, new TokenAlias(true, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_ENDTerminalRuleCall_16_1_a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_BEGINTerminalRuleCall_11_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_11_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getServicesKeyword_11_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_11_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_11_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_11_3()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_ENDTerminalRuleCall_16_1_a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_BEGINTerminalRuleCall_13_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_13_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getWithKeyword_13_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_13_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_13_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_13_3()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_ENDTerminalRuleCall_16_1_a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_BEGINTerminalRuleCall_14_2_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_14_2_1_3()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getSecretsKeyword_14_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_14_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_14_2_1_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_14_2_1_1()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_16_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_1_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getPermissionsKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_1_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_1_3()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_16_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_2_2_3()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_2_2_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_2_2_1()));
		match_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_16_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_7_5()), new TokenAlias(true, true, grammarAccess.getReuseWorkflowJobAccess().getENDTerminalRuleCall_16_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getEnvKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getColonKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getNEWLINETerminalRuleCall_7_2()), new TokenAlias(false, false, grammarAccess.getReuseWorkflowJobAccess().getBEGINTerminalRuleCall_7_3()));
		match_ScriptJob_ENDTerminalRuleCall_14_1_a = new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1());
		match_ScriptJob_ENDTerminalRuleCall_14_1_p = new TokenAlias(true, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1());
		match_ScriptJob___ENDTerminalRuleCall_12_5_ENDTerminalRuleCall_14_1_a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_BEGINTerminalRuleCall_12_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_12_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getServicesKeyword_12_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_12_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_12_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_12_3()));
		match_ScriptJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_14_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_1_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getPermissionsKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_1_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_1_3()));
		match_ScriptJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_14_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_2_2_3()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_2_2_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_2_2_1()));
		match_ScriptJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_14_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_7_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getEnvKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_7_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_7_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_7_3()));
		match_ScriptJob___ENDTerminalRuleCall_9_5_ENDTerminalRuleCall_14_1_a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_BEGINTerminalRuleCall_9_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_9_5()), new TokenAlias(true, true, grammarAccess.getScriptJobAccess().getENDTerminalRuleCall_14_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getStepsKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getColonKeyword_9_1()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getNEWLINETerminalRuleCall_9_2()), new TokenAlias(false, false, grammarAccess.getScriptJobAccess().getBEGINTerminalRuleCall_9_3()));
		match_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSimplePullRequestTriggerAccess().getPull_requestKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getSimplePullRequestTriggerAccess().getPull_request_targetKeyword_1_1()));
		match_Strategy___ENDTerminalRuleCall_0_2_0_2_ENDTerminalRuleCall_0_2_1___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_2_0_2()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getENDTerminalRuleCall_0_2_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getMatrixKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getColonKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_2()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_3())), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_2_0_0()));
		match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getMatrixKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getColonKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_2()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_3()));
		match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getStrategyAccess().getMatrixKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getColonKeyword_0_0_1()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_0_0_2()), new TokenAlias(false, false, grammarAccess.getStrategyAccess().getBEGINTerminalRuleCall_0_0_3()));
		match_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_2_2_2_3()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getOnKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_2_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_2_2_2_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_2_2_2_1()));
		match_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_3_5()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getPermissionsKeyword_0_3_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_3_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_3_2()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_3_3()));
		match_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_4_5()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getEnvKeyword_0_4_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_4_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_4_2()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_4_3()));
		match_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getENDTerminalRuleCall_0_7_5()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getJobsKeyword_0_7_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_7_1()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getNEWLINETerminalRuleCall_0_7_2()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getBEGINTerminalRuleCall_0_7_3()));
		match_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getOnKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getWorkflowAccess().getColonKeyword_0_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBOOLEANRule())
			return getBOOLEANToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEND_OF_FILERule())
			return getEND_OF_FILEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal BOOLEAN returns ecore::EBooleanObject:
	 * 	'true' | 'false'
	 * ;
	 */
	protected String getBOOLEANToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal END_OF_FILE: EOF;
	 */
	protected String getEND_OF_FILEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal NEWLINE: '\r'? '\n';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Command___ENDTerminalRuleCall_5_5_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q.equals(syntax))
				emit_Command___ENDTerminalRuleCall_5_5_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_ENDTerminalRuleCall_1_5_1_a.equals(syntax))
				emit_Container_ENDTerminalRuleCall_1_5_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container_ENDTerminalRuleCall_1_5_1_p.equals(syntax))
				emit_Container_ENDTerminalRuleCall_1_5_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_1_4_ENDTerminalRuleCall_1_5_1_a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_1_4_ENDTerminalRuleCall_1_5_1_a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_2_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_2_2_0__q.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_2_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_2_2_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Container___ENDTerminalRuleCall_1_3_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_3_2_0__q.equals(syntax))
				emit_Container___ENDTerminalRuleCall_1_3_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_3_2_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Input___ENDTerminalRuleCall_4_0_2_3_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_0_2_0_BEGINTerminalRuleCall_4_0_2_1__q.equals(syntax))
				emit_Input___ENDTerminalRuleCall_4_0_2_3_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_0_2_0_BEGINTerminalRuleCall_4_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1.equals(syntax))
				emit_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q.equals(syntax))
				emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedPushTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q.equals(syntax))
				emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_BEGINTerminalRuleCall_3_0_2_0_0_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_BEGINTerminalRuleCall_3_0_2_0_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_BEGINTerminalRuleCall_3_0_2_1_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_BEGINTerminalRuleCall_3_0_2_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_BEGINTerminalRuleCall_3_1_0_0_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_BEGINTerminalRuleCall_3_1_0_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_BEGINTerminalRuleCall_3_1_1_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_BEGINTerminalRuleCall_3_1_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_BEGINTerminalRuleCall_3_2_0_0_0_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_BEGINTerminalRuleCall_3_2_0_0_0_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_BEGINTerminalRuleCall_3_2_0_1_3__q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_BEGINTerminalRuleCall_3_2_0_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q.equals(syntax))
				emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___ENDTerminalRuleCall_5_5___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q.equals(syntax))
				emit_Package___ENDTerminalRuleCall_5_5___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___ENDTerminalRuleCall_8_1_1___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a__q.equals(syntax))
				emit_Package___ENDTerminalRuleCall_8_1_1___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a.equals(syntax))
				emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__p.equals(syntax))
				emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_a.equals(syntax))
				emit_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_p.equals(syntax))
				emit_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob_ScriptJob___ENDTerminalRuleCall_14_1_p_or_ENDTerminalRuleCall_16_1_p__q.equals(syntax))
				emit_ReuseWorkflowJob_ScriptJob___ENDTerminalRuleCall_14_1_p_or_ENDTerminalRuleCall_16_1_p__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_ENDTerminalRuleCall_16_1_a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_BEGINTerminalRuleCall_11_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_ENDTerminalRuleCall_16_1_a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_BEGINTerminalRuleCall_11_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_ENDTerminalRuleCall_16_1_a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_BEGINTerminalRuleCall_13_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_ENDTerminalRuleCall_16_1_a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_BEGINTerminalRuleCall_13_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_ENDTerminalRuleCall_16_1_a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_BEGINTerminalRuleCall_14_2_1_1__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_ENDTerminalRuleCall_16_1_a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_BEGINTerminalRuleCall_14_2_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_16_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_16_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_16_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_16_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_16_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q.equals(syntax))
				emit_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_16_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_ENDTerminalRuleCall_14_1_a.equals(syntax))
				emit_ScriptJob_ENDTerminalRuleCall_14_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob_ENDTerminalRuleCall_14_1_p.equals(syntax))
				emit_ScriptJob_ENDTerminalRuleCall_14_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_12_5_ENDTerminalRuleCall_14_1_a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_BEGINTerminalRuleCall_12_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_12_5_ENDTerminalRuleCall_14_1_a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_BEGINTerminalRuleCall_12_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_14_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_14_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_14_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_14_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_14_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_14_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScriptJob___ENDTerminalRuleCall_9_5_ENDTerminalRuleCall_14_1_a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_BEGINTerminalRuleCall_9_3__q.equals(syntax))
				emit_ScriptJob___ENDTerminalRuleCall_9_5_ENDTerminalRuleCall_14_1_a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_BEGINTerminalRuleCall_9_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1.equals(syntax))
				emit_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy___ENDTerminalRuleCall_0_2_0_2_ENDTerminalRuleCall_0_2_1___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q.equals(syntax))
				emit_Strategy___ENDTerminalRuleCall_0_2_0_2_ENDTerminalRuleCall_0_2_1___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a.equals(syntax))
				emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__p.equals(syntax))
				emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q.equals(syntax))
				emit_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q.equals(syntax))
				emit_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'env' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Command___ENDTerminalRuleCall_5_5_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     END*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' ports+=Expression
	 *     (rule start) (ambiguity) '[' volumes+=Expression
	 *     (rule start) (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     (rule start) (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'options' ':' options=Expression
	 *     (rule start) (ambiguity) 'password' ':' password=Expression
	 *     (rule start) (ambiguity) 'ports' ':' ports+=Expression
	 *     (rule start) (ambiguity) 'volumes' ':' volumes+=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) BEGIN '-' ports+=Expression
	 *     (rule start) (ambiguity) BEGIN '-' volumes+=Expression
	 *     (rule start) (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) '[' ports+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) '[' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'options' ':' options=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'password' ':' password=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'ports' ':' ports+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'volumes' ':' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) BEGIN '-' ports+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) BEGIN '-' volumes+=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     image=Expression NEWLINE (ambiguity) '[' ports+=Expression
	 *     image=Expression NEWLINE (ambiguity) '[' volumes+=Expression
	 *     image=Expression NEWLINE (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     image=Expression NEWLINE (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     image=Expression NEWLINE (ambiguity) 'options' ':' options=Expression
	 *     image=Expression NEWLINE (ambiguity) 'password' ':' password=Expression
	 *     image=Expression NEWLINE (ambiguity) 'ports' ':' ports+=Expression
	 *     image=Expression NEWLINE (ambiguity) 'volumes' ':' volumes+=Expression
	 *     image=Expression NEWLINE (ambiguity) (rule end)
	 *     image=Expression NEWLINE (ambiguity) BEGIN '-' ports+=Expression
	 *     image=Expression NEWLINE (ambiguity) BEGIN '-' volumes+=Expression
	 *     image=Expression NEWLINE (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     options=Expression NEWLINE (ambiguity) '[' ports+=Expression
	 *     options=Expression NEWLINE (ambiguity) '[' volumes+=Expression
	 *     options=Expression NEWLINE (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     options=Expression NEWLINE (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     options=Expression NEWLINE (ambiguity) 'options' ':' options=Expression
	 *     options=Expression NEWLINE (ambiguity) 'password' ':' password=Expression
	 *     options=Expression NEWLINE (ambiguity) 'ports' ':' ports+=Expression
	 *     options=Expression NEWLINE (ambiguity) 'volumes' ':' volumes+=Expression
	 *     options=Expression NEWLINE (ambiguity) (rule end)
	 *     options=Expression NEWLINE (ambiguity) BEGIN '-' ports+=Expression
	 *     options=Expression NEWLINE (ambiguity) BEGIN '-' volumes+=Expression
	 *     options=Expression NEWLINE (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     password=Expression NEWLINE END (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     password=Expression NEWLINE END (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) '[' ports+=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) '[' volumes+=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression ']' NEWLINE (ambiguity) 'options' ':' options=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) 'ports' ':' ports+=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) 'volumes' ':' volumes+=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) (rule end)
	 *     ports+=Expression ']' NEWLINE (ambiguity) BEGIN '-' ports+=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) BEGIN '-' volumes+=Expression
	 *     ports+=Expression ']' NEWLINE (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     ports+=Expression NEWLINE (ambiguity) '[' ports+=Expression
	 *     ports+=Expression NEWLINE (ambiguity) '[' volumes+=Expression
	 *     ports+=Expression NEWLINE (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     ports+=Expression NEWLINE (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression NEWLINE (ambiguity) 'options' ':' options=Expression
	 *     ports+=Expression NEWLINE (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression NEWLINE (ambiguity) 'ports' ':' ports+=Expression
	 *     ports+=Expression NEWLINE (ambiguity) 'volumes' ':' volumes+=Expression
	 *     ports+=Expression NEWLINE (ambiguity) (rule end)
	 *     ports+=Expression NEWLINE (ambiguity) BEGIN '-' ports+=Expression
	 *     ports+=Expression NEWLINE (ambiguity) BEGIN '-' volumes+=Expression
	 *     ports+=Expression NEWLINE (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) '[' ports+=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) '[' volumes+=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     ports+=Expression NEWLINE END (ambiguity) 'options' ':' options=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) 'password' ':' password=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) 'ports' ':' ports+=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) 'volumes' ':' volumes+=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) (rule end)
	 *     ports+=Expression NEWLINE END (ambiguity) BEGIN '-' volumes+=Expression
	 *     ports+=Expression NEWLINE END (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     username=Expression NEWLINE (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     username=Expression NEWLINE (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) '[' ports+=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) '[' volumes+=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression ']' NEWLINE (ambiguity) 'options' ':' options=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) 'ports' ':' ports+=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) (rule end)
	 *     volumes+=Expression ']' NEWLINE (ambiguity) BEGIN '-' ports+=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) BEGIN '-' volumes+=Expression
	 *     volumes+=Expression ']' NEWLINE (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) '[' ports+=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) '[' volumes+=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression NEWLINE (ambiguity) 'options' ':' options=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) 'ports' ':' ports+=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) (rule end)
	 *     volumes+=Expression NEWLINE (ambiguity) BEGIN '-' ports+=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) BEGIN '-' volumes+=Expression
	 *     volumes+=Expression NEWLINE (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) '[' ports+=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) '[' volumes+=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) 'credentials' ':' BEGIN 'username' ':' username=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     volumes+=Expression NEWLINE END (ambiguity) 'options' ':' options=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) 'password' ':' password=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) 'ports' ':' ports+=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) 'volumes' ':' volumes+=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) (rule end)
	 *     volumes+=Expression NEWLINE END (ambiguity) BEGIN '-' ports+=Expression
	 *     volumes+=Expression NEWLINE END (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_ENDTerminalRuleCall_1_5_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     END+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     password=Expression NEWLINE END (ambiguity) '[' ports+=Expression
	 *     password=Expression NEWLINE END (ambiguity) '[' volumes+=Expression
	 *     password=Expression NEWLINE END (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     password=Expression NEWLINE END (ambiguity) 'options' ':' options=Expression
	 *     password=Expression NEWLINE END (ambiguity) 'ports' ':' ports+=Expression
	 *     password=Expression NEWLINE END (ambiguity) 'volumes' ':' volumes+=Expression
	 *     password=Expression NEWLINE END (ambiguity) (rule end)
	 *     password=Expression NEWLINE END (ambiguity) BEGIN '-' ports+=Expression
	 *     password=Expression NEWLINE END (ambiguity) BEGIN '-' volumes+=Expression
	 *     password=Expression NEWLINE END (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 *     username=Expression NEWLINE (ambiguity) '[' ports+=Expression
	 *     username=Expression NEWLINE (ambiguity) '[' volumes+=Expression
	 *     username=Expression NEWLINE (ambiguity) 'env' ':' BEGIN environmentVariables+=VariableAssignment
	 *     username=Expression NEWLINE (ambiguity) 'options' ':' options=Expression
	 *     username=Expression NEWLINE (ambiguity) 'ports' ':' ports+=Expression
	 *     username=Expression NEWLINE (ambiguity) 'volumes' ':' volumes+=Expression
	 *     username=Expression NEWLINE (ambiguity) (rule end)
	 *     username=Expression NEWLINE (ambiguity) BEGIN '-' ports+=Expression
	 *     username=Expression NEWLINE (ambiguity) BEGIN '-' volumes+=Expression
	 *     username=Expression NEWLINE (ambiguity) NEWLINE BEGIN 'image' ':' image=Expression
	 
	 * </pre>
	 */
	protected void emit_Container_ENDTerminalRuleCall_1_5_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END END* 'env' ':' BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_1_4_ENDTerminalRuleCall_1_5_1_a_EnvKeyword_1_1_0_ColonKeyword_1_1_1_BEGINTerminalRuleCall_1_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END END* BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     ports+=Expression NEWLINE (ambiguity) '-' ports+=Expression
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_2_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_2_2_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END END* BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     volumes+=Expression NEWLINE (ambiguity) '-' volumes+=Expression
	 
	 * </pre>
	 */
	protected void emit_Container___ENDTerminalRuleCall_1_3_2_2_ENDTerminalRuleCall_1_5_1_a_BEGINTerminalRuleCall_1_3_2_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     options+=STRING NEWLINE (ambiguity) '-' options+=STRING
	 
	 * </pre>
	 */
	protected void emit_Input___ENDTerminalRuleCall_4_0_2_3_ENDTerminalRuleCall_4_1_NEWLINETerminalRuleCall_4_0_2_0_BEGINTerminalRuleCall_4_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'pull_request' | 'pull_request_target'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ':' '[' branches+=Expression
	 *     (rule start) (ambiguity) ':' '[' paths+=Expression
	 *     (rule start) (ambiguity) ':' 'branches' ':' branches+=Expression
	 *     (rule start) (ambiguity) ':' 'paths' ':' paths+=Expression
	 *     (rule start) (ambiguity) ':' ((NEWLINE BEGIN) | END)? (rule start)
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN '-' branches+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN '-' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN '[' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN 'paths' ':' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN NEWLINE BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN NEWLINE BEGIN '-' paths+=Expression
	 *     (rule start) (ambiguity) ':' NEWLINE BEGIN ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) (ambiguity) ':' ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) (ambiguity) ':' ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' '[' branches+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' '[' paths+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' 'branches' ':' branches+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' 'paths' ':' paths+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' ((NEWLINE BEGIN) | END)? END (rule start)
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN '-' branches+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN '[' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN '[' paths+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN 'paths' ':' paths+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN 'types' ':' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN NEWLINE BEGIN '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN NEWLINE BEGIN '-' paths+=Expression
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' NEWLINE BEGIN ignoreSpecifiedPaths?='paths-ignore'
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' ignoreSpecifiedBranches?='branches-ignore'
	 *     (rule start) NEWLINE BEGIN (ambiguity) ':' ignoreSpecifiedPaths?='paths-ignore'
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger_Pull_requestKeyword_1_0_or_Pull_request_targetKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE (ambiguity) '-' eventTypes+=WEBHOOK_ACTIVITY_TYPE
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE (ambiguity) '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE (ambiguity) '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((NEWLINE BEGIN) | END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('pull_request' | 'pull_request_target') ':' (ambiguity) (rule start)
	 *     (rule start) NEWLINE BEGIN ('pull_request' | 'pull_request_target') ':' (ambiguity) END (rule start)
	 
	 * </pre>
	 */
	protected void emit_OptionedPullRequestTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     branches+=Expression NEWLINE (ambiguity) '-' branches+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_0_0_2_3_NEWLINETerminalRuleCall_3_0_2_0_0_2_0_BEGINTerminalRuleCall_3_0_2_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE (ambiguity) '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_0_2_1_2_3_NEWLINETerminalRuleCall_3_0_2_1_2_0_BEGINTerminalRuleCall_3_0_2_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_0_0_2_3_NEWLINETerminalRuleCall_3_1_0_0_2_0_BEGINTerminalRuleCall_3_1_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE (ambiguity) '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_1_1_2_3_NEWLINETerminalRuleCall_3_1_1_2_0_BEGINTerminalRuleCall_3_1_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tags+=Expression NEWLINE (ambiguity) '-' tags+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_0_0_2_3_NEWLINETerminalRuleCall_3_2_0_0_0_2_0_BEGINTerminalRuleCall_3_2_0_0_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     paths+=Expression NEWLINE (ambiguity) '-' paths+=Expression
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_0_1_2_3_NEWLINETerminalRuleCall_3_2_0_1_2_0_BEGINTerminalRuleCall_3_2_0_1_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((NEWLINE BEGIN) | END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'push' ':' (ambiguity) (rule start)
	 *     (rule start) NEWLINE BEGIN 'push' ':' (ambiguity) END (rule start)
	 
	 * </pre>
	 */
	protected void emit_OptionedPushTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'inputs' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     inputs+=Input (ambiguity) inputs+=Input
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_0_0_5_InputsKeyword_3_0_2_0_0_0_ColonKeyword_3_0_2_0_0_1_NEWLINETerminalRuleCall_3_0_2_0_0_2_BEGINTerminalRuleCall_3_0_2_0_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'secrets' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_0_2_1_5_SecretsKeyword_3_0_2_1_0_ColonKeyword_3_0_2_1_1_NEWLINETerminalRuleCall_3_0_2_1_2_BEGINTerminalRuleCall_3_0_2_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'outputs' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output (ambiguity) outputs+=Output
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_0_0_5_OutputsKeyword_3_1_0_0_0_ColonKeyword_3_1_0_0_1_NEWLINETerminalRuleCall_3_1_0_0_2_BEGINTerminalRuleCall_3_1_0_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'secrets' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_1_1_5_SecretsKeyword_3_1_1_0_ColonKeyword_3_1_1_1_NEWLINETerminalRuleCall_3_1_1_2_BEGINTerminalRuleCall_3_1_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'secrets' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=Secret (ambiguity) secrets+=Secret
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_0_0_5_SecretsKeyword_3_2_0_0_0_0_ColonKeyword_3_2_0_0_0_1_NEWLINETerminalRuleCall_3_2_0_0_0_2_BEGINTerminalRuleCall_3_2_0_0_0_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'outputs' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     outputs+=Output (ambiguity) outputs+=Output
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_0_1_5_OutputsKeyword_3_2_0_1_0_ColonKeyword_3_2_0_1_1_NEWLINETerminalRuleCall_3_2_0_1_2_BEGINTerminalRuleCall_3_2_0_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ((NEWLINE BEGIN) | END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'workflow_call' ':' (ambiguity) (rule start)
	 *     (rule start) NEWLINE BEGIN 'workflow_call' ':' (ambiguity) END (rule start)
	 
	 * </pre>
	 */
	protected void emit_OptionedWorkflowCallTrigger___ENDTerminalRuleCall_3_2_1_or___NEWLINETerminalRuleCall_3_0_0_BEGINTerminalRuleCall_3_0_1____q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         ('with' ':' NEWLINE BEGIN)* 
	  *         'env' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Package___ENDTerminalRuleCall_5_5___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a_EnvKeyword_5_0_ColonKeyword_5_1_NEWLINETerminalRuleCall_5_2_BEGINTerminalRuleCall_5_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END ('with' ':' NEWLINE BEGIN)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=VariableAssignment (ambiguity) args+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Package___ENDTerminalRuleCall_8_1_1___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('with' ':' NEWLINE BEGIN)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-' BEGIN (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) '-' BEGIN (ambiguity) 'id' ':' id=STRING
	 *     (rule start) '-' BEGIN (ambiguity) 'name' ':' name=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'shell' ':' shell=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'uses' ':' uses=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     (rule start) '-' BEGIN (ambiguity) END (rule start)
	 *     (rule start) '-' BEGIN (ambiguity) args+=VariableAssignment
	 *     (rule start) '-' BEGIN (ambiguity) if=IfStatement
	 *     (rule start) (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'id' ':' id=STRING
	 *     (rule start) (ambiguity) 'name' ':' name=Expression
	 *     (rule start) (ambiguity) 'shell' ':' shell=Expression
	 *     (rule start) (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) (ambiguity) 'uses' ':' uses=Expression
	 *     (rule start) (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) args+=VariableAssignment
	 *     (rule start) (ambiguity) if=IfStatement
	 *     args+=VariableAssignment END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     args+=VariableAssignment END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END (ambiguity) 'id' ':' id=STRING
	 *     args+=VariableAssignment END (ambiguity) 'name' ':' name=Expression
	 *     args+=VariableAssignment END (ambiguity) 'shell' ':' shell=Expression
	 *     args+=VariableAssignment END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     args+=VariableAssignment END (ambiguity) 'uses' ':' uses=Expression
	 *     args+=VariableAssignment END (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     args+=VariableAssignment END (ambiguity) (rule end)
	 *     args+=VariableAssignment END (ambiguity) END (rule end)
	 *     args+=VariableAssignment END (ambiguity) if=IfStatement
	 *     containerArgs=Expression NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     containerArgs=Expression NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     containerArgs=Expression NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     containerArgs=Expression NEWLINE (ambiguity) (rule end)
	 *     containerArgs=Expression NEWLINE (ambiguity) END (rule end)
	 *     containerArgs=Expression NEWLINE (ambiguity) args+=VariableAssignment
	 *     containerArgs=Expression NEWLINE (ambiguity) if=IfStatement
	 *     continueOnError=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     continueOnError=Expression NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) (rule end)
	 *     continueOnError=Expression NEWLINE (ambiguity) END (rule end)
	 *     continueOnError=Expression NEWLINE (ambiguity) args+=VariableAssignment
	 *     continueOnError=Expression NEWLINE (ambiguity) if=IfStatement
	 *     entrypoint=Expression NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     entrypoint=Expression NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     entrypoint=Expression NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     entrypoint=Expression NEWLINE (ambiguity) (rule end)
	 *     entrypoint=Expression NEWLINE (ambiguity) END (rule end)
	 *     entrypoint=Expression NEWLINE (ambiguity) args+=VariableAssignment
	 *     entrypoint=Expression NEWLINE (ambiguity) if=IfStatement
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'id' ':' id=STRING
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'name' ':' name=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'shell' ':' shell=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'uses' ':' uses=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) END (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) args+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END (ambiguity) if=IfStatement
	 *     id=STRING NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     id=STRING NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     id=STRING NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     id=STRING NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     id=STRING NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     id=STRING NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     id=STRING NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     id=STRING NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     id=STRING NEWLINE (ambiguity) (rule end)
	 *     id=STRING NEWLINE (ambiguity) END (rule end)
	 *     id=STRING NEWLINE (ambiguity) args+=VariableAssignment
	 *     id=STRING NEWLINE (ambiguity) if=IfStatement
	 *     if=IfStatement (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     if=IfStatement (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     if=IfStatement (ambiguity) 'id' ':' id=STRING
	 *     if=IfStatement (ambiguity) 'name' ':' name=Expression
	 *     if=IfStatement (ambiguity) 'shell' ':' shell=Expression
	 *     if=IfStatement (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     if=IfStatement (ambiguity) 'uses' ':' uses=Expression
	 *     if=IfStatement (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     if=IfStatement (ambiguity) (rule end)
	 *     if=IfStatement (ambiguity) END (rule end)
	 *     if=IfStatement (ambiguity) args+=VariableAssignment
	 *     if=IfStatement (ambiguity) if=IfStatement
	 *     name=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     name=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     name=Expression NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     name=Expression NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     name=Expression NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     name=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=Expression NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     name=Expression NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     name=Expression NEWLINE (ambiguity) (rule end)
	 *     name=Expression NEWLINE (ambiguity) END (rule end)
	 *     name=Expression NEWLINE (ambiguity) args+=VariableAssignment
	 *     name=Expression NEWLINE (ambiguity) if=IfStatement
	 *     shell=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     shell=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     shell=Expression NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     shell=Expression NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     shell=Expression NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     shell=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     shell=Expression NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     shell=Expression NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     shell=Expression NEWLINE (ambiguity) (rule end)
	 *     shell=Expression NEWLINE (ambiguity) END (rule end)
	 *     shell=Expression NEWLINE (ambiguity) args+=VariableAssignment
	 *     shell=Expression NEWLINE (ambiguity) if=IfStatement
	 *     uses=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     uses=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     uses=Expression NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     uses=Expression NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     uses=Expression NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     uses=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     uses=Expression NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     uses=Expression NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     uses=Expression NEWLINE (ambiguity) (rule end)
	 *     uses=Expression NEWLINE (ambiguity) END (rule end)
	 *     uses=Expression NEWLINE (ambiguity) args+=VariableAssignment
	 *     uses=Expression NEWLINE (ambiguity) if=IfStatement
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'id' ':' id=STRING
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'name' ':' name=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'shell' ':' shell=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'uses' ':' uses=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'working-directory' ':' workingDirectory=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) (rule end)
	 *     workingDirectory=Expression NEWLINE (ambiguity) END (rule end)
	 *     workingDirectory=Expression NEWLINE (ambiguity) args+=VariableAssignment
	 *     workingDirectory=Expression NEWLINE (ambiguity) if=IfStatement
	 
	 * </pre>
	 */
	protected void emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('with' ':' NEWLINE BEGIN)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-' BEGIN (ambiguity) 'args' ':' containerArgs=Expression
	 *     (rule start) '-' BEGIN (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     (rule start) '-' BEGIN (ambiguity) END (rule start)
	 *     (rule start) (ambiguity) 'args' ':' containerArgs=Expression
	 *     (rule start) (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     args+=VariableAssignment END (ambiguity) 'args' ':' containerArgs=Expression
	 *     args+=VariableAssignment END (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'args' ':' containerArgs=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     id=STRING NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     id=STRING NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     if=IfStatement (ambiguity) 'args' ':' containerArgs=Expression
	 *     if=IfStatement (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     name=Expression NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     name=Expression NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     shell=Expression NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     shell=Expression NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     uses=Expression NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     uses=Expression NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'args' ':' containerArgs=Expression
	 *     workingDirectory=Expression NEWLINE (ambiguity) 'entrypoint' ':' entrypoint=Expression
	 
	 * </pre>
	 */
	protected void emit_Package___WithKeyword_8_0_0_ColonKeyword_8_0_1_NEWLINETerminalRuleCall_8_0_2_BEGINTerminalRuleCall_8_0_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '${{' (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) '${{' (ambiguity) 'always' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'cancelled' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'contains' '(' search=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'endsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'failure' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'format' '(' string=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'fromJSON' '(' value=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'hashFiles' '(' path=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'join' '(' array=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'startsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) 'success' '(' ')' '}}' (rule start)
	 *     (rule start) '${{' (ambiguity) 'toJSON' '(' value=InsideBracketsExpression
	 *     (rule start) '${{' (ambiguity) context=CONTEXT
	 *     (rule start) '${{' (ambiguity) name=ID
	 *     (rule start) '${{' (ambiguity) value=BOOLEAN
	 *     (rule start) '${{' (ambiguity) value=DOUBLE
	 *     (rule start) '${{' (ambiguity) value=INT
	 *     (rule start) '${{' (ambiguity) value=STRING
	 *     (rule start) '${{' (ambiguity) {And.lhs=}
	 *     (rule start) '${{' (ambiguity) {Comparison.lhs=}
	 *     (rule start) '${{' (ambiguity) {Equality.lhs=}
	 *     (rule start) '${{' (ambiguity) {Or.lhs=}
	 *     (rule start) '${{' (ambiguity) {VariableDereference.variable=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'always' '(' ')' '}}' NEWLINE (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'cancelled' '(' ')' '}}' NEWLINE (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'contains' '(' search=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'endsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'failure' '(' ')' '}}' NEWLINE (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'format' '(' string=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'fromJSON' '(' value=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'hashFiles' '(' path=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'join' '(' array=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'startsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'success' '(' ')' '}}' NEWLINE (rule start)
	 *     (rule start) 'if' ':' '${{' (ambiguity) 'toJSON' '(' value=InsideBracketsExpression
	 *     (rule start) 'if' ':' '${{' (ambiguity) context=CONTEXT
	 *     (rule start) 'if' ':' '${{' (ambiguity) name=ID
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=BOOLEAN
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=DOUBLE
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=INT
	 *     (rule start) 'if' ':' '${{' (ambiguity) value=STRING
	 *     (rule start) 'if' ':' '${{' (ambiguity) {And.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {Comparison.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {Equality.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {Or.lhs=}
	 *     (rule start) 'if' ':' '${{' (ambiguity) {VariableDereference.variable=}
	 *     (rule start) (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) (ambiguity) 'always' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'cancelled' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'contains' '(' search=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'endsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'failure' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'format' '(' string=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'fromJSON' '(' value=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'hashFiles' '(' path=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'join' '(' array=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'startsWith' '(' searchString=InsideBracketsExpression
	 *     (rule start) (ambiguity) 'success' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'toJSON' '(' value=InsideBracketsExpression
	 *     (rule start) (ambiguity) context=CONTEXT
	 *     (rule start) (ambiguity) name=ID
	 *     (rule start) (ambiguity) value=BOOLEAN
	 *     (rule start) (ambiguity) value=DOUBLE
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Comparison.lhs=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 *     (rule start) (ambiguity) {VariableDereference.variable=}
	 
	 * </pre>
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' childExpr=VariableDereference
	 *     (rule start) (ambiguity) {And.lhs=}
	 *     (rule start) (ambiguity) {Comparison.lhs=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {Or.lhs=}
	 *     (rule start) (ambiguity) {VariableDereference.variable=}
	 
	 * </pre>
	 */
	protected void emit_Primary_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     END*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     (rule start) (ambiguity) 'container' ':' container=Container
	 *     (rule start) (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     (rule start) (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     (rule start) (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     (rule start) (ambiguity) 'runs-on' ':' agent=Agent
	 *     (rule start) (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     (rule start) (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     (rule start) (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     (rule start) (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     (rule start) (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) (ambiguity) 'uses' ':' workflowPath=Expression
	 *     (rule start) (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) if=IfStatement
	 *     (rule start) (ambiguity) name=YAMLID
	 *     agent=Agent (ambiguity) '[' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     agent=Agent (ambiguity) 'container' ':' container=Container
	 *     agent=Agent (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     agent=Agent (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     agent=Agent (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     agent=Agent (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     agent=Agent (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     agent=Agent (ambiguity) 'runs-on' ':' agent=Agent
	 *     agent=Agent (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     agent=Agent (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     agent=Agent (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     agent=Agent (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     agent=Agent (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     agent=Agent (ambiguity) 'uses' ':' workflowPath=Expression
	 *     agent=Agent (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     agent=Agent (ambiguity) (rule end)
	 *     agent=Agent (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) if=IfStatement
	 *     agent=Agent (ambiguity) name=YAMLID
	 *     args+=VariableAssignment END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     args+=VariableAssignment END (ambiguity) 'container' ':' container=Container
	 *     args+=VariableAssignment END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     args+=VariableAssignment END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     args+=VariableAssignment END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     args+=VariableAssignment END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     args+=VariableAssignment END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     args+=VariableAssignment END (ambiguity) 'runs-on' ':' agent=Agent
	 *     args+=VariableAssignment END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     args+=VariableAssignment END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     args+=VariableAssignment END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     args+=VariableAssignment END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     args+=VariableAssignment END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     args+=VariableAssignment END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     args+=VariableAssignment END (ambiguity) (rule end)
	 *     args+=VariableAssignment END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     args+=VariableAssignment END (ambiguity) if=IfStatement
	 *     args+=VariableAssignment END (ambiguity) name=YAMLID
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'container' ':' container=Container
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'runs-on' ':' agent=Agent
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (rule end)
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) if=IfStatement
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) name=YAMLID
	 *     container=Container (ambiguity) '[' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     container=Container (ambiguity) 'container' ':' container=Container
	 *     container=Container (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     container=Container (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     container=Container (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     container=Container (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     container=Container (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     container=Container (ambiguity) 'runs-on' ':' agent=Agent
	 *     container=Container (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     container=Container (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     container=Container (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     container=Container (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     container=Container (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     container=Container (ambiguity) 'uses' ':' workflowPath=Expression
	 *     container=Container (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     container=Container (ambiguity) (rule end)
	 *     container=Container (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) if=IfStatement
	 *     container=Container (ambiguity) name=YAMLID
	 *     continueOnError=Expression NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression NEWLINE (ambiguity) 'container' ':' container=Container
	 *     continueOnError=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     continueOnError=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     continueOnError=Expression NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     continueOnError=Expression NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     continueOnError=Expression NEWLINE (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     continueOnError=Expression NEWLINE (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     continueOnError=Expression NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     continueOnError=Expression NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     continueOnError=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'uses' ':' workflowPath=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     continueOnError=Expression NEWLINE (ambiguity) (rule end)
	 *     continueOnError=Expression NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE (ambiguity) if=IfStatement
	 *     continueOnError=Expression NEWLINE (ambiguity) name=YAMLID
	 *     defaults=Defaults END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END (ambiguity) 'container' ':' container=Container
	 *     defaults=Defaults END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     defaults=Defaults END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     defaults=Defaults END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     defaults=Defaults END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     defaults=Defaults END (ambiguity) 'runs-on' ':' agent=Agent
	 *     defaults=Defaults END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     defaults=Defaults END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     defaults=Defaults END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     defaults=Defaults END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     defaults=Defaults END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     defaults=Defaults END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) (rule end)
	 *     defaults=Defaults END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) if=IfStatement
	 *     defaults=Defaults END (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) if=IfStatement
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) if=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) if=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) name=YAMLID
	 *     environmentVariables+=VariableAssignment END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'container' ':' container=Container
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'runs-on' ':' agent=Agent
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     environmentVariables+=VariableAssignment END (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) if=IfStatement
	 *     environmentVariables+=VariableAssignment END (ambiguity) name=YAMLID
	 *     if=IfStatement (ambiguity) '[' dependsOn+=[Job|ID]
	 *     if=IfStatement (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     if=IfStatement (ambiguity) 'container' ':' container=Container
	 *     if=IfStatement (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     if=IfStatement (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     if=IfStatement (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     if=IfStatement (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     if=IfStatement (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     if=IfStatement (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     if=IfStatement (ambiguity) 'runs-on' ':' agent=Agent
	 *     if=IfStatement (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     if=IfStatement (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     if=IfStatement (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     if=IfStatement (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     if=IfStatement (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     if=IfStatement (ambiguity) 'uses' ':' workflowPath=Expression
	 *     if=IfStatement (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     if=IfStatement (ambiguity) (rule end)
	 *     if=IfStatement (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     if=IfStatement (ambiguity) if=IfStatement
	 *     if=IfStatement (ambiguity) name=YAMLID
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'container' ':' container=Container
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'uses' ':' workflowPath=Expression
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) (rule end)
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) if=IfStatement
	 *     inheritSecrets?='inherit' NEWLINE (ambiguity) name=YAMLID
	 *     jobName=Expression NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression NEWLINE (ambiguity) 'container' ':' container=Container
	 *     jobName=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     jobName=Expression NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     jobName=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     jobName=Expression NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     jobName=Expression NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     jobName=Expression NEWLINE (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     jobName=Expression NEWLINE (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     jobName=Expression NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     jobName=Expression NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     jobName=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     jobName=Expression NEWLINE (ambiguity) 'uses' ':' workflowPath=Expression
	 *     jobName=Expression NEWLINE (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     jobName=Expression NEWLINE (ambiguity) (rule end)
	 *     jobName=Expression NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE (ambiguity) if=IfStatement
	 *     jobName=Expression NEWLINE (ambiguity) name=YAMLID
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) '[' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'container' ':' container=Container
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'runs-on' ':' agent=Agent
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'uses' ':' workflowPath=Expression
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) (rule end)
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) if=IfStatement
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) name=YAMLID
	 *     permissions+=Permission END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END (ambiguity) 'container' ':' container=Container
	 *     permissions+=Permission END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     permissions+=Permission END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     permissions+=Permission END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     permissions+=Permission END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) 'runs-on' ':' agent=Agent
	 *     permissions+=Permission END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     permissions+=Permission END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     permissions+=Permission END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     permissions+=Permission END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     permissions+=Permission END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     permissions+=Permission END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) (rule end)
	 *     permissions+=Permission END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) if=IfStatement
	 *     permissions+=Permission END (ambiguity) name=YAMLID
	 *     secrets+=VariableAssignment END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     secrets+=VariableAssignment END (ambiguity) 'container' ':' container=Container
	 *     secrets+=VariableAssignment END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     secrets+=VariableAssignment END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     secrets+=VariableAssignment END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     secrets+=VariableAssignment END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     secrets+=VariableAssignment END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     secrets+=VariableAssignment END (ambiguity) 'runs-on' ':' agent=Agent
	 *     secrets+=VariableAssignment END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     secrets+=VariableAssignment END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     secrets+=VariableAssignment END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     secrets+=VariableAssignment END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     secrets+=VariableAssignment END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     secrets+=VariableAssignment END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     secrets+=VariableAssignment END (ambiguity) (rule end)
	 *     secrets+=VariableAssignment END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     secrets+=VariableAssignment END (ambiguity) if=IfStatement
	 *     secrets+=VariableAssignment END (ambiguity) name=YAMLID
	 *     services+=Service END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END (ambiguity) 'container' ':' container=Container
	 *     services+=Service END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     services+=Service END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     services+=Service END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     services+=Service END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     services+=Service END (ambiguity) 'runs-on' ':' agent=Agent
	 *     services+=Service END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     services+=Service END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     services+=Service END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     services+=Service END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     services+=Service END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     services+=Service END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     services+=Service END (ambiguity) (rule end)
	 *     services+=Service END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) if=IfStatement
	 *     services+=Service END (ambiguity) name=YAMLID
	 *     stagingEnvironment=StagingEnvironment (ambiguity) '[' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'container' ':' container=Container
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'runs-on' ':' agent=Agent
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'uses' ':' workflowPath=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) (rule end)
	 *     stagingEnvironment=StagingEnvironment (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) if=IfStatement
	 *     stagingEnvironment=StagingEnvironment (ambiguity) name=YAMLID
	 *     strategy=Strategy END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END (ambiguity) 'container' ':' container=Container
	 *     strategy=Strategy END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     strategy=Strategy END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     strategy=Strategy END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     strategy=Strategy END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     strategy=Strategy END (ambiguity) 'runs-on' ':' agent=Agent
	 *     strategy=Strategy END (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     strategy=Strategy END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     strategy=Strategy END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     strategy=Strategy END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     strategy=Strategy END (ambiguity) 'uses' ':' workflowPath=Expression
	 *     strategy=Strategy END (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) (rule end)
	 *     strategy=Strategy END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) if=IfStatement
	 *     strategy=Strategy END (ambiguity) name=YAMLID
	 *     workflowPath=Expression NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     workflowPath=Expression NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     workflowPath=Expression NEWLINE (ambiguity) 'container' ':' container=Container
	 *     workflowPath=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     workflowPath=Expression NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     workflowPath=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     workflowPath=Expression NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     workflowPath=Expression NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     workflowPath=Expression NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     workflowPath=Expression NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     workflowPath=Expression NEWLINE (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     workflowPath=Expression NEWLINE (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     workflowPath=Expression NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     workflowPath=Expression NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     workflowPath=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     workflowPath=Expression NEWLINE (ambiguity) 'uses' ':' workflowPath=Expression
	 *     workflowPath=Expression NEWLINE (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     workflowPath=Expression NEWLINE (ambiguity) (rule end)
	 *     workflowPath=Expression NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     workflowPath=Expression NEWLINE (ambiguity) if=IfStatement
	 *     workflowPath=Expression NEWLINE (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     END+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'container' ':' container=Container
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'secrets' ':' NEWLINE BEGIN secrets+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'secrets' ':' inheritSecrets?='inherit'
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'uses' ':' workflowPath=Expression
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'with' ':' NEWLINE BEGIN args+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) (rule end)
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) if=IfStatement
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_ENDTerminalRuleCall_16_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END+ | END+)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob_ScriptJob___ENDTerminalRuleCall_14_1_p_or_ENDTerminalRuleCall_16_1_p__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'services' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service (ambiguity) services+=Service
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_11_5_ENDTerminalRuleCall_16_1_a_ServicesKeyword_11_0_ColonKeyword_11_1_NEWLINETerminalRuleCall_11_2_BEGINTerminalRuleCall_11_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'with' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     args+=VariableAssignment (ambiguity) args+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_13_5_ENDTerminalRuleCall_16_1_a_WithKeyword_13_0_ColonKeyword_13_1_NEWLINETerminalRuleCall_13_2_BEGINTerminalRuleCall_13_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'secrets' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     secrets+=VariableAssignment (ambiguity) secrets+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_14_2_1_3_ENDTerminalRuleCall_16_1_a_SecretsKeyword_14_0_ColonKeyword_14_1_NEWLINETerminalRuleCall_14_2_1_0_BEGINTerminalRuleCall_14_2_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'permissions' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission (ambiguity) permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_16_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END END* NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) '-' dependsOn+=[Job|ID]
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_16_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'env' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ReuseWorkflowJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_16_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     END*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     (rule start) (ambiguity) 'container' ':' container=Container
	 *     (rule start) (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     (rule start) (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     (rule start) (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     (rule start) (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     (rule start) (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     (rule start) (ambiguity) 'runs-on' ':' agent=Agent
	 *     (rule start) (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     (rule start) (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     (rule start) (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     (rule start) (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     (rule start) (ambiguity) if=IfStatement
	 *     (rule start) (ambiguity) name=YAMLID
	 *     agent=Agent (ambiguity) '[' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     agent=Agent (ambiguity) 'container' ':' container=Container
	 *     agent=Agent (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     agent=Agent (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     agent=Agent (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     agent=Agent (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     agent=Agent (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     agent=Agent (ambiguity) 'runs-on' ':' agent=Agent
	 *     agent=Agent (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     agent=Agent (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     agent=Agent (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     agent=Agent (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     agent=Agent (ambiguity) (rule end)
	 *     agent=Agent (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     agent=Agent (ambiguity) if=IfStatement
	 *     agent=Agent (ambiguity) name=YAMLID
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'container' ':' container=Container
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'runs-on' ':' agent=Agent
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) (rule end)
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) if=IfStatement
	 *     concurrencyGroup=ConcurrencyGroup END (ambiguity) name=YAMLID
	 *     container=Container (ambiguity) '[' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     container=Container (ambiguity) 'container' ':' container=Container
	 *     container=Container (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     container=Container (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     container=Container (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     container=Container (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     container=Container (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     container=Container (ambiguity) 'runs-on' ':' agent=Agent
	 *     container=Container (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     container=Container (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     container=Container (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     container=Container (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     container=Container (ambiguity) (rule end)
	 *     container=Container (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     container=Container (ambiguity) if=IfStatement
	 *     container=Container (ambiguity) name=YAMLID
	 *     continueOnError=Expression NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     continueOnError=Expression NEWLINE (ambiguity) 'container' ':' container=Container
	 *     continueOnError=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     continueOnError=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     continueOnError=Expression NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     continueOnError=Expression NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     continueOnError=Expression NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     continueOnError=Expression NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     continueOnError=Expression NEWLINE (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     continueOnError=Expression NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     continueOnError=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     continueOnError=Expression NEWLINE (ambiguity) (rule end)
	 *     continueOnError=Expression NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     continueOnError=Expression NEWLINE (ambiguity) if=IfStatement
	 *     continueOnError=Expression NEWLINE (ambiguity) name=YAMLID
	 *     defaults=Defaults END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     defaults=Defaults END (ambiguity) 'container' ':' container=Container
	 *     defaults=Defaults END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     defaults=Defaults END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     defaults=Defaults END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     defaults=Defaults END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     defaults=Defaults END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     defaults=Defaults END (ambiguity) 'runs-on' ':' agent=Agent
	 *     defaults=Defaults END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     defaults=Defaults END (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     defaults=Defaults END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     defaults=Defaults END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     defaults=Defaults END (ambiguity) (rule end)
	 *     defaults=Defaults END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     defaults=Defaults END (ambiguity) if=IfStatement
	 *     defaults=Defaults END (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) if=IfStatement
	 *     dependsOn+=[Job|ID] ']' NEWLINE (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) if=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) name=YAMLID
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'container' ':' container=Container
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'runs-on' ':' agent=Agent
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) (rule end)
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) if=IfStatement
	 *     dependsOn+=[Job|ID] NEWLINE END (ambiguity) name=YAMLID
	 *     environmentVariables+=VariableAssignment END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'container' ':' container=Container
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'runs-on' ':' agent=Agent
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     environmentVariables+=VariableAssignment END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     environmentVariables+=VariableAssignment END (ambiguity) (rule end)
	 *     environmentVariables+=VariableAssignment END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     environmentVariables+=VariableAssignment END (ambiguity) if=IfStatement
	 *     environmentVariables+=VariableAssignment END (ambiguity) name=YAMLID
	 *     if=IfStatement (ambiguity) '[' dependsOn+=[Job|ID]
	 *     if=IfStatement (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     if=IfStatement (ambiguity) 'container' ':' container=Container
	 *     if=IfStatement (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     if=IfStatement (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     if=IfStatement (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     if=IfStatement (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     if=IfStatement (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     if=IfStatement (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     if=IfStatement (ambiguity) 'runs-on' ':' agent=Agent
	 *     if=IfStatement (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     if=IfStatement (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     if=IfStatement (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     if=IfStatement (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     if=IfStatement (ambiguity) (rule end)
	 *     if=IfStatement (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     if=IfStatement (ambiguity) if=IfStatement
	 *     if=IfStatement (ambiguity) name=YAMLID
	 *     jobName=Expression NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     jobName=Expression NEWLINE (ambiguity) 'container' ':' container=Container
	 *     jobName=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     jobName=Expression NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     jobName=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     jobName=Expression NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     jobName=Expression NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     jobName=Expression NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     jobName=Expression NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     jobName=Expression NEWLINE (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     jobName=Expression NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     jobName=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     jobName=Expression NEWLINE (ambiguity) (rule end)
	 *     jobName=Expression NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     jobName=Expression NEWLINE (ambiguity) if=IfStatement
	 *     jobName=Expression NEWLINE (ambiguity) name=YAMLID
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) '[' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'container' ':' container=Container
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'runs-on' ':' agent=Agent
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) (rule end)
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) if=IfStatement
	 *     name=YAMLID ':' NEWLINE BEGIN (ambiguity) name=YAMLID
	 *     permissions+=Permission END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     permissions+=Permission END (ambiguity) 'container' ':' container=Container
	 *     permissions+=Permission END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     permissions+=Permission END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     permissions+=Permission END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     permissions+=Permission END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     permissions+=Permission END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) 'runs-on' ':' agent=Agent
	 *     permissions+=Permission END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     permissions+=Permission END (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     permissions+=Permission END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     permissions+=Permission END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     permissions+=Permission END (ambiguity) (rule end)
	 *     permissions+=Permission END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     permissions+=Permission END (ambiguity) if=IfStatement
	 *     permissions+=Permission END (ambiguity) name=YAMLID
	 *     services+=Service END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     services+=Service END (ambiguity) 'container' ':' container=Container
	 *     services+=Service END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     services+=Service END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     services+=Service END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     services+=Service END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     services+=Service END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     services+=Service END (ambiguity) 'runs-on' ':' agent=Agent
	 *     services+=Service END (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     services+=Service END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     services+=Service END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     services+=Service END (ambiguity) (rule end)
	 *     services+=Service END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     services+=Service END (ambiguity) if=IfStatement
	 *     services+=Service END (ambiguity) name=YAMLID
	 *     stagingEnvironment=StagingEnvironment (ambiguity) '[' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'container' ':' container=Container
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'runs-on' ':' agent=Agent
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     stagingEnvironment=StagingEnvironment (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     stagingEnvironment=StagingEnvironment (ambiguity) (rule end)
	 *     stagingEnvironment=StagingEnvironment (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     stagingEnvironment=StagingEnvironment (ambiguity) if=IfStatement
	 *     stagingEnvironment=StagingEnvironment (ambiguity) name=YAMLID
	 *     steps+=Step END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     steps+=Step END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     steps+=Step END (ambiguity) 'container' ':' container=Container
	 *     steps+=Step END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     steps+=Step END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     steps+=Step END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     steps+=Step END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     steps+=Step END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     steps+=Step END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     steps+=Step END (ambiguity) 'runs-on' ':' agent=Agent
	 *     steps+=Step END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     steps+=Step END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     steps+=Step END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     steps+=Step END (ambiguity) (rule end)
	 *     steps+=Step END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     steps+=Step END (ambiguity) if=IfStatement
	 *     steps+=Step END (ambiguity) name=YAMLID
	 *     strategy=Strategy END (ambiguity) '[' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     strategy=Strategy END (ambiguity) 'container' ':' container=Container
	 *     strategy=Strategy END (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     strategy=Strategy END (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     strategy=Strategy END (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     strategy=Strategy END (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     strategy=Strategy END (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     strategy=Strategy END (ambiguity) 'runs-on' ':' agent=Agent
	 *     strategy=Strategy END (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     strategy=Strategy END (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     strategy=Strategy END (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     strategy=Strategy END (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     strategy=Strategy END (ambiguity) (rule end)
	 *     strategy=Strategy END (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     strategy=Strategy END (ambiguity) if=IfStatement
	 *     strategy=Strategy END (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_ENDTerminalRuleCall_14_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     END+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) '[' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'container' ':' container=Container
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'continue-on-error' ':' continueOnError=Expression
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'defaults' ':' NEWLINE BEGIN defaults=Defaults
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'environment' ':' stagingEnvironment=StagingEnvironment
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'needs' ':' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'permissions' ':' NEWLINE BEGIN permissions+=Permission
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'runs-on' ':' agent=Agent
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'services' ':' NEWLINE BEGIN services+=Service
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'steps' ':' NEWLINE BEGIN steps+=Step
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'strategy' ':' NEWLINE BEGIN strategy=Strategy
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) 'timeout-minutes' ':' timeoutMinutes=Expression
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) (rule end)
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) NEWLINE BEGIN '-' dependsOn+=[Job|ID]
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) if=IfStatement
	 *     timeoutMinutes=Expression NEWLINE (ambiguity) name=YAMLID
	 
	 * </pre>
	 */
	protected void emit_ScriptJob_ENDTerminalRuleCall_14_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'services' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     services+=Service (ambiguity) services+=Service
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_12_5_ENDTerminalRuleCall_14_1_a_ServicesKeyword_12_0_ColonKeyword_12_1_NEWLINETerminalRuleCall_12_2_BEGINTerminalRuleCall_12_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'permissions' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission (ambiguity) permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_1_5_ENDTerminalRuleCall_14_1_a_PermissionsKeyword_1_0_ColonKeyword_1_1_NEWLINETerminalRuleCall_1_2_BEGINTerminalRuleCall_1_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END END* NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     dependsOn+=[Job|ID] NEWLINE (ambiguity) '-' dependsOn+=[Job|ID]
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_2_2_3_ENDTerminalRuleCall_14_1_a_NEWLINETerminalRuleCall_2_2_0_BEGINTerminalRuleCall_2_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'env' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_7_5_ENDTerminalRuleCall_14_1_a_EnvKeyword_7_0_ColonKeyword_7_1_NEWLINETerminalRuleCall_7_2_BEGINTerminalRuleCall_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         END 
	  *         END* 
	  *         'steps' 
	  *         ':' 
	  *         NEWLINE 
	  *         BEGIN
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     steps+=Step (ambiguity) steps+=Step
	 
	 * </pre>
	 */
	protected void emit_ScriptJob___ENDTerminalRuleCall_9_5_ENDTerminalRuleCall_14_1_a_StepsKeyword_9_0_ColonKeyword_9_1_NEWLINETerminalRuleCall_9_2_BEGINTerminalRuleCall_9_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'pull_request' | 'pull_request_target'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) NEWLINE (rule start)
	 
	 * </pre>
	 */
	protected void emit_SimplePullRequestTrigger_Pull_requestKeyword_0_1_or_Pull_request_targetKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END END ('matrix' ':' NEWLINE BEGIN)* BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     axes+=MatrixAxis (ambiguity) axes+=MatrixAxis
	 
	 * </pre>
	 */
	protected void emit_Strategy___ENDTerminalRuleCall_0_2_0_2_ENDTerminalRuleCall_0_2_1___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a_BEGINTerminalRuleCall_0_2_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('matrix' ':' NEWLINE BEGIN)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'exludes' ':' NEWLINE BEGIN excludes+=MatrixCombination
	 *     (rule start) (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     (rule start) (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) BEGIN axes+=MatrixAxis
	 *     axes+=MatrixAxis END END (ambiguity) 'exludes' ':' NEWLINE BEGIN excludes+=MatrixCombination
	 *     axes+=MatrixAxis END END (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     axes+=MatrixAxis END END (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     axes+=MatrixAxis END END (ambiguity) (rule end)
	 *     excludes+=MatrixCombination END (ambiguity) 'exludes' ':' NEWLINE BEGIN excludes+=MatrixCombination
	 *     excludes+=MatrixCombination END (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     excludes+=MatrixCombination END (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     excludes+=MatrixCombination END (ambiguity) (rule end)
	 *     excludes+=MatrixCombination END (ambiguity) BEGIN axes+=MatrixAxis
	 *     failFast=Expression NEWLINE (ambiguity) 'exludes' ':' NEWLINE BEGIN excludes+=MatrixCombination
	 *     failFast=Expression NEWLINE (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     failFast=Expression NEWLINE (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     failFast=Expression NEWLINE (ambiguity) (rule end)
	 *     failFast=Expression NEWLINE (ambiguity) BEGIN axes+=MatrixAxis
	 *     includes+=MatrixCombination END (ambiguity) 'exludes' ':' NEWLINE BEGIN excludes+=MatrixCombination
	 *     includes+=MatrixCombination END (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     includes+=MatrixCombination END (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     includes+=MatrixCombination END (ambiguity) (rule end)
	 *     includes+=MatrixCombination END (ambiguity) BEGIN axes+=MatrixAxis
	 *     maxParallel=Expression NEWLINE (ambiguity) 'exludes' ':' NEWLINE BEGIN excludes+=MatrixCombination
	 *     maxParallel=Expression NEWLINE (ambiguity) 'fail-fast' ':' failFast=Expression
	 *     maxParallel=Expression NEWLINE (ambiguity) 'max-paralell' ':' maxParallel=Expression
	 *     maxParallel=Expression NEWLINE (ambiguity) (rule end)
	 *     maxParallel=Expression NEWLINE (ambiguity) BEGIN axes+=MatrixAxis
	 
	 * </pre>
	 */
	protected void emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('matrix' ':' NEWLINE BEGIN)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'includes' ':' NEWLINE BEGIN includes+=MatrixCombination
	 *     (rule start) (ambiguity) (rule start)
	 *     axes+=MatrixAxis END END (ambiguity) 'includes' ':' NEWLINE BEGIN includes+=MatrixCombination
	 *     excludes+=MatrixCombination END (ambiguity) 'includes' ':' NEWLINE BEGIN includes+=MatrixCombination
	 *     failFast=Expression NEWLINE (ambiguity) 'includes' ':' NEWLINE BEGIN includes+=MatrixCombination
	 *     includes+=MatrixCombination END (ambiguity) 'includes' ':' NEWLINE BEGIN includes+=MatrixCombination
	 *     maxParallel=Expression NEWLINE (ambiguity) 'includes' ':' NEWLINE BEGIN includes+=MatrixCombination
	 
	 * </pre>
	 */
	protected void emit_Strategy___MatrixKeyword_0_0_0_ColonKeyword_0_0_1_NEWLINETerminalRuleCall_0_0_2_BEGINTerminalRuleCall_0_0_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'on' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     triggers+=SimpleTrigger NEWLINE (ambiguity) '-' triggers+=SimpleTrigger
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_2_2_2_3_OnKeyword_0_2_0_ColonKeyword_0_2_1_NEWLINETerminalRuleCall_0_2_2_2_0_BEGINTerminalRuleCall_0_2_2_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'permissions' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission (ambiguity) permissions+=Permission
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_3_5_PermissionsKeyword_0_3_0_ColonKeyword_0_3_1_NEWLINETerminalRuleCall_0_3_2_BEGINTerminalRuleCall_0_3_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'env' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     environmentVariables+=VariableAssignment (ambiguity) environmentVariables+=VariableAssignment
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_4_5_EnvKeyword_0_4_0_ColonKeyword_0_4_1_NEWLINETerminalRuleCall_0_4_2_BEGINTerminalRuleCall_0_4_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'jobs' ':' NEWLINE BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     jobs+=Job (ambiguity) jobs+=Job
	 
	 * </pre>
	 */
	protected void emit_Workflow___ENDTerminalRuleCall_0_7_5_JobsKeyword_0_7_0_ColonKeyword_0_7_1_NEWLINETerminalRuleCall_0_7_2_BEGINTerminalRuleCall_0_7_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('on' ':')?
	 *
	 * This ambiguous syntax occurs at:
	 *     triggers+=OptionedTrigger (ambiguity) triggers+=OptionedTrigger
	 
	 * </pre>
	 */
	protected void emit_Workflow___OnKeyword_0_2_0_ColonKeyword_0_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
