grammar d.fe.up.pt.cicd.gha.GitHubActions with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://d.fe.up.pt/GHA" as GHA
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Jobs" as Jobs
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Jobs/Matrices" as Matrices
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Jobs/Steps" as Steps
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Triggers" as Triggers
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Triggers/Parameters" as Parameters
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Options" as Options
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions" as Expressions
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/BinaryOperators" as BinaryOperators
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/BinaryOperators/EqualityOperators" as EqualityOperators
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/BinaryOperators/ComparisonOperators" as ComparisonOperators
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/BinaryOperators/LogicalOperators" as LogicalOperators
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/UnaryOperators" as UnaryOperators
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/BuiltInFunctions" as BuiltInFunctions
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/BuiltInFunctions/StatusCheckFunctions" as StatusCheckFunctions
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/Values" as Values
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/Values/Literals" as Literals
import "platform:/resource/gha-meta-model/model/GHA.ecore#//Expressions/Values/Variables" as Variables

Workflow returns GHA::Workflow:
	(
		('name' ':' name=Expression NEWLINE)? &
		('run-name' ':' runName=Expression NEWLINE)? &
		('on' ':' (
			(triggers+=SimpleTrigger NEWLINE) |
			('[' triggers+=SimpleTrigger (',' triggers+=SimpleTrigger)* ']' NEWLINE) |
			(
				NEWLINE
				BEGIN
				('-' triggers+=SimpleTrigger NEWLINE)+
				END
			) |
			triggers+=OptionedTrigger+
		)) &
		('permissions' ':' NEWLINE BEGIN permissions+=Permission+ END)? &
		('env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment+ END)? &
		('defaults' ':' NEWLINE BEGIN defaults=Defaults END)? &
		('concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup END)? &
		('jobs' ':' NEWLINE BEGIN jobs+=Job+ END)
	)
	(=>END_OF_FILE)
;

Job returns Jobs::Job:
	ScriptJob | ReuseWorkflowJob
;

ScriptJob returns Jobs::ScriptJob:
	name=ID ':'
		NEWLINE
		BEGIN
		('name' ':' jobName=Expression NEWLINE)? &
		('permissions' ':' NEWLINE BEGIN permissions+=Permission+ END)? &
		('needs' ':' 
			(dependsOn+=[Jobs::Job] NEWLINE) |
			('[' dependsOn+=[Jobs::Job] (',' dependsOn+=[Jobs::Job])* ']' NEWLINE) |
			(
				NEWLINE
				BEGIN
				('-' dependsOn+=[Jobs::Job] NEWLINE)+
				END
		))? &
		if=IfStatement? &
		('runs-on' ':' agent=Agent) &
		('environment' ':' stagingEnvironment=StagingEnvironment)? &
		('concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup END)? &
		('env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment+ END)? &
		('defaults' ':' NEWLINE BEGIN defaults=Defaults END)? &
		('steps' ':' NEWLINE BEGIN steps+=Step+ END) &
		('strategy' ':' NEWLINE BEGIN strategy=Strategy END)? &
		('container' ':' container=Container)? &
		('services' ':' NEWLINE BEGIN services+=Service+ END)? &
		('continue-on-error' ':' continueOnError=Expression NEWLINE)? &
		('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE)?
		END
;

ReuseWorkflowJob returns Jobs::ReuseWorkflowJob:
	name=ID ':'
		NEWLINE
		BEGIN
		('name' ':' jobName=Expression  NEWLINE)? &
		('permissions' ':' NEWLINE BEGIN permissions+=Permission+ END)? &
		('needs' ':' 
			(dependsOn+=[Jobs::Job] NEWLINE) |
			('[' dependsOn+=[Jobs::Job] (',' dependsOn+=[Jobs::Job])* ']' NEWLINE) |
			(
				NEWLINE
				BEGIN
				('-' dependsOn+=[Jobs::Job] NEWLINE)+
				END
			)
		)? &
		if=IfStatement? &
		('runs-on' ':' agent=Agent) &
		('environment' ':' stagingEnvironment=StagingEnvironment)? &
		('concurrency' ':' NEWLINE BEGIN concurrencyGroup=ConcurrencyGroup END)? &
		('env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment+ END)? &
		('defaults' ':' NEWLINE BEGIN defaults=Defaults END)? &
		('strategy' ':' NEWLINE BEGIN strategy=Strategy END)? &
		('container' ':' container=Container)? &
		('services' ':' NEWLINE BEGIN services+=Service+ END)? &
		('uses' ':' workflowPath=Expression NEWLINE)? &
		('with' ':' NEWLINE BEGIN args+=VariableAssignment+ END)? &
		('secrets' ':' ((inheritSecrets?='inherit' NEWLINE) | (NEWLINE BEGIN secrets+=VariableAssignment+ END)))? &
		('continue-on-error' ':' continueOnError=Expression NEWLINE)? &
		('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE)?
		END
;

Agent returns Jobs::Agent:
	(
		(labels+=Expression NEWLINE) |
		('[' labels+=Expression (',' labels+=Expression)* ']' NEWLINE) |
		(
			NEWLINE
			BEGIN
			('-' labels+=Expression NEWLINE)+
			END
		)
	) |
	(
		NEWLINE
		BEGIN
		(
			(
				'labels' ':'
					(labels+=Expression NEWLINE) |
					('[' labels+=Expression (',' labels+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' labels+=Expression NEWLINE)+
						END
					)
			)
			(
				'group' ':' group=Expression NEWLINE
			)?
		)|
		(
			(
				'group' ':' group=Expression NEWLINE
			)
			(
				'labels' ':'
					(labels+=Expression NEWLINE) |
					('[' labels+=Expression (',' labels+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' labels+=Expression NEWLINE)+
						END
					)
			)?
		)
		END
	)
;

Step returns Steps::Step:
	'-' BEGIN (Command | Package) END
;

Command returns Steps::Command:
	('id' ':' id=STRING NEWLINE)? &
	if=IfStatement? &
	('name' ':' name=Expression NEWLINE)? &
	('shell' ':' shell=Expression NEWLINE)? &
	('working-directory' ':' workingDirectory=Expression NEWLINE)? &
	('env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment+ END)? &
	('continue-on-error' ':' continueOnError=Expression NEWLINE)? &
	('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE)?
	('run' ':' command=Expression NEWLINE)
;

Package returns Steps::Package:
	('id' ':' id=STRING NEWLINE)? &
	if=IfStatement? &
	('name' ':' name=Expression NEWLINE)? &
	('shell' ':' shell=Expression NEWLINE)? &
	('working-directory' ':' workingDirectory=Expression NEWLINE)? &
	('env' ':' NEWLINE BEGIN environmentVariables+=VariableAssignment+ END)? &
	('continue-on-error' ':' continueOnError=Expression NEWLINE)? &
	('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE)?
	('uses' ':' uses=Expression NEWLINE) &
	('with' ':'
		NEWLINE
		BEGIN
		(
			('entrypoint' ':' entrypoint=Expression NEWLINE) &
			('args' ':' containerArgs=Expression NEWLINE)?
		) |
		(
			args+=VariableAssignment+
		)
		END
	)?
;

IfStatement returns Expressions::Expression:
	'if' ':' Expression NEWLINE
;

ConcurrencyGroup returns Options::ConcurrencyGroup:
	('group' ':' name=Expression NEWLINE) &
	('cancel-in-progress' ':' cancelInProgress=Expression NEWLINE)?
;

SimpleTrigger returns Triggers::Trigger:
	(
		SimpleWorkflowDispatchTrigger | 
		SimpleWorkflowCallTrigger |
		SimplePushTriggerTrigger |
		SimplePullRequestTrigger |
		SimpleStandardEventTrigger
	)
	NEWLINE
;

SimplePullRequestTrigger returns Triggers::PullRequestTrigger:
	{Triggers::PullRequestTrigger} 'pull_request' | {Triggers::PullRequestTrigger} 'pull_request_target'
;

SimplePushTriggerTrigger returns Triggers::PushTrigger:
	{Triggers::PushTrigger} 'push'
;

SimpleWorkflowCallTrigger returns Triggers::WorkflowCallTrigger:
	{Triggers::WorkflowCallTrigger} 'workflow_call'
;

SimpleWorkflowDispatchTrigger returns Triggers::WorkflowDispatchTrigger:
	{Triggers::WorkflowDispatchTrigger} 'workflow_dispatch'
;

SimpleStandardEventTrigger returns Triggers::StandardEventTrigger:
	event=EVENT
;

OptionedTrigger returns Triggers::Trigger:
	NEWLINE
	BEGIN
	(
		OptionedPullRequestTrigger |
		OptionedPushTrigger |
		OptionedScheduleTrigger |
		OptionedStandardEventTrigger |
		OptionedWorkflowCallTrigger |
		OptionedWorkflowRunTrigger |
		OptionedWorkflowDispatchTrigger
	)
	END
;

OptionedStandardEventTrigger returns Triggers::StandardEventTrigger:
	event=EVENT ':'
		NEWLINE
		BEGIN
		'types' ':' 
			(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE) |
			('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE) |
			(
				NEWLINE
				BEGIN
				('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE)+
				END
			)
		END
;

OptionedWorkflowRunTrigger returns Triggers::WorkflowRunTrigger:
	'workflow_run' ':'
		NEWLINE
		BEGIN
		('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
			(branches+=Expression NEWLINE) |
			('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE) |
			(
				NEWLINE
				BEGIN
				('-' branches+=Expression NEWLINE)+
				END
			)
		END
;

OptionedPullRequestTrigger returns Triggers::PullRequestTrigger:
	{Triggers::PullRequestTrigger} ('pull_request' | 'pull_request_target') ':' 
	(
		NEWLINE
		BEGIN
		(
			(
				'types' ':' 
					(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE) |
					('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE)+
						END
					)
			)
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' branches+=Expression NEWLINE)+
						END
					)
			)? &
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' paths+=Expression NEWLINE)+
						END
					)
			)?
		) |
		(
			
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' branches+=Expression NEWLINE)+
						END
					)
			)
			(
				'types' ':' 
					(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE) |
					('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE)+
						END
					)
			)? &
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' paths+=Expression NEWLINE)+
						END
					)
			)?
		) |
		(
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' paths+=Expression NEWLINE)+
						END
					)
			)
			(
				'types' ':' 
					(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE) |
					('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE)+
						END
					)
			)? &
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' branches+=Expression NEWLINE)+
						END
					)
			)?
		)
		END	
	)
;

OptionedPushTrigger returns Triggers::PushTrigger:
	{Triggers::PushTrigger} 'push' ':'
	(
		NEWLINE
		BEGIN
		(
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' branches+=Expression NEWLINE)+
						END
					)
			)
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' paths+=Expression NEWLINE)+
						END
					)
			)? &
			(
				('tags' | ignoreSpecifiedTags?='tags-ignore')  ':'
					(tags+=Expression NEWLINE) |
					('[' tags+=Expression (',' tags+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' tags+=Expression NEWLINE)+
						END
					)
			)?
		) |
		(
			
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' paths+=Expression NEWLINE)+
						END
					)
			)
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' branches+=Expression NEWLINE)+
						END
					)
			)? &
			(
				('tags' | ignoreSpecifiedTags?='tags-ignore')  ':'
					(tags+=Expression NEWLINE) |
					('[' tags+=Expression (',' tags+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' tags+=Expression NEWLINE)+
						END
					)
			)?
		) |
		(
			(
				('tags' | ignoreSpecifiedTags?='tags-ignore')  ':'
					(tags+=Expression NEWLINE) |
					('[' tags+=Expression (',' tags+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' tags+=Expression NEWLINE)+
						END
					)
			)
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' branches+=Expression NEWLINE)+
						END
					)
			)? &
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE) |
					(
						NEWLINE
						BEGIN
						('-' paths+=Expression NEWLINE)+
						END
					)
			)?
		)
		END
	)
;

OptionedScheduleTrigger returns Triggers::ScheduleTrigger:
	'schedule' ':'
	(
		NEWLINE
		BEGIN
		(
			'-' 'cron' ':' crons+=Expression NEWLINE
		)+
		END
	)
;

OptionedWorkflowCallTrigger returns Triggers::WorkflowCallTrigger:
	{Triggers::WorkflowCallTrigger} 'workflow_call' ':'
	(
		NEWLINE
		BEGIN
		(
			(
				'inputs' ':' NEWLINE BEGIN inputs+=Input+ END
			)
			(
				'outputs' ':' NEWLINE BEGIN outputs+=Output+ END
			)? &
			(
				'secrets' ':' NEWLINE BEGIN secrets+=Secret+ END
			)?
		) |
		(
			(
				'outputs' ':' NEWLINE BEGIN outputs+=Output+ END
			)
			(
				'inputs' ':' NEWLINE BEGIN inputs+=Input+ END
			)? &
			(
				'secrets' ':' NEWLINE BEGIN secrets+=Secret+ END
			)?
		) |
		(
			(
				'secrets' ':' NEWLINE BEGIN secrets+=Secret+ END
			)
			(
				'inputs' ':' NEWLINE BEGIN inputs+=Input+ END
			)? &
			(
				'outputs' ':' NEWLINE BEGIN outputs+=Output+ END
			)?
			
		)
		END
	)
;

OptionedWorkflowDispatchTrigger returns Triggers::WorkflowDispatchTrigger:
	{Triggers::WorkflowDispatchTrigger} 'workflow_dispatch' ':'
		NEWLINE
		BEGIN
		('inputs' ':' NEWLINE BEGIN inputs+=Input+ END)
		END
;

Input returns Parameters::Input:
	id=ID ':'
		NEWLINE
		BEGIN
		('description' ':' description=Expression NEWLINE)? &
		('default' ':' default=Expression NEWLINE)? &
		('required' ':' isRequired=Expression NEWLINE)? &
		('type' ':' type=TYPE NEWLINE) &
		(
			'options' ':'
				(options+=STRING NEWLINE) |
				('[' options+=STRING (',' options+=STRING)* ']' NEWLINE) |
				(
					NEWLINE
					BEGIN
					('-' options+=STRING NEWLINE)+
					END
				)
		)
		END
;

Output returns Parameters::Output:
	id=ID ':'
		NEWLINE
		BEGIN
		('description' ':' description=Expression NEWLINE)? &
		('value' ':' value=Expression NEWLINE)
		END
;

Secret returns Parameters::Secret:
	id=ID ':'
		NEWLINE
		BEGIN
		(
			('description' ':' description=Expression NEWLINE) &
			('required' ':' isRequired=Expression NEWLINE)?
		) |
		(
			('required' ':' isRequired=Expression NEWLINE) &
			('description' ':' description=Expression NEWLINE)?
		)
		END
;

Permission returns Options::Permission:
	key=PERMISSION_SCOPE ':' value=PERMISSION_VALUE NEWLINE
;

Defaults returns Options::Defaults:
	'run' ':'
		NEWLINE
		BEGIN
		(
			('shell' ':' shell=Expression NEWLINE) &
			('working-directory' ':' workingDirectory=Expression NEWLINE)?
		)
		END
;

StagingEnvironment returns Jobs::StagingEnvironment:
	(name=Expression NEWLINE) |
	(
		NEWLINE
		BEGIN
		('name' ':' name=Expression NEWLINE)
		('url' ':' url=Expression NEWLINE)?
		END
	)
;

Strategy returns Matrices::Matrix:
	(
		'matrix' ':'
			NEWLINE
			BEGIN
			('includes' ':' NEWLINE BEGIN includes+=MatrixCombination END)? &
			('exludes' ':' NEWLINE BEGIN excludes+=MatrixCombination END)? &
			(BEGIN axes+=MatrixAxis+ END)
			END		
	) &
	('fail-fast' ':' failFast=Expression NEWLINE)? &
	('max-paralell' ':' maxParallel=Expression NEWLINE)?
;

MatrixAxis returns Matrices::MatrixAxis:
	name=ID ':' 
	(
		(cells+=Expression NEWLINE) |
		('[' cells+=Expression (',' cells+=Expression)* ']' NEWLINE) |
		(
			NEWLINE
			BEGIN
			('-' cells+=Expression NEWLINE)+
			END
		)
	)
;

MatrixCombination returns Matrices::MatrixCombination:
	'-' BEGIN entries+=VariableAssignment END
;

Container returns Jobs::Container:
	(
		image=Expression NEWLINE
	) |
	(
		NEWLINE
		BEGIN
		('image' ':' image=Expression NEWLINE) &
		('env' ':' BEGIN environmentVariables+=VariableAssignment+ END)? &
		('ports' ':' 
			(ports+=Expression NEWLINE) |
			('[' ports+=Expression (',' ports+=Expression)* ']' NEWLINE) |
			(
				BEGIN
				('-' ports+=Expression NEWLINE)+
				END
			)
		)? &
		('volumes' ':'
			(volumes+=Expression NEWLINE) |
			('[' volumes+=Expression (',' volumes+=Expression)* ']' NEWLINE) |
			(
				BEGIN
				('-' volumes+=Expression NEWLINE)+
				END
			)
		)? &
		('options' ':' options=Expression NEWLINE)? &
		(
			'credentials' ':'
				BEGIN
				('username' ':' username=Expression NEWLINE) &
				('password' ':' password=Expression NEWLINE)
				END
		)?
		END
	)
;

Service returns Jobs::Service:
	key=ID ':'
		NEWLINE
		BEGIN
		value=Container
		END
;

VariableAssignment returns Expressions::VariableAssignment:
	key=ID ':' value=Expression NEWLINE
;

Expression returns Expressions::Expression:
	Concat
;

Concat returns Expressions::Expression:
	ConcatExpression ({BinaryOperators::Concat.lhs=current}	rhs=ConcatExpression)*
;

ConcatExpression returns Expressions::Expression:
	BracketedExpression | UnbracketedLiteral
;

BracketedExpression returns Expressions::Expression:
	'${{' InsideBracketsExpression '}}'
;

InsideBracketsExpression returns Expressions::Expression:
	Or
;

UnbracketedLiteral returns Literals::Literal:
	UnbracketedString
;

UnbracketedString returns Literals::StringLiteral:
	value=STRING
;

Or returns Expressions::Expression:
    And ({LogicalOperators::Or.lhs=current} '||' rhs=And)*
;


And returns Expressions::Expression:
    Equality ({LogicalOperators::And.lhs=current} '&&' rhs=Equality )*
;

Equality returns Expressions::Expression:
	Comparison ({EqualityOperators::Equality.lhs=current} op=EQUALITY_OP rhs=Comparison )*
;

Comparison returns Expressions::Expression:
	UnaryOp ({ComparisonOperators::Comparison.lhs=current} op=COMPARISON_OP rhs=UnaryOp )*
;

UnaryOp returns Expressions::Expression:
	Not | Blank
;

Not returns UnaryOperators::Not:
	'!' childExpr=VariableDereference
;

Blank returns Expressions::Expression:
	VariableDereference
;

VariableDereference returns Expressions::Expression:
	Primary ({Variables::VariableDereference.variable=current} (('.' property=ID) | ('[' property=ID ']')))*
;

Primary returns Expressions::Expression:
    ('(' InsideBracketsExpression ')') | CallExpression | Atomic
;

Atomic returns Values::Value:
	({Variables::GitHubContext} context=CONTEXT) |
	({Variables::Variable} name=ID) | 
	({Literals::IntegerLiteral} value=INT) |
	({Literals::DoubleLiteral} value=DOUBLE) |
	({Literals::BooleanLiteral} value=BOOLEAN) |
	({Literals::StringLiteral} value=STRING)	
;

CallExpression returns BuiltInFunctions::BuiltInFunctionCall:
	Contains |
	StartsWith |
	EndsWith |
	Format |
	Join |
	ToJSON |
	FromJSON |
	HashFiles |
	Success |
	Always |
	Failure |
	Cancelled
;

Contains returns BuiltInFunctions::Contains:
	'contains' '(' search=InsideBracketsExpression ',' item=InsideBracketsExpression ')'
;

StartsWith returns BuiltInFunctions::StartsWith:
	'startsWith' '(' searchString=InsideBracketsExpression ',' searchValue=InsideBracketsExpression ')'
;

EndsWith returns BuiltInFunctions::EndsWith:
	'endsWith' '(' searchString=InsideBracketsExpression ',' searchValue=InsideBracketsExpression ')'
;

Format returns BuiltInFunctions::Format:
	'format' '(' string=InsideBracketsExpression (',' replaceValues+=InsideBracketsExpression)* ')'
;

Join returns BuiltInFunctions::Join:
	'join' '(' array=InsideBracketsExpression (',' sep=InsideBracketsExpression)? ')'
;

ToJSON returns BuiltInFunctions::ToJSON:
	'toJSON' '(' value=InsideBracketsExpression ')'
;

FromJSON returns BuiltInFunctions::FromJSON:
	'fromJSON' '(' value=InsideBracketsExpression ')'
;

HashFiles returns BuiltInFunctions::HashFiles:
	'hashFiles' '(' path=InsideBracketsExpression ')'
;

Success returns StatusCheckFunctions::Success:
	{StatusCheckFunctions::Success} 'success' '(' ')'
;

Always returns StatusCheckFunctions::Always:
	{StatusCheckFunctions::Always} 'always' '(' ')'
;

Cancelled returns StatusCheckFunctions::Cancelled:
	{StatusCheckFunctions::Cancelled} 'cancelled' '(' ')'
;

Failure returns StatusCheckFunctions::Failure:
	{StatusCheckFunctions::Failure} 'failure' '(' ')'
;

enum COMPARISON_OP returns ComparisonOperators::COMPARISON_OPS:
	GT='>' |
	GTE='>=' |
	LT='<' |
	LTE='<='
;

enum EQUALITY_OP returns EqualityOperators::EQUALITY_OPS:
	EQUALS='==' |
	NOT_EQUALS='!='
;

enum CONTEXT returns Variables::CONTEXTS:
	GITHUB='github' |
	ENV='env' |
	VARS='vars' |
	JOB='job' |
	JOBS='jobs' |
	STEPS='steps' |
	RUNNER='runner' |
	SECRETS='secrets' |
	STRATEGY='strategy' |
	MATRIX='matrix' |
	NEEDS='needs' |
	INPUTS='inputs'
;

enum TYPE returns Parameters::INPUT_TYPES:
	BOOLEAN='boolean' |
	NUMBER='number' |
	STRING='string' |
	ENVIRONMENT='environment' |
	CHOICE='choice'
;

enum WEBHOOK_ACTIVITY_TYPE returns Triggers::WEBHOOK_ACTIVITY_TYPES:
	ASSIGNED='assigned' |
	AUTO_MERGE_DISABLED='auto_merge_disabled' |
	AUTO_MERGE_ENABLED='auto_merge_enabled' |
	CLOSED='closed' |
	CONVERTED_TO_DRAFT='converted_to_draft' |
	EDITED='edited' |
	LABELED='labeled' |
	LOCKED='locked' |
	OPENED='opened' |
	READY_FOR_REVIEW='ready_for_review' |
	REOPENED='reopened' |
	REVIEW_REQUEST_REMOVED='review_request_removed' |
	REVIEW_REQUESTED='review_requested' |
	SYNCHRONIZE='synchronize' |
	UNASSIGNED='unassigned' |
	UNLABELED='unlabeled' |
	UNLOCKED='unlocked' |
	CREATED='created' |
	DELETED='deleted'
;

enum EVENT returns Triggers::EVENTS:
	BRANCH_PROTECTION_RULE='branch_protection_rule' |
	CHECK_RUN='check_run' |
	CHECK_SUITE='check_suite' |
	CREATE='create' |
	DELETE='delete' |
	DEPLOYMENT='deployment' |
	DEPLOYMENT_STATUS='deployment_status' |
	DISCUSSION='discussion' |
	FORK='fork' |
	GOLLUM='gollum' |
	ISSUES='issues' |
	LABEL='label' |
	MERGE_GROUP='merge_group' |
	MILESTONE='milestone' |
	PAGE_BUILD='page_build' |
	PROJECT='project' |
	PROJECT_CARD='project_card' |
	PROJECT_COLUMN='project_column' |
	PUBLIC='public' |
	PULL_REQUEST_REVIEW='pull_request_review' |
	PULL_REQUEST_REVIEW_COMMENT='pull_request_review_comment' |
	REGISTRY_PACKAGE='registry_package' |
	RELEASE='release' |
	REPOSITORY_DISPATCH='repository_dispatch' |
	WATCH='watch' |
	STATUS='status'
;

enum PERMISSION_SCOPE returns Options::PERMISSION_SCOPES:
	ACTIONS='actions' | 
	CHECKS='checks' | 
	CONTENTS='contents' | 
	DEPLOYMENTS='deployments' | 
	DISCUSSIONS='discussions' | 
	ID_TOKEN='id-token' |
	ISSUES='issues' |
	PACKAGES='packages' |
	PAGES='pages' |
	PULL_REQUESTS='pull_requests' |
	REPOSITORY_PROJECTS='repository_projects' |
	SECURITY_EVENTS='security_events' |
	STATUSES='statuses'
;

enum PERMISSION_VALUE returns Options::PERMISSIONS:
	READ='read' |
	WRITE='write' |
	NONE='none'
;

terminal DOUBLE returns ecore::EDoubleObject:
	INT '.' INT
;

terminal BOOLEAN returns ecore::EBooleanObject:
	'true' | 'false'
;
/*
terminal YAML_STRING returns ecore::EString:
	('"' ( '\\' . | !('\\'|'"') )+ '"') |
	("'" ( '\\' . | !('\\'|"'") )+ "'") |
	(!('$' | NEWLINE) -> ('$' | NEWLINE)) |
	('|' BEGIN !('$' | NEWLINE) -> '$' END)
;
*/

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation

terminal END: 'synthetic:END';      // decrease indentation

terminal NEWLINE: '\r'? '\n';

terminal END_OF_FILE: EOF;
