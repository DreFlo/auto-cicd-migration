grammar d.fe.up.pt.cicd.gha.GitHubActions with org.eclipse.xtext.common.Terminals

generate gitHubActions "http://www.fe.d/up/pt/cicd/gha/GitHubActions"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Workflow:
	('name' ':' name=YAML_STRING)? &
	('on' ':' triggers=TriggerList) &
	('permissions' ':' permissions+=Permission+)? &
	('env' ':' environmentVariables+=KeyValuePair+)? &
	('defaults' ':' defaults=Defaults)? &
	('concurrency' ':' concurrency=ConcurrencyGroup)? &
	('jobs' ':' jobs+=Job+)
;

Job:
	BEGIN
	name=YAML_STRING ':'
		BEGIN
		('name' ':' jobName=YAML_STRING)? &
		('permissions' ':' permissions+=Permission+)? &
		('needs' ':' dependsOn=YAMLList)? &
		if=IfStatement? &
		('runs-on' ':' os=YAML_STRING) &
		('environment' ':' stagingEnvironment=StagingEnvironment)? &
		('concurrency' ':' concurrency=ConcurrencyGroup)? &
		('env' ':' environmentVariables+=KeyValuePair+)? &
		('defaults' ':' defaults=Defaults)? &
		('steps' ':' steps+=Step+) &
		('strategy' ':' strategy=Strategy)? &
		('container' ':' container=Container)? &
		('services' ':' services+=Service+)? &
		('uses' ':' reusableWorkflowPath=YAML_STRING)? &
		('with' ':' arguments+=KeyValuePair+)? &
		('secrets' ':' (inheritSecrets?='inherit' | secrets+=KeyValuePair+))? &
		('continue-on-error' ':' continueOnError=ExpressionCall)? &
		('timeout-minutes' ':' timeout=ExpressionCall)?
		END
	END
;

Step:
	{Step}
	BEGIN
	'-'
	(
		('id' ':' id=YAML_STRING)? &
		if=IfStatement? &
		('name' ':' name=YAML_STRING)? &
		('uses' ':' package=YAML_STRING)? &
		('run' ':' command=YAML_STRING)? &
		('working-directory' ':' dir=YAML_STRING)? &
		('shell' ':' shell=YAML_STRING)? &
		('with' ':' ((BEGIN 'entrypoint' ':' entrypoint=YAML_STRING END)? & arguments+=KeyValuePair*))? &
		('env' ':' environmentVariables+=KeyValuePair+)? &
		('continue-on-error' ':' continueOnError=ExpressionCall)? &
		('timeout-minutes' ':' timeout=ExpressionCall)?	
	)
	END
;

IfStatement:
	'if' ':' condition=ExpressionCall
;

ConcurrencyGroup:
	BEGIN
	'group' ':' name=ExpressionCall
	('cancel-in-progress' ':' cancelInProgress=("true" | "false"))?
	END
;

TriggerList:
	triggers+=SimpleTrigger |
	('[' triggers+=SimpleTrigger (',' triggers+=SimpleTrigger)* ']') |
	(
		BEGIN
		('-' triggers+=SimpleTrigger NEWLINE)+
		END
	) |
	triggers+=OptionedTrigger+
;

SimpleTrigger returns Trigger:
	event=TRIGGER_EVENTS
;

OptionedTrigger returns Trigger:
	BEGIN
	event=TRIGGER_EVENTS ':'
		BEGIN
		('branches' ':' branches=YAMLList)? &
		('branches-ignore' ':' branchesIgnore=YAMLList)? &
		('tags' ':' tags=YAMLList)? &
		('tags-ignore' ':' tagsIgnore=YAMLList)? &
		('-' 'cron' ':' cronStrings+=YAML_STRING)* &
		('inputs' ':' inputs+=Input+)? &
		('output' ':' outputs+=Output+)? &
		('secrets' ':' secrets+=Secret+)? &
		END 
	END
;

Input:
	BEGIN
	name=YAML_STRING ':'
		BEGIN
		('description' ':' description=ExpressionCall)? &
		('default' ':' default=ExpressionCall)? &
		('required' ':' required=BOOLEAN)? &
		('type' ':' type=('boolean' | 'number' | 'string'))
		END
	END
;

Output:
	BEGIN
	name=YAML_STRING ':'
		BEGIN
		('description' ':' description=ExpressionCall)? &
		('value' ':' value=ExpressionCall)
		END
	END
;

Permission:
	BEGIN
	name=YAML_STRING ':'
		BEGIN
		permission=('read' | 'write' | 'none')
		END
	END
;

Defaults:
	BEGIN
	'run' ':'
		BEGIN
		(
			('shell' ':' shell=YAML_STRING)
			('working-directory' ':' dir=YAML_STRING)?
		) |
		(
			('working-directory' ':' dir=YAML_STRING)
			('shell' ':' shell=YAML_STRING)?
		)
		END
	END
;

StagingEnvironment:
	(
		{StagingEnvironment} YAML_STRING |
		(
			BEGIN
			('name' ':' shell=YAML_STRING)
			('url' ':' url=ExpressionCall)?
			END
		)
	)
;

Strategy:
	BEGIN
	(
		'matrix' ':'
			BEGIN
			('include' ':' include=YAMLList)? &
			('exlude' ':' exclude=YAMLList)? &
			axes+=MatrixAxis+
			END		
	) &
	('fail-fast' ':' failFast=ExpressionCall)? &
	('max-paralell' ':' maxParallel=ExpressionCall)?
	END
;

MatrixAxis:
	name=YAML_STRING ':' cells=YAMLList
;

Container:
	BEGIN
	('image' ':' image=YAML_STRING) &
	('env' ':' environmentVariables+=KeyValuePair+)? &
	('ports' ':' ports=YAMLList)? &
	('volumes' ':' volumes=YAMLList)? &
	('options' ':' options=ExpressionCall)? &
	(
		'credentials' ':'
			BEGIN
			('username' ':' username=ExpressionCall) &
			('password' ':' password=ExpressionCall)
			END
	)
	END
;

Service:
	BEGIN
	name=YAML_STRING ':'
		BEGIN
		container=Container
		END
	END
;

Secret:
	BEGIN
	name=YAML_STRING ':'
		BEGIN
		('description' ':' description=YAML_STRING)? &
		('required' ':' required=BOOLEAN)?
		END
	END
;

KeyValuePair:
	BEGIN
	key=YAML_STRING ':' value=ExpressionCall
	END
;

YAMLList:
	list+=ExpressionCall |
	('[' list+=ExpressionCall (',' list+=ExpressionCall)* ']') |
	(
		BEGIN
		('-' list+=ExpressionCall NEWLINE)+
		END
	)
;

ExpressionCall:
	(('${{' Expression '}}') | {Expression} YAML_STRING) next=ExpressionCall?
;

Expression:
	And
;

And returns Expression:
    Comparison ({And.lhs=current} '&&' rhs=Comparison )*
;

Comparison returns Expression:
    Or ({Comparison.lhs=current} op=('<' | '<=' | '>' | '>=' | '==' | '!=') rhs=Or )*
;

Or returns Expression:
    Not ({Or.lhs=current} '||' rhs=Not)
;

Not returns Expression:
    ('!' Not) | Terminal
;

Terminal returns Expression:
    {Expression} LITERAL | 
    Variable | 
    CallExpression |
    ('(' Expression ')' )
;

Variable returns Expression:
	Identifier ({Variable.lhs=current} rhs=(Array | DotStatement))*
;

Identifier returns Expression:
	name=ID
;

Array returns Expression:
    '[' Expression ']'
;

DotStatement returns Expression:
    '.' Identifier
;

CallExpression returns Expression:
    Identifier '(' (args+=Expression ( ',' args+=Expression )* )? ')'
;

terminal TRIGGER_EVENTS:
	'push' | 'pull_request' | 'workflow_call' | 'workflow_dispatch'
;

terminal LITERAL returns ecore::EString:
	NUMBER |  INT | BOOLEAN | STRING 
;

terminal NUMBER returns ecore::EBigDecimal:
	INT ('.' INT)?
;

terminal BOOLEAN returns ecore::EBoolean:
	'true' | 'false'
;

terminal YAML_STRING returns ecore::EString:
	('"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )+ '"') |
	("'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )+ "'") |
	(!('$' | NEWLINE))+ |
	('|' BEGIN (!('$'))+ END)
;

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation

terminal END: 'synthetic:END';      // decrease indentation

terminal NEWLINE: '\r'? '\n';
