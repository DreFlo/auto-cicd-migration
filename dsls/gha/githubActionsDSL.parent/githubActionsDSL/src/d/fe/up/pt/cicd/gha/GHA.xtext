grammar d.fe.up.pt.cicd.gha.GitHubActions with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://d.fe.up.pt/GHA" as GHA

Workflow returns GHA::Workflow:
	NEWLINE*
	(
		('name' ':' name=Expression NEWLINE+)? &
		('run-name' ':' runName=Expression NEWLINE+)? &
		('on' ':' (
			(triggers+=SimpleTrigger NEWLINE+) |
			('[' triggers+=SimpleTrigger (',' triggers+=SimpleTrigger)* ']' NEWLINE+) |
			(
				NEWLINE+
				BEGIN
				('-' triggers+=SimpleTrigger NEWLINE+)+
				END
				NEWLINE*
			) |
			triggers+=OptionedTrigger+
		)) &
		('permissions' ':' NEWLINE+ BEGIN permissions+=Permission+ END NEWLINE*)? &
		('env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment+ END NEWLINE*)? &
		('defaults' ':' NEWLINE+ BEGIN defaults=Defaults END NEWLINE*)? &
		('concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup END NEWLINE*)? &
		('jobs' ':' NEWLINE+ BEGIN jobs+=Job+ END NEWLINE*)
	)
	(=>END_OF_FILE)
;

Job returns GHA::Job:
	ScriptJob | ReuseWorkflowJob
;

ScriptJob returns GHA::ScriptJob:
	name=YAMLID ':'
		NEWLINE+
		BEGIN
		('name' ':' jobName=Expression NEWLINE+)? &
		('permissions' ':' NEWLINE+ BEGIN permissions+=Permission+ END NEWLINE*)? &
		('needs' ':' 
			(dependsOn+=[GHA::Job] NEWLINE+) |
			('[' dependsOn+=[GHA::Job] (',' dependsOn+=[GHA::Job])* ']' NEWLINE+) |
			(
				NEWLINE+
				BEGIN
				('-' dependsOn+=[GHA::Job] NEWLINE+)+
				END
				NEWLINE*
		))? &
		ifCondition=IfStatement? &
		('runs-on' ':' agent=Agent) &
		('environment' ':' stagingEnvironment=StagingEnvironment)? &
		('concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup END NEWLINE*)? &
		('env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment+ END NEWLINE*)? &
		('defaults' ':' NEWLINE+ BEGIN defaults=Defaults END NEWLINE*)? &
		('steps' ':' NEWLINE+ BEGIN steps+=Step+ END NEWLINE*) &
		('strategy' ':' NEWLINE+ BEGIN strategy=Strategy END NEWLINE*)? &
		('container' ':' container=Container)? &
		('services' ':' NEWLINE+ BEGIN services+=Service+ END NEWLINE*)? &
		('continue-on-error' ':' continueOnError=Expression NEWLINE+)? &
		('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE+)?
		END
		NEWLINE*
;

ReuseWorkflowJob returns GHA::ReuseWorkflowJob:
	name=YAMLID ':'
		NEWLINE+
		BEGIN
		('name' ':' jobName=Expression  NEWLINE+)? &
		('permissions' ':' NEWLINE+ BEGIN permissions+=Permission+ END NEWLINE*)? &
		('needs' ':' 
			(dependsOn+=[GHA::Job] NEWLINE+) |
			('[' dependsOn+=[GHA::Job] (',' dependsOn+=[GHA::Job])* ']' NEWLINE+) |
			(
				NEWLINE+
				BEGIN
				('-' dependsOn+=[GHA::Job] NEWLINE+)+
				END
				NEWLINE*
			)
		)? &
		ifCondition=IfStatement? &
		('runs-on' ':' agent=Agent) &
		('environment' ':' stagingEnvironment=StagingEnvironment)? &
		('concurrency' ':' NEWLINE+ BEGIN concurrencyGroup=ConcurrencyGroup END NEWLINE*)? &
		('env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment+ END NEWLINE*)? &
		('defaults' ':' NEWLINE+ BEGIN defaults=Defaults END NEWLINE*)? &
		('strategy' ':' NEWLINE+ BEGIN strategy=Strategy END NEWLINE*)? &
		('container' ':' container=Container)? &
		('services' ':' NEWLINE+ BEGIN services+=Service+ END NEWLINE*)? &
		('uses' ':' workflowPath=Expression NEWLINE+)? &
		('with' ':' NEWLINE+ BEGIN args+=VariableAssignment+ END NEWLINE*)? &
		('secrets' ':' ((inheritSecrets?='inherit' NEWLINE+) | (NEWLINE+ BEGIN secrets+=VariableAssignment+ END NEWLINE*)))? &
		('continue-on-error' ':' continueOnError=Expression NEWLINE+)? &
		('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE+)?
		END
		NEWLINE*
;

Agent returns GHA::Agent:
	(
		(labels+=Expression NEWLINE+) |
		('[' labels+=Expression (',' labels+=Expression)* ']' NEWLINE+) |
		(
			NEWLINE+
			BEGIN
			('-' labels+=Expression NEWLINE+)+
			END
			NEWLINE*
		)
	) |
	(
		NEWLINE+
		BEGIN
		(
			(
				'labels' ':'
					(labels+=Expression NEWLINE+) |
					('[' labels+=Expression (',' labels+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' labels+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)
			(
				'group' ':' group=Expression NEWLINE+
			)?
		)|
		(
			(
				'group' ':' group=Expression NEWLINE+
			)
			(
				'labels' ':'
					(labels+=Expression NEWLINE+) |
					('[' labels+=Expression (',' labels+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' labels+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)?
		)
		END
		NEWLINE*
	)
;

Step returns GHA::Step:
	'-' BEGIN (Command | Package) END
;

Command returns GHA::Command:
	('id' ':' id=STRING NEWLINE+)? &
	ifCondition=IfStatement? &
	('name' ':' name=Expression NEWLINE+)? &
	('shell' ':' shell=Expression NEWLINE+)? &
	('working-directory' ':' workingDirectory=Expression NEWLINE+)? &
	('env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment+ END NEWLINE*)? &
	('continue-on-error' ':' continueOnError=Expression NEWLINE+)? &
	('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE+)?
	('run' ':' command=Expression NEWLINE+)
;

Package returns GHA::Package:
	('id' ':' id=STRING NEWLINE+)? &
	ifCondition=IfStatement? &
	('name' ':' name=Expression NEWLINE+)? &
	('shell' ':' shell=Expression NEWLINE+)? &
	('working-directory' ':' workingDirectory=Expression NEWLINE+)? &
	('env' ':' NEWLINE+ BEGIN environmentVariables+=VariableAssignment+ END NEWLINE)? &
	('continue-on-error' ':' continueOnError=Expression NEWLINE+)? &
	('timeout-minutes' ':' timeoutMinutes=Expression NEWLINE+)?
	('uses' ':' uses=Expression NEWLINE+) &
	('with' ':'
		NEWLINE+
		BEGIN
		(
			('entrypoint' ':' entrypoint=Expression NEWLINE+) &
			('args' ':' containerArgs=Expression NEWLINE+)?
		) |
		(
			args+=VariableAssignment+
		)
		END
		NEWLINE*
	)?
;

IfStatement returns GHA::Expression:
	'if' ':' Expression NEWLINE+
;

ConcurrencyGroup returns GHA::ConcurrencyGroup:
	('group' ':' name=Expression NEWLINE+) &
	('cancel-in-progress' ':' cancelInProgress=Expression NEWLINE+)?
;

SimpleTrigger returns GHA::Trigger:
	(
		SimpleWorkflowDispatchTrigger | 
		SimpleWorkflowCallTrigger |
		SimplePushTriggerTrigger |
		SimplePullRequestTrigger |
		SimpleStandardEventTrigger
	)
	NEWLINE+
;

SimplePullRequestTrigger returns GHA::PullRequestTrigger:
	{GHA::PullRequestTrigger} 'pull_request' | {GHA::PullRequestTrigger} 'pull_request_target'
;

SimplePushTriggerTrigger returns GHA::PushTrigger:
	{GHA::PushTrigger} 'push'
;

SimpleWorkflowCallTrigger returns GHA::WorkflowCallTrigger:
	{GHA::WorkflowCallTrigger} 'workflow_call'
;

SimpleWorkflowDispatchTrigger returns GHA::WorkflowDispatchTrigger:
	{GHA::WorkflowDispatchTrigger} 'workflow_dispatch'
;

SimpleStandardEventTrigger returns GHA::StandardEventTrigger:
	event=EVENT
;

OptionedTrigger returns GHA::Trigger:
	NEWLINE+
	BEGIN
	(
		OptionedPullRequestTrigger |
		OptionedPushTrigger |
		OptionedScheduleTrigger |
		OptionedStandardEventTrigger |
		OptionedWorkflowCallTrigger |
		OptionedWorkflowRunTrigger |
		OptionedWorkflowDispatchTrigger
	)
	END
	NEWLINE*
;

OptionedStandardEventTrigger returns GHA::StandardEventTrigger:
	event=EVENT ':'
		NEWLINE+
		BEGIN
		'types' ':' 
			(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+) |
			('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE+) |
			(
				NEWLINE+
				BEGIN
				('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+)+
				END
				NEWLINE*
			)
		END
		NEWLINE*
;

OptionedWorkflowRunTrigger returns GHA::WorkflowRunTrigger:
	'workflow_run' ':'
		NEWLINE+
		BEGIN
		('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
			(branches+=Expression NEWLINE+) |
			('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE+) |
			(
				NEWLINE+
				BEGIN
				('-' branches+=Expression NEWLINE+)+
				END
				NEWLINE*
			)
		END
		NEWLINE*
;

OptionedPullRequestTrigger returns GHA::PullRequestTrigger:
	{GHA::PullRequestTrigger} ('pull_request' | 'pull_request_target') ':' 
	(
		NEWLINE+
		BEGIN
		(
			(
				'types' ':' 
					(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+) |
					('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+)+
						END
						NEWLINE*
					)
			)
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE+) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' branches+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)? &
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE+) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' paths+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)?
		) |
		(
			
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE+) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' branches+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)
			(
				'types' ':' 
					(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+) |
					('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+)+
						END
						NEWLINE*
					)
			)? &
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE+) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' paths+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)?
		) |
		(
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE+) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' paths+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)
			(
				'types' ':' 
					(eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+) |
					('[' eventTypes+=WEBHOOK_ACTIVITY_TYPE (',' eventTypes+=WEBHOOK_ACTIVITY_TYPE)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' eventTypes+=WEBHOOK_ACTIVITY_TYPE NEWLINE+)+
						END
						NEWLINE*
					)
			)? &
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE+) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' branches+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)?
		)
		END	
		NEWLINE*
	)
;

OptionedPushTrigger returns GHA::PushTrigger:
	{GHA::PushTrigger} 'push' ':'
	(
		NEWLINE+
		BEGIN
		(
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE+) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' branches+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE+) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' paths+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)? &
			(
				('tags' | ignoreSpecifiedTags?='tags-ignore')  ':'
					(tags+=Expression NEWLINE+) |
					('[' tags+=Expression (',' tags+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' tags+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)?
		) |
		(
			
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE+) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' paths+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE+) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' branches+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)? &
			(
				('tags' | ignoreSpecifiedTags?='tags-ignore')  ':'
					(tags+=Expression NEWLINE+) |
					('[' tags+=Expression (',' tags+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' tags+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)?
		) |
		(
			(
				('tags' | ignoreSpecifiedTags?='tags-ignore')  ':'
					(tags+=Expression NEWLINE+) |
					('[' tags+=Expression (',' tags+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' tags+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)
			(
				('branches' | ignoreSpecifiedBranches?='branches-ignore')  ':'
					(branches+=Expression NEWLINE+) |
					('[' branches+=Expression (',' branches+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' branches+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)? &
			(
				('paths' | ignoreSpecifiedPaths?='paths-ignore')  ':'
					(paths+=Expression NEWLINE+) |
					('[' paths+=Expression (',' paths+=Expression)* ']' NEWLINE+) |
					(
						NEWLINE+
						BEGIN
						('-' paths+=Expression NEWLINE+)+
						END
						NEWLINE*
					)
			)?
		)
		END
		NEWLINE*
	)
;

OptionedScheduleTrigger returns GHA::ScheduleTrigger:
	'schedule' ':'
	(
		NEWLINE+
		BEGIN
		(
			'-' 'cron' ':' crons+=Expression NEWLINE+
		)+
		END
		NEWLINE*
	)
;

OptionedWorkflowCallTrigger returns GHA::WorkflowCallTrigger:
	{GHA::WorkflowCallTrigger} 'workflow_call' ':'
	(
		NEWLINE+
		BEGIN
		(
			(
				'inputs' ':' NEWLINE+ BEGIN inputs+=Input+ END NEWLINE*
			)
			(
				'outputs' ':' NEWLINE+ BEGIN outputs+=Output+ END NEWLINE*
			)? &
			(
				'secrets' ':' NEWLINE+ BEGIN secrets+=Secret+ END NEWLINE*
			)?
		) |
		(
			(
				'outputs' ':' NEWLINE+ BEGIN outputs+=Output+ END NEWLINE*
			)
			(
				'inputs' ':' NEWLINE+ BEGIN inputs+=Input+ END NEWLINE*
			)? &
			(
				'secrets' ':' NEWLINE+ BEGIN secrets+=Secret+ END NEWLINE*
			)?
		) |
		(
			(
				'secrets' ':' NEWLINE+ BEGIN secrets+=Secret+ END NEWLINE*
			)
			(
				'inputs' ':' NEWLINE+ BEGIN inputs+=Input+ END NEWLINE*
			)? &
			(
				'outputs' ':' NEWLINE+ BEGIN outputs+=Output+ END NEWLINE*
			)?
			
		)
		END
		NEWLINE*
	)
;

OptionedWorkflowDispatchTrigger returns GHA::WorkflowDispatchTrigger:
	{GHA::WorkflowDispatchTrigger} 'workflow_dispatch' ':'
		NEWLINE+
		BEGIN
		('inputs' ':' NEWLINE+ BEGIN inputs+=Input+ END NEWLINE*)
		END
		NEWLINE*
;

Input returns GHA::Input:
	id=YAMLID ':'
		NEWLINE+
		BEGIN
		('description' ':' description=Expression NEWLINE+)? &
		('default' ':' default=Expression NEWLINE+)? &
		('required' ':' isRequired=Expression NEWLINE+)? &
		('type' ':' type=TYPE NEWLINE+) &
		(
			'options' ':'
				(options+=STRING NEWLINE+) |
				('[' options+=STRING (',' options+=STRING)* ']' NEWLINE+) |
				(
					NEWLINE+
					BEGIN
					('-' options+=STRING NEWLINE+)+
					END
					NEWLINE*
				)
		)
		END
		NEWLINE*
;

Output returns GHA::Output:
	id=YAMLID ':'
		NEWLINE+
		BEGIN
		('description' ':' description=Expression NEWLINE+)? &
		('value' ':' value=Expression NEWLINE+)
		END
		NEWLINE*
;

Secret returns GHA::Secret:
	id=YAMLID ':'
		NEWLINE+
		BEGIN
		(
			('description' ':' description=Expression NEWLINE+) &
			('required' ':' isRequired=Expression NEWLINE+)?
		) |
		(
			('required' ':' isRequired=Expression NEWLINE+) &
			('description' ':' description=Expression NEWLINE+)?
		)
		END
		NEWLINE*
;

Permission returns GHA::Permission:
	key=PERMISSION_SCOPE ':' value=PERMISSION_VALUE NEWLINE+
;

Defaults returns GHA::Defaults:
	'run' ':'
		NEWLINE+
		BEGIN
		(
			('shell' ':' shell=Expression NEWLINE+) &
			('working-directory' ':' workingDirectory=Expression NEWLINE+)?
		)
		END
		NEWLINE*
;

StagingEnvironment returns GHA::StagingEnvironment:
	(name=Expression NEWLINE+) |
	(
		NEWLINE+
		BEGIN
		('name' ':' name=Expression NEWLINE+)
		('url' ':' url=Expression NEWLINE+)?
		END
		NEWLINE*
	)
;

Strategy returns GHA::Matrix:
	(
		'matrix' ':'
			NEWLINE+
			BEGIN
			('includes' ':' NEWLINE+ BEGIN includes+=MatrixCombination END NEWLINE*)? &
			('exludes' ':' NEWLINE+ BEGIN excludes+=MatrixCombination END NEWLINE*)? &
			(BEGIN axes+=MatrixAxis+ END NEWLINE*)
			END
			NEWLINE*
	) &
	('fail-fast' ':' failFast=Expression NEWLINE+)? &
	('max-paralell' ':' maxParallel=Expression NEWLINE+)?
;

MatrixAxis returns GHA::MatrixAxis:
	name=YAMLID ':' 
	(
		(cells+=Expression NEWLINE+) |
		('[' cells+=Expression (',' cells+=Expression)* ']' NEWLINE+) |
		(
			NEWLINE+
			BEGIN
			('-' cells+=Expression NEWLINE+)+
			END
			NEWLINE*
		)
	)
;

MatrixCombination returns GHA::MatrixCombination:
	'-' BEGIN entries+=VariableAssignment END
;

Container returns GHA::Container:
	(
		image=Expression NEWLINE+
	) |
	(
		NEWLINE+
		BEGIN
		('image' ':' image=Expression NEWLINE+) &
		('env' ':' BEGIN environmentVariables+=VariableAssignment+ END NEWLINE*)? &
		('ports' ':' 
			(ports+=Expression NEWLINE+) |
			('[' ports+=Expression (',' ports+=Expression)* ']' NEWLINE+) |
			(
				NEWLINE+
				BEGIN
				('-' ports+=Expression NEWLINE+)+
				END
				NEWLINE*
			)
		)? &
		('volumes' ':'
			(volumes+=Expression NEWLINE+) |
			('[' volumes+=Expression (',' volumes+=Expression)* ']' NEWLINE+) |
			(
				NEWLINE*
				BEGIN
				('-' volumes+=Expression NEWLINE*)+
				END
				NEWLINE*
			)
		)? &
		('options' ':' options=Expression NEWLINE+)? &
		(
			'credentials' ':'
				NEWLINE+
				BEGIN
				('username' ':' username=Expression NEWLINE+) &
				('password' ':' password=Expression NEWLINE+)
				END
				NEWLINE*
		)?
		END
		NEWLINE*
	)
;

Service returns GHA::Service:
	key=YAMLID ':'
		NEWLINE+
		BEGIN
		value=Container
		END
		NEWLINE*
;

VariableAssignment returns GHA::VariableAssignment:
	key=YAMLID ':' value=Expression NEWLINE+
;

Expression returns GHA::Expression:
	Concat
;

Concat returns GHA::Expression:
	ConcatExpression ({GHA::Concat.lhs=current}	rhs=ConcatExpression)*
;

ConcatExpression returns GHA::Expression:
	BracketedExpression | UnbracketedLiteral
;

BracketedExpression returns GHA::Expression:
	'${{' InsideBracketsExpression '}}'
;

InsideBracketsExpression returns GHA::Expression:
	Or
;

UnbracketedLiteral returns GHA::Literal:
	StringLiteral | IntegerLiteral | DoubleLiteral | BooleanLiteral
;

StringLiteral returns GHA::StringLiteral:
	value=YAMLString
;

IntegerLiteral returns GHA::IntegerLiteral: 
	value=INT
;

DoubleLiteral returns GHA::DoubleLiteral:
	value=DOUBLE
;

BooleanLiteral returns GHA::BooleanLiteral:
	value?=BOOLEAN
;

Or returns GHA::Expression:
    And ({GHA::Or.lhs=current} '||' rhs=And)*
;


And returns GHA::Expression:
    Equality ({GHA::And.lhs=current} '&&' rhs=Equality )*
;

Equality returns GHA::Expression:
	Comparison ({GHA::Equality.lhs=current} op=EQUALITY_OP rhs=Comparison )*
;

Comparison returns GHA::Expression:
	UnaryOp ({GHA::Comparison.lhs=current} op=COMPARISON_OP rhs=UnaryOp )*
;

UnaryOp returns GHA::Expression:
	Not | Blank
;

Not returns GHA::Not:
	'!' childExpr=VariableDereference
;

Blank returns GHA::Expression:
	VariableDereference
;

VariableDereference returns GHA::Expression:
	Primary ({GHA::VariableDereference.variable=current} (('.' property=ID) | ('[' ('"' property=ID '"') | ("'" property=ID '"') ']')))*
;

Primary returns GHA::Expression:
    ('(' InsideBracketsExpression ')') | CallExpression | Atomic
;

Atomic returns GHA::Value:
	({GHA::GitHubContext} context=CONTEXT) |
	({GHA::Variable} name=ID) | 
	({GHA::IntegerLiteral} value=INT) |
	({GHA::DoubleLiteral} value=DOUBLE) |
	({GHA::BooleanLiteral} value=BOOLEAN) |
	({GHA::StringLiteral} value=STRING)	
;

CallExpression returns GHA::BuiltInFunctionCall:
	Contains |
	StartsWith |
	EndsWith |
	Format |
	Join |
	ToJSON |
	FromJSON |
	HashFiles |
	Success |
	Always |
	Failure |
	Cancelled
;

Contains returns GHA::Contains:
	'contains' '(' search=InsideBracketsExpression ',' item=InsideBracketsExpression ')'
;

StartsWith returns GHA::StartsWith:
	'startsWith' '(' searchString=InsideBracketsExpression ',' searchValue=InsideBracketsExpression ')'
;

EndsWith returns GHA::EndsWith:
	'endsWith' '(' searchString=InsideBracketsExpression ',' searchValue=InsideBracketsExpression ')'
;

Format returns GHA::Format:
	'format' '(' string=InsideBracketsExpression (',' replaceValues+=InsideBracketsExpression)* ')'
;

Join returns GHA::Join:
	'join' '(' array=InsideBracketsExpression (',' sep=InsideBracketsExpression)? ')'
;

ToJSON returns GHA::ToJSON:
	'toJSON' '(' value=InsideBracketsExpression ')'
;

FromJSON returns GHA::FromJSON:
	'fromJSON' '(' value=InsideBracketsExpression ')'
;

HashFiles returns GHA::HashFiles:
	'hashFiles' '(' path=InsideBracketsExpression ')'
;

Success returns GHA::Success:
	{GHA::Success} 'success' '(' ')'
;

Always returns GHA::Always:
	{GHA::Always} 'always' '(' ')'
;

Cancelled returns GHA::Cancelled:
	{GHA::Cancelled} 'cancelled' '(' ')'
;

Failure returns GHA::Failure:
	{GHA::Failure} 'failure' '(' ')'
;

enum COMPARISON_OP returns GHA::COMPARISON_OPS:
	GT='>' |
	GTE='>=' |
	LT='<' |
	LTE='<='
;

enum EQUALITY_OP returns GHA::EQUALITY_OPS:
	EQUALS='==' |
	NOT_EQUALS='!='
;

enum CONTEXT returns GHA::CONTEXTS:
	GITHUB='github' |
	ENV='env' |
	VARS='vars' |
	JOB='job' |
	JOBS='jobs' |
	STEPS='steps' |
	RUNNER='runner' |
	SECRETS='secrets' |
	STRATEGY='strategy' |
	MATRIX='matrix' |
	NEEDS='needs' |
	INPUTS='inputs'
;

enum TYPE returns GHA::INPUT_TYPES:
	BOOLEAN='boolean' |
	NUMBER='number' |
	STRING='string' |
	ENVIRONMENT='environment' |
	CHOICE='choice'
;

enum WEBHOOK_ACTIVITY_TYPE returns GHA::WEBHOOK_ACTIVITY_TYPES:
	ASSIGNED='assigned' |
	AUTO_MERGE_DISABLED='auto_merge_disabled' |
	AUTO_MERGE_ENABLED='auto_merge_enabled' |
	CLOSED='closed' |
	CONVERTED_TO_DRAFT='converted_to_draft' |
	EDITED='edited' |
	LABELED='labeled' |
	LOCKED='locked' |
	OPENED='opened' |
	READY_FOR_REVIEW='ready_for_review' |
	REOPENED='reopened' |
	REVIEW_REQUEST_REMOVED='review_request_removed' |
	REVIEW_REQUESTED='review_requested' |
	SYNCHRONIZE='synchronize' |
	UNASSIGNED='unassigned' |
	UNLABELED='unlabeled' |
	UNLOCKED='unlocked' |
	CREATED='created' |
	DELETED='deleted'
;

enum EVENT returns GHA::EVENTS:
	BRANCH_PROTECTION_RULE='branch_protection_rule' |
	CHECK_RUN='check_run' |
	CHECK_SUITE='check_suite' |
	CREATE='create' |
	DELETE='delete' |
	DEPLOYMENT='deployment' |
	DEPLOYMENT_STATUS='deployment_status' |
	DISCUSSION='discussion' |
	FORK='fork' |
	GOLLUM='gollum' |
	ISSUES='issues' |
	LABEL='label' |
	MERGE_GROUP='merge_group' |
	MILESTONE='milestone' |
	PAGE_BUILD='page_build' |
	PROJECT='project' |
	PROJECT_CARD='project_card' |
	PROJECT_COLUMN='project_column' |
	PUBLIC='public' |
	PULL_REQUEST_REVIEW='pull_request_review' |
	PULL_REQUEST_REVIEW_COMMENT='pull_request_review_comment' |
	REGISTRY_PACKAGE='registry_package' |
	RELEASE='release' |
	REPOSITORY_DISPATCH='repository_dispatch' |
	WATCH='watch' |
	STATUS='status'
;

enum PERMISSION_SCOPE returns GHA::PERMISSION_SCOPES:
	ACTIONS='actions' | 
	CHECKS='checks' | 
	CONTENTS='contents' | 
	DEPLOYMENTS='deployments' | 
	DISCUSSIONS='discussions' | 
	ID_TOKEN='id-token' |
	ISSUES='issues' |
	PACKAGES='packages' |
	PAGES='pages' |
	PULL_REQUESTS='pull_requests' |
	REPOSITORY_PROJECTS='repository_projects' |
	SECURITY_EVENTS='security_events' |
	STATUSES='statuses'
;

enum PERMISSION_VALUE returns GHA::PERMISSIONS:
	READ='read' |
	WRITE='write' |
	NONE='none'
;

YAMLID returns ecore::EString:
	('"' ID '"') |
	("'" ID "'") |
	ID
;

YAMLString returns ecore::EString:
	STRING |
	UNQUOTED_STRING
;

terminal DOUBLE returns ecore::EDoubleObject:
	INT '.' INT
;

terminal BOOLEAN returns ecore::EBooleanObject:
	'true' | 'false'
;

terminal UNQUOTED_STRING returns ecore::EString:
	(('a..z'|'A'..'Z'|'_'|'~') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'@'|'`'|'~')*) |
	('|' ('+'|'-')? NEWLINE BEGIN ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'@'|'`'|NEWLINE)* END)
;

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation

terminal END: 'synthetic:END';      // decrease indentation

terminal NEWLINE: '\r'? '\n';

terminal END_OF_FILE: EOF;
