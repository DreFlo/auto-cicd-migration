/**
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.gha.formatting2;

import GHA.Agent;
import GHA.ConcurrencyGroup;
import GHA.Container;
import GHA.Defaults;
import GHA.Expression;
import GHA.Job;
import GHA.Matrix;
import GHA.PERMISSIONS;
import GHA.PERMISSION_SCOPES;
import GHA.ScriptJob;
import GHA.StagingEnvironment;
import GHA.Step;
import GHA.Trigger;
import GHA.Workflow;
import com.google.inject.Inject;
import d.fe.up.pt.cicd.gha.services.GitHubActionsGrammarAccess;
import java.util.Arrays;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class GitHubActionsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private GitHubActionsGrammarAccess _gitHubActionsGrammarAccess;

  protected void _format(final Workflow workflow, @Extension final IFormattableDocument document) {
    document.<Expression>format(workflow.getName());
    document.<Expression>format(workflow.getRunName());
    EList<Trigger> _triggers = workflow.getTriggers();
    for (final Trigger trigger : _triggers) {
      document.<Trigger>format(trigger);
    }
    EMap<PERMISSION_SCOPES, PERMISSIONS> _permissions = workflow.getPermissions();
    for (final Map.Entry<PERMISSION_SCOPES, PERMISSIONS> permission : _permissions) {
      document.<Map.Entry<PERMISSION_SCOPES, PERMISSIONS>>format(permission);
    }
    EMap<String, Expression> _environmentVariables = workflow.getEnvironmentVariables();
    for (final Map.Entry<String, Expression> variableAssignment : _environmentVariables) {
      document.<Map.Entry<String, Expression>>format(variableAssignment);
    }
    document.<Defaults>format(workflow.getDefaults());
    document.<ConcurrencyGroup>format(workflow.getConcurrencyGroup());
    EList<Job> _jobs = workflow.getJobs();
    for (final Job job : _jobs) {
      document.<Job>format(job);
    }
  }

  protected void _format(final ScriptJob scriptJob, @Extension final IFormattableDocument document) {
    document.<Expression>format(scriptJob.getJobName());
    EMap<PERMISSION_SCOPES, PERMISSIONS> _permissions = scriptJob.getPermissions();
    for (final Map.Entry<PERMISSION_SCOPES, PERMISSIONS> permission : _permissions) {
      document.<Map.Entry<PERMISSION_SCOPES, PERMISSIONS>>format(permission);
    }
    document.<Expression>format(scriptJob.getIfCondition());
    document.<Agent>format(scriptJob.getAgent());
    document.<StagingEnvironment>format(scriptJob.getStagingEnvironment());
    document.<ConcurrencyGroup>format(scriptJob.getConcurrencyGroup());
    EMap<String, Expression> _environmentVariables = scriptJob.getEnvironmentVariables();
    for (final Map.Entry<String, Expression> variableAssignment : _environmentVariables) {
      document.<Map.Entry<String, Expression>>format(variableAssignment);
    }
    document.<Defaults>format(scriptJob.getDefaults());
    EList<Step> _steps = scriptJob.getSteps();
    for (final Step step : _steps) {
      document.<Step>format(step);
    }
    document.<Matrix>format(scriptJob.getStrategy());
    document.<Container>format(scriptJob.getContainer());
    EMap<String, Container> _services = scriptJob.getServices();
    for (final Map.Entry<String, Container> service : _services) {
      document.<Map.Entry<String, Container>>format(service);
    }
    document.<Expression>format(scriptJob.getContinueOnError());
    document.<Expression>format(scriptJob.getTimeoutMinutes());
  }

  public void format(final Object scriptJob, final IFormattableDocument document) {
    if (scriptJob instanceof XtextResource) {
      _format((XtextResource)scriptJob, document);
      return;
    } else if (scriptJob instanceof ScriptJob) {
      _format((ScriptJob)scriptJob, document);
      return;
    } else if (scriptJob instanceof Workflow) {
      _format((Workflow)scriptJob, document);
      return;
    } else if (scriptJob instanceof EObject) {
      _format((EObject)scriptJob, document);
      return;
    } else if (scriptJob == null) {
      _format((Void)null, document);
      return;
    } else if (scriptJob != null) {
      _format(scriptJob, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(scriptJob, document).toString());
    }
  }
}
