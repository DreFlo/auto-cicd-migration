/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import d.fe.up.pt.cicd.transformationsdsl.dsl.ide.contentassist.antlr.internal.InternalDSLParser;
import d.fe.up.pt.cicd.transformationsdsl.dsl.services.DSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getMODEL_NAMESAccess().getAlternatives(), "rule__MODEL_NAMES__Alternatives");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup(), "rule__TransformationSet__Group__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_3(), "rule__TransformationSet__Group_3__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_3_3(), "rule__TransformationSet__Group_3_3__0");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getGroup(), "rule__ChangePluginTransformation__Group__0");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getGroup_8(), "rule__ChangePluginTransformation__Group_8__0");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getGroup_8_3(), "rule__ChangePluginTransformation__Group_8_3__0");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getGroup(), "rule__StringToStringMapEntry__Group__0");
			builder.put(grammarAccess.getTransformationSetAccess().getTransformationsAssignment_3_2(), "rule__TransformationSet__TransformationsAssignment_3_2");
			builder.put(grammarAccess.getTransformationSetAccess().getTransformationsAssignment_3_3_1(), "rule__TransformationSet__TransformationsAssignment_3_3_1");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getModelAssignment_3(), "rule__ChangePluginTransformation__ModelAssignment_3");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getVersionAssignment_5(), "rule__ChangePluginTransformation__VersionAssignment_5");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getNameAssignment_7(), "rule__ChangePluginTransformation__NameAssignment_7");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getArgsAssignment_8_2(), "rule__ChangePluginTransformation__ArgsAssignment_8_2");
			builder.put(grammarAccess.getChangePluginTransformationAccess().getArgsAssignment_8_3_1(), "rule__ChangePluginTransformation__ArgsAssignment_8_3_1");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getKeyAssignment_3(), "rule__StringToStringMapEntry__KeyAssignment_3");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getValueAssignment_5(), "rule__StringToStringMapEntry__ValueAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLGrammarAccess grammarAccess;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
