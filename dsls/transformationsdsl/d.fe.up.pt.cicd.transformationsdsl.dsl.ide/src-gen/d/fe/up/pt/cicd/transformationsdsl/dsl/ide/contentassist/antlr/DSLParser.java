/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import d.fe.up.pt.cicd.transformationsdsl.dsl.ide.contentassist.antlr.internal.InternalDSLParser;
import d.fe.up.pt.cicd.transformationsdsl.dsl.services.DSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTSMTransformationAccess().getAlternatives(), "rule__TSMTransformation__Alternatives");
			builder.put(grammarAccess.getTIMTransformationAccess().getAlternatives(), "rule__TIMTransformation__Alternatives");
			builder.put(grammarAccess.getGHAAccess().getAlternatives(), "rule__GHA__Alternatives");
			builder.put(grammarAccess.getCICDAccess().getAlternatives(), "rule__CICD__Alternatives");
			builder.put(grammarAccess.getCIRCLE_CIAccess().getAlternatives(), "rule__CIRCLE_CI__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getMODELSAccess().getAlternatives(), "rule__MODELS__Alternatives");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup(), "rule__TransformationSet__Group__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_1(), "rule__TransformationSet__Group_1__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_2(), "rule__TransformationSet__Group_2__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_3(), "rule__TransformationSet__Group_3__0");
			builder.put(grammarAccess.getATLScriptAccess().getGroup(), "rule__ATLScript__Group__0");
			builder.put(grammarAccess.getChangePluginAccess().getGroup(), "rule__ChangePlugin__Group__0");
			builder.put(grammarAccess.getChangePluginAccess().getGroup_5(), "rule__ChangePlugin__Group_5__0");
			builder.put(grammarAccess.getChangePluginAccess().getGroup_5_3(), "rule__ChangePlugin__Group_5_3__0");
			builder.put(grammarAccess.getChangeAgentLabelAccess().getGroup(), "rule__ChangeAgentLabel__Group__0");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getGroup(), "rule__ReplaceAgentLabels__Group__0");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getGroup_2(), "rule__ReplaceAgentLabels__Group_2__0");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getGroup_5(), "rule__ReplaceAgentLabels__Group_5__0");
			builder.put(grammarAccess.getCircleCITransformationAccess().getGroup(), "rule__CircleCITransformation__Group__0");
			builder.put(grammarAccess.getSetCircleCIVersionAccess().getGroup(), "rule__SetCircleCIVersion__Group__0");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getGroup(), "rule__StringToStringMapEntry__Group__0");
			builder.put(grammarAccess.getTransformationSetAccess().getPreTIMAssignment_1_3(), "rule__TransformationSet__PreTIMAssignment_1_3");
			builder.put(grammarAccess.getTransformationSetAccess().getOnTIMAssignment_2_3(), "rule__TransformationSet__OnTIMAssignment_2_3");
			builder.put(grammarAccess.getTransformationSetAccess().getPostTIMAssignment_3_3(), "rule__TransformationSet__PostTIMAssignment_3_3");
			builder.put(grammarAccess.getATLScriptAccess().getModelAssignment_3(), "rule__ATLScript__ModelAssignment_3");
			builder.put(grammarAccess.getATLScriptAccess().getScriptAssignment_5(), "rule__ATLScript__ScriptAssignment_5");
			builder.put(grammarAccess.getChangePluginAccess().getNameAssignment_2(), "rule__ChangePlugin__NameAssignment_2");
			builder.put(grammarAccess.getChangePluginAccess().getVersionAssignment_4(), "rule__ChangePlugin__VersionAssignment_4");
			builder.put(grammarAccess.getChangePluginAccess().getArgsAssignment_5_2(), "rule__ChangePlugin__ArgsAssignment_5_2");
			builder.put(grammarAccess.getChangePluginAccess().getArgsAssignment_5_3_1(), "rule__ChangePlugin__ArgsAssignment_5_3_1");
			builder.put(grammarAccess.getChangeAgentLabelAccess().getNameAssignment_2(), "rule__ChangeAgentLabel__NameAssignment_2");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getConditionAssignment_2_1(), "rule__ReplaceAgentLabels__ConditionAssignment_2_1");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getLabelsAssignment_4(), "rule__ReplaceAgentLabels__LabelsAssignment_4");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getLabelsAssignment_5_1(), "rule__ReplaceAgentLabels__LabelsAssignment_5_1");
			builder.put(grammarAccess.getSetCircleCIVersionAccess().getVersionAssignment_3(), "rule__SetCircleCIVersion__VersionAssignment_3");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getKeyAssignment_0(), "rule__StringToStringMapEntry__KeyAssignment_0");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getValueAssignment_2(), "rule__StringToStringMapEntry__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLGrammarAccess grammarAccess;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
