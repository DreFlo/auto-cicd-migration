/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import d.fe.up.pt.cicd.transformationsdsl.dsl.ide.contentassist.antlr.internal.InternalDSLParser;
import d.fe.up.pt.cicd.transformationsdsl.dsl.services.DSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTSMTransformationAccess().getAlternatives(), "rule__TSMTransformation__Alternatives");
			builder.put(grammarAccess.getTIMTransformationAccess().getAlternatives(), "rule__TIMTransformation__Alternatives");
			builder.put(grammarAccess.getStepAccess().getAlternatives(), "rule__Step__Alternatives");
			builder.put(grammarAccess.getNonConditionalStepAccess().getAlternatives_0(), "rule__NonConditionalStep__Alternatives_0");
			builder.put(grammarAccess.getCircleCITransformationAccess().getAlternatives_2(), "rule__CircleCITransformation__Alternatives_2");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getCACHE_MODEAccess().getAlternatives(), "rule__CACHE_MODE__Alternatives");
			builder.put(grammarAccess.getMODELSAccess().getAlternatives(), "rule__MODELS__Alternatives");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup(), "rule__TransformationSet__Group__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_1(), "rule__TransformationSet__Group_1__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_2(), "rule__TransformationSet__Group_2__0");
			builder.put(grammarAccess.getTransformationSetAccess().getGroup_3(), "rule__TransformationSet__Group_3__0");
			builder.put(grammarAccess.getATLScriptAccess().getGroup(), "rule__ATLScript__Group__0");
			builder.put(grammarAccess.getSetImageAccess().getGroup(), "rule__SetImage__Group__0");
			builder.put(grammarAccess.getAddPortsAccess().getGroup(), "rule__AddPorts__Group__0");
			builder.put(grammarAccess.getAddPortsAccess().getGroup_3(), "rule__AddPorts__Group_3__0");
			builder.put(grammarAccess.getAddPortsAccess().getGroup_7(), "rule__AddPorts__Group_7__0");
			builder.put(grammarAccess.getSetOptionsAccess().getGroup(), "rule__SetOptions__Group__0");
			builder.put(grammarAccess.getSetOptionsAccess().getGroup_3(), "rule__SetOptions__Group_3__0");
			builder.put(grammarAccess.getChangePluginAccess().getGroup(), "rule__ChangePlugin__Group__0");
			builder.put(grammarAccess.getChangePluginAccess().getGroup_5(), "rule__ChangePlugin__Group_5__0");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getGroup(), "rule__ReplaceAgentLabels__Group__0");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getGroup_2(), "rule__ReplaceAgentLabels__Group_2__0");
			builder.put(grammarAccess.getAddTriggerAccess().getGroup(), "rule__AddTrigger__Group__0");
			builder.put(grammarAccess.getAddTriggerAccess().getGroup_2(), "rule__AddTrigger__Group_2__0");
			builder.put(grammarAccess.getManualTriggerAccess().getGroup(), "rule__ManualTrigger__Group__0");
			builder.put(grammarAccess.getDeleteStepAccess().getGroup(), "rule__DeleteStep__Group__0");
			builder.put(grammarAccess.getAddStepAccess().getGroup(), "rule__AddStep__Group__0");
			builder.put(grammarAccess.getReplaceStepAccess().getGroup(), "rule__ReplaceStep__Group__0");
			builder.put(grammarAccess.getConditionalStepAccess().getGroup(), "rule__ConditionalStep__Group__0");
			builder.put(grammarAccess.getConditionalStepAccess().getGroup_6(), "rule__ConditionalStep__Group_6__0");
			builder.put(grammarAccess.getNonConditionalStepAccess().getGroup(), "rule__NonConditionalStep__Group__0");
			builder.put(grammarAccess.getNonConditionalStepAccess().getGroup_0_0(), "rule__NonConditionalStep__Group_0_0__0");
			builder.put(grammarAccess.getNonConditionalStepAccess().getGroup_0_1(), "rule__NonConditionalStep__Group_0_1__0");
			builder.put(grammarAccess.getNonConditionalStepAccess().getGroup_0_1_7(), "rule__NonConditionalStep__Group_0_1_7__0");
			builder.put(grammarAccess.getNonConditionalStepAccess().getGroup_0_2(), "rule__NonConditionalStep__Group_0_2__0");
			builder.put(grammarAccess.getNonConditionalStepAccess().getGroup_0_2_3(), "rule__NonConditionalStep__Group_0_2_3__0");
			builder.put(grammarAccess.getNonConditionalStepAccess().getGroup_1(), "rule__NonConditionalStep__Group_1__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getCircleCITransformationAccess().getGroup(), "rule__CircleCITransformation__Group__0");
			builder.put(grammarAccess.getSetCircleCIVersionAccess().getGroup(), "rule__SetCircleCIVersion__Group__0");
			builder.put(grammarAccess.getAddExecutorAccess().getGroup(), "rule__AddExecutor__Group__0");
			builder.put(grammarAccess.getAddOrbReferenceExecutorAccess().getGroup(), "rule__AddOrbReferenceExecutor__Group__0");
			builder.put(grammarAccess.getSelectWorkflowAccess().getGroup(), "rule__SelectWorkflow__Group__0");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getGroup(), "rule__StringToStringMapEntry__Group__0");
			builder.put(grammarAccess.getTransformationSetAccess().getPreTIMAssignment_1_3(), "rule__TransformationSet__PreTIMAssignment_1_3");
			builder.put(grammarAccess.getTransformationSetAccess().getOnTIMAssignment_2_3(), "rule__TransformationSet__OnTIMAssignment_2_3");
			builder.put(grammarAccess.getTransformationSetAccess().getPostTIMAssignment_3_3(), "rule__TransformationSet__PostTIMAssignment_3_3");
			builder.put(grammarAccess.getATLScriptAccess().getModelAssignment_3(), "rule__ATLScript__ModelAssignment_3");
			builder.put(grammarAccess.getATLScriptAccess().getScriptAssignment_5(), "rule__ATLScript__ScriptAssignment_5");
			builder.put(grammarAccess.getSetImageAccess().getConditionAssignment_4(), "rule__SetImage__ConditionAssignment_4");
			builder.put(grammarAccess.getSetImageAccess().getImageAssignment_6(), "rule__SetImage__ImageAssignment_6");
			builder.put(grammarAccess.getAddPortsAccess().getConditionAssignment_3_1(), "rule__AddPorts__ConditionAssignment_3_1");
			builder.put(grammarAccess.getAddPortsAccess().getPortsAssignment_6(), "rule__AddPorts__PortsAssignment_6");
			builder.put(grammarAccess.getAddPortsAccess().getPortsAssignment_7_1(), "rule__AddPorts__PortsAssignment_7_1");
			builder.put(grammarAccess.getSetOptionsAccess().getConditionAssignment_3_1(), "rule__SetOptions__ConditionAssignment_3_1");
			builder.put(grammarAccess.getSetOptionsAccess().getOptionsAssignment_5(), "rule__SetOptions__OptionsAssignment_5");
			builder.put(grammarAccess.getChangePluginAccess().getNameAssignment_2(), "rule__ChangePlugin__NameAssignment_2");
			builder.put(grammarAccess.getChangePluginAccess().getVersionAssignment_4(), "rule__ChangePlugin__VersionAssignment_4");
			builder.put(grammarAccess.getChangePluginAccess().getArgsAssignment_5_2(), "rule__ChangePlugin__ArgsAssignment_5_2");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getConditionAssignment_2_1(), "rule__ReplaceAgentLabels__ConditionAssignment_2_1");
			builder.put(grammarAccess.getReplaceAgentLabelsAccess().getLabelsAssignment_4(), "rule__ReplaceAgentLabels__LabelsAssignment_4");
			builder.put(grammarAccess.getAddTriggerAccess().getConditionAssignment_2_1(), "rule__AddTrigger__ConditionAssignment_2_1");
			builder.put(grammarAccess.getAddTriggerAccess().getTriggerAssignment_3(), "rule__AddTrigger__TriggerAssignment_3");
			builder.put(grammarAccess.getDeleteStepAccess().getIndexAssignment_2(), "rule__DeleteStep__IndexAssignment_2");
			builder.put(grammarAccess.getDeleteStepAccess().getJobAssignment_4(), "rule__DeleteStep__JobAssignment_4");
			builder.put(grammarAccess.getAddStepAccess().getIndexAssignment_2(), "rule__AddStep__IndexAssignment_2");
			builder.put(grammarAccess.getAddStepAccess().getJobAssignment_4(), "rule__AddStep__JobAssignment_4");
			builder.put(grammarAccess.getAddStepAccess().getStepAssignment_6(), "rule__AddStep__StepAssignment_6");
			builder.put(grammarAccess.getReplaceStepAccess().getIndexAssignment_2(), "rule__ReplaceStep__IndexAssignment_2");
			builder.put(grammarAccess.getReplaceStepAccess().getJobAssignment_4(), "rule__ReplaceStep__JobAssignment_4");
			builder.put(grammarAccess.getReplaceStepAccess().getStepAssignment_6(), "rule__ReplaceStep__StepAssignment_6");
			builder.put(grammarAccess.getConditionalStepAccess().getIfConditionAssignment_3(), "rule__ConditionalStep__IfConditionAssignment_3");
			builder.put(grammarAccess.getConditionalStepAccess().getThenRunAssignment_5(), "rule__ConditionalStep__ThenRunAssignment_5");
			builder.put(grammarAccess.getConditionalStepAccess().getElseRunAssignment_6_1(), "rule__ConditionalStep__ElseRunAssignment_6_1");
			builder.put(grammarAccess.getNonConditionalStepAccess().getProgramAssignment_0_0_4(), "rule__NonConditionalStep__ProgramAssignment_0_0_4");
			builder.put(grammarAccess.getNonConditionalStepAccess().getPluginNameAssignment_0_1_4(), "rule__NonConditionalStep__PluginNameAssignment_0_1_4");
			builder.put(grammarAccess.getNonConditionalStepAccess().getVersionAssignment_0_1_6(), "rule__NonConditionalStep__VersionAssignment_0_1_6");
			builder.put(grammarAccess.getNonConditionalStepAccess().getKwargsAssignment_0_1_7_2(), "rule__NonConditionalStep__KwargsAssignment_0_1_7_2");
			builder.put(grammarAccess.getNonConditionalStepAccess().getPathAssignment_0_2_3_1(), "rule__NonConditionalStep__PathAssignment_0_2_3_1");
			builder.put(grammarAccess.getNonConditionalStepAccess().getEnvironmentVariablesAssignment_1_2(), "rule__NonConditionalStep__EnvironmentVariablesAssignment_1_2");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getAssignmentAccess().getKeyAssignment_0(), "rule__Assignment__KeyAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment(), "rule__VariableDeclaration__NameAssignment");
			builder.put(grammarAccess.getSetCircleCIVersionAccess().getVersionAssignment_3(), "rule__SetCircleCIVersion__VersionAssignment_3");
			builder.put(grammarAccess.getAddOrbReferenceExecutorAccess().getExecutorAssignment_0(), "rule__AddOrbReferenceExecutor__ExecutorAssignment_0");
			builder.put(grammarAccess.getAddOrbReferenceExecutorAccess().getJobNameAssignment_2(), "rule__AddOrbReferenceExecutor__JobNameAssignment_2");
			builder.put(grammarAccess.getAddOrbReferenceExecutorAccess().getOrbAssignment_5(), "rule__AddOrbReferenceExecutor__OrbAssignment_5");
			builder.put(grammarAccess.getSelectWorkflowAccess().getNameAssignment_2(), "rule__SelectWorkflow__NameAssignment_2");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getKeyAssignment_0(), "rule__StringToStringMapEntry__KeyAssignment_0");
			builder.put(grammarAccess.getStringToStringMapEntryAccess().getValueAssignment_2(), "rule__StringToStringMapEntry__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DSLGrammarAccess grammarAccess;

	@Override
	protected InternalDSLParser createParser() {
		InternalDSLParser result = new InternalDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
