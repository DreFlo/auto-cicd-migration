/*
 * generated by Xtext 2.33.0
 */
grammar InternalDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package d.fe.up.pt.cicd.transformationsdsl.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package d.fe.up.pt.cicd.transformationsdsl.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import d.fe.up.pt.cicd.transformationsdsl.dsl.services.DSLGrammarAccess;

}

@parser::members {

 	private DSLGrammarAccess grammarAccess;

    public InternalDSLParser(TokenStream input, DSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TransformationSet";
   	}

   	@Override
   	protected DSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTransformationSet
entryRuleTransformationSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransformationSetRule()); }
	iv_ruleTransformationSet=ruleTransformationSet
	{ $current=$iv_ruleTransformationSet.current; }
	EOF;

// Rule TransformationSet
ruleTransformationSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTransformationSetAccess().getTransformationSetAction_0(),
					$current);
			}
		)
		(
			otherlv_1='before'
			{
				newLeafNode(otherlv_1, grammarAccess.getTransformationSetAccess().getBeforeKeyword_1_0());
			}
			(
				otherlv_2='transformation'
				{
					newLeafNode(otherlv_2, grammarAccess.getTransformationSetAccess().getTransformationKeyword_1_1());
				}
			)?
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getTransformationSetAccess().getLeftCurlyBracketKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformationSetAccess().getPreTIMTSMTransformationParserRuleCall_1_3_0());
					}
					lv_preTIM_4_0=ruleTSMTransformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformationSetRule());
						}
						add(
							$current,
							"preTIM",
							lv_preTIM_4_0,
							"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TSMTransformation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getTransformationSetAccess().getRightCurlyBracketKeyword_1_4());
			}
		)?
		(
			otherlv_6='during'
			{
				newLeafNode(otherlv_6, grammarAccess.getTransformationSetAccess().getDuringKeyword_2_0());
			}
			(
				otherlv_7='transformation'
				{
					newLeafNode(otherlv_7, grammarAccess.getTransformationSetAccess().getTransformationKeyword_2_1());
				}
			)?
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getTransformationSetAccess().getLeftCurlyBracketKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformationSetAccess().getOnTIMTIMTransformationParserRuleCall_2_3_0());
					}
					lv_onTIM_9_0=ruleTIMTransformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformationSetRule());
						}
						add(
							$current,
							"onTIM",
							lv_onTIM_9_0,
							"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TIMTransformation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getTransformationSetAccess().getRightCurlyBracketKeyword_2_4());
			}
		)?
		(
			otherlv_11='after'
			{
				newLeafNode(otherlv_11, grammarAccess.getTransformationSetAccess().getAfterKeyword_3_0());
			}
			(
				otherlv_12='transformation'
				{
					newLeafNode(otherlv_12, grammarAccess.getTransformationSetAccess().getTransformationKeyword_3_1());
				}
			)?
			otherlv_13='{'
			{
				newLeafNode(otherlv_13, grammarAccess.getTransformationSetAccess().getLeftCurlyBracketKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTransformationSetAccess().getPostTIMTSMTransformationParserRuleCall_3_3_0());
					}
					lv_postTIM_14_0=ruleTSMTransformation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransformationSetRule());
						}
						add(
							$current,
							"postTIM",
							lv_postTIM_14_0,
							"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TSMTransformation");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getTransformationSetAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
	)
;

// Entry rule entryRuleTSMTransformation
entryRuleTSMTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTSMTransformationRule()); }
	iv_ruleTSMTransformation=ruleTSMTransformation
	{ $current=$iv_ruleTSMTransformation.current; }
	EOF;

// Rule TSMTransformation
ruleTSMTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTSMTransformationAccess().getATLScriptParserRuleCall_0());
		}
		this_ATLScript_0=ruleATLScript
		{
			$current = $this_ATLScript_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTSMTransformationAccess().getCircleCITransformationParserRuleCall_1());
		}
		this_CircleCITransformation_1=ruleCircleCITransformation
		{
			$current = $this_CircleCITransformation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleATLScript
entryRuleATLScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getATLScriptRule()); }
	iv_ruleATLScript=ruleATLScript
	{ $current=$iv_ruleATLScript.current; }
	EOF;

// Rule ATLScript
ruleATLScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='run'
		{
			newLeafNode(otherlv_0, grammarAccess.getATLScriptAccess().getRunKeyword_0());
		}
		otherlv_1='ATL'
		{
			newLeafNode(otherlv_1, grammarAccess.getATLScriptAccess().getATLKeyword_1());
		}
		(
			otherlv_2='on'
			{
				newLeafNode(otherlv_2, grammarAccess.getATLScriptAccess().getOnKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getATLScriptAccess().getModelMODELSEnumRuleCall_3_0());
				}
				lv_model_3_0=ruleMODELS
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getATLScriptRule());
					}
					set(
						$current,
						"model",
						lv_model_3_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.MODELS");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getATLScriptAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getATLScriptAccess().getScriptEStringParserRuleCall_5_0());
				}
				lv_script_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getATLScriptRule());
					}
					set(
						$current,
						"script",
						lv_script_5_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getATLScriptAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTIMTransformation
entryRuleTIMTransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTIMTransformationRule()); }
	iv_ruleTIMTransformation=ruleTIMTransformation
	{ $current=$iv_ruleTIMTransformation.current; }
	EOF;

// Rule TIMTransformation
ruleTIMTransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTIMTransformationAccess().getATLScriptParserRuleCall_0());
		}
		this_ATLScript_0=ruleATLScript
		{
			$current = $this_ATLScript_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTIMTransformationAccess().getChangePluginParserRuleCall_1());
		}
		this_ChangePlugin_1=ruleChangePlugin
		{
			$current = $this_ChangePlugin_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTIMTransformationAccess().getChangeAgentLabelParserRuleCall_2());
		}
		this_ChangeAgentLabel_2=ruleChangeAgentLabel
		{
			$current = $this_ChangeAgentLabel_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTIMTransformationAccess().getReplaceAgentLabelsParserRuleCall_3());
		}
		this_ReplaceAgentLabels_3=ruleReplaceAgentLabels
		{
			$current = $this_ReplaceAgentLabels_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleChangePlugin
entryRuleChangePlugin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangePluginRule()); }
	iv_ruleChangePlugin=ruleChangePlugin
	{ $current=$iv_ruleChangePlugin.current; }
	EOF;

// Rule ChangePlugin
ruleChangePlugin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='change'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangePluginAccess().getChangeKeyword_0());
		}
		otherlv_1='plugin'
		{
			newLeafNode(otherlv_1, grammarAccess.getChangePluginAccess().getPluginKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChangePluginAccess().getNameStringToStringMapEntryParserRuleCall_2_0());
				}
				lv_name_2_0=ruleStringToStringMapEntry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangePluginRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.StringToStringMapEntry");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='version'
		{
			newLeafNode(otherlv_3, grammarAccess.getChangePluginAccess().getVersionKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChangePluginAccess().getVersionEStringParserRuleCall_4_0());
				}
				lv_version_4_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangePluginRule());
					}
					set(
						$current,
						"version",
						lv_version_4_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='args'
			{
				newLeafNode(otherlv_5, grammarAccess.getChangePluginAccess().getArgsKeyword_5_0());
			}
			otherlv_6='{'
			{
				newLeafNode(otherlv_6, grammarAccess.getChangePluginAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChangePluginAccess().getArgsStringToStringMapEntryParserRuleCall_5_2_0());
					}
					lv_args_7_0=ruleStringToStringMapEntry
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChangePluginRule());
						}
						add(
							$current,
							"args",
							lv_args_7_0,
							"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.StringToStringMapEntry");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getChangePluginAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getChangePluginAccess().getArgsStringToStringMapEntryParserRuleCall_5_3_1_0());
						}
						lv_args_9_0=ruleStringToStringMapEntry
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getChangePluginRule());
							}
							add(
								$current,
								"args",
								lv_args_9_0,
								"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.StringToStringMapEntry");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_10='}'
			{
				newLeafNode(otherlv_10, grammarAccess.getChangePluginAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
	)
;

// Entry rule entryRuleChangeAgentLabel
entryRuleChangeAgentLabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangeAgentLabelRule()); }
	iv_ruleChangeAgentLabel=ruleChangeAgentLabel
	{ $current=$iv_ruleChangeAgentLabel.current; }
	EOF;

// Rule ChangeAgentLabel
ruleChangeAgentLabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='change'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangeAgentLabelAccess().getChangeKeyword_0());
		}
		otherlv_1='label'
		{
			newLeafNode(otherlv_1, grammarAccess.getChangeAgentLabelAccess().getLabelKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChangeAgentLabelAccess().getNameStringToStringMapEntryParserRuleCall_2_0());
				}
				lv_name_2_0=ruleStringToStringMapEntry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChangeAgentLabelRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.StringToStringMapEntry");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReplaceAgentLabels
entryRuleReplaceAgentLabels returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReplaceAgentLabelsRule()); }
	iv_ruleReplaceAgentLabels=ruleReplaceAgentLabels
	{ $current=$iv_ruleReplaceAgentLabels.current; }
	EOF;

// Rule ReplaceAgentLabels
ruleReplaceAgentLabels returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getReplaceAgentLabelsAccess().getSetKeyword_0());
		}
		otherlv_1='labels'
		{
			newLeafNode(otherlv_1, grammarAccess.getReplaceAgentLabelsAccess().getLabelsKeyword_1());
		}
		(
			otherlv_2='when'
			{
				newLeafNode(otherlv_2, grammarAccess.getReplaceAgentLabelsAccess().getWhenKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReplaceAgentLabelsAccess().getConditionEStringParserRuleCall_2_1_0());
					}
					lv_condition_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReplaceAgentLabelsRule());
						}
						set(
							$current,
							"condition",
							lv_condition_3_0,
							"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getReplaceAgentLabelsAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReplaceAgentLabelsAccess().getLabelsEStringParserRuleCall_4_0());
				}
				lv_labels_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReplaceAgentLabelsRule());
					}
					add(
						$current,
						"labels",
						lv_labels_5_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getReplaceAgentLabelsAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getReplaceAgentLabelsAccess().getLabelsEStringParserRuleCall_5_1_0());
					}
					lv_labels_7_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReplaceAgentLabelsRule());
						}
						add(
							$current,
							"labels",
							lv_labels_7_0,
							"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getReplaceAgentLabelsAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCircleCITransformation
entryRuleCircleCITransformation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCircleCITransformationRule()); }
	iv_ruleCircleCITransformation=ruleCircleCITransformation
	{ $current=$iv_ruleCircleCITransformation.current; }
	EOF;

// Rule CircleCITransformation
ruleCircleCITransformation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getCircleCITransformationAccess().getOnKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getCircleCITransformationAccess().getCIRCLE_CIParserRuleCall_1());
		}
		ruleCIRCLE_CI
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getCircleCITransformationAccess().getSetCircleCIVersionParserRuleCall_2());
		}
		this_SetCircleCIVersion_2=ruleSetCircleCIVersion
		{
			$current = $this_SetCircleCIVersion_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSetCircleCIVersion
entryRuleSetCircleCIVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetCircleCIVersionRule()); }
	iv_ruleSetCircleCIVersion=ruleSetCircleCIVersion
	{ $current=$iv_ruleSetCircleCIVersion.current; }
	EOF;

// Rule SetCircleCIVersion
ruleSetCircleCIVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='set'
		{
			newLeafNode(otherlv_0, grammarAccess.getSetCircleCIVersionAccess().getSetKeyword_0());
		}
		otherlv_1='version'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetCircleCIVersionAccess().getVersionKeyword_1());
		}
		(
			otherlv_2='to'
			{
				newLeafNode(otherlv_2, grammarAccess.getSetCircleCIVersionAccess().getToKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSetCircleCIVersionAccess().getVersionEStringParserRuleCall_3_0());
				}
				lv_version_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetCircleCIVersionRule());
					}
					set(
						$current,
						"version",
						lv_version_3_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStringToStringMapEntry
entryRuleStringToStringMapEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringToStringMapEntryRule()); }
	iv_ruleStringToStringMapEntry=ruleStringToStringMapEntry
	{ $current=$iv_ruleStringToStringMapEntry.current; }
	EOF;

// Rule StringToStringMapEntry
ruleStringToStringMapEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStringToStringMapEntryAccess().getKeyEStringParserRuleCall_0_0());
				}
				lv_key_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringToStringMapEntryRule());
					}
					set(
						$current,
						"key",
						lv_key_0_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringToStringMapEntryAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringToStringMapEntryAccess().getValueEStringParserRuleCall_2_0());
				}
				lv_value_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringToStringMapEntryRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCIRCLE_CI
entryRuleCIRCLE_CI returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCIRCLE_CIRule()); }
	iv_ruleCIRCLE_CI=ruleCIRCLE_CI
	{ $current=$iv_ruleCIRCLE_CI.current.getText(); }
	EOF;

// Rule CIRCLE_CI
ruleCIRCLE_CI returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='CircleCI'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCIRCLE_CIAccess().getCircleCIKeyword_0());
		}
		    |
		kw='circleci'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCIRCLE_CIAccess().getCircleciKeyword_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Rule MODELS
ruleMODELS returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='GHA'
			{
				$current = grammarAccess.getMODELSAccess().getGHAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMODELSAccess().getGHAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='gha'
			{
				$current = grammarAccess.getMODELSAccess().getGHAEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMODELSAccess().getGHAEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='github'
			{
				$current = grammarAccess.getMODELSAccess().getGHAEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMODELSAccess().getGHAEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='CICD'
			{
				$current = grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='cicd'
			{
				$current = grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='TIM'
			{
				$current = grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='tim'
			{
				$current = grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getMODELSAccess().getCICDEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='CircleCI'
			{
				$current = grammarAccess.getMODELSAccess().getCircleCIEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getMODELSAccess().getCircleCIEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='circleci'
			{
				$current = grammarAccess.getMODELSAccess().getCircleCIEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getMODELSAccess().getCircleCIEnumLiteralDeclaration_8());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
