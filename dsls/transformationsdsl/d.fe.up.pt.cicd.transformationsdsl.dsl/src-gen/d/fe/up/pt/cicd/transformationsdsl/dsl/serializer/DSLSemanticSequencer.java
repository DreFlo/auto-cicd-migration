/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.serializer;

import com.google.inject.Inject;
import d.fe.up.pt.cicd.metamodel.CICD.CICDPackage;
import d.fe.up.pt.cicd.metamodel.CICD.ManualTrigger;
import d.fe.up.pt.cicd.transformationsdsl.dsl.services.DSLGrammarAccess;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.ATLScript;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.AddOrbReferenceExecutor;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.AddTrigger;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.ChangeAgentLabel;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.ChangePlugin;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.ReplaceAgentLabels;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.SetCircleCIVersion;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.TransformationSet;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.TransformationsPackage;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CICDPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CICDPackage.MANUAL_TRIGGER:
				sequence_ManualTrigger(context, (ManualTrigger) semanticObject); 
				return; 
			}
		else if (epackage == TransformationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TransformationsPackage.ATL_SCRIPT:
				sequence_ATLScript(context, (ATLScript) semanticObject); 
				return; 
			case TransformationsPackage.ADD_ORB_REFERENCE_EXECUTOR:
				sequence_AddOrbReferenceExecutor(context, (AddOrbReferenceExecutor) semanticObject); 
				return; 
			case TransformationsPackage.ADD_TRIGGER:
				sequence_AddTrigger(context, (AddTrigger) semanticObject); 
				return; 
			case TransformationsPackage.CHANGE_AGENT_LABEL:
				sequence_ChangeAgentLabel(context, (ChangeAgentLabel) semanticObject); 
				return; 
			case TransformationsPackage.CHANGE_PLUGIN:
				sequence_ChangePlugin(context, (ChangePlugin) semanticObject); 
				return; 
			case TransformationsPackage.REPLACE_AGENT_LABELS:
				sequence_ReplaceAgentLabels(context, (ReplaceAgentLabels) semanticObject); 
				return; 
			case TransformationsPackage.SET_CIRCLE_CI_VERSION:
				sequence_SetCircleCIVersion(context, (SetCircleCIVersion) semanticObject); 
				return; 
			case TransformationsPackage.STRING_TO_STRING_MAP_ENTRY:
				sequence_StringToStringMapEntry(context, (Map.Entry) semanticObject); 
				return; 
			case TransformationsPackage.TRANSFORMATION_SET:
				sequence_TransformationSet(context, (TransformationSet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     TSMTransformation returns ATLScript
	 *     ATLScript returns ATLScript
	 *     TIMTransformation returns ATLScript
	 *
	 * Constraint:
	 *     (model=MODELS script=EString)
	 * </pre>
	 */
	protected void sequence_ATLScript(ISerializationContext context, ATLScript semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TransformationsPackage.Literals.ATL_SCRIPT__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TransformationsPackage.Literals.ATL_SCRIPT__MODEL));
			if (transientValues.isValueTransient(semanticObject, TransformationsPackage.Literals.ATL_SCRIPT__SCRIPT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TransformationsPackage.Literals.ATL_SCRIPT__SCRIPT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getATLScriptAccess().getModelMODELSEnumRuleCall_3_0(), semanticObject.getModel());
		feeder.accept(grammarAccess.getATLScriptAccess().getScriptEStringParserRuleCall_5_0(), semanticObject.getScript());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TSMTransformation returns AddOrbReferenceExecutor
	 *     CircleCITransformation returns AddOrbReferenceExecutor
	 *     AddExecutor returns AddOrbReferenceExecutor
	 *     AddOrbReferenceExecutor returns AddOrbReferenceExecutor
	 *
	 * Constraint:
	 *     (executor=EString jobName=EString orb=EString)
	 * </pre>
	 */
	protected void sequence_AddOrbReferenceExecutor(ISerializationContext context, AddOrbReferenceExecutor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TransformationsPackage.Literals.ADD_ORB_REFERENCE_EXECUTOR__EXECUTOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TransformationsPackage.Literals.ADD_ORB_REFERENCE_EXECUTOR__EXECUTOR));
			if (transientValues.isValueTransient(semanticObject, TransformationsPackage.Literals.ADD_EXECUTOR__JOB_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TransformationsPackage.Literals.ADD_EXECUTOR__JOB_NAME));
			if (transientValues.isValueTransient(semanticObject, TransformationsPackage.Literals.ADD_ORB_REFERENCE_EXECUTOR__ORB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TransformationsPackage.Literals.ADD_ORB_REFERENCE_EXECUTOR__ORB));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddOrbReferenceExecutorAccess().getExecutorEStringParserRuleCall_0_0(), semanticObject.getExecutor());
		feeder.accept(grammarAccess.getAddOrbReferenceExecutorAccess().getJobNameEStringParserRuleCall_2_0(), semanticObject.getJobName());
		feeder.accept(grammarAccess.getAddOrbReferenceExecutorAccess().getOrbEStringParserRuleCall_5_0(), semanticObject.getOrb());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TIMTransformation returns AddTrigger
	 *     AddTrigger returns AddTrigger
	 *
	 * Constraint:
	 *     (condition=EString? trigger=Trigger)
	 * </pre>
	 */
	protected void sequence_AddTrigger(ISerializationContext context, AddTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TIMTransformation returns ChangeAgentLabel
	 *     ChangeAgentLabel returns ChangeAgentLabel
	 *
	 * Constraint:
	 *     name=StringToStringMapEntry
	 * </pre>
	 */
	protected void sequence_ChangeAgentLabel(ISerializationContext context, ChangeAgentLabel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TransformationsPackage.Literals.CHANGE_AGENT_LABEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TransformationsPackage.Literals.CHANGE_AGENT_LABEL__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChangeAgentLabelAccess().getNameStringToStringMapEntryParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TIMTransformation returns ChangePlugin
	 *     ChangePlugin returns ChangePlugin
	 *
	 * Constraint:
	 *     (name=StringToStringMapEntry version=EString (args+=StringToStringMapEntry args+=StringToStringMapEntry*)?)
	 * </pre>
	 */
	protected void sequence_ChangePlugin(ISerializationContext context, ChangePlugin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Trigger returns ManualTrigger
	 *     ManualTrigger returns ManualTrigger
	 *
	 * Constraint:
	 *     {ManualTrigger}
	 * </pre>
	 */
	protected void sequence_ManualTrigger(ISerializationContext context, ManualTrigger semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TIMTransformation returns ReplaceAgentLabels
	 *     ReplaceAgentLabels returns ReplaceAgentLabels
	 *
	 * Constraint:
	 *     (condition=EString? labels+=EString labels+=EString*)
	 * </pre>
	 */
	protected void sequence_ReplaceAgentLabels(ISerializationContext context, ReplaceAgentLabels semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TSMTransformation returns SetCircleCIVersion
	 *     CircleCITransformation returns SetCircleCIVersion
	 *     SetCircleCIVersion returns SetCircleCIVersion
	 *
	 * Constraint:
	 *     version=EString
	 * </pre>
	 */
	protected void sequence_SetCircleCIVersion(ISerializationContext context, SetCircleCIVersion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TransformationsPackage.Literals.SET_CIRCLE_CI_VERSION__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TransformationsPackage.Literals.SET_CIRCLE_CI_VERSION__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetCircleCIVersionAccess().getVersionEStringParserRuleCall_3_0(), semanticObject.getVersion());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StringToStringMapEntry returns StringToStringMapEntry
	 *
	 * Constraint:
	 *     (key=EString value=EString)
	 * </pre>
	 */
	protected void sequence_StringToStringMapEntry(ISerializationContext context, Map.Entry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__KEY));
			if (transientValues.isValueTransient((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getStringToStringMapEntryAccess().getKeyEStringParserRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getStringToStringMapEntryAccess().getValueEStringParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TransformationSet returns TransformationSet
	 *
	 * Constraint:
	 *     (preTIM+=TSMTransformation* onTIM+=TIMTransformation* postTIM+=TSMTransformation*)
	 * </pre>
	 */
	protected void sequence_TransformationSet(ISerializationContext context, TransformationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
