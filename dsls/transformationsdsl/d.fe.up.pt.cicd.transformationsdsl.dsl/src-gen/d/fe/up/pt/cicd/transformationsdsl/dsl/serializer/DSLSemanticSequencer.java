/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.serializer;

import com.google.inject.Inject;
import d.fe.up.pt.cicd.transformationsdsl.dsl.services.DSLGrammarAccess;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.ChangePluginTransformation;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.TransformationSet;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.TransformationsPackage;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TransformationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TransformationsPackage.CHANGE_PLUGIN_TRANSFORMATION:
				sequence_ChangePluginTransformation(context, (ChangePluginTransformation) semanticObject); 
				return; 
			case TransformationsPackage.STRING_TO_STRING_MAP_ENTRY:
				sequence_StringToStringMapEntry(context, (Map.Entry) semanticObject); 
				return; 
			case TransformationsPackage.TRANSFORMATION_SET:
				sequence_TransformationSet(context, (TransformationSet) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Transformation returns ChangePluginTransformation
	 *     ChangePluginTransformation returns ChangePluginTransformation
	 *
	 * Constraint:
	 *     (model=MODEL_NAMES version=EString name=StringToStringMapEntry (args+=StringToStringMapEntry args+=StringToStringMapEntry*)?)
	 * </pre>
	 */
	protected void sequence_ChangePluginTransformation(ISerializationContext context, ChangePluginTransformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StringToStringMapEntry returns StringToStringMapEntry
	 *
	 * Constraint:
	 *     (key=EString value=EString)
	 * </pre>
	 */
	protected void sequence_StringToStringMapEntry(ISerializationContext context, Map.Entry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__KEY));
			if (transientValues.isValueTransient((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, TransformationsPackage.Literals.STRING_TO_STRING_MAP_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getStringToStringMapEntryAccess().getKeyEStringParserRuleCall_3_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getStringToStringMapEntryAccess().getValueEStringParserRuleCall_5_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TransformationSet returns TransformationSet
	 *
	 * Constraint:
	 *     (transformations+=Transformation transformations+=Transformation*)?
	 * </pre>
	 */
	protected void sequence_TransformationSet(ISerializationContext context, TransformationSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
