/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TransformationSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TransformationSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBeforeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cTransformationKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPreTIMAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPreTIMTSMTransformationParserRuleCall_1_3_0 = (RuleCall)cPreTIMAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDuringKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cTransformationKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cOnTIMAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cOnTIMTIMTransformationParserRuleCall_2_3_0 = (RuleCall)cOnTIMAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAfterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cTransformationKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPostTIMAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cPostTIMTSMTransformationParserRuleCall_3_3_0 = (RuleCall)cPostTIMAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//TransformationSet returns TransformationSet:
		//    {TransformationSet}
		//    ('before' 'transformation'? '{' (preTIM+=TSMTransformation)* '}')?
		//    ('during' 'transformation'? '{' (onTIM+=TIMTransformation)* '}')?
		//    ('after' 'transformation'? '{' (postTIM+=TSMTransformation)* '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TransformationSet}
		//('before' 'transformation'? '{' (preTIM+=TSMTransformation)* '}')?
		//('during' 'transformation'? '{' (onTIM+=TIMTransformation)* '}')?
		//('after' 'transformation'? '{' (postTIM+=TSMTransformation)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TransformationSet}
		public Action getTransformationSetAction_0() { return cTransformationSetAction_0; }
		
		//('before' 'transformation'? '{' (preTIM+=TSMTransformation)* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'before'
		public Keyword getBeforeKeyword_1_0() { return cBeforeKeyword_1_0; }
		
		//'transformation'?
		public Keyword getTransformationKeyword_1_1() { return cTransformationKeyword_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//(preTIM+=TSMTransformation)*
		public Assignment getPreTIMAssignment_1_3() { return cPreTIMAssignment_1_3; }
		
		//TSMTransformation
		public RuleCall getPreTIMTSMTransformationParserRuleCall_1_3_0() { return cPreTIMTSMTransformationParserRuleCall_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
		
		//('during' 'transformation'? '{' (onTIM+=TIMTransformation)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'during'
		public Keyword getDuringKeyword_2_0() { return cDuringKeyword_2_0; }
		
		//'transformation'?
		public Keyword getTransformationKeyword_2_1() { return cTransformationKeyword_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2() { return cLeftCurlyBracketKeyword_2_2; }
		
		//(onTIM+=TIMTransformation)*
		public Assignment getOnTIMAssignment_2_3() { return cOnTIMAssignment_2_3; }
		
		//TIMTransformation
		public RuleCall getOnTIMTIMTransformationParserRuleCall_2_3_0() { return cOnTIMTIMTransformationParserRuleCall_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//('after' 'transformation'? '{' (postTIM+=TSMTransformation)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'after'
		public Keyword getAfterKeyword_3_0() { return cAfterKeyword_3_0; }
		
		//'transformation'?
		public Keyword getTransformationKeyword_3_1() { return cTransformationKeyword_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_2() { return cLeftCurlyBracketKeyword_3_2; }
		
		//(postTIM+=TSMTransformation)*
		public Assignment getPostTIMAssignment_3_3() { return cPostTIMAssignment_3_3; }
		
		//TSMTransformation
		public RuleCall getPostTIMTSMTransformationParserRuleCall_3_3_0() { return cPostTIMTSMTransformationParserRuleCall_3_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}
	public class TSMTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TSMTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cATLScriptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCircleCITransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TSMTransformation returns TSMTransformation:
		//    ATLScript | CircleCITransformation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ATLScript | CircleCITransformation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ATLScript
		public RuleCall getATLScriptParserRuleCall_0() { return cATLScriptParserRuleCall_0; }
		
		//CircleCITransformation
		public RuleCall getCircleCITransformationParserRuleCall_1() { return cCircleCITransformationParserRuleCall_1; }
	}
	public class ATLScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ATLScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cATLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelMODELSEnumRuleCall_3_0 = (RuleCall)cModelAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScriptAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScriptEStringParserRuleCall_5_0 = (RuleCall)cScriptAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ATLScript returns ATLScript:
		//    'run' 'ATL' 'on'? model=MODELS '{' script=EString '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'run' 'ATL' 'on'? model=MODELS '{' script=EString '}'
		public Group getGroup() { return cGroup; }
		
		//'run'
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//'ATL'
		public Keyword getATLKeyword_1() { return cATLKeyword_1; }
		
		//'on'?
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//model=MODELS
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//MODELS
		public RuleCall getModelMODELSEnumRuleCall_3_0() { return cModelMODELSEnumRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//script=EString
		public Assignment getScriptAssignment_5() { return cScriptAssignment_5; }
		
		//EString
		public RuleCall getScriptEStringParserRuleCall_5_0() { return cScriptEStringParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TIMTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TIMTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cATLScriptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChangePluginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChangeAgentLabelParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReplaceAgentLabelsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAddTriggerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TIMTransformation returns TIMTransformation:
		//    ATLScript | ChangePlugin | ChangeAgentLabel | ReplaceAgentLabels | AddTrigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ATLScript | ChangePlugin | ChangeAgentLabel | ReplaceAgentLabels | AddTrigger
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ATLScript
		public RuleCall getATLScriptParserRuleCall_0() { return cATLScriptParserRuleCall_0; }
		
		//ChangePlugin
		public RuleCall getChangePluginParserRuleCall_1() { return cChangePluginParserRuleCall_1; }
		
		//ChangeAgentLabel
		public RuleCall getChangeAgentLabelParserRuleCall_2() { return cChangeAgentLabelParserRuleCall_2; }
		
		//ReplaceAgentLabels
		public RuleCall getReplaceAgentLabelsParserRuleCall_3() { return cReplaceAgentLabelsParserRuleCall_3; }
		
		//AddTrigger
		public RuleCall getAddTriggerParserRuleCall_4() { return cAddTriggerParserRuleCall_4; }
	}
	public class ChangePluginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ChangePlugin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPluginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringToStringMapEntryParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cVersionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionEStringParserRuleCall_4_0 = (RuleCall)cVersionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cArgsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cArgsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cArgsStringToStringMapEntryParserRuleCall_5_2_0 = (RuleCall)cArgsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cArgsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cArgsStringToStringMapEntryParserRuleCall_5_3_1_0 = (RuleCall)cArgsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//ChangePlugin returns ChangePlugin:
		//    'change' 'plugin' name=StringToStringMapEntry 'version' version=EString    ('args' '{' args+=StringToStringMapEntry ( "," args+=StringToStringMapEntry)* '}' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'change' 'plugin' name=StringToStringMapEntry 'version' version=EString	('args' '{' args+=StringToStringMapEntry ( "," args+=StringToStringMapEntry)* '}' )?
		public Group getGroup() { return cGroup; }
		
		//'change'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//'plugin'
		public Keyword getPluginKeyword_1() { return cPluginKeyword_1; }
		
		//name=StringToStringMapEntry
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//StringToStringMapEntry
		public RuleCall getNameStringToStringMapEntryParserRuleCall_2_0() { return cNameStringToStringMapEntryParserRuleCall_2_0; }
		
		//'version'
		public Keyword getVersionKeyword_3() { return cVersionKeyword_3; }
		
		//version=EString
		public Assignment getVersionAssignment_4() { return cVersionAssignment_4; }
		
		//EString
		public RuleCall getVersionEStringParserRuleCall_4_0() { return cVersionEStringParserRuleCall_4_0; }
		
		//('args' '{' args+=StringToStringMapEntry ( "," args+=StringToStringMapEntry)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'args'
		public Keyword getArgsKeyword_5_0() { return cArgsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//args+=StringToStringMapEntry
		public Assignment getArgsAssignment_5_2() { return cArgsAssignment_5_2; }
		
		//StringToStringMapEntry
		public RuleCall getArgsStringToStringMapEntryParserRuleCall_5_2_0() { return cArgsStringToStringMapEntryParserRuleCall_5_2_0; }
		
		//( "," args+=StringToStringMapEntry)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//args+=StringToStringMapEntry
		public Assignment getArgsAssignment_5_3_1() { return cArgsAssignment_5_3_1; }
		
		//StringToStringMapEntry
		public RuleCall getArgsStringToStringMapEntryParserRuleCall_5_3_1_0() { return cArgsStringToStringMapEntryParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
	}
	public class ChangeAgentLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ChangeAgentLabel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringToStringMapEntryParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ChangeAgentLabel returns ChangeAgentLabel:
		//    'change' 'label' name=StringToStringMapEntry
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'change' 'label' name=StringToStringMapEntry
		public Group getGroup() { return cGroup; }
		
		//'change'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//'label'
		public Keyword getLabelKeyword_1() { return cLabelKeyword_1; }
		
		//name=StringToStringMapEntry
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//StringToStringMapEntry
		public RuleCall getNameStringToStringMapEntryParserRuleCall_2_0() { return cNameStringToStringMapEntryParserRuleCall_2_0; }
	}
	public class ReplaceAgentLabelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ReplaceAgentLabels");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLabelsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelsEStringParserRuleCall_4_0 = (RuleCall)cLabelsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLabelsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLabelsEStringParserRuleCall_5_1_0 = (RuleCall)cLabelsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ReplaceAgentLabels returns ReplaceAgentLabels:
		//    'set' 'labels' ('when' condition=EString)? '{' labels+=EString (',' labels+=EString)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'labels' ('when' condition=EString)? '{' labels+=EString (',' labels+=EString)* '}'
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'labels'
		public Keyword getLabelsKeyword_1() { return cLabelsKeyword_1; }
		
		//('when' condition=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//condition=EString
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_2_1_0() { return cConditionEStringParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//labels+=EString
		public Assignment getLabelsAssignment_4() { return cLabelsAssignment_4; }
		
		//EString
		public RuleCall getLabelsEStringParserRuleCall_4_0() { return cLabelsEStringParserRuleCall_4_0; }
		
		//(',' labels+=EString)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//labels+=EString
		public Assignment getLabelsAssignment_5_1() { return cLabelsAssignment_5_1; }
		
		//EString
		public RuleCall getLabelsEStringParserRuleCall_5_1_0() { return cLabelsEStringParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AddTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		
		//AddTrigger returns AddTrigger:
		//    'add' 'trigger' ('when' condition=EString)? trigger=Trigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' 'trigger' ('when' condition=EString)? trigger=Trigger
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'trigger'
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }
		
		//('when' condition=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//condition=EString
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_2_1_0() { return cConditionEStringParserRuleCall_2_1_0; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_3_0() { return cTriggerTriggerParserRuleCall_3_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.Trigger");
		private final RuleCall cManualTriggerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Trigger returns CICD::Trigger:
		//    ManualTrigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ManualTrigger
		public RuleCall getManualTriggerParserRuleCall() { return cManualTriggerParserRuleCall; }
	}
	public class ManualTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ManualTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cManualTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cManualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ManualTrigger returns CICD::ManualTrigger:
		//    {CICD::ManualTrigger} 'manual'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CICD::ManualTrigger} 'manual'
		public Group getGroup() { return cGroup; }
		
		//{CICD::ManualTrigger}
		public Action getManualTriggerAction_0() { return cManualTriggerAction_0; }
		
		//'manual'
		public Keyword getManualKeyword_1() { return cManualKeyword_1; }
	}
	public class CircleCITransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.CircleCITransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCIRCLE_CIParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSetCircleCIVersionParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cAddExecutorParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//CircleCITransformation returns CircleCITransformation:
		//    'on' CIRCLE_CI (SetCircleCIVersion | AddExecutor)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' CIRCLE_CI (SetCircleCIVersion | AddExecutor)
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//CIRCLE_CI
		public RuleCall getCIRCLE_CIParserRuleCall_1() { return cCIRCLE_CIParserRuleCall_1; }
		
		//(SetCircleCIVersion | AddExecutor)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//SetCircleCIVersion
		public RuleCall getSetCircleCIVersionParserRuleCall_2_0() { return cSetCircleCIVersionParserRuleCall_2_0; }
		
		//AddExecutor
		public RuleCall getAddExecutorParserRuleCall_2_1() { return cAddExecutorParserRuleCall_2_1; }
	}
	public class SetCircleCIVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.SetCircleCIVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionEStringParserRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		
		//SetCircleCIVersion returns SetCircleCIVersion:
		//    'set' 'version' 'to'? version=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'version' 'to'? version=EString
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'version'
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }
		
		//'to'?
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//version=EString
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }
		
		//EString
		public RuleCall getVersionEStringParserRuleCall_3_0() { return cVersionEStringParserRuleCall_3_0; }
	}
	public class AddExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExecutorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cAddOrbReferenceExecutorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AddExecutor returns AddExecutor:
		//    'add' 'executor' (AddOrbReferenceExecutor)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' 'executor' (AddOrbReferenceExecutor)
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'executor'
		public Keyword getExecutorKeyword_1() { return cExecutorKeyword_1; }
		
		//(AddOrbReferenceExecutor)
		public RuleCall getAddOrbReferenceExecutorParserRuleCall_2() { return cAddOrbReferenceExecutorParserRuleCall_2; }
	}
	public class AddOrbReferenceExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddOrbReferenceExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExecutorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExecutorEStringParserRuleCall_0_0 = (RuleCall)cExecutorAssignment_0.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJobNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJobNameEStringParserRuleCall_2_0 = (RuleCall)cJobNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOrbKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOrbAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOrbEStringParserRuleCall_5_0 = (RuleCall)cOrbAssignment_5.eContents().get(0);
		
		//AddOrbReferenceExecutor returns AddOrbReferenceExecutor:
		//    executor=EString 'on' jobName=EString 'from'? 'orb' orb=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//executor=EString 'on' jobName=EString 'from'? 'orb' orb=EString
		public Group getGroup() { return cGroup; }
		
		//executor=EString
		public Assignment getExecutorAssignment_0() { return cExecutorAssignment_0; }
		
		//EString
		public RuleCall getExecutorEStringParserRuleCall_0_0() { return cExecutorEStringParserRuleCall_0_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//jobName=EString
		public Assignment getJobNameAssignment_2() { return cJobNameAssignment_2; }
		
		//EString
		public RuleCall getJobNameEStringParserRuleCall_2_0() { return cJobNameEStringParserRuleCall_2_0; }
		
		//'from'?
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//'orb'
		public Keyword getOrbKeyword_4() { return cOrbKeyword_4; }
		
		//orb=EString
		public Assignment getOrbAssignment_5() { return cOrbAssignment_5; }
		
		//EString
		public RuleCall getOrbEStringParserRuleCall_5_0() { return cOrbEStringParserRuleCall_5_0; }
	}
	public class StringToStringMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.StringToStringMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEStringParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StringToStringMapEntry returns StringToStringMapEntry:
		//    key=EString 'to' value=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=EString 'to' value=EString
		public Group getGroup() { return cGroup; }
		
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//value=EString
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_2_0() { return cValueEStringParserRuleCall_2_0; }
	}
	public class GHAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.GHA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGHAKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGhaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGithubKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//GHA:
		//    'GHA' | 'gha' | 'github'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'GHA' | 'gha' | 'github'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'GHA'
		public Keyword getGHAKeyword_0() { return cGHAKeyword_0; }
		
		//'gha'
		public Keyword getGhaKeyword_1() { return cGhaKeyword_1; }
		
		//'github'
		public Keyword getGithubKeyword_2() { return cGithubKeyword_2; }
	}
	public class CICDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.CICD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCICDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCicdKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTIMKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTimKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//CICD:
		//    'CICD' | 'cicd' | 'TIM' | 'tim'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CICD' | 'cicd' | 'TIM' | 'tim'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CICD'
		public Keyword getCICDKeyword_0() { return cCICDKeyword_0; }
		
		//'cicd'
		public Keyword getCicdKeyword_1() { return cCicdKeyword_1; }
		
		//'TIM'
		public Keyword getTIMKeyword_2() { return cTIMKeyword_2; }
		
		//'tim'
		public Keyword getTimKeyword_3() { return cTimKeyword_3; }
	}
	public class CIRCLE_CIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.CIRCLE_CI");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCircleCIKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCircleciKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CIRCLE_CI:
		//    'CircleCI' | 'circleci'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CircleCI' | 'circleci'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CircleCI'
		public Keyword getCircleCIKeyword_0() { return cCircleCIKeyword_0; }
		
		//'circleci'
		public Keyword getCircleciKeyword_1() { return cCircleciKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class MODELSElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.MODELS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGHAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGHAGHAKeyword_0_0 = (Keyword)cGHAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGHAEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGHAGhaKeyword_1_0 = (Keyword)cGHAEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGHAEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGHAGithubKeyword_2_0 = (Keyword)cGHAEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCICDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCICDCICDKeyword_3_0 = (Keyword)cCICDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCICDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCICDCicdKeyword_4_0 = (Keyword)cCICDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCICDEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCICDTIMKeyword_5_0 = (Keyword)cCICDEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cCICDEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cCICDTimKeyword_6_0 = (Keyword)cCICDEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCircleCIEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCircleCICircleCIKeyword_7_0 = (Keyword)cCircleCIEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCircleCIEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCircleCICircleciKeyword_8_0 = (Keyword)cCircleCIEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum MODELS returns MODELS:
		//    GHA = 'GHA' | GHA = 'gha' | GHA = 'github' |
		//    CICD = 'CICD' | CICD = 'cicd' | CICD = 'TIM' | CICD = 'tim' |
		//    CircleCI = 'CircleCI' | CircleCI = 'circleci'
		//;
		public EnumRule getRule() { return rule; }
		
		//GHA = 'GHA' | GHA = 'gha' | GHA = 'github' |
		//CICD = 'CICD' | CICD = 'cicd' | CICD = 'TIM' | CICD = 'tim' |
		//CircleCI = 'CircleCI' | CircleCI = 'circleci'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GHA = 'GHA'
		public EnumLiteralDeclaration getGHAEnumLiteralDeclaration_0() { return cGHAEnumLiteralDeclaration_0; }
		
		//'GHA'
		public Keyword getGHAGHAKeyword_0_0() { return cGHAGHAKeyword_0_0; }
		
		//GHA = 'gha'
		public EnumLiteralDeclaration getGHAEnumLiteralDeclaration_1() { return cGHAEnumLiteralDeclaration_1; }
		
		//'gha'
		public Keyword getGHAGhaKeyword_1_0() { return cGHAGhaKeyword_1_0; }
		
		//GHA = 'github'
		public EnumLiteralDeclaration getGHAEnumLiteralDeclaration_2() { return cGHAEnumLiteralDeclaration_2; }
		
		//'github'
		public Keyword getGHAGithubKeyword_2_0() { return cGHAGithubKeyword_2_0; }
		
		//CICD = 'CICD'
		public EnumLiteralDeclaration getCICDEnumLiteralDeclaration_3() { return cCICDEnumLiteralDeclaration_3; }
		
		//'CICD'
		public Keyword getCICDCICDKeyword_3_0() { return cCICDCICDKeyword_3_0; }
		
		//CICD = 'cicd'
		public EnumLiteralDeclaration getCICDEnumLiteralDeclaration_4() { return cCICDEnumLiteralDeclaration_4; }
		
		//'cicd'
		public Keyword getCICDCicdKeyword_4_0() { return cCICDCicdKeyword_4_0; }
		
		//CICD = 'TIM'
		public EnumLiteralDeclaration getCICDEnumLiteralDeclaration_5() { return cCICDEnumLiteralDeclaration_5; }
		
		//'TIM'
		public Keyword getCICDTIMKeyword_5_0() { return cCICDTIMKeyword_5_0; }
		
		//CICD = 'tim'
		public EnumLiteralDeclaration getCICDEnumLiteralDeclaration_6() { return cCICDEnumLiteralDeclaration_6; }
		
		//'tim'
		public Keyword getCICDTimKeyword_6_0() { return cCICDTimKeyword_6_0; }
		
		//CircleCI = 'CircleCI'
		public EnumLiteralDeclaration getCircleCIEnumLiteralDeclaration_7() { return cCircleCIEnumLiteralDeclaration_7; }
		
		//'CircleCI'
		public Keyword getCircleCICircleCIKeyword_7_0() { return cCircleCICircleCIKeyword_7_0; }
		
		//CircleCI = 'circleci'
		public EnumLiteralDeclaration getCircleCIEnumLiteralDeclaration_8() { return cCircleCIEnumLiteralDeclaration_8; }
		
		//'circleci'
		public Keyword getCircleCICircleciKeyword_8_0() { return cCircleCICircleciKeyword_8_0; }
	}
	
	private final TransformationSetElements pTransformationSet;
	private final TSMTransformationElements pTSMTransformation;
	private final ATLScriptElements pATLScript;
	private final TIMTransformationElements pTIMTransformation;
	private final ChangePluginElements pChangePlugin;
	private final ChangeAgentLabelElements pChangeAgentLabel;
	private final ReplaceAgentLabelsElements pReplaceAgentLabels;
	private final AddTriggerElements pAddTrigger;
	private final TriggerElements pTrigger;
	private final ManualTriggerElements pManualTrigger;
	private final CircleCITransformationElements pCircleCITransformation;
	private final SetCircleCIVersionElements pSetCircleCIVersion;
	private final AddExecutorElements pAddExecutor;
	private final AddOrbReferenceExecutorElements pAddOrbReferenceExecutor;
	private final StringToStringMapEntryElements pStringToStringMapEntry;
	private final MODELSElements eMODELS;
	private final GHAElements pGHA;
	private final CICDElements pCICD;
	private final CIRCLE_CIElements pCIRCLE_CI;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTransformationSet = new TransformationSetElements();
		this.pTSMTransformation = new TSMTransformationElements();
		this.pATLScript = new ATLScriptElements();
		this.pTIMTransformation = new TIMTransformationElements();
		this.pChangePlugin = new ChangePluginElements();
		this.pChangeAgentLabel = new ChangeAgentLabelElements();
		this.pReplaceAgentLabels = new ReplaceAgentLabelsElements();
		this.pAddTrigger = new AddTriggerElements();
		this.pTrigger = new TriggerElements();
		this.pManualTrigger = new ManualTriggerElements();
		this.pCircleCITransformation = new CircleCITransformationElements();
		this.pSetCircleCIVersion = new SetCircleCIVersionElements();
		this.pAddExecutor = new AddExecutorElements();
		this.pAddOrbReferenceExecutor = new AddOrbReferenceExecutorElements();
		this.pStringToStringMapEntry = new StringToStringMapEntryElements();
		this.eMODELS = new MODELSElements();
		this.pGHA = new GHAElements();
		this.pCICD = new CICDElements();
		this.pCIRCLE_CI = new CIRCLE_CIElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("d.fe.up.pt.cicd.transformationsdsl.dsl.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TransformationSet returns TransformationSet:
	//    {TransformationSet}
	//    ('before' 'transformation'? '{' (preTIM+=TSMTransformation)* '}')?
	//    ('during' 'transformation'? '{' (onTIM+=TIMTransformation)* '}')?
	//    ('after' 'transformation'? '{' (postTIM+=TSMTransformation)* '}')?
	//;
	public TransformationSetElements getTransformationSetAccess() {
		return pTransformationSet;
	}
	
	public ParserRule getTransformationSetRule() {
		return getTransformationSetAccess().getRule();
	}
	
	//TSMTransformation returns TSMTransformation:
	//    ATLScript | CircleCITransformation
	//;
	public TSMTransformationElements getTSMTransformationAccess() {
		return pTSMTransformation;
	}
	
	public ParserRule getTSMTransformationRule() {
		return getTSMTransformationAccess().getRule();
	}
	
	//ATLScript returns ATLScript:
	//    'run' 'ATL' 'on'? model=MODELS '{' script=EString '}'
	//;
	public ATLScriptElements getATLScriptAccess() {
		return pATLScript;
	}
	
	public ParserRule getATLScriptRule() {
		return getATLScriptAccess().getRule();
	}
	
	//TIMTransformation returns TIMTransformation:
	//    ATLScript | ChangePlugin | ChangeAgentLabel | ReplaceAgentLabels | AddTrigger
	//;
	public TIMTransformationElements getTIMTransformationAccess() {
		return pTIMTransformation;
	}
	
	public ParserRule getTIMTransformationRule() {
		return getTIMTransformationAccess().getRule();
	}
	
	//ChangePlugin returns ChangePlugin:
	//    'change' 'plugin' name=StringToStringMapEntry 'version' version=EString    ('args' '{' args+=StringToStringMapEntry ( "," args+=StringToStringMapEntry)* '}' )?
	//;
	public ChangePluginElements getChangePluginAccess() {
		return pChangePlugin;
	}
	
	public ParserRule getChangePluginRule() {
		return getChangePluginAccess().getRule();
	}
	
	//ChangeAgentLabel returns ChangeAgentLabel:
	//    'change' 'label' name=StringToStringMapEntry
	//;
	public ChangeAgentLabelElements getChangeAgentLabelAccess() {
		return pChangeAgentLabel;
	}
	
	public ParserRule getChangeAgentLabelRule() {
		return getChangeAgentLabelAccess().getRule();
	}
	
	//ReplaceAgentLabels returns ReplaceAgentLabels:
	//    'set' 'labels' ('when' condition=EString)? '{' labels+=EString (',' labels+=EString)* '}'
	//;
	public ReplaceAgentLabelsElements getReplaceAgentLabelsAccess() {
		return pReplaceAgentLabels;
	}
	
	public ParserRule getReplaceAgentLabelsRule() {
		return getReplaceAgentLabelsAccess().getRule();
	}
	
	//AddTrigger returns AddTrigger:
	//    'add' 'trigger' ('when' condition=EString)? trigger=Trigger
	//;
	public AddTriggerElements getAddTriggerAccess() {
		return pAddTrigger;
	}
	
	public ParserRule getAddTriggerRule() {
		return getAddTriggerAccess().getRule();
	}
	
	//Trigger returns CICD::Trigger:
	//    ManualTrigger
	//;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//ManualTrigger returns CICD::ManualTrigger:
	//    {CICD::ManualTrigger} 'manual'
	//;
	public ManualTriggerElements getManualTriggerAccess() {
		return pManualTrigger;
	}
	
	public ParserRule getManualTriggerRule() {
		return getManualTriggerAccess().getRule();
	}
	
	//CircleCITransformation returns CircleCITransformation:
	//    'on' CIRCLE_CI (SetCircleCIVersion | AddExecutor)
	//;
	public CircleCITransformationElements getCircleCITransformationAccess() {
		return pCircleCITransformation;
	}
	
	public ParserRule getCircleCITransformationRule() {
		return getCircleCITransformationAccess().getRule();
	}
	
	//SetCircleCIVersion returns SetCircleCIVersion:
	//    'set' 'version' 'to'? version=EString
	//;
	public SetCircleCIVersionElements getSetCircleCIVersionAccess() {
		return pSetCircleCIVersion;
	}
	
	public ParserRule getSetCircleCIVersionRule() {
		return getSetCircleCIVersionAccess().getRule();
	}
	
	//AddExecutor returns AddExecutor:
	//    'add' 'executor' (AddOrbReferenceExecutor)
	//;
	public AddExecutorElements getAddExecutorAccess() {
		return pAddExecutor;
	}
	
	public ParserRule getAddExecutorRule() {
		return getAddExecutorAccess().getRule();
	}
	
	//AddOrbReferenceExecutor returns AddOrbReferenceExecutor:
	//    executor=EString 'on' jobName=EString 'from'? 'orb' orb=EString
	//;
	public AddOrbReferenceExecutorElements getAddOrbReferenceExecutorAccess() {
		return pAddOrbReferenceExecutor;
	}
	
	public ParserRule getAddOrbReferenceExecutorRule() {
		return getAddOrbReferenceExecutorAccess().getRule();
	}
	
	//StringToStringMapEntry returns StringToStringMapEntry:
	//    key=EString 'to' value=EString
	//;
	public StringToStringMapEntryElements getStringToStringMapEntryAccess() {
		return pStringToStringMapEntry;
	}
	
	public ParserRule getStringToStringMapEntryRule() {
		return getStringToStringMapEntryAccess().getRule();
	}
	
	//enum MODELS returns MODELS:
	//    GHA = 'GHA' | GHA = 'gha' | GHA = 'github' |
	//    CICD = 'CICD' | CICD = 'cicd' | CICD = 'TIM' | CICD = 'tim' |
	//    CircleCI = 'CircleCI' | CircleCI = 'circleci'
	//;
	public MODELSElements getMODELSAccess() {
		return eMODELS;
	}
	
	public EnumRule getMODELSRule() {
		return getMODELSAccess().getRule();
	}
	
	//GHA:
	//    'GHA' | 'gha' | 'github'
	//;
	public GHAElements getGHAAccess() {
		return pGHA;
	}
	
	public ParserRule getGHARule() {
		return getGHAAccess().getRule();
	}
	
	//CICD:
	//    'CICD' | 'cicd' | 'TIM' | 'tim'
	//;
	public CICDElements getCICDAccess() {
		return pCICD;
	}
	
	public ParserRule getCICDRule() {
		return getCICDAccess().getRule();
	}
	
	//CIRCLE_CI:
	//    'CircleCI' | 'circleci'
	//;
	public CIRCLE_CIElements getCIRCLE_CIAccess() {
		return pCIRCLE_CI;
	}
	
	public ParserRule getCIRCLE_CIRule() {
		return getCIRCLE_CIAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
