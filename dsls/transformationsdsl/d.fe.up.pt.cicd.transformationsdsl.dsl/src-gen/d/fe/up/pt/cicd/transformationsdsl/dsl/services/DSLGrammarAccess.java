/*
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TransformationSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TransformationSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cBeforeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cTranslatingKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPreTIMAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPreTIMTSMTransformationParserRuleCall_1_3_0 = (RuleCall)cPreTIMAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhileKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cTranslatingKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cOnTIMAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cOnTIMTIMTransformationParserRuleCall_2_3_0 = (RuleCall)cOnTIMAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAfterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cTranslatingKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cPostTIMAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cPostTIMTSMTransformationParserRuleCall_3_3_0 = (RuleCall)cPostTIMAssignment_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//TransformationSet returns TransformationSet:
		//    {TransformationSet}
		//    ('before' 'translating'? '{' (preTIM+=TSMTransformation)* '}')?
		//    ('while' 'translating'? '{' (onTIM+=TIMTransformation)* '}')?
		//    ('after' 'translating'? '{' (postTIM+=TSMTransformation)* '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TransformationSet}
		//('before' 'translating'? '{' (preTIM+=TSMTransformation)* '}')?
		//('while' 'translating'? '{' (onTIM+=TIMTransformation)* '}')?
		//('after' 'translating'? '{' (postTIM+=TSMTransformation)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TransformationSet}
		public Action getTransformationSetAction_0() { return cTransformationSetAction_0; }
		
		//('before' 'translating'? '{' (preTIM+=TSMTransformation)* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'before'
		public Keyword getBeforeKeyword_1_0() { return cBeforeKeyword_1_0; }
		
		//'translating'?
		public Keyword getTranslatingKeyword_1_1() { return cTranslatingKeyword_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//(preTIM+=TSMTransformation)*
		public Assignment getPreTIMAssignment_1_3() { return cPreTIMAssignment_1_3; }
		
		//TSMTransformation
		public RuleCall getPreTIMTSMTransformationParserRuleCall_1_3_0() { return cPreTIMTSMTransformationParserRuleCall_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
		
		//('while' 'translating'? '{' (onTIM+=TIMTransformation)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'while'
		public Keyword getWhileKeyword_2_0() { return cWhileKeyword_2_0; }
		
		//'translating'?
		public Keyword getTranslatingKeyword_2_1() { return cTranslatingKeyword_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2() { return cLeftCurlyBracketKeyword_2_2; }
		
		//(onTIM+=TIMTransformation)*
		public Assignment getOnTIMAssignment_2_3() { return cOnTIMAssignment_2_3; }
		
		//TIMTransformation
		public RuleCall getOnTIMTIMTransformationParserRuleCall_2_3_0() { return cOnTIMTIMTransformationParserRuleCall_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//('after' 'translating'? '{' (postTIM+=TSMTransformation)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'after'
		public Keyword getAfterKeyword_3_0() { return cAfterKeyword_3_0; }
		
		//'translating'?
		public Keyword getTranslatingKeyword_3_1() { return cTranslatingKeyword_3_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_2() { return cLeftCurlyBracketKeyword_3_2; }
		
		//(postTIM+=TSMTransformation)*
		public Assignment getPostTIMAssignment_3_3() { return cPostTIMAssignment_3_3; }
		
		//TSMTransformation
		public RuleCall getPostTIMTSMTransformationParserRuleCall_3_3_0() { return cPostTIMTSMTransformationParserRuleCall_3_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
	}
	public class TSMTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TSMTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cATLScriptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCircleCITransformationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TSMTransformation returns TSMTransformation:
		//    ATLScript | CircleCITransformation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ATLScript | CircleCITransformation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ATLScript
		public RuleCall getATLScriptParserRuleCall_0() { return cATLScriptParserRuleCall_0; }
		
		//CircleCITransformation
		public RuleCall getCircleCITransformationParserRuleCall_1() { return cCircleCITransformationParserRuleCall_1; }
	}
	public class ATLScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ATLScript");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelMODELSEnumRuleCall_3_0 = (RuleCall)cModelAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScriptAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScriptEStringParserRuleCall_5_0 = (RuleCall)cScriptAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ATLScript returns ATLScript:
		//    'run' 'atl' 'on'? model=MODELS '{' script=EString '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'run' 'atl' 'on'? model=MODELS '{' script=EString '}'
		public Group getGroup() { return cGroup; }
		
		//'run'
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//'atl'
		public Keyword getAtlKeyword_1() { return cAtlKeyword_1; }
		
		//'on'?
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }
		
		//model=MODELS
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//MODELS
		public RuleCall getModelMODELSEnumRuleCall_3_0() { return cModelMODELSEnumRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//script=EString
		public Assignment getScriptAssignment_5() { return cScriptAssignment_5; }
		
		//EString
		public RuleCall getScriptEStringParserRuleCall_5_0() { return cScriptEStringParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TIMTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.TIMTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cATLScriptParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChangePluginParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReplaceAgentLabelsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAddTriggerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReplaceStepParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDeleteStepParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAddStepParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAddPortsParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cSetOptionsParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSetImageParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//TIMTransformation returns TIMTransformation:
		//    ATLScript | ChangePlugin | ReplaceAgentLabels | AddTrigger | ReplaceStep | DeleteStep | AddStep | AddPorts | SetOptions | SetImage
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ATLScript | ChangePlugin | ReplaceAgentLabels | AddTrigger | ReplaceStep | DeleteStep | AddStep | AddPorts | SetOptions | SetImage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ATLScript
		public RuleCall getATLScriptParserRuleCall_0() { return cATLScriptParserRuleCall_0; }
		
		//ChangePlugin
		public RuleCall getChangePluginParserRuleCall_1() { return cChangePluginParserRuleCall_1; }
		
		//ReplaceAgentLabels
		public RuleCall getReplaceAgentLabelsParserRuleCall_2() { return cReplaceAgentLabelsParserRuleCall_2; }
		
		//AddTrigger
		public RuleCall getAddTriggerParserRuleCall_3() { return cAddTriggerParserRuleCall_3; }
		
		//ReplaceStep
		public RuleCall getReplaceStepParserRuleCall_4() { return cReplaceStepParserRuleCall_4; }
		
		//DeleteStep
		public RuleCall getDeleteStepParserRuleCall_5() { return cDeleteStepParserRuleCall_5; }
		
		//AddStep
		public RuleCall getAddStepParserRuleCall_6() { return cAddStepParserRuleCall_6; }
		
		//AddPorts
		public RuleCall getAddPortsParserRuleCall_7() { return cAddPortsParserRuleCall_7; }
		
		//SetOptions
		public RuleCall getSetOptionsParserRuleCall_8() { return cSetOptionsParserRuleCall_8; }
		
		//SetImage
		public RuleCall getSetImageParserRuleCall_9() { return cSetImageParserRuleCall_9; }
	}
	public class SetImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.SetImage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cImageKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionEStringParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cImageAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cImageEStringParserRuleCall_6_0 = (RuleCall)cImageAssignment_6.eContents().get(0);
		
		//SetImage returns ChangeImage:
		//    'set' 'container' 'image' 'when' condition=EString 'to' image=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'container' 'image' 'when' condition=EString 'to' image=EString
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'container'
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }
		
		//'image'
		public Keyword getImageKeyword_2() { return cImageKeyword_2; }
		
		//'when'
		public Keyword getWhenKeyword_3() { return cWhenKeyword_3; }
		
		//condition=EString
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_4_0() { return cConditionEStringParserRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//image=EString
		public Assignment getImageAssignment_6() { return cImageAssignment_6; }
		
		//EString
		public RuleCall getImageEStringParserRuleCall_6_0() { return cImageEStringParserRuleCall_6_0; }
	}
	public class AddPortsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddPorts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPortsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Keyword cPortsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPortsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPortsEStringParserRuleCall_6_0 = (RuleCall)cPortsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPortsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPortsEStringParserRuleCall_7_1_0 = (RuleCall)cPortsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//AddPorts returns AddPorts:
		//    'add' 'container' 'ports' ('when' condition=EString)?  'ports' '{' ports+=EString (',' ports+=EString)* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' 'container' 'ports' ('when' condition=EString)?  'ports' '{' ports+=EString (',' ports+=EString)* '}'
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'container'
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }
		
		//'ports'
		public Keyword getPortsKeyword_2() { return cPortsKeyword_2; }
		
		//('when' condition=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'when'
		public Keyword getWhenKeyword_3_0() { return cWhenKeyword_3_0; }
		
		//condition=EString
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_3_1_0() { return cConditionEStringParserRuleCall_3_1_0; }
		
		//'ports'
		public Keyword getPortsKeyword_4() { return cPortsKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//ports+=EString
		public Assignment getPortsAssignment_6() { return cPortsAssignment_6; }
		
		//EString
		public RuleCall getPortsEStringParserRuleCall_6_0() { return cPortsEStringParserRuleCall_6_0; }
		
		//(',' ports+=EString)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//ports+=EString
		public Assignment getPortsAssignment_7_1() { return cPortsAssignment_7_1; }
		
		//EString
		public RuleCall getPortsEStringParserRuleCall_7_1_0() { return cPortsEStringParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class SetOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.SetOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOptionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionsEStringParserRuleCall_5_0 = (RuleCall)cOptionsAssignment_5.eContents().get(0);
		
		//SetOptions returns SetOptions:
		//    'set' 'container' 'options' ('when' condition=EString)? 'to' options=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'container' 'options' ('when' condition=EString)? 'to' options=EString
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'container'
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }
		
		//'options'
		public Keyword getOptionsKeyword_2() { return cOptionsKeyword_2; }
		
		//('when' condition=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'when'
		public Keyword getWhenKeyword_3_0() { return cWhenKeyword_3_0; }
		
		//condition=EString
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_3_1_0() { return cConditionEStringParserRuleCall_3_1_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//options=EString
		public Assignment getOptionsAssignment_5() { return cOptionsAssignment_5; }
		
		//EString
		public RuleCall getOptionsEStringParserRuleCall_5_0() { return cOptionsEStringParserRuleCall_5_0; }
	}
	public class ChangePluginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ChangePlugin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPluginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameStringToStringMapEntryParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cVersionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVersionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVersionEStringParserRuleCall_4_0 = (RuleCall)cVersionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cArgsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cArgsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cArgsStringToStringMapEntryParserRuleCall_5_2_0 = (RuleCall)cArgsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//ChangePlugin returns ChangePlugin:
		//    'change' 'plugin' name=StringToStringMapEntry 'version' version=EString    ('args' '{' args+=StringToStringMapEntry+ '}' )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'change' 'plugin' name=StringToStringMapEntry 'version' version=EString	('args' '{' args+=StringToStringMapEntry+ '}' )?
		public Group getGroup() { return cGroup; }
		
		//'change'
		public Keyword getChangeKeyword_0() { return cChangeKeyword_0; }
		
		//'plugin'
		public Keyword getPluginKeyword_1() { return cPluginKeyword_1; }
		
		//name=StringToStringMapEntry
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//StringToStringMapEntry
		public RuleCall getNameStringToStringMapEntryParserRuleCall_2_0() { return cNameStringToStringMapEntryParserRuleCall_2_0; }
		
		//'version'
		public Keyword getVersionKeyword_3() { return cVersionKeyword_3; }
		
		//version=EString
		public Assignment getVersionAssignment_4() { return cVersionAssignment_4; }
		
		//EString
		public RuleCall getVersionEStringParserRuleCall_4_0() { return cVersionEStringParserRuleCall_4_0; }
		
		//('args' '{' args+=StringToStringMapEntry+ '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'args'
		public Keyword getArgsKeyword_5_0() { return cArgsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//args+=StringToStringMapEntry+
		public Assignment getArgsAssignment_5_2() { return cArgsAssignment_5_2; }
		
		//StringToStringMapEntry
		public RuleCall getArgsStringToStringMapEntryParserRuleCall_5_2_0() { return cArgsStringToStringMapEntryParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class ReplaceAgentLabelsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ReplaceAgentLabels");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLabelsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLabelsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelsEStringParserRuleCall_4_0 = (RuleCall)cLabelsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ReplaceAgentLabels returns ReplaceAgentLabels:
		//    'set' 'labels' ('when' condition=EString)? '{' labels+=EString+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'labels' ('when' condition=EString)? '{' labels+=EString+ '}'
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'labels'
		public Keyword getLabelsKeyword_1() { return cLabelsKeyword_1; }
		
		//('when' condition=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//condition=EString
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_2_1_0() { return cConditionEStringParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//labels+=EString+
		public Assignment getLabelsAssignment_4() { return cLabelsAssignment_4; }
		
		//EString
		public RuleCall getLabelsEStringParserRuleCall_4_0() { return cLabelsEStringParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AddTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Assignment cTriggerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTriggerTriggerParserRuleCall_3_0 = (RuleCall)cTriggerAssignment_3.eContents().get(0);
		
		//AddTrigger returns AddTrigger:
		//    'add' 'trigger' ('when' condition=EString)? trigger=Trigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' 'trigger' ('when' condition=EString)? trigger=Trigger
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'trigger'
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }
		
		//('when' condition=EString)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//condition=EString
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_2_1_0() { return cConditionEStringParserRuleCall_2_1_0; }
		
		//trigger=Trigger
		public Assignment getTriggerAssignment_3() { return cTriggerAssignment_3; }
		
		//Trigger
		public RuleCall getTriggerTriggerParserRuleCall_3_0() { return cTriggerTriggerParserRuleCall_3_0; }
	}
	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.Trigger");
		private final RuleCall cManualTriggerParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Trigger returns CICD::Trigger:
		//    ManualTrigger
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ManualTrigger
		public RuleCall getManualTriggerParserRuleCall() { return cManualTriggerParserRuleCall; }
	}
	public class ManualTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ManualTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cManualTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cManualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ManualTrigger returns CICD::ManualTrigger:
		//    {CICD::ManualTrigger} 'manual'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CICD::ManualTrigger} 'manual'
		public Group getGroup() { return cGroup; }
		
		//{CICD::ManualTrigger}
		public Action getManualTriggerAction_0() { return cManualTriggerAction_0; }
		
		//'manual'
		public Keyword getManualKeyword_1() { return cManualKeyword_1; }
	}
	public class DeleteStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.DeleteStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJobAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJobEStringParserRuleCall_4_0 = (RuleCall)cJobAssignment_4.eContents().get(0);
		
		//DeleteStep returns DeleteStep:
		//    'delete' 'step' index=INT 'on' job=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' 'step' index=INT 'on' job=EString
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//'step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//job=EString
		public Assignment getJobAssignment_4() { return cJobAssignment_4; }
		
		//EString
		public RuleCall getJobEStringParserRuleCall_4_0() { return cJobEStringParserRuleCall_4_0; }
	}
	public class AddStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJobAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJobEStringParserRuleCall_4_0 = (RuleCall)cJobAssignment_4.eContents().get(0);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStepAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepStepParserRuleCall_6_0 = (RuleCall)cStepAssignment_6.eContents().get(0);
		
		//AddStep returns AddStep:
		//    'insert' 'step' index=INT 'on' job=EString 'with' step=Step
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'insert' 'step' index=INT 'on' job=EString 'with' step=Step
		public Group getGroup() { return cGroup; }
		
		//'insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//'step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//job=EString
		public Assignment getJobAssignment_4() { return cJobAssignment_4; }
		
		//EString
		public RuleCall getJobEStringParserRuleCall_4_0() { return cJobEStringParserRuleCall_4_0; }
		
		//'with'
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }
		
		//step=Step
		public Assignment getStepAssignment_6() { return cStepAssignment_6; }
		
		//Step
		public RuleCall getStepStepParserRuleCall_6_0() { return cStepStepParserRuleCall_6_0; }
	}
	public class ReplaceStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ReplaceStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReplaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cOnKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJobAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJobEStringParserRuleCall_4_0 = (RuleCall)cJobAssignment_4.eContents().get(0);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStepAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepStepParserRuleCall_6_0 = (RuleCall)cStepAssignment_6.eContents().get(0);
		
		//ReplaceStep returns ReplaceStep:
		//    'replace' 'step' index=INT 'on' job=EString 'with' step=Step
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'replace' 'step' index=INT 'on' job=EString 'with' step=Step
		public Group getGroup() { return cGroup; }
		
		//'replace'
		public Keyword getReplaceKeyword_0() { return cReplaceKeyword_0; }
		
		//'step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//index=INT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_2_0() { return cIndexINTTerminalRuleCall_2_0; }
		
		//'on'
		public Keyword getOnKeyword_3() { return cOnKeyword_3; }
		
		//job=EString
		public Assignment getJobAssignment_4() { return cJobAssignment_4; }
		
		//EString
		public RuleCall getJobEStringParserRuleCall_4_0() { return cJobEStringParserRuleCall_4_0; }
		
		//'with'
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }
		
		//step=Step
		public Assignment getStepAssignment_6() { return cStepAssignment_6; }
		
		//Step
		public RuleCall getStepStepParserRuleCall_6_0() { return cStepStepParserRuleCall_6_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConditionalStepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonConditionalStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Step returns CICD::Step:
		//    ConditionalStep | NonConditionalStep
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalStep | NonConditionalStep
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConditionalStep
		public RuleCall getConditionalStepParserRuleCall_0() { return cConditionalStepParserRuleCall_0; }
		
		//NonConditionalStep
		public RuleCall getNonConditionalStepParserRuleCall_1() { return cNonConditionalStepParserRuleCall_1; }
	}
	public class ConditionalStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.ConditionalStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfConditionStringLiteralParserRuleCall_3_0 = (RuleCall)cIfConditionAssignment_3.eContents().get(0);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenRunAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenRunStepParserRuleCall_5_0 = (RuleCall)cThenRunAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseRunAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseRunStepParserRuleCall_6_1_0 = (RuleCall)cElseRunAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConditionalStep returns CICD::ConditionalStep:
		//    'conditional' '{' 'if' ifCondition=StringLiteral 'then' thenRun+=Step+ ('else' elseRun+=Step+)? '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'conditional' '{' 'if' ifCondition=StringLiteral 'then' thenRun+=Step+ ('else' elseRun+=Step+)? '}'
		public Group getGroup() { return cGroup; }
		
		//'conditional'
		public Keyword getConditionalKeyword_0() { return cConditionalKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'if'
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }
		
		//ifCondition=StringLiteral
		public Assignment getIfConditionAssignment_3() { return cIfConditionAssignment_3; }
		
		//StringLiteral
		public RuleCall getIfConditionStringLiteralParserRuleCall_3_0() { return cIfConditionStringLiteralParserRuleCall_3_0; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//thenRun+=Step+
		public Assignment getThenRunAssignment_5() { return cThenRunAssignment_5; }
		
		//Step
		public RuleCall getThenRunStepParserRuleCall_5_0() { return cThenRunStepParserRuleCall_5_0; }
		
		//('else' elseRun+=Step+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//elseRun+=Step+
		public Assignment getElseRunAssignment_6_1() { return cElseRunAssignment_6_1; }
		
		//Step
		public RuleCall getElseRunStepParserRuleCall_6_1_0() { return cElseRunStepParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class NonConditionalStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.NonConditionalStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cCommandAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cCommandKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Keyword cScriptKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cProgramAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cProgramStringLiteralParserRuleCall_0_0_4_0 = (RuleCall)cProgramAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cPluginAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cPluginKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Keyword cNameKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cPluginNameAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cPluginNameEStringParserRuleCall_0_1_4_0 = (RuleCall)cPluginNameAssignment_0_1_4.eContents().get(0);
		private final Keyword cVersionKeyword_0_1_5 = (Keyword)cGroup_0_1.eContents().get(5);
		private final Assignment cVersionAssignment_0_1_6 = (Assignment)cGroup_0_1.eContents().get(6);
		private final RuleCall cVersionEStringParserRuleCall_0_1_6_0 = (RuleCall)cVersionAssignment_0_1_6.eContents().get(0);
		private final Group cGroup_0_1_7 = (Group)cGroup_0_1.eContents().get(7);
		private final Keyword cArgsKeyword_0_1_7_0 = (Keyword)cGroup_0_1_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1_7_1 = (Keyword)cGroup_0_1_7.eContents().get(1);
		private final Assignment cKwargsAssignment_0_1_7_2 = (Assignment)cGroup_0_1_7.eContents().get(2);
		private final RuleCall cKwargsAssignmentParserRuleCall_0_1_7_2_0 = (RuleCall)cKwargsAssignment_0_1_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1_7_3 = (Keyword)cGroup_0_1_7.eContents().get(3);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cCheckoutAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cCheckoutKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_0_2_3 = (Group)cGroup_0_2.eContents().get(3);
		private final Keyword cPathKeyword_0_2_3_0 = (Keyword)cGroup_0_2_3.eContents().get(0);
		private final Assignment cPathAssignment_0_2_3_1 = (Assignment)cGroup_0_2_3.eContents().get(1);
		private final RuleCall cPathStringLiteralParserRuleCall_0_2_3_1_0 = (RuleCall)cPathAssignment_0_2_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEnvironmentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEnvironmentVariablesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEnvironmentVariablesAssignmentParserRuleCall_1_2_0 = (RuleCall)cEnvironmentVariablesAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NonConditionalStep returns CICD::NonConditionalStep:
		//    (
		//        (
		//            {CICD::Command}
		//            'command' '{' 'script' program=StringLiteral
		//        )
		//        |
		//        (
		//            {CICD::Plugin}
		//            'plugin' '{'
		//                'name' pluginName=EString
		//                'version' version=EString
		//                (
		//                    'args' '{'
		//                        kwargs+=Assignment+
		//                    '}'
		//                )?
		//        )/* |
		//    (
		//        {CICD::Cache}
		//        'cache' '{'
		//            'name' cacheName=StringLiteral
		//            'keys' '{'
		//                keys+=StringLiteral+
		//            '}'
		//            'paths' '{'
		//                paths+=StringLiteral+
		//            '}'
		//            'mode' store=CACHE_MODE
		//    ) |
		//    (
		//        {CICD::Artifact}
		//        'artifact' '{'
		//            'name' artifactName=StringLiteral
		//            'include' '{'
		//                includePaths+=StringLiteral+
		//            '}'
		//            (
		//            'exclude' '{'
		//                excludePaths+=StringLiteral+
		//            '}'
		//            )?
		//            ('retention' 'time' retentionTime=StringLiteral)?
		//            'mode' store?=('store' | 'load')
		//    )*/ |
		//        (
		//            {CICD::Checkout}
		//            'checkout' '{' ('path' path=StringLiteral)?
		//        )
		//    )
		//        ('environment' '{' environmentVariables+=Assignment+ '}')?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    (
		//        {CICD::Command}
		//        'command' '{' 'script' program=StringLiteral
		//    )
		//    |
		//    (
		//        {CICD::Plugin}
		//        'plugin' '{'
		//            'name' pluginName=EString
		//            'version' version=EString
		//            (
		//                'args' '{'
		//                    kwargs+=Assignment+
		//                '}'
		//            )?
		//    )/* |
		//(
		//    {CICD::Cache}
		//    'cache' '{'
		//        'name' cacheName=StringLiteral
		//        'keys' '{'
		//            keys+=StringLiteral+
		//        '}'
		//        'paths' '{'
		//            paths+=StringLiteral+
		//        '}'
		//        'mode' store=CACHE_MODE
		//) |
		//(
		//    {CICD::Artifact}
		//    'artifact' '{'
		//        'name' artifactName=StringLiteral
		//        'include' '{'
		//            includePaths+=StringLiteral+
		//        '}'
		//        (
		//        'exclude' '{'
		//            excludePaths+=StringLiteral+
		//        '}'
		//        )?
		//        ('retention' 'time' retentionTime=StringLiteral)?
		//        'mode' store?=('store' | 'load')
		//)*/ |
		//    (
		//        {CICD::Checkout}
		//        'checkout' '{' ('path' path=StringLiteral)?
		//    )
		//)
		//    ('environment' '{' environmentVariables+=Assignment+ '}')?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//(
		//    (
		//        {CICD::Command}
		//        'command' '{' 'script' program=StringLiteral
		//    )
		//    |
		//    (
		//        {CICD::Plugin}
		//        'plugin' '{'
		//            'name' pluginName=EString
		//            'version' version=EString
		//            (
		//                'args' '{'
		//                    kwargs+=Assignment+
		//                '}'
		//            )?
		//    )/* |
		//(
		//    {CICD::Cache}
		//    'cache' '{'
		//        'name' cacheName=StringLiteral
		//        'keys' '{'
		//            keys+=StringLiteral+
		//        '}'
		//        'paths' '{'
		//            paths+=StringLiteral+
		//        '}'
		//        'mode' store=CACHE_MODE
		//) |
		//(
		//    {CICD::Artifact}
		//    'artifact' '{'
		//        'name' artifactName=StringLiteral
		//        'include' '{'
		//            includePaths+=StringLiteral+
		//        '}'
		//        (
		//        'exclude' '{'
		//            excludePaths+=StringLiteral+
		//        '}'
		//        )?
		//        ('retention' 'time' retentionTime=StringLiteral)?
		//        'mode' store?=('store' | 'load')
		//)*/ |
		//    (
		//        {CICD::Checkout}
		//        'checkout' '{' ('path' path=StringLiteral)?
		//    )
		//)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//(
		//    {CICD::Command}
		//    'command' '{' 'script' program=StringLiteral
		//)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{CICD::Command}
		public Action getCommandAction_0_0_0() { return cCommandAction_0_0_0; }
		
		//'command'
		public Keyword getCommandKeyword_0_0_1() { return cCommandKeyword_0_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0_2() { return cLeftCurlyBracketKeyword_0_0_2; }
		
		//'script'
		public Keyword getScriptKeyword_0_0_3() { return cScriptKeyword_0_0_3; }
		
		//program=StringLiteral
		public Assignment getProgramAssignment_0_0_4() { return cProgramAssignment_0_0_4; }
		
		//StringLiteral
		public RuleCall getProgramStringLiteralParserRuleCall_0_0_4_0() { return cProgramStringLiteralParserRuleCall_0_0_4_0; }
		
		//(
		//    {CICD::Plugin}
		//    'plugin' '{'
		//        'name' pluginName=EString
		//        'version' version=EString
		//        (
		//            'args' '{'
		//                kwargs+=Assignment+
		//            '}'
		//        )?
		//)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{CICD::Plugin}
		public Action getPluginAction_0_1_0() { return cPluginAction_0_1_0; }
		
		//'plugin'
		public Keyword getPluginKeyword_0_1_1() { return cPluginKeyword_0_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1_2() { return cLeftCurlyBracketKeyword_0_1_2; }
		
		//'name'
		public Keyword getNameKeyword_0_1_3() { return cNameKeyword_0_1_3; }
		
		//pluginName=EString
		public Assignment getPluginNameAssignment_0_1_4() { return cPluginNameAssignment_0_1_4; }
		
		//EString
		public RuleCall getPluginNameEStringParserRuleCall_0_1_4_0() { return cPluginNameEStringParserRuleCall_0_1_4_0; }
		
		//'version'
		public Keyword getVersionKeyword_0_1_5() { return cVersionKeyword_0_1_5; }
		
		//version=EString
		public Assignment getVersionAssignment_0_1_6() { return cVersionAssignment_0_1_6; }
		
		//EString
		public RuleCall getVersionEStringParserRuleCall_0_1_6_0() { return cVersionEStringParserRuleCall_0_1_6_0; }
		
		//(
		//    'args' '{'
		//        kwargs+=Assignment+
		//    '}'
		//)?
		public Group getGroup_0_1_7() { return cGroup_0_1_7; }
		
		//'args'
		public Keyword getArgsKeyword_0_1_7_0() { return cArgsKeyword_0_1_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1_7_1() { return cLeftCurlyBracketKeyword_0_1_7_1; }
		
		//kwargs+=Assignment+
		public Assignment getKwargsAssignment_0_1_7_2() { return cKwargsAssignment_0_1_7_2; }
		
		//Assignment
		public RuleCall getKwargsAssignmentParserRuleCall_0_1_7_2_0() { return cKwargsAssignmentParserRuleCall_0_1_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_1_7_3() { return cRightCurlyBracketKeyword_0_1_7_3; }
		
		//(
		//    {CICD::Checkout}
		//    'checkout' '{' ('path' path=StringLiteral)?
		//)
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{CICD::Checkout}
		public Action getCheckoutAction_0_2_0() { return cCheckoutAction_0_2_0; }
		
		//'checkout'
		public Keyword getCheckoutKeyword_0_2_1() { return cCheckoutKeyword_0_2_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2_2() { return cLeftCurlyBracketKeyword_0_2_2; }
		
		//('path' path=StringLiteral)?
		public Group getGroup_0_2_3() { return cGroup_0_2_3; }
		
		//'path'
		public Keyword getPathKeyword_0_2_3_0() { return cPathKeyword_0_2_3_0; }
		
		//path=StringLiteral
		public Assignment getPathAssignment_0_2_3_1() { return cPathAssignment_0_2_3_1; }
		
		//StringLiteral
		public RuleCall getPathStringLiteralParserRuleCall_0_2_3_1_0() { return cPathStringLiteralParserRuleCall_0_2_3_1_0; }
		
		//('environment' '{' environmentVariables+=Assignment+ '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'environment'
		public Keyword getEnvironmentKeyword_1_0() { return cEnvironmentKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//environmentVariables+=Assignment+
		public Assignment getEnvironmentVariablesAssignment_1_2() { return cEnvironmentVariablesAssignment_1_2; }
		
		//Assignment
		public RuleCall getEnvironmentVariablesAssignmentParserRuleCall_1_2_0() { return cEnvironmentVariablesAssignmentParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral returns CICD::StringLiteral:
		//    value=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyVariableDeclarationParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Assignment returns CICD::Assignment:
		//    key=VariableDeclaration '=' value=StringLiteral
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=VariableDeclaration '=' value=StringLiteral
		public Group getGroup() { return cGroup; }
		
		//key=VariableDeclaration
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//VariableDeclaration
		public RuleCall getKeyVariableDeclarationParserRuleCall_0_0() { return cKeyVariableDeclarationParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=StringLiteral
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0() { return cValueStringLiteralParserRuleCall_2_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.VariableDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableDeclaration returns CICD::VariableDeclaration:
		//    name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class CircleCITransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.CircleCITransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCircleciKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSetCircleCIVersionParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cAddExecutorParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cSelectWorkflowParserRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		
		//CircleCITransformation returns CircleCITransformation:
		//    'on' 'circleci' (SetCircleCIVersion | AddExecutor | SelectWorkflow)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' 'circleci' (SetCircleCIVersion | AddExecutor | SelectWorkflow)
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//'circleci'
		public Keyword getCircleciKeyword_1() { return cCircleciKeyword_1; }
		
		//(SetCircleCIVersion | AddExecutor | SelectWorkflow)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//SetCircleCIVersion
		public RuleCall getSetCircleCIVersionParserRuleCall_2_0() { return cSetCircleCIVersionParserRuleCall_2_0; }
		
		//AddExecutor
		public RuleCall getAddExecutorParserRuleCall_2_1() { return cAddExecutorParserRuleCall_2_1; }
		
		//SelectWorkflow
		public RuleCall getSelectWorkflowParserRuleCall_2_2() { return cSelectWorkflowParserRuleCall_2_2; }
	}
	public class SetCircleCIVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.SetCircleCIVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVersionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVersionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVersionEStringParserRuleCall_3_0 = (RuleCall)cVersionAssignment_3.eContents().get(0);
		
		//SetCircleCIVersion returns SetCircleCIVersion:
		//    'set' 'version' 'to'? version=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' 'version' 'to'? version=EString
		public Group getGroup() { return cGroup; }
		
		//'set'
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }
		
		//'version'
		public Keyword getVersionKeyword_1() { return cVersionKeyword_1; }
		
		//'to'?
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//version=EString
		public Assignment getVersionAssignment_3() { return cVersionAssignment_3; }
		
		//EString
		public RuleCall getVersionEStringParserRuleCall_3_0() { return cVersionEStringParserRuleCall_3_0; }
	}
	public class AddExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExecutorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cAddOrbReferenceExecutorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AddExecutor returns AddExecutor:
		//    'add' 'executor' (AddOrbReferenceExecutor)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'add' 'executor' (AddOrbReferenceExecutor)
		public Group getGroup() { return cGroup; }
		
		//'add'
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//'executor'
		public Keyword getExecutorKeyword_1() { return cExecutorKeyword_1; }
		
		//(AddOrbReferenceExecutor)
		public RuleCall getAddOrbReferenceExecutorParserRuleCall_2() { return cAddOrbReferenceExecutorParserRuleCall_2; }
	}
	public class AddOrbReferenceExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.AddOrbReferenceExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExecutorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExecutorEStringParserRuleCall_0_0 = (RuleCall)cExecutorAssignment_0.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJobNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJobNameEStringParserRuleCall_2_0 = (RuleCall)cJobNameAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOrbKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOrbAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOrbEStringParserRuleCall_5_0 = (RuleCall)cOrbAssignment_5.eContents().get(0);
		
		//AddOrbReferenceExecutor returns AddOrbReferenceExecutor:
		//    executor=EString 'on' jobName=EString 'from'? 'orb' orb=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//executor=EString 'on' jobName=EString 'from'? 'orb' orb=EString
		public Group getGroup() { return cGroup; }
		
		//executor=EString
		public Assignment getExecutorAssignment_0() { return cExecutorAssignment_0; }
		
		//EString
		public RuleCall getExecutorEStringParserRuleCall_0_0() { return cExecutorEStringParserRuleCall_0_0; }
		
		//'on'
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }
		
		//jobName=EString
		public Assignment getJobNameAssignment_2() { return cJobNameAssignment_2; }
		
		//EString
		public RuleCall getJobNameEStringParserRuleCall_2_0() { return cJobNameEStringParserRuleCall_2_0; }
		
		//'from'?
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }
		
		//'orb'
		public Keyword getOrbKeyword_4() { return cOrbKeyword_4; }
		
		//orb=EString
		public Assignment getOrbAssignment_5() { return cOrbAssignment_5; }
		
		//EString
		public RuleCall getOrbEStringParserRuleCall_5_0() { return cOrbEStringParserRuleCall_5_0; }
	}
	public class SelectWorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.SelectWorkflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWorkflowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//SelectWorkflow returns SelectWorkflow:
		//    'select' 'workflow' name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'select' 'workflow' name=EString
		public Group getGroup() { return cGroup; }
		
		//'select'
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }
		
		//'workflow'
		public Keyword getWorkflowKeyword_1() { return cWorkflowKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class StringToStringMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.StringToStringMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyEStringParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEStringParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StringToStringMapEntry returns StringToStringMapEntry:
		//    key=EString 'to' value=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//key=EString 'to' value=EString
		public Group getGroup() { return cGroup; }
		
		//key=EString
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//EString
		public RuleCall getKeyEStringParserRuleCall_0_0() { return cKeyEStringParserRuleCall_0_0; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//value=EString
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_2_0() { return cValueEStringParserRuleCall_2_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	public class CACHE_MODEElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.CACHE_MODE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTOREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTOREStoreKeyword_0_0 = (Keyword)cSTOREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOADEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOADLoadKeyword_1_0 = (Keyword)cLOADEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOTHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOTHBothKeyword_2_0 = (Keyword)cBOTHEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CACHE_MODE returns CICD::CACHE_MODE:
		//    STORE = 'store' | LOAD = 'load' | BOTH = 'both'
		//;
		public EnumRule getRule() { return rule; }
		
		//STORE = 'store' | LOAD = 'load' | BOTH = 'both'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STORE = 'store'
		public EnumLiteralDeclaration getSTOREEnumLiteralDeclaration_0() { return cSTOREEnumLiteralDeclaration_0; }
		
		//'store'
		public Keyword getSTOREStoreKeyword_0_0() { return cSTOREStoreKeyword_0_0; }
		
		//LOAD = 'load'
		public EnumLiteralDeclaration getLOADEnumLiteralDeclaration_1() { return cLOADEnumLiteralDeclaration_1; }
		
		//'load'
		public Keyword getLOADLoadKeyword_1_0() { return cLOADLoadKeyword_1_0; }
		
		//BOTH = 'both'
		public EnumLiteralDeclaration getBOTHEnumLiteralDeclaration_2() { return cBOTHEnumLiteralDeclaration_2; }
		
		//'both'
		public Keyword getBOTHBothKeyword_2_0() { return cBOTHBothKeyword_2_0; }
	}
	public class MODELSElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "d.fe.up.pt.cicd.transformationsdsl.dsl.DSL.MODELS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGHAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGHAGhaKeyword_0_0 = (Keyword)cGHAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCICDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCICDCicdKeyword_1_0 = (Keyword)cCICDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCircleCIEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCircleCICircleciKeyword_2_0 = (Keyword)cCircleCIEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MODELS returns MODELS:
		//    GHA = 'gha' | CICD = 'cicd' | CircleCI = 'circleci'
		//;
		public EnumRule getRule() { return rule; }
		
		//GHA = 'gha' | CICD = 'cicd' | CircleCI = 'circleci'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GHA = 'gha'
		public EnumLiteralDeclaration getGHAEnumLiteralDeclaration_0() { return cGHAEnumLiteralDeclaration_0; }
		
		//'gha'
		public Keyword getGHAGhaKeyword_0_0() { return cGHAGhaKeyword_0_0; }
		
		//CICD = 'cicd'
		public EnumLiteralDeclaration getCICDEnumLiteralDeclaration_1() { return cCICDEnumLiteralDeclaration_1; }
		
		//'cicd'
		public Keyword getCICDCicdKeyword_1_0() { return cCICDCicdKeyword_1_0; }
		
		//CircleCI = 'circleci'
		public EnumLiteralDeclaration getCircleCIEnumLiteralDeclaration_2() { return cCircleCIEnumLiteralDeclaration_2; }
		
		//'circleci'
		public Keyword getCircleCICircleciKeyword_2_0() { return cCircleCICircleciKeyword_2_0; }
	}
	
	private final TransformationSetElements pTransformationSet;
	private final TSMTransformationElements pTSMTransformation;
	private final ATLScriptElements pATLScript;
	private final TIMTransformationElements pTIMTransformation;
	private final SetImageElements pSetImage;
	private final AddPortsElements pAddPorts;
	private final SetOptionsElements pSetOptions;
	private final ChangePluginElements pChangePlugin;
	private final ReplaceAgentLabelsElements pReplaceAgentLabels;
	private final AddTriggerElements pAddTrigger;
	private final TriggerElements pTrigger;
	private final ManualTriggerElements pManualTrigger;
	private final DeleteStepElements pDeleteStep;
	private final AddStepElements pAddStep;
	private final ReplaceStepElements pReplaceStep;
	private final StepElements pStep;
	private final ConditionalStepElements pConditionalStep;
	private final NonConditionalStepElements pNonConditionalStep;
	private final StringLiteralElements pStringLiteral;
	private final AssignmentElements pAssignment;
	private final VariableDeclarationElements pVariableDeclaration;
	private final CACHE_MODEElements eCACHE_MODE;
	private final CircleCITransformationElements pCircleCITransformation;
	private final SetCircleCIVersionElements pSetCircleCIVersion;
	private final AddExecutorElements pAddExecutor;
	private final AddOrbReferenceExecutorElements pAddOrbReferenceExecutor;
	private final SelectWorkflowElements pSelectWorkflow;
	private final StringToStringMapEntryElements pStringToStringMapEntry;
	private final MODELSElements eMODELS;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTransformationSet = new TransformationSetElements();
		this.pTSMTransformation = new TSMTransformationElements();
		this.pATLScript = new ATLScriptElements();
		this.pTIMTransformation = new TIMTransformationElements();
		this.pSetImage = new SetImageElements();
		this.pAddPorts = new AddPortsElements();
		this.pSetOptions = new SetOptionsElements();
		this.pChangePlugin = new ChangePluginElements();
		this.pReplaceAgentLabels = new ReplaceAgentLabelsElements();
		this.pAddTrigger = new AddTriggerElements();
		this.pTrigger = new TriggerElements();
		this.pManualTrigger = new ManualTriggerElements();
		this.pDeleteStep = new DeleteStepElements();
		this.pAddStep = new AddStepElements();
		this.pReplaceStep = new ReplaceStepElements();
		this.pStep = new StepElements();
		this.pConditionalStep = new ConditionalStepElements();
		this.pNonConditionalStep = new NonConditionalStepElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pAssignment = new AssignmentElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.eCACHE_MODE = new CACHE_MODEElements();
		this.pCircleCITransformation = new CircleCITransformationElements();
		this.pSetCircleCIVersion = new SetCircleCIVersionElements();
		this.pAddExecutor = new AddExecutorElements();
		this.pAddOrbReferenceExecutor = new AddOrbReferenceExecutorElements();
		this.pSelectWorkflow = new SelectWorkflowElements();
		this.pStringToStringMapEntry = new StringToStringMapEntryElements();
		this.eMODELS = new MODELSElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("d.fe.up.pt.cicd.transformationsdsl.dsl.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TransformationSet returns TransformationSet:
	//    {TransformationSet}
	//    ('before' 'translating'? '{' (preTIM+=TSMTransformation)* '}')?
	//    ('while' 'translating'? '{' (onTIM+=TIMTransformation)* '}')?
	//    ('after' 'translating'? '{' (postTIM+=TSMTransformation)* '}')?
	//;
	public TransformationSetElements getTransformationSetAccess() {
		return pTransformationSet;
	}
	
	public ParserRule getTransformationSetRule() {
		return getTransformationSetAccess().getRule();
	}
	
	//TSMTransformation returns TSMTransformation:
	//    ATLScript | CircleCITransformation
	//;
	public TSMTransformationElements getTSMTransformationAccess() {
		return pTSMTransformation;
	}
	
	public ParserRule getTSMTransformationRule() {
		return getTSMTransformationAccess().getRule();
	}
	
	//ATLScript returns ATLScript:
	//    'run' 'atl' 'on'? model=MODELS '{' script=EString '}'
	//;
	public ATLScriptElements getATLScriptAccess() {
		return pATLScript;
	}
	
	public ParserRule getATLScriptRule() {
		return getATLScriptAccess().getRule();
	}
	
	//TIMTransformation returns TIMTransformation:
	//    ATLScript | ChangePlugin | ReplaceAgentLabels | AddTrigger | ReplaceStep | DeleteStep | AddStep | AddPorts | SetOptions | SetImage
	//;
	public TIMTransformationElements getTIMTransformationAccess() {
		return pTIMTransformation;
	}
	
	public ParserRule getTIMTransformationRule() {
		return getTIMTransformationAccess().getRule();
	}
	
	//SetImage returns ChangeImage:
	//    'set' 'container' 'image' 'when' condition=EString 'to' image=EString
	//;
	public SetImageElements getSetImageAccess() {
		return pSetImage;
	}
	
	public ParserRule getSetImageRule() {
		return getSetImageAccess().getRule();
	}
	
	//AddPorts returns AddPorts:
	//    'add' 'container' 'ports' ('when' condition=EString)?  'ports' '{' ports+=EString (',' ports+=EString)* '}'
	//;
	public AddPortsElements getAddPortsAccess() {
		return pAddPorts;
	}
	
	public ParserRule getAddPortsRule() {
		return getAddPortsAccess().getRule();
	}
	
	//SetOptions returns SetOptions:
	//    'set' 'container' 'options' ('when' condition=EString)? 'to' options=EString
	//;
	public SetOptionsElements getSetOptionsAccess() {
		return pSetOptions;
	}
	
	public ParserRule getSetOptionsRule() {
		return getSetOptionsAccess().getRule();
	}
	
	//ChangePlugin returns ChangePlugin:
	//    'change' 'plugin' name=StringToStringMapEntry 'version' version=EString    ('args' '{' args+=StringToStringMapEntry+ '}' )?
	//;
	public ChangePluginElements getChangePluginAccess() {
		return pChangePlugin;
	}
	
	public ParserRule getChangePluginRule() {
		return getChangePluginAccess().getRule();
	}
	
	//ReplaceAgentLabels returns ReplaceAgentLabels:
	//    'set' 'labels' ('when' condition=EString)? '{' labels+=EString+ '}'
	//;
	public ReplaceAgentLabelsElements getReplaceAgentLabelsAccess() {
		return pReplaceAgentLabels;
	}
	
	public ParserRule getReplaceAgentLabelsRule() {
		return getReplaceAgentLabelsAccess().getRule();
	}
	
	//AddTrigger returns AddTrigger:
	//    'add' 'trigger' ('when' condition=EString)? trigger=Trigger
	//;
	public AddTriggerElements getAddTriggerAccess() {
		return pAddTrigger;
	}
	
	public ParserRule getAddTriggerRule() {
		return getAddTriggerAccess().getRule();
	}
	
	//Trigger returns CICD::Trigger:
	//    ManualTrigger
	//;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}
	
	//ManualTrigger returns CICD::ManualTrigger:
	//    {CICD::ManualTrigger} 'manual'
	//;
	public ManualTriggerElements getManualTriggerAccess() {
		return pManualTrigger;
	}
	
	public ParserRule getManualTriggerRule() {
		return getManualTriggerAccess().getRule();
	}
	
	//DeleteStep returns DeleteStep:
	//    'delete' 'step' index=INT 'on' job=EString
	//;
	public DeleteStepElements getDeleteStepAccess() {
		return pDeleteStep;
	}
	
	public ParserRule getDeleteStepRule() {
		return getDeleteStepAccess().getRule();
	}
	
	//AddStep returns AddStep:
	//    'insert' 'step' index=INT 'on' job=EString 'with' step=Step
	//;
	public AddStepElements getAddStepAccess() {
		return pAddStep;
	}
	
	public ParserRule getAddStepRule() {
		return getAddStepAccess().getRule();
	}
	
	//ReplaceStep returns ReplaceStep:
	//    'replace' 'step' index=INT 'on' job=EString 'with' step=Step
	//;
	public ReplaceStepElements getReplaceStepAccess() {
		return pReplaceStep;
	}
	
	public ParserRule getReplaceStepRule() {
		return getReplaceStepAccess().getRule();
	}
	
	//Step returns CICD::Step:
	//    ConditionalStep | NonConditionalStep
	//;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//ConditionalStep returns CICD::ConditionalStep:
	//    'conditional' '{' 'if' ifCondition=StringLiteral 'then' thenRun+=Step+ ('else' elseRun+=Step+)? '}'
	//;
	public ConditionalStepElements getConditionalStepAccess() {
		return pConditionalStep;
	}
	
	public ParserRule getConditionalStepRule() {
		return getConditionalStepAccess().getRule();
	}
	
	//NonConditionalStep returns CICD::NonConditionalStep:
	//    (
	//        (
	//            {CICD::Command}
	//            'command' '{' 'script' program=StringLiteral
	//        )
	//        |
	//        (
	//            {CICD::Plugin}
	//            'plugin' '{'
	//                'name' pluginName=EString
	//                'version' version=EString
	//                (
	//                    'args' '{'
	//                        kwargs+=Assignment+
	//                    '}'
	//                )?
	//        )/* |
	//    (
	//        {CICD::Cache}
	//        'cache' '{'
	//            'name' cacheName=StringLiteral
	//            'keys' '{'
	//                keys+=StringLiteral+
	//            '}'
	//            'paths' '{'
	//                paths+=StringLiteral+
	//            '}'
	//            'mode' store=CACHE_MODE
	//    ) |
	//    (
	//        {CICD::Artifact}
	//        'artifact' '{'
	//            'name' artifactName=StringLiteral
	//            'include' '{'
	//                includePaths+=StringLiteral+
	//            '}'
	//            (
	//            'exclude' '{'
	//                excludePaths+=StringLiteral+
	//            '}'
	//            )?
	//            ('retention' 'time' retentionTime=StringLiteral)?
	//            'mode' store?=('store' | 'load')
	//    )*/ |
	//        (
	//            {CICD::Checkout}
	//            'checkout' '{' ('path' path=StringLiteral)?
	//        )
	//    )
	//        ('environment' '{' environmentVariables+=Assignment+ '}')?
	//    '}'
	//;
	public NonConditionalStepElements getNonConditionalStepAccess() {
		return pNonConditionalStep;
	}
	
	public ParserRule getNonConditionalStepRule() {
		return getNonConditionalStepAccess().getRule();
	}
	
	//StringLiteral returns CICD::StringLiteral:
	//    value=EString
	//;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//Assignment returns CICD::Assignment:
	//    key=VariableDeclaration '=' value=StringLiteral
	//;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//VariableDeclaration returns CICD::VariableDeclaration:
	//    name=EString
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//enum CACHE_MODE returns CICD::CACHE_MODE:
	//    STORE = 'store' | LOAD = 'load' | BOTH = 'both'
	//;
	public CACHE_MODEElements getCACHE_MODEAccess() {
		return eCACHE_MODE;
	}
	
	public EnumRule getCACHE_MODERule() {
		return getCACHE_MODEAccess().getRule();
	}
	
	//CircleCITransformation returns CircleCITransformation:
	//    'on' 'circleci' (SetCircleCIVersion | AddExecutor | SelectWorkflow)
	//;
	public CircleCITransformationElements getCircleCITransformationAccess() {
		return pCircleCITransformation;
	}
	
	public ParserRule getCircleCITransformationRule() {
		return getCircleCITransformationAccess().getRule();
	}
	
	//SetCircleCIVersion returns SetCircleCIVersion:
	//    'set' 'version' 'to'? version=EString
	//;
	public SetCircleCIVersionElements getSetCircleCIVersionAccess() {
		return pSetCircleCIVersion;
	}
	
	public ParserRule getSetCircleCIVersionRule() {
		return getSetCircleCIVersionAccess().getRule();
	}
	
	//AddExecutor returns AddExecutor:
	//    'add' 'executor' (AddOrbReferenceExecutor)
	//;
	public AddExecutorElements getAddExecutorAccess() {
		return pAddExecutor;
	}
	
	public ParserRule getAddExecutorRule() {
		return getAddExecutorAccess().getRule();
	}
	
	//AddOrbReferenceExecutor returns AddOrbReferenceExecutor:
	//    executor=EString 'on' jobName=EString 'from'? 'orb' orb=EString
	//;
	public AddOrbReferenceExecutorElements getAddOrbReferenceExecutorAccess() {
		return pAddOrbReferenceExecutor;
	}
	
	public ParserRule getAddOrbReferenceExecutorRule() {
		return getAddOrbReferenceExecutorAccess().getRule();
	}
	
	//SelectWorkflow returns SelectWorkflow:
	//    'select' 'workflow' name=EString
	//;
	public SelectWorkflowElements getSelectWorkflowAccess() {
		return pSelectWorkflow;
	}
	
	public ParserRule getSelectWorkflowRule() {
		return getSelectWorkflowAccess().getRule();
	}
	
	//StringToStringMapEntry returns StringToStringMapEntry:
	//    key=EString 'to' value=EString
	//;
	public StringToStringMapEntryElements getStringToStringMapEntryAccess() {
		return pStringToStringMapEntry;
	}
	
	public ParserRule getStringToStringMapEntryRule() {
		return getStringToStringMapEntryAccess().getRule();
	}
	
	//enum MODELS returns MODELS:
	//    GHA = 'gha' | CICD = 'cicd' | CircleCI = 'circleci'
	//;
	public MODELSElements getMODELSAccess() {
		return eMODELS;
	}
	
	public EnumRule getMODELSRule() {
		return getMODELSAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
