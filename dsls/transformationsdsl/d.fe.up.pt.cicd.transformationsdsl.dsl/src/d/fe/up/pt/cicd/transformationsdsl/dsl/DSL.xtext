// automatically generated by Xtext
grammar d.fe.up.pt.cicd.transformationsdsl.dsl.DSL with org.eclipse.xtext.common.Terminals

import "http://d.fe.up.pt/Transformations"
import "http://www.d.fe.up.pt/CICD" as CICD
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TransformationSet returns TransformationSet:
	{TransformationSet}
	('before' 'translating'? '{' (preTIM+=TSMTransformation)* '}')?
	('while' 'translating'? '{' (onTIM+=TIMTransformation)* '}')?
	('after' 'translating'? '{' (postTIM+=TSMTransformation)* '}')?
;

TSMTransformation returns TSMTransformation:
	ATLScript | CircleCITransformation
;

ATLScript returns ATLScript:
	'run' 'ATL' 'on'? model=MODELS '{' script=EString '}'
;

TIMTransformation returns TIMTransformation:
	ATLScript | ChangePlugin | ReplaceAgentLabels | AddTrigger | ReplaceStep | DeleteStep
;
	
ChangePlugin returns ChangePlugin:
	'change' 'plugin' name=StringToStringMapEntry 'version' version=EString	('args' '{' args+=StringToStringMapEntry+ '}' )?
;
	
ReplaceAgentLabels returns ReplaceAgentLabels:
	'set' 'labels' ('when' condition=EString)? '{' labels+=EString+ '}'
;

AddTrigger returns AddTrigger:
	'add' 'trigger' ('when' condition=EString)? trigger=Trigger
;

Trigger returns CICD::Trigger:
	ManualTrigger
;

ManualTrigger returns CICD::ManualTrigger:
	{CICD::ManualTrigger} 'manual'
;

DeleteStep returns DeleteStep:
	'delete' 'step' index=INT 'on' job=EString
;


ReplaceStep returns ReplaceStep:
	'replace' 'step' index=INT 'on' job=EString 'with' step=Step
;

Step returns CICD::Step:
	ConditionalStep | NonConditionalStep
;

ConditionalStep returns CICD::ConditionalStep:
	'conditional' '{' 'if' ifCondition=StringLiteral 'then' thenRun+=Step+ ('else' elseRun+=Step+)? '}'
;

NonConditionalStep returns CICD::NonConditionalStep:
	(
		{CICD::Command}
		'command' '{' 'script' program=StringLiteral 
	) 
	/*|
	(
		{CICD::Plugin}
		'plugin' '{' 
			'name' pluginName=EString 
			'version' version=EString 
			(
				'args' '{' 
					kwargs+=Assignment+ 
				'}'
			)?
	) |
	(
		{CICD::Cache}
		'cache' '{' 
			'name' cacheName=StringLiteral 
			'keys' '{' 
				keys+=StringLiteral+ 
			'}' 
			'paths' '{' 
				paths+=StringLiteral+ 
			'}' 
			'mode' store=CACHE_MODE
	) |
	(
		{CICD::Artifact}
		'artifact' '{' 
			'name' artifactName=StringLiteral 
			'include' '{' 
				includePaths+=StringLiteral+ 
			'}' 
			(
			'exclude' '{' 
				excludePaths+=StringLiteral+ 
			'}'
			)?
			('retention' 'time' retentionTime=StringLiteral)? 
			'mode' store?=('store' | 'load')
	) |
	(
		{CICD::Checkout}
		'checkout' ('{' path=StringLiteral '}')?
	)*/
	('environment' '{' environmentVariables+=Assignment+ '}')?
	'}'
;

StringLiteral returns CICD::StringLiteral:
	value=EString
;

Assignment returns CICD::Assignment:
	key=VariableDeclaration '=' value=StringLiteral
;

VariableDeclaration returns CICD::VariableDeclaration:
	name=EString
;

enum CACHE_MODE returns CICD::CACHE_MODE:
	STORE = 'store' | LOAD = 'load' | BOTH = 'both'
;


CircleCITransformation returns CircleCITransformation:
	'on' 'circleci' (SetCircleCIVersion | AddExecutor | SelectWorkflow)	
;

SetCircleCIVersion returns SetCircleCIVersion:
	'set' 'version' 'to'? version=EString
;

AddExecutor returns AddExecutor:
	'add' 'executor' (AddOrbReferenceExecutor)
;

AddOrbReferenceExecutor returns AddOrbReferenceExecutor:
	executor=EString 'on' jobName=EString 'from'? 'orb' orb=EString
;

SelectWorkflow returns SelectWorkflow:
	'select' 'workflow' name=EString
;


StringToStringMapEntry returns StringToStringMapEntry:
	key=EString 'to' value=EString
;
	
enum MODELS returns MODELS:
	GHA = 'gha' | CICD = 'cicd' | CircleCI = 'circleci'	
;

EString returns ecore::EString:
	STRING | ID;
