/**
 * generated by Xtext 2.33.0
 */
package d.fe.up.pt.cicd.transformationsdsl.dsl.formatting2;

import com.google.inject.Inject;
import d.fe.up.pt.cicd.transformationsdsl.dsl.services.DSLGrammarAccess;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.ChangePluginTransformation;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.Transformation;
import d.fe.up.pt.cicd.transformationsdsl.metamodel.Transformations.TransformationSet;
import java.util.Arrays;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.EMap;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DSLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DSLGrammarAccess _dSLGrammarAccess;

  protected void _format(final TransformationSet transformationSet, @Extension final IFormattableDocument document) {
    EList<Transformation> _transformations = transformationSet.getTransformations();
    for (final Transformation transformation : _transformations) {
      document.<Transformation>format(transformation);
    }
  }

  protected void _format(final ChangePluginTransformation changePluginTransformation, @Extension final IFormattableDocument document) {
    document.<Map.Entry<String, String>>format(changePluginTransformation.getName());
    EMap<String, String> _args = changePluginTransformation.getArgs();
    for (final Map.Entry<String, String> stringToStringMapEntry : _args) {
      document.<Map.Entry<String, String>>format(stringToStringMapEntry);
    }
  }

  public void format(final Object changePluginTransformation, final IFormattableDocument document) {
    if (changePluginTransformation instanceof XtextResource) {
      _format((XtextResource)changePluginTransformation, document);
      return;
    } else if (changePluginTransformation instanceof ChangePluginTransformation) {
      _format((ChangePluginTransformation)changePluginTransformation, document);
      return;
    } else if (changePluginTransformation instanceof TransformationSet) {
      _format((TransformationSet)changePluginTransformation, document);
      return;
    } else if (changePluginTransformation instanceof EObject) {
      _format((EObject)changePluginTransformation, document);
      return;
    } else if (changePluginTransformation == null) {
      _format((Void)null, document);
      return;
    } else if (changePluginTransformation != null) {
      _format(changePluginTransformation, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(changePluginTransformation, document).toString());
    }
  }
}
