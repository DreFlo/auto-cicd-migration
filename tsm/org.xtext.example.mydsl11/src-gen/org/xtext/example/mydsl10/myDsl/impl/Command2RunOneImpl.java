/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl10.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl10.myDsl.Command2RunOne;
import org.xtext.example.mydsl10.myDsl.IFThenElseRun;
import org.xtext.example.mydsl10.myDsl.MyDslPackage;
import org.xtext.example.mydsl10.myDsl.Tool_framework;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Command2 Run One</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl10.myDsl.impl.Command2RunOneImpl#getCommand_conditional <em>Command conditional</em>}</li>
 *   <li>{@link org.xtext.example.mydsl10.myDsl.impl.Command2RunOneImpl#getTool <em>Tool</em>}</li>
 *   <li>{@link org.xtext.example.mydsl10.myDsl.impl.Command2RunOneImpl#getParameters <em>Parameters</em>}</li>
 *   <li>{@link org.xtext.example.mydsl10.myDsl.impl.Command2RunOneImpl#getCommand_string <em>Command string</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Command2RunOneImpl extends MinimalEObjectImpl.Container implements Command2RunOne
{
  /**
   * The cached value of the '{@link #getCommand_conditional() <em>Command conditional</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand_conditional()
   * @generated
   * @ordered
   */
  protected EList<IFThenElseRun> command_conditional;

  /**
   * The cached value of the '{@link #getTool() <em>Tool</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTool()
   * @generated
   * @ordered
   */
  protected EList<Tool_framework> tool;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<String> parameters;

  /**
   * The cached value of the '{@link #getCommand_string() <em>Command string</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommand_string()
   * @generated
   * @ordered
   */
  protected EList<String> command_string;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Command2RunOneImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.COMMAND2_RUN_ONE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<IFThenElseRun> getCommand_conditional()
  {
    if (command_conditional == null)
    {
      command_conditional = new EObjectContainmentEList<IFThenElseRun>(IFThenElseRun.class, this, MyDslPackage.COMMAND2_RUN_ONE__COMMAND_CONDITIONAL);
    }
    return command_conditional;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Tool_framework> getTool()
  {
    if (tool == null)
    {
      tool = new EObjectContainmentEList<Tool_framework>(Tool_framework.class, this, MyDslPackage.COMMAND2_RUN_ONE__TOOL);
    }
    return tool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EDataTypeEList<String>(String.class, this, MyDslPackage.COMMAND2_RUN_ONE__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getCommand_string()
  {
    if (command_string == null)
    {
      command_string = new EDataTypeEList<String>(String.class, this, MyDslPackage.COMMAND2_RUN_ONE__COMMAND_STRING);
    }
    return command_string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_CONDITIONAL:
        return ((InternalEList<?>)getCommand_conditional()).basicRemove(otherEnd, msgs);
      case MyDslPackage.COMMAND2_RUN_ONE__TOOL:
        return ((InternalEList<?>)getTool()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_CONDITIONAL:
        return getCommand_conditional();
      case MyDslPackage.COMMAND2_RUN_ONE__TOOL:
        return getTool();
      case MyDslPackage.COMMAND2_RUN_ONE__PARAMETERS:
        return getParameters();
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_STRING:
        return getCommand_string();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_CONDITIONAL:
        getCommand_conditional().clear();
        getCommand_conditional().addAll((Collection<? extends IFThenElseRun>)newValue);
        return;
      case MyDslPackage.COMMAND2_RUN_ONE__TOOL:
        getTool().clear();
        getTool().addAll((Collection<? extends Tool_framework>)newValue);
        return;
      case MyDslPackage.COMMAND2_RUN_ONE__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends String>)newValue);
        return;
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_STRING:
        getCommand_string().clear();
        getCommand_string().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_CONDITIONAL:
        getCommand_conditional().clear();
        return;
      case MyDslPackage.COMMAND2_RUN_ONE__TOOL:
        getTool().clear();
        return;
      case MyDslPackage.COMMAND2_RUN_ONE__PARAMETERS:
        getParameters().clear();
        return;
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_STRING:
        getCommand_string().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_CONDITIONAL:
        return command_conditional != null && !command_conditional.isEmpty();
      case MyDslPackage.COMMAND2_RUN_ONE__TOOL:
        return tool != null && !tool.isEmpty();
      case MyDslPackage.COMMAND2_RUN_ONE__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
      case MyDslPackage.COMMAND2_RUN_ONE__COMMAND_STRING:
        return command_string != null && !command_string.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (Parameters: ");
    result.append(parameters);
    result.append(", command_string: ");
    result.append(command_string);
    result.append(')');
    return result.toString();
  }

} //Command2RunOneImpl
