/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl10.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.example.mydsl10.myDsl.Command2RunTool;
import org.xtext.example.mydsl10.myDsl.MyDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Command2 Run Tool</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl10.myDsl.impl.Command2RunToolImpl#getToolkey <em>Toolkey</em>}</li>
 *   <li>{@link org.xtext.example.mydsl10.myDsl.impl.Command2RunToolImpl#getParameters <em>Parameters</em>}</li>
 * </ul>
 *
 * @generated
 */
public class Command2RunToolImpl extends MinimalEObjectImpl.Container implements Command2RunTool
{
  /**
   * The cached value of the '{@link #getToolkey() <em>Toolkey</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getToolkey()
   * @generated
   * @ordered
   */
  protected EList<String> toolkey;

  /**
   * The cached value of the '{@link #getParameters() <em>Parameters</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameters()
   * @generated
   * @ordered
   */
  protected EList<String> parameters;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Command2RunToolImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.COMMAND2_RUN_TOOL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getToolkey()
  {
    if (toolkey == null)
    {
      toolkey = new EDataTypeEList<String>(String.class, this, MyDslPackage.COMMAND2_RUN_TOOL__TOOLKEY);
    }
    return toolkey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getParameters()
  {
    if (parameters == null)
    {
      parameters = new EDataTypeEList<String>(String.class, this, MyDslPackage.COMMAND2_RUN_TOOL__PARAMETERS);
    }
    return parameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_TOOL__TOOLKEY:
        return getToolkey();
      case MyDslPackage.COMMAND2_RUN_TOOL__PARAMETERS:
        return getParameters();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_TOOL__TOOLKEY:
        getToolkey().clear();
        getToolkey().addAll((Collection<? extends String>)newValue);
        return;
      case MyDslPackage.COMMAND2_RUN_TOOL__PARAMETERS:
        getParameters().clear();
        getParameters().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_TOOL__TOOLKEY:
        getToolkey().clear();
        return;
      case MyDslPackage.COMMAND2_RUN_TOOL__PARAMETERS:
        getParameters().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.COMMAND2_RUN_TOOL__TOOLKEY:
        return toolkey != null && !toolkey.isEmpty();
      case MyDslPackage.COMMAND2_RUN_TOOL__PARAMETERS:
        return parameters != null && !parameters.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (toolkey: ");
    result.append(toolkey);
    result.append(", Parameters: ");
    result.append(parameters);
    result.append(')');
    return result.toString();
  }

} //Command2RunToolImpl
