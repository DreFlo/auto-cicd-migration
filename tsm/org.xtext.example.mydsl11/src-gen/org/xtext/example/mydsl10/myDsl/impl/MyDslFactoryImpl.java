/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl10.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl10.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.PIPELINE: return createPipeline();
      case MyDslPackage.WHEN: return createWhen();
      case MyDslPackage.JOB_IF_THEN_ELSE: return createJobIfThenElse();
      case MyDslPackage.JOB: return createJob();
      case MyDslPackage.STRATEGY: return createStrategy();
      case MyDslPackage.STEPS: return createSteps();
      case MyDslPackage.STEP_OPTIONS: return createStepOptions();
      case MyDslPackage.STEPS1: return createSteps1();
      case MyDslPackage.STEPS2: return createSteps2();
      case MyDslPackage.STEPS3: return createSteps3();
      case MyDslPackage.TOOL_FRAMEWORK: return createTool_framework();
      case MyDslPackage.ENVIRONMENT: return createEnvironment();
      case MyDslPackage.ARTIFACT: return createArtifact();
      case MyDslPackage.COMMAND: return createCommand();
      case MyDslPackage.COMMAND1: return createCommand1();
      case MyDslPackage.COMMAND2: return createCommand2();
      case MyDslPackage.COMMAND2_ENV: return createCommand2Env();
      case MyDslPackage.COMMAND2_RUN_MULTIPLE: return createCommand2RunMultiple();
      case MyDslPackage.COMMAND2_RUN_ONE: return createCommand2RunOne();
      case MyDslPackage.COMMAND2_USES: return createCommand2Uses();
      case MyDslPackage.COMMAND2_RUN_TOOL: return createCommand2RunTool();
      case MyDslPackage.IF_THEN_ELSE: return createIfThenElse();
      case MyDslPackage.IF_THEN_ELSE_ALT1: return createIfThenElse_alt1();
      case MyDslPackage.IF_THEN_ELSE_RUN: return createIFThenElseRun();
      case MyDslPackage.IF_THEN_ELSE_STEPS: return createIFThenElseSteps();
      case MyDslPackage.IF_THEN_ELSE_STEPS_ALT1: return createIFThenElseSteps_alt1();
      case MyDslPackage.IF_THEN_ELSE_JOBS_STEPS_ALT2: return createIFThenElseJobsSteps_alt2();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pipeline createPipeline()
  {
    PipelineImpl pipeline = new PipelineImpl();
    return pipeline;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public When createWhen()
  {
    WhenImpl when = new WhenImpl();
    return when;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JobIfThenElse createJobIfThenElse()
  {
    JobIfThenElseImpl jobIfThenElse = new JobIfThenElseImpl();
    return jobIfThenElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Job createJob()
  {
    JobImpl job = new JobImpl();
    return job;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Strategy createStrategy()
  {
    StrategyImpl strategy = new StrategyImpl();
    return strategy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Steps createSteps()
  {
    StepsImpl steps = new StepsImpl();
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StepOptions createStepOptions()
  {
    StepOptionsImpl stepOptions = new StepOptionsImpl();
    return stepOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Steps1 createSteps1()
  {
    Steps1Impl steps1 = new Steps1Impl();
    return steps1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Steps2 createSteps2()
  {
    Steps2Impl steps2 = new Steps2Impl();
    return steps2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Steps3 createSteps3()
  {
    Steps3Impl steps3 = new Steps3Impl();
    return steps3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tool_framework createTool_framework()
  {
    Tool_frameworkImpl tool_framework = new Tool_frameworkImpl();
    return tool_framework;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Environment createEnvironment()
  {
    EnvironmentImpl environment = new EnvironmentImpl();
    return environment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Artifact createArtifact()
  {
    ArtifactImpl artifact = new ArtifactImpl();
    return artifact;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command1 createCommand1()
  {
    Command1Impl command1 = new Command1Impl();
    return command1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command2 createCommand2()
  {
    Command2Impl command2 = new Command2Impl();
    return command2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command2Env createCommand2Env()
  {
    Command2EnvImpl command2Env = new Command2EnvImpl();
    return command2Env;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command2RunMultiple createCommand2RunMultiple()
  {
    Command2RunMultipleImpl command2RunMultiple = new Command2RunMultipleImpl();
    return command2RunMultiple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command2RunOne createCommand2RunOne()
  {
    Command2RunOneImpl command2RunOne = new Command2RunOneImpl();
    return command2RunOne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command2Uses createCommand2Uses()
  {
    Command2UsesImpl command2Uses = new Command2UsesImpl();
    return command2Uses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command2RunTool createCommand2RunTool()
  {
    Command2RunToolImpl command2RunTool = new Command2RunToolImpl();
    return command2RunTool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfThenElse createIfThenElse()
  {
    IfThenElseImpl ifThenElse = new IfThenElseImpl();
    return ifThenElse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfThenElse_alt1 createIfThenElse_alt1()
  {
    IfThenElse_alt1Impl ifThenElse_alt1 = new IfThenElse_alt1Impl();
    return ifThenElse_alt1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IFThenElseRun createIFThenElseRun()
  {
    IFThenElseRunImpl ifThenElseRun = new IFThenElseRunImpl();
    return ifThenElseRun;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IFThenElseSteps createIFThenElseSteps()
  {
    IFThenElseStepsImpl ifThenElseSteps = new IFThenElseStepsImpl();
    return ifThenElseSteps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IFThenElseSteps_alt1 createIFThenElseSteps_alt1()
  {
    IFThenElseSteps_alt1Impl ifThenElseSteps_alt1 = new IFThenElseSteps_alt1Impl();
    return ifThenElseSteps_alt1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IFThenElseJobsSteps_alt2 createIFThenElseJobsSteps_alt2()
  {
    IFThenElseJobsSteps_alt2Impl ifThenElseJobsSteps_alt2 = new IFThenElseJobsSteps_alt2Impl();
    return ifThenElseJobsSteps_alt2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
