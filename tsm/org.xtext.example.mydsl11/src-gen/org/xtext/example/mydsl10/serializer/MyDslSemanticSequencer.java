/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl10.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl10.myDsl.Artifact;
import org.xtext.example.mydsl10.myDsl.Command1;
import org.xtext.example.mydsl10.myDsl.Command2;
import org.xtext.example.mydsl10.myDsl.Command2Env;
import org.xtext.example.mydsl10.myDsl.Command2RunMultiple;
import org.xtext.example.mydsl10.myDsl.Command2RunOne;
import org.xtext.example.mydsl10.myDsl.Command2RunTool;
import org.xtext.example.mydsl10.myDsl.Command2Uses;
import org.xtext.example.mydsl10.myDsl.Environment;
import org.xtext.example.mydsl10.myDsl.IFThenElseJobsSteps_alt2;
import org.xtext.example.mydsl10.myDsl.IFThenElseRun;
import org.xtext.example.mydsl10.myDsl.IFThenElseSteps;
import org.xtext.example.mydsl10.myDsl.IFThenElseSteps_alt1;
import org.xtext.example.mydsl10.myDsl.IfThenElse;
import org.xtext.example.mydsl10.myDsl.IfThenElse_alt1;
import org.xtext.example.mydsl10.myDsl.Job;
import org.xtext.example.mydsl10.myDsl.JobIfThenElse;
import org.xtext.example.mydsl10.myDsl.MyDslPackage;
import org.xtext.example.mydsl10.myDsl.Pipeline;
import org.xtext.example.mydsl10.myDsl.StepOptions;
import org.xtext.example.mydsl10.myDsl.Steps;
import org.xtext.example.mydsl10.myDsl.Steps1;
import org.xtext.example.mydsl10.myDsl.Steps2;
import org.xtext.example.mydsl10.myDsl.Steps3;
import org.xtext.example.mydsl10.myDsl.Strategy;
import org.xtext.example.mydsl10.myDsl.Tool_framework;
import org.xtext.example.mydsl10.myDsl.When;
import org.xtext.example.mydsl10.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ARTIFACT:
				sequence_Artifact(context, (Artifact) semanticObject); 
				return; 
			case MyDslPackage.COMMAND1:
				sequence_Command1(context, (Command1) semanticObject); 
				return; 
			case MyDslPackage.COMMAND2:
				sequence_Command2(context, (Command2) semanticObject); 
				return; 
			case MyDslPackage.COMMAND2_ENV:
				sequence_Command2Env(context, (Command2Env) semanticObject); 
				return; 
			case MyDslPackage.COMMAND2_RUN_MULTIPLE:
				sequence_Command2RunMultiple(context, (Command2RunMultiple) semanticObject); 
				return; 
			case MyDslPackage.COMMAND2_RUN_ONE:
				sequence_Command2RunOne(context, (Command2RunOne) semanticObject); 
				return; 
			case MyDslPackage.COMMAND2_RUN_TOOL:
				sequence_Command2RunTool(context, (Command2RunTool) semanticObject); 
				return; 
			case MyDslPackage.COMMAND2_USES:
				sequence_Command2Uses(context, (Command2Uses) semanticObject); 
				return; 
			case MyDslPackage.ENVIRONMENT:
				sequence_Environment(context, (Environment) semanticObject); 
				return; 
			case MyDslPackage.IF_THEN_ELSE_JOBS_STEPS_ALT2:
				sequence_IFThenElseJobsSteps_alt2(context, (IFThenElseJobsSteps_alt2) semanticObject); 
				return; 
			case MyDslPackage.IF_THEN_ELSE_RUN:
				sequence_IFThenElseRun(context, (IFThenElseRun) semanticObject); 
				return; 
			case MyDslPackage.IF_THEN_ELSE_STEPS:
				sequence_IFThenElseSteps(context, (IFThenElseSteps) semanticObject); 
				return; 
			case MyDslPackage.IF_THEN_ELSE_STEPS_ALT1:
				sequence_IFThenElseSteps_alt1(context, (IFThenElseSteps_alt1) semanticObject); 
				return; 
			case MyDslPackage.IF_THEN_ELSE:
				sequence_IfThenElse(context, (IfThenElse) semanticObject); 
				return; 
			case MyDslPackage.IF_THEN_ELSE_ALT1:
				sequence_IfThenElse_alt1(context, (IfThenElse_alt1) semanticObject); 
				return; 
			case MyDslPackage.JOB:
				sequence_Job(context, (Job) semanticObject); 
				return; 
			case MyDslPackage.JOB_IF_THEN_ELSE:
				sequence_JobIfThenElse(context, (JobIfThenElse) semanticObject); 
				return; 
			case MyDslPackage.PIPELINE:
				sequence_Pipeline(context, (Pipeline) semanticObject); 
				return; 
			case MyDslPackage.STEP_OPTIONS:
				sequence_StepOptions(context, (StepOptions) semanticObject); 
				return; 
			case MyDslPackage.STEPS:
				sequence_Steps(context, (Steps) semanticObject); 
				return; 
			case MyDslPackage.STEPS1:
				sequence_Steps1(context, (Steps1) semanticObject); 
				return; 
			case MyDslPackage.STEPS2:
				sequence_Steps2(context, (Steps2) semanticObject); 
				return; 
			case MyDslPackage.STEPS3:
				sequence_Steps3(context, (Steps3) semanticObject); 
				return; 
			case MyDslPackage.STRATEGY:
				sequence_Strategy(context, (Strategy) semanticObject); 
				return; 
			case MyDslPackage.TOOL_FRAMEWORK:
				sequence_Tool_framework(context, (Tool_framework) semanticObject); 
				return; 
			case MyDslPackage.WHEN:
				sequence_When(context, (When) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Artifact returns Artifact
	 *
	 * Constraint:
	 *     (((Key=KEY | Key=TRIGGERS) Value=EString) | (Key=KEY Value=EString))
	 * </pre>
	 */
	protected void sequence_Artifact(ISerializationContext context, Artifact semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Command1
	 *     Command1 returns Command1
	 *
	 * Constraint:
	 *     (tool+=Tool_framework Parameters+=EString? environment_command+=Environment*)
	 * </pre>
	 */
	protected void sequence_Command1(ISerializationContext context, Command1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command2Env returns Command2Env
	 *
	 * Constraint:
	 *     environment_command+=Environment+
	 * </pre>
	 */
	protected void sequence_Command2Env(ISerializationContext context, Command2Env semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command2RunMultiple returns Command2RunMultiple
	 *
	 * Constraint:
	 *     (Parameters+=EString* Parameters+=EString)
	 * </pre>
	 */
	protected void sequence_Command2RunMultiple(ISerializationContext context, Command2RunMultiple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command2RunOne returns Command2RunOne
	 *
	 * Constraint:
	 *     (command_conditional+=IFThenElseRun | (tool+=Tool_framework Parameters+=EString?) | command_string+=STRING)
	 * </pre>
	 */
	protected void sequence_Command2RunOne(ISerializationContext context, Command2RunOne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command2RunTool returns Command2RunTool
	 *
	 * Constraint:
	 *     (toolkey+=KEY Parameters+=EString?)
	 * </pre>
	 */
	protected void sequence_Command2RunTool(ISerializationContext context, Command2RunTool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command2Uses returns Command2Uses
	 *
	 * Constraint:
	 *     tool+=Tool_framework
	 * </pre>
	 */
	protected void sequence_Command2Uses(ISerializationContext context, Command2Uses semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Command returns Command2
	 *     Command2 returns Command2
	 *
	 * Constraint:
	 *     (
	 *         Description+=EString 
	 *         (
	 *             command_options+=IFThenElseSteps | 
	 *             command_options+=Command2Env | 
	 *             command_options+=Command2RunMultiple | 
	 *             command_options+=Command2RunOne | 
	 *             command_options+=Command2Uses | 
	 *             command_options+=Command2RunTool
	 *         )*
	 *     )
	 * </pre>
	 */
	protected void sequence_Command2(ISerializationContext context, Command2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Environment returns Environment
	 *
	 * Constraint:
	 *     (((Key=KEY | Key=TRIGGERS) Value=EString) | (Key=KEY? Value=ALPHANUMERICSTRING*))
	 * </pre>
	 */
	protected void sequence_Environment(ISerializationContext context, Environment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IFThenElseJobsSteps_alt2 returns IFThenElseJobsSteps_alt2
	 *
	 * Constraint:
	 *     Condition=EString
	 * </pre>
	 */
	protected void sequence_IFThenElseJobsSteps_alt2(ISerializationContext context, IFThenElseJobsSteps_alt2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.IF_THEN_ELSE_JOBS_STEPS_ALT2__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.IF_THEN_ELSE_JOBS_STEPS_ALT2__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIFThenElseJobsSteps_alt2Access().getConditionEStringParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IFThenElseRun returns IFThenElseRun
	 *
	 * Constraint:
	 *     (Condition=ALPHANUMERICSTRING if=EString? else=EString?)
	 * </pre>
	 */
	protected void sequence_IFThenElseRun(ISerializationContext context, IFThenElseRun semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IFThenElseSteps returns IFThenElseSteps
	 *
	 * Constraint:
	 *     (alt=IFThenElseSteps_alt1 | alt=IFThenElseJobsSteps_alt2)
	 * </pre>
	 */
	protected void sequence_IFThenElseSteps(ISerializationContext context, IFThenElseSteps semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IFThenElseSteps_alt1 returns IFThenElseSteps_alt1
	 *
	 * Constraint:
	 *     (Condition=ALPHANUMERICSTRING if+=StepOptions+ elsef+=StepOptions*)
	 * </pre>
	 */
	protected void sequence_IFThenElseSteps_alt1(ISerializationContext context, IFThenElseSteps_alt1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IfThenElse returns IfThenElse
	 *
	 * Constraint:
	 *     (alt=IfThenElse_alt1 | alt=IFThenElseJobsSteps_alt2)
	 * </pre>
	 */
	protected void sequence_IfThenElse(ISerializationContext context, IfThenElse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     IfThenElse_alt1 returns IfThenElse_alt1
	 *
	 * Constraint:
	 *     (Condition=EString if+=Job? else+=Job?)
	 * </pre>
	 */
	protected void sequence_IfThenElse_alt1(ISerializationContext context, IfThenElse_alt1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     JobIfThenElse returns JobIfThenElse
	 *
	 * Constraint:
	 *     (option=IfThenElse | option=Job)
	 * </pre>
	 */
	protected void sequence_JobIfThenElse(ISerializationContext context, JobIfThenElse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Job returns Job
	 *
	 * Constraint:
	 *     (
	 *         Allow_faillure?='Allow_faillure'? 
	 *         Name1=KEY 
	 *         (
	 *             Description+=EString | 
	 *             depends+=Environment | 
	 *             tool_framework_job+=Tool_framework | 
	 *             output+=Artifact | 
	 *             ifthenelse+=IfThenElse | 
	 *             steps+=Steps | 
	 *             strategy+=Strategy
	 *         )+
	 *     )
	 * </pre>
	 */
	protected void sequence_Job(ISerializationContext context, Job semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pipeline returns Pipeline
	 *
	 * Constraint:
	 *     (
	 *         Name0=EString | 
	 *         when+=When | 
	 *         Trigger=EString | 
	 *         pipeline_envirnonment+=Environment | 
	 *         job+=JobIfThenElse | 
	 *         pipeline_envirnonment+=Environment
	 *     )*
	 * </pre>
	 */
	protected void sequence_Pipeline(ISerializationContext context, Pipeline semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StepOptions returns StepOptions
	 *
	 * Constraint:
	 *     (stepOption=Steps1 | stepOption=Steps2 | stepOption=Steps3)
	 * </pre>
	 */
	protected void sequence_StepOptions(ISerializationContext context, StepOptions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Steps1 returns Steps1
	 *
	 * Constraint:
	 *     (tool_framework_step+=Tool_framework environemnt_job+=Environment*)
	 * </pre>
	 */
	protected void sequence_Steps1(ISerializationContext context, Steps1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Steps2 returns Steps2
	 *
	 * Constraint:
	 *     depends+=Environment+
	 * </pre>
	 */
	protected void sequence_Steps2(ISerializationContext context, Steps2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Steps3 returns Steps3
	 *
	 * Constraint:
	 *     command+=Command
	 * </pre>
	 */
	protected void sequence_Steps3(ISerializationContext context, Steps3 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Steps returns Steps
	 *
	 * Constraint:
	 *     (steps+=IFThenElseSteps | steps+=StepOptions)+
	 * </pre>
	 */
	protected void sequence_Steps(ISerializationContext context, Steps semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Strategy returns Strategy
	 *
	 * Constraint:
	 *     (fail_fast=EBoolean? input+=Artifact* fail_fast=EBoolean?)
	 * </pre>
	 */
	protected void sequence_Strategy(ISerializationContext context, Strategy semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tool_framework returns Tool_framework
	 *
	 * Constraint:
	 *     Name5=ALPHANUMERICSTRING
	 * </pre>
	 */
	protected void sequence_Tool_framework(ISerializationContext context, Tool_framework semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TOOL_FRAMEWORK__NAME5) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TOOL_FRAMEWORK__NAME5));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTool_frameworkAccess().getName5ALPHANUMERICSTRINGTerminalRuleCall_1_0(), semanticObject.getName5());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     When returns When
	 *
	 * Constraint:
	 *     (Trigger=TRIGGERS environment_when+=Environment*)
	 * </pre>
	 */
	protected void sequence_When(ISerializationContext context, When semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
