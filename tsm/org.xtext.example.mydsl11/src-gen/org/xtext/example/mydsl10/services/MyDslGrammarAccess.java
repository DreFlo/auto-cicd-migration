/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl10.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class PipelineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Pipeline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPipelineAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cNAMETerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cName0Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cName0EStringParserRuleCall_1_0_1_0 = (RuleCall)cName0Assignment_1_0_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cOnKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1_1_1_0_0 = (RuleCall)cGroup_1_1_1_0.eContents().get(0);
		private final Assignment cWhenAssignment_1_1_1_0_1 = (Assignment)cGroup_1_1_1_0.eContents().get(1);
		private final RuleCall cWhenWhenParserRuleCall_1_1_1_0_1_0 = (RuleCall)cWhenAssignment_1_1_1_0_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_1_1_0_2 = (RuleCall)cGroup_1_1_1_0.eContents().get(2);
		private final Assignment cTriggerAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cTriggerEStringParserRuleCall_1_1_1_1_0 = (RuleCall)cTriggerAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cEnvKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_2_1_0 = (RuleCall)cGroup_1_2_1.eContents().get(0);
		private final Assignment cPipeline_envirnonmentAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cPipeline_envirnonmentEnvironmentParserRuleCall_1_2_1_1_0 = (RuleCall)cPipeline_envirnonmentAssignment_1_2_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_2_1_2 = (RuleCall)cGroup_1_2_1.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cJobsKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_3_1_0 = (RuleCall)cGroup_1_3_1.eContents().get(0);
		private final Assignment cJobAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cJobJobIfThenElseParserRuleCall_1_3_1_1_0 = (RuleCall)cJobAssignment_1_3_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_3_1_2 = (RuleCall)cGroup_1_3_1.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cPipeline_envirnonmentAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cPipeline_envirnonmentEnvironmentParserRuleCall_1_4_0_0 = (RuleCall)cPipeline_envirnonmentAssignment_1_4_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		
		////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
		//Pipeline:
		//    {Pipeline}
		//        (
		//        (NAME Name0=EString NEWLINE?) |
		//        ('on:'  ( (BEGIN (when+=When)+ END)  | Trigger=EString) NEWLINE?)|
		//        ('env:' (BEGIN (pipeline_envirnonment+=Environment)+ END) NEWLINE?) |
		//        ('jobs:' (BEGIN ( job+=JobIfThenElse)+ END) NEWLINE?) |
		//        (pipeline_envirnonment+=Environment NEWLINE?)
		//        )*
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Pipeline}
		//    (
		//    (NAME Name0=EString NEWLINE?) |
		//    ('on:'  ( (BEGIN (when+=When)+ END)  | Trigger=EString) NEWLINE?)|
		//    ('env:' (BEGIN (pipeline_envirnonment+=Environment)+ END) NEWLINE?) |
		//    ('jobs:' (BEGIN ( job+=JobIfThenElse)+ END) NEWLINE?) |
		//    (pipeline_envirnonment+=Environment NEWLINE?)
		//    )*
		public Group getGroup() { return cGroup; }
		
		//{Pipeline}
		public Action getPipelineAction_0() { return cPipelineAction_0; }
		
		//(
		//(NAME Name0=EString NEWLINE?) |
		//('on:'  ( (BEGIN (when+=When)+ END)  | Trigger=EString) NEWLINE?)|
		//('env:' (BEGIN (pipeline_envirnonment+=Environment)+ END) NEWLINE?) |
		//('jobs:' (BEGIN ( job+=JobIfThenElse)+ END) NEWLINE?) |
		//(pipeline_envirnonment+=Environment NEWLINE?)
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(NAME Name0=EString NEWLINE?)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall_1_0_0() { return cNAMETerminalRuleCall_1_0_0; }
		
		//Name0=EString
		public Assignment getName0Assignment_1_0_1() { return cName0Assignment_1_0_1; }
		
		//EString
		public RuleCall getName0EStringParserRuleCall_1_0_1_0() { return cName0EStringParserRuleCall_1_0_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_0_2() { return cNEWLINETerminalRuleCall_1_0_2; }
		
		//('on:'  ( (BEGIN (when+=When)+ END)  | Trigger=EString) NEWLINE?)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'on:'
		public Keyword getOnKeyword_1_1_0() { return cOnKeyword_1_1_0; }
		
		//( (BEGIN (when+=When)+ END)  | Trigger=EString)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//(BEGIN (when+=When)+ END)
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_1_1_0_0() { return cBEGINTerminalRuleCall_1_1_1_0_0; }
		
		//(when+=When)+
		public Assignment getWhenAssignment_1_1_1_0_1() { return cWhenAssignment_1_1_1_0_1; }
		
		//When
		public RuleCall getWhenWhenParserRuleCall_1_1_1_0_1_0() { return cWhenWhenParserRuleCall_1_1_1_0_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_1_1_0_2() { return cENDTerminalRuleCall_1_1_1_0_2; }
		
		//Trigger=EString
		public Assignment getTriggerAssignment_1_1_1_1() { return cTriggerAssignment_1_1_1_1; }
		
		//EString
		public RuleCall getTriggerEStringParserRuleCall_1_1_1_1_0() { return cTriggerEStringParserRuleCall_1_1_1_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_2() { return cNEWLINETerminalRuleCall_1_1_2; }
		
		//('env:' (BEGIN (pipeline_envirnonment+=Environment)+ END) NEWLINE?)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'env:'
		public Keyword getEnvKeyword_1_2_0() { return cEnvKeyword_1_2_0; }
		
		//(BEGIN (pipeline_envirnonment+=Environment)+ END)
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_2_1_0() { return cBEGINTerminalRuleCall_1_2_1_0; }
		
		//(pipeline_envirnonment+=Environment)+
		public Assignment getPipeline_envirnonmentAssignment_1_2_1_1() { return cPipeline_envirnonmentAssignment_1_2_1_1; }
		
		//Environment
		public RuleCall getPipeline_envirnonmentEnvironmentParserRuleCall_1_2_1_1_0() { return cPipeline_envirnonmentEnvironmentParserRuleCall_1_2_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_2_1_2() { return cENDTerminalRuleCall_1_2_1_2; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_2_2() { return cNEWLINETerminalRuleCall_1_2_2; }
		
		//('jobs:' (BEGIN ( job+=JobIfThenElse)+ END) NEWLINE?)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'jobs:'
		public Keyword getJobsKeyword_1_3_0() { return cJobsKeyword_1_3_0; }
		
		//(BEGIN ( job+=JobIfThenElse)+ END)
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_3_1_0() { return cBEGINTerminalRuleCall_1_3_1_0; }
		
		//( job+=JobIfThenElse)+
		public Assignment getJobAssignment_1_3_1_1() { return cJobAssignment_1_3_1_1; }
		
		//JobIfThenElse
		public RuleCall getJobJobIfThenElseParserRuleCall_1_3_1_1_0() { return cJobJobIfThenElseParserRuleCall_1_3_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_3_1_2() { return cENDTerminalRuleCall_1_3_1_2; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_3_2() { return cNEWLINETerminalRuleCall_1_3_2; }
		
		//(pipeline_envirnonment+=Environment NEWLINE?)
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//pipeline_envirnonment+=Environment
		public Assignment getPipeline_envirnonmentAssignment_1_4_0() { return cPipeline_envirnonmentAssignment_1_4_0; }
		
		//Environment
		public RuleCall getPipeline_envirnonmentEnvironmentParserRuleCall_1_4_0_0() { return cPipeline_envirnonmentEnvironmentParserRuleCall_1_4_0_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_4_1() { return cNEWLINETerminalRuleCall_1_4_1; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerTRIGGERSTerminalRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cEnvironment_whenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnvironment_whenEnvironmentParserRuleCall_1_1_0 = (RuleCall)cEnvironment_whenAssignment_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//When:
		//    (Trigger=TRIGGERS)
		//    (BEGIN
		//        (environment_when+=Environment)+
		//    END)?
		//        // | ('Timer' Timer=EString)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(Trigger=TRIGGERS)
		//(BEGIN
		//    (environment_when+=Environment)+
		//END)?
		public Group getGroup() { return cGroup; }
		
		//(Trigger=TRIGGERS)
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }
		
		//TRIGGERS
		public RuleCall getTriggerTRIGGERSTerminalRuleCall_0_0() { return cTriggerTRIGGERSTerminalRuleCall_0_0; }
		
		//(BEGIN
		//    (environment_when+=Environment)+
		//END)?
		public Group getGroup_1() { return cGroup_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_0() { return cBEGINTerminalRuleCall_1_0; }
		
		//(environment_when+=Environment)+
		public Assignment getEnvironment_whenAssignment_1_1() { return cEnvironment_whenAssignment_1_1; }
		
		//Environment
		public RuleCall getEnvironment_whenEnvironmentParserRuleCall_1_1_0() { return cEnvironment_whenEnvironmentParserRuleCall_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_2() { return cENDTerminalRuleCall_1_2; }
	}
	public class JobIfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.JobIfThenElse");
		private final Assignment cOptionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOptionAlternatives_0 = (Alternatives)cOptionAssignment.eContents().get(0);
		private final RuleCall cOptionIfThenElseParserRuleCall_0_0 = (RuleCall)cOptionAlternatives_0.eContents().get(0);
		private final RuleCall cOptionJobParserRuleCall_0_1 = (RuleCall)cOptionAlternatives_0.eContents().get(1);
		
		//JobIfThenElse:
		//    option=(IfThenElse|Job)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//option=(IfThenElse|Job)
		public Assignment getOptionAssignment() { return cOptionAssignment; }
		
		//(IfThenElse|Job)
		public Alternatives getOptionAlternatives_0() { return cOptionAlternatives_0; }
		
		//IfThenElse
		public RuleCall getOptionIfThenElseParserRuleCall_0_0() { return cOptionIfThenElseParserRuleCall_0_0; }
		
		//Job
		public RuleCall getOptionJobParserRuleCall_0_1() { return cOptionJobParserRuleCall_0_1; }
	}
	public class JobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Job");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAllow_faillureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAllow_faillureAllow_faillureKeyword_0_0 = (Keyword)cAllow_faillureAssignment_0.eContents().get(0);
		private final Assignment cName1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cName1KEYTerminalRuleCall_1_0 = (RuleCall)cName1Assignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNAMETerminalRuleCall_2_1_0_0 = (RuleCall)cGroup_2_1_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_2_1_0_1_0 = (RuleCall)cDescriptionAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_0 = (Alternatives)cGroup_2_1_1.eContents().get(0);
		private final Keyword cEnvKeyword_2_1_1_0_0 = (Keyword)cAlternatives_2_1_1_0.eContents().get(0);
		private final Keyword cSecretsKeyword_2_1_1_0_1 = (Keyword)cAlternatives_2_1_1_0.eContents().get(1);
		private final Group cGroup_2_1_1_1 = (Group)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2_1_1_1_0 = (RuleCall)cGroup_2_1_1_1.eContents().get(0);
		private final Assignment cDependsAssignment_2_1_1_1_1 = (Assignment)cGroup_2_1_1_1.eContents().get(1);
		private final RuleCall cDependsEnvironmentParserRuleCall_2_1_1_1_1_0 = (RuleCall)cDependsAssignment_2_1_1_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_1_1_1_2 = (RuleCall)cGroup_2_1_1_1.eContents().get(2);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Alternatives cAlternatives_2_1_2_0 = (Alternatives)cGroup_2_1_2.eContents().get(0);
		private final Keyword cRunsOnKeyword_2_1_2_0_0 = (Keyword)cAlternatives_2_1_2_0.eContents().get(0);
		private final Keyword cNeedsKeyword_2_1_2_0_1 = (Keyword)cAlternatives_2_1_2_0.eContents().get(1);
		private final Keyword cUsesKeyword_2_1_2_0_2 = (Keyword)cAlternatives_2_1_2_0.eContents().get(2);
		private final Assignment cTool_framework_jobAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTool_framework_jobTool_frameworkParserRuleCall_2_1_2_1_0 = (RuleCall)cTool_framework_jobAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cAlternatives_2_1.eContents().get(3);
		private final Keyword cOutputsKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Group cGroup_2_1_3_1 = (Group)cGroup_2_1_3.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2_1_3_1_0 = (RuleCall)cGroup_2_1_3_1.eContents().get(0);
		private final Assignment cOutputAssignment_2_1_3_1_1 = (Assignment)cGroup_2_1_3_1.eContents().get(1);
		private final RuleCall cOutputArtifactParserRuleCall_2_1_3_1_1_0 = (RuleCall)cOutputAssignment_2_1_3_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_1_3_1_2 = (RuleCall)cGroup_2_1_3_1.eContents().get(2);
		private final Assignment cIfthenelseAssignment_2_1_4 = (Assignment)cAlternatives_2_1.eContents().get(4);
		private final RuleCall cIfthenelseIfThenElseParserRuleCall_2_1_4_0 = (RuleCall)cIfthenelseAssignment_2_1_4.eContents().get(0);
		private final Assignment cStepsAssignment_2_1_5 = (Assignment)cAlternatives_2_1.eContents().get(5);
		private final RuleCall cStepsStepsParserRuleCall_2_1_5_0 = (RuleCall)cStepsAssignment_2_1_5.eContents().get(0);
		private final Assignment cStrategyAssignment_2_1_6 = (Assignment)cAlternatives_2_1.eContents().get(6);
		private final RuleCall cStrategyStrategyParserRuleCall_2_1_6_0 = (RuleCall)cStrategyAssignment_2_1_6.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//Job:
		//    (Allow_faillure?='Allow_faillure')?
		//    (Name1=KEY)
		//    (BEGIN
		//        (
		//        (NAME (Description+=EString) ) |
		//        (('env:' | 'secrets:') (BEGIN (depends+=Environment)+ END)) |
		//        (('runs-on:' | 'needs:' | "uses:")  tool_framework_job+=Tool_framework ) |
		//        ('outputs:'  (BEGIN (output+=Artifact)+ END)) |
		//        (ifthenelse+=IfThenElse) |
		//        (steps+=Steps) |
		//        (strategy+=Strategy)
		//        )+
		//    END);
		@Override public ParserRule getRule() { return rule; }
		
		//(Allow_faillure?='Allow_faillure')?
		//(Name1=KEY)
		//(BEGIN
		//    (
		//    (NAME (Description+=EString) ) |
		//    (('env:' | 'secrets:') (BEGIN (depends+=Environment)+ END)) |
		//    (('runs-on:' | 'needs:' | "uses:")  tool_framework_job+=Tool_framework ) |
		//    ('outputs:'  (BEGIN (output+=Artifact)+ END)) |
		//    (ifthenelse+=IfThenElse) |
		//    (steps+=Steps) |
		//    (strategy+=Strategy)
		//    )+
		//END)
		public Group getGroup() { return cGroup; }
		
		//(Allow_faillure?='Allow_faillure')?
		public Assignment getAllow_faillureAssignment_0() { return cAllow_faillureAssignment_0; }
		
		//'Allow_faillure'
		public Keyword getAllow_faillureAllow_faillureKeyword_0_0() { return cAllow_faillureAllow_faillureKeyword_0_0; }
		
		//(Name1=KEY)
		public Assignment getName1Assignment_1() { return cName1Assignment_1; }
		
		//KEY
		public RuleCall getName1KEYTerminalRuleCall_1_0() { return cName1KEYTerminalRuleCall_1_0; }
		
		//(BEGIN
		//    (
		//    (NAME (Description+=EString) ) |
		//    (('env:' | 'secrets:') (BEGIN (depends+=Environment)+ END)) |
		//    (('runs-on:' | 'needs:' | "uses:")  tool_framework_job+=Tool_framework ) |
		//    ('outputs:'  (BEGIN (output+=Artifact)+ END)) |
		//    (ifthenelse+=IfThenElse) |
		//    (steps+=Steps) |
		//    (strategy+=Strategy)
		//    )+
		//END)
		public Group getGroup_2() { return cGroup_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_0() { return cBEGINTerminalRuleCall_2_0; }
		
		//(
		//(NAME (Description+=EString) ) |
		//(('env:' | 'secrets:') (BEGIN (depends+=Environment)+ END)) |
		//(('runs-on:' | 'needs:' | "uses:")  tool_framework_job+=Tool_framework ) |
		//('outputs:'  (BEGIN (output+=Artifact)+ END)) |
		//(ifthenelse+=IfThenElse) |
		//(steps+=Steps) |
		//(strategy+=Strategy)
		//)+
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//(NAME (Description+=EString) )
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall_2_1_0_0() { return cNAMETerminalRuleCall_2_1_0_0; }
		
		//(Description+=EString)
		public Assignment getDescriptionAssignment_2_1_0_1() { return cDescriptionAssignment_2_1_0_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_1_0_1_0() { return cDescriptionEStringParserRuleCall_2_1_0_1_0; }
		
		//(('env:' | 'secrets:') (BEGIN (depends+=Environment)+ END))
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//('env:' | 'secrets:')
		public Alternatives getAlternatives_2_1_1_0() { return cAlternatives_2_1_1_0; }
		
		//'env:'
		public Keyword getEnvKeyword_2_1_1_0_0() { return cEnvKeyword_2_1_1_0_0; }
		
		//'secrets:'
		public Keyword getSecretsKeyword_2_1_1_0_1() { return cSecretsKeyword_2_1_1_0_1; }
		
		//(BEGIN (depends+=Environment)+ END)
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_1_1_1_0() { return cBEGINTerminalRuleCall_2_1_1_1_0; }
		
		//(depends+=Environment)+
		public Assignment getDependsAssignment_2_1_1_1_1() { return cDependsAssignment_2_1_1_1_1; }
		
		//Environment
		public RuleCall getDependsEnvironmentParserRuleCall_2_1_1_1_1_0() { return cDependsEnvironmentParserRuleCall_2_1_1_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_1_1_1_2() { return cENDTerminalRuleCall_2_1_1_1_2; }
		
		//(('runs-on:' | 'needs:' | "uses:")  tool_framework_job+=Tool_framework )
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//('runs-on:' | 'needs:' | "uses:")
		public Alternatives getAlternatives_2_1_2_0() { return cAlternatives_2_1_2_0; }
		
		//'runs-on:'
		public Keyword getRunsOnKeyword_2_1_2_0_0() { return cRunsOnKeyword_2_1_2_0_0; }
		
		//'needs:'
		public Keyword getNeedsKeyword_2_1_2_0_1() { return cNeedsKeyword_2_1_2_0_1; }
		
		//"uses:"
		public Keyword getUsesKeyword_2_1_2_0_2() { return cUsesKeyword_2_1_2_0_2; }
		
		//tool_framework_job+=Tool_framework
		public Assignment getTool_framework_jobAssignment_2_1_2_1() { return cTool_framework_jobAssignment_2_1_2_1; }
		
		//Tool_framework
		public RuleCall getTool_framework_jobTool_frameworkParserRuleCall_2_1_2_1_0() { return cTool_framework_jobTool_frameworkParserRuleCall_2_1_2_1_0; }
		
		//('outputs:'  (BEGIN (output+=Artifact)+ END))
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }
		
		//'outputs:'
		public Keyword getOutputsKeyword_2_1_3_0() { return cOutputsKeyword_2_1_3_0; }
		
		//(BEGIN (output+=Artifact)+ END)
		public Group getGroup_2_1_3_1() { return cGroup_2_1_3_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_1_3_1_0() { return cBEGINTerminalRuleCall_2_1_3_1_0; }
		
		//(output+=Artifact)+
		public Assignment getOutputAssignment_2_1_3_1_1() { return cOutputAssignment_2_1_3_1_1; }
		
		//Artifact
		public RuleCall getOutputArtifactParserRuleCall_2_1_3_1_1_0() { return cOutputArtifactParserRuleCall_2_1_3_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_1_3_1_2() { return cENDTerminalRuleCall_2_1_3_1_2; }
		
		//(ifthenelse+=IfThenElse)
		public Assignment getIfthenelseAssignment_2_1_4() { return cIfthenelseAssignment_2_1_4; }
		
		//IfThenElse
		public RuleCall getIfthenelseIfThenElseParserRuleCall_2_1_4_0() { return cIfthenelseIfThenElseParserRuleCall_2_1_4_0; }
		
		//(steps+=Steps)
		public Assignment getStepsAssignment_2_1_5() { return cStepsAssignment_2_1_5; }
		
		//Steps
		public RuleCall getStepsStepsParserRuleCall_2_1_5_0() { return cStepsStepsParserRuleCall_2_1_5_0; }
		
		//(strategy+=Strategy)
		public Assignment getStrategyAssignment_2_1_6() { return cStrategyAssignment_2_1_6; }
		
		//Strategy
		public RuleCall getStrategyStrategyParserRuleCall_2_1_6_0() { return cStrategyStrategyParserRuleCall_2_1_6_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_2() { return cENDTerminalRuleCall_2_2; }
	}
	public class StrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Strategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFailFastKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFail_fastAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cFail_fastEBooleanParserRuleCall_1_1_1_0 = (RuleCall)cFail_fastAssignment_1_1_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cMatrixKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_2_1_0 = (RuleCall)cGroup_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_1_1 = (Group)cGroup_1_2_1.eContents().get(1);
		private final Assignment cInputAssignment_1_2_1_1_0 = (Assignment)cGroup_1_2_1_1.eContents().get(0);
		private final RuleCall cInputArtifactParserRuleCall_1_2_1_1_0_0 = (RuleCall)cInputAssignment_1_2_1_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_2_1_1_1 = (RuleCall)cGroup_1_2_1_1.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_1_2_1_2 = (RuleCall)cGroup_1_2_1.eContents().get(2);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cFailFastKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cFail_fastAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final RuleCall cFail_fastEBooleanParserRuleCall_1_2_2_1_0 = (RuleCall)cFail_fastAssignment_1_2_2_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_2_2_2 = (RuleCall)cGroup_1_2_2.eContents().get(2);
		private final RuleCall cENDTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Strategy:
		//    'strategy:'
		//     (BEGIN ("fail-fast:"  fail_fast=EBoolean NEWLINE?)?
		//         ("matrix:" (BEGIN
		//             (input+=Artifact NEWLINE?)+ END
		//         )? ("fail-fast:"  fail_fast=EBoolean NEWLINE?)? )?  END
		//     )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'strategy:'
		// (BEGIN ("fail-fast:"  fail_fast=EBoolean NEWLINE?)?
		//     ("matrix:" (BEGIN
		//         (input+=Artifact NEWLINE?)+ END
		//     )? ("fail-fast:"  fail_fast=EBoolean NEWLINE?)? )?  END
		// )
		public Group getGroup() { return cGroup; }
		
		//'strategy:'
		public Keyword getStrategyKeyword_0() { return cStrategyKeyword_0; }
		
		//(BEGIN ("fail-fast:"  fail_fast=EBoolean NEWLINE?)?
		//    ("matrix:" (BEGIN
		//        (input+=Artifact NEWLINE?)+ END
		//    )? ("fail-fast:"  fail_fast=EBoolean NEWLINE?)? )?  END
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_0() { return cBEGINTerminalRuleCall_1_0; }
		
		//("fail-fast:"  fail_fast=EBoolean NEWLINE?)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"fail-fast:"
		public Keyword getFailFastKeyword_1_1_0() { return cFailFastKeyword_1_1_0; }
		
		//fail_fast=EBoolean
		public Assignment getFail_fastAssignment_1_1_1() { return cFail_fastAssignment_1_1_1; }
		
		//EBoolean
		public RuleCall getFail_fastEBooleanParserRuleCall_1_1_1_0() { return cFail_fastEBooleanParserRuleCall_1_1_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_2() { return cNEWLINETerminalRuleCall_1_1_2; }
		
		//("matrix:" (BEGIN
		//    (input+=Artifact NEWLINE?)+ END
		//)? ("fail-fast:"  fail_fast=EBoolean NEWLINE?)? )?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"matrix:"
		public Keyword getMatrixKeyword_1_2_0() { return cMatrixKeyword_1_2_0; }
		
		//(BEGIN
		//            (input+=Artifact NEWLINE?)+ END
		//        )?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_2_1_0() { return cBEGINTerminalRuleCall_1_2_1_0; }
		
		//(input+=Artifact NEWLINE?)+
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }
		
		//input+=Artifact
		public Assignment getInputAssignment_1_2_1_1_0() { return cInputAssignment_1_2_1_1_0; }
		
		//Artifact
		public RuleCall getInputArtifactParserRuleCall_1_2_1_1_0_0() { return cInputArtifactParserRuleCall_1_2_1_1_0_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_2_1_1_1() { return cNEWLINETerminalRuleCall_1_2_1_1_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_2_1_2() { return cENDTerminalRuleCall_1_2_1_2; }
		
		//("fail-fast:"  fail_fast=EBoolean NEWLINE?)?
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//"fail-fast:"
		public Keyword getFailFastKeyword_1_2_2_0() { return cFailFastKeyword_1_2_2_0; }
		
		//fail_fast=EBoolean
		public Assignment getFail_fastAssignment_1_2_2_1() { return cFail_fastAssignment_1_2_2_1; }
		
		//EBoolean
		public RuleCall getFail_fastEBooleanParserRuleCall_1_2_2_1_0() { return cFail_fastEBooleanParserRuleCall_1_2_2_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_2_2_2() { return cNEWLINETerminalRuleCall_1_2_2_2; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_3() { return cENDTerminalRuleCall_1_3; }
	}
	public class StepsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Steps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStepsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cStepsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cStepsAlternatives_1_1_0_0 = (Alternatives)cStepsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cStepsIFThenElseStepsParserRuleCall_1_1_0_0_0 = (RuleCall)cStepsAlternatives_1_1_0_0.eContents().get(0);
		private final RuleCall cStepsStepOptionsParserRuleCall_1_1_0_0_1 = (RuleCall)cStepsAlternatives_1_1_0_0.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Steps:
		//    'steps:'
		//        (BEGIN
		//            ( steps+=(IFThenElseSteps|StepOptions) NEWLINE? )+
		//        END)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'steps:'
		//    (BEGIN
		//        ( steps+=(IFThenElseSteps|StepOptions) NEWLINE? )+
		//    END)?
		public Group getGroup() { return cGroup; }
		
		//'steps:'
		public Keyword getStepsKeyword_0() { return cStepsKeyword_0; }
		
		//(BEGIN
		//    ( steps+=(IFThenElseSteps|StepOptions) NEWLINE? )+
		//END)?
		public Group getGroup_1() { return cGroup_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_0() { return cBEGINTerminalRuleCall_1_0; }
		
		//( steps+=(IFThenElseSteps|StepOptions) NEWLINE? )+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//steps+=(IFThenElseSteps|StepOptions)
		public Assignment getStepsAssignment_1_1_0() { return cStepsAssignment_1_1_0; }
		
		//(IFThenElseSteps|StepOptions)
		public Alternatives getStepsAlternatives_1_1_0_0() { return cStepsAlternatives_1_1_0_0; }
		
		//IFThenElseSteps
		public RuleCall getStepsIFThenElseStepsParserRuleCall_1_1_0_0_0() { return cStepsIFThenElseStepsParserRuleCall_1_1_0_0_0; }
		
		//StepOptions
		public RuleCall getStepsStepOptionsParserRuleCall_1_1_0_0_1() { return cStepsStepOptionsParserRuleCall_1_1_0_0_1; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_2() { return cENDTerminalRuleCall_1_2; }
	}
	public class StepOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.StepOptions");
		private final Assignment cStepOptionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cStepOptionAlternatives_0 = (Alternatives)cStepOptionAssignment.eContents().get(0);
		private final RuleCall cStepOptionSteps1ParserRuleCall_0_0 = (RuleCall)cStepOptionAlternatives_0.eContents().get(0);
		private final RuleCall cStepOptionSteps2ParserRuleCall_0_1 = (RuleCall)cStepOptionAlternatives_0.eContents().get(1);
		private final RuleCall cStepOptionSteps3ParserRuleCall_0_2 = (RuleCall)cStepOptionAlternatives_0.eContents().get(2);
		
		//StepOptions:
		//    stepOption=( Steps1 | Steps2 | Steps3  )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//stepOption=( Steps1 | Steps2 | Steps3  )
		public Assignment getStepOptionAssignment() { return cStepOptionAssignment; }
		
		//( Steps1 | Steps2 | Steps3  )
		public Alternatives getStepOptionAlternatives_0() { return cStepOptionAlternatives_0; }
		
		//Steps1
		public RuleCall getStepOptionSteps1ParserRuleCall_0_0() { return cStepOptionSteps1ParserRuleCall_0_0; }
		
		//Steps2
		public RuleCall getStepOptionSteps2ParserRuleCall_0_1() { return cStepOptionSteps2ParserRuleCall_0_1; }
		
		//Steps3
		public RuleCall getStepOptionSteps3ParserRuleCall_0_2() { return cStepOptionSteps3ParserRuleCall_0_2; }
	}
	public class Steps1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Steps1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cUsesKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cUsesKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cTool_framework_stepAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTool_framework_stepTool_frameworkParserRuleCall_0_1_0 = (RuleCall)cTool_framework_stepAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cEnvKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Assignment cEnvironemnt_jobAssignment_1_1_1_1_0 = (Assignment)cGroup_1_1_1_1.eContents().get(0);
		private final RuleCall cEnvironemnt_jobEnvironmentParserRuleCall_1_1_1_1_0_0 = (RuleCall)cEnvironemnt_jobAssignment_1_1_1_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1_1_1 = (RuleCall)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_1_1_1_2 = (RuleCall)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final RuleCall cENDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Steps1:
		//    (("- uses:"|"uses:") tool_framework_step+=Tool_framework)
		//    (BEGIN
		//        (("with:"|"env:")
		//            (BEGIN
		//                (environemnt_job+=Environment NEWLINE?)+
		//            END)* NEWLINE?)+
		//    END)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(("- uses:"|"uses:") tool_framework_step+=Tool_framework)
		//(BEGIN
		//    (("with:"|"env:")
		//        (BEGIN
		//            (environemnt_job+=Environment NEWLINE?)+
		//        END)* NEWLINE?)+
		//END)?
		public Group getGroup() { return cGroup; }
		
		//(("- uses:"|"uses:") tool_framework_step+=Tool_framework)
		public Group getGroup_0() { return cGroup_0; }
		
		//("- uses:"|"uses:")
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//"- uses:"
		public Keyword getUsesKeyword_0_0_0() { return cUsesKeyword_0_0_0; }
		
		//"uses:"
		public Keyword getUsesKeyword_0_0_1() { return cUsesKeyword_0_0_1; }
		
		//tool_framework_step+=Tool_framework
		public Assignment getTool_framework_stepAssignment_0_1() { return cTool_framework_stepAssignment_0_1; }
		
		//Tool_framework
		public RuleCall getTool_framework_stepTool_frameworkParserRuleCall_0_1_0() { return cTool_framework_stepTool_frameworkParserRuleCall_0_1_0; }
		
		//(BEGIN
		//    (("with:"|"env:")
		//        (BEGIN
		//            (environemnt_job+=Environment NEWLINE?)+
		//        END)* NEWLINE?)+
		//END)?
		public Group getGroup_1() { return cGroup_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_0() { return cBEGINTerminalRuleCall_1_0; }
		
		//(("with:"|"env:")
		//    (BEGIN
		//        (environemnt_job+=Environment NEWLINE?)+
		//    END)* NEWLINE?)+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//("with:"|"env:")
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }
		
		//"with:"
		public Keyword getWithKeyword_1_1_0_0() { return cWithKeyword_1_1_0_0; }
		
		//"env:"
		public Keyword getEnvKeyword_1_1_0_1() { return cEnvKeyword_1_1_0_1; }
		
		//(BEGIN
		//    (environemnt_job+=Environment NEWLINE?)+
		//END)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_1_1_0() { return cBEGINTerminalRuleCall_1_1_1_0; }
		
		//(environemnt_job+=Environment NEWLINE?)+
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//environemnt_job+=Environment
		public Assignment getEnvironemnt_jobAssignment_1_1_1_1_0() { return cEnvironemnt_jobAssignment_1_1_1_1_0; }
		
		//Environment
		public RuleCall getEnvironemnt_jobEnvironmentParserRuleCall_1_1_1_1_0_0() { return cEnvironemnt_jobEnvironmentParserRuleCall_1_1_1_1_0_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1_1_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_1_1_2() { return cENDTerminalRuleCall_1_1_1_2; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_2() { return cNEWLINETerminalRuleCall_1_1_2; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_2() { return cENDTerminalRuleCall_1_2; }
	}
	public class Steps2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Steps2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cDependsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cDependsEnvironmentParserRuleCall_1_1_0_0 = (RuleCall)cDependsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Steps2:
		//    'env:'
		//    (BEGIN
		//        (depends+=Environment NEWLINE)*
		//    END)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'env:'
		//(BEGIN
		//    (depends+=Environment NEWLINE)*
		//END)
		public Group getGroup() { return cGroup; }
		
		//'env:'
		public Keyword getEnvKeyword_0() { return cEnvKeyword_0; }
		
		//(BEGIN
		//    (depends+=Environment NEWLINE)*
		//END)
		public Group getGroup_1() { return cGroup_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_0() { return cBEGINTerminalRuleCall_1_0; }
		
		//(depends+=Environment NEWLINE)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//depends+=Environment
		public Assignment getDependsAssignment_1_1_0() { return cDependsAssignment_1_1_0; }
		
		//Environment
		public RuleCall getDependsEnvironmentParserRuleCall_1_1_0_0() { return cDependsEnvironmentParserRuleCall_1_1_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_2() { return cENDTerminalRuleCall_1_2; }
	}
	public class Steps3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Steps3");
		private final Assignment cCommandAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandCommandParserRuleCall_0 = (RuleCall)cCommandAssignment.eContents().get(0);
		
		//Steps3:
		//    command+=Command
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command+=Command
		public Assignment getCommandAssignment() { return cCommandAssignment; }
		
		//Command
		public RuleCall getCommandCommandParserRuleCall_0() { return cCommandCommandParserRuleCall_0; }
	}
	public class Tool_frameworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Tool_framework");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTool_frameworkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cName5Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cName5ALPHANUMERICSTRINGTerminalRuleCall_1_0 = (RuleCall)cName5Assignment_1.eContents().get(0);
		
		//Tool_framework:
		//    {Tool_framework}
		//    (Name5=ALPHANUMERICSTRING)
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Tool_framework}
		//(Name5=ALPHANUMERICSTRING)
		public Group getGroup() { return cGroup; }
		
		//{Tool_framework}
		public Action getTool_frameworkAction_0() { return cTool_frameworkAction_0; }
		
		//(Name5=ALPHANUMERICSTRING)
		public Assignment getName5Assignment_1() { return cName5Assignment_1; }
		
		//ALPHANUMERICSTRING
		public RuleCall getName5ALPHANUMERICSTRINGTerminalRuleCall_1_0() { return cName5ALPHANUMERICSTRINGTerminalRuleCall_1_0; }
	}
	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Environment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cKeyAlternatives_0_0_0 = (Alternatives)cKeyAssignment_0_0.eContents().get(0);
		private final RuleCall cKeyKEYTerminalRuleCall_0_0_0_0 = (RuleCall)cKeyAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cKeyTRIGGERSTerminalRuleCall_0_0_0_1 = (RuleCall)cKeyAlternatives_0_0_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPathKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Assignment cKeyAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cKeyKEYTerminalRuleCall_1_0_1_0 = (RuleCall)cKeyAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cHyphenMinusSpaceKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cValueALPHANUMERICSTRINGTerminalRuleCall_1_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//Environment:
		//        (Key=(KEY | TRIGGERS)  Value=(EString)) |
		//        (("path: |" | Key=KEY )
		//            (BEGIN
		//                ("- "? Value=ALPHANUMERICSTRING)*
		//            END)?
		//        )
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//(Key=(KEY | TRIGGERS)  Value=(EString)) |
		//(("path: |" | Key=KEY )
		//    (BEGIN
		//        ("- "? Value=ALPHANUMERICSTRING)*
		//    END)?
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Key=(KEY | TRIGGERS)  Value=(EString))
		public Group getGroup_0() { return cGroup_0; }
		
		//Key=(KEY | TRIGGERS)
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//(KEY | TRIGGERS)
		public Alternatives getKeyAlternatives_0_0_0() { return cKeyAlternatives_0_0_0; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_0_0_0_0() { return cKeyKEYTerminalRuleCall_0_0_0_0; }
		
		//TRIGGERS
		public RuleCall getKeyTRIGGERSTerminalRuleCall_0_0_0_1() { return cKeyTRIGGERSTerminalRuleCall_0_0_0_1; }
		
		//Value=(EString)
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//(EString)
		public RuleCall getValueEStringParserRuleCall_0_1_0() { return cValueEStringParserRuleCall_0_1_0; }
		
		//(("path: |" | Key=KEY )
		//    (BEGIN
		//        ("- "? Value=ALPHANUMERICSTRING)*
		//    END)?
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//("path: |" | Key=KEY )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//"path: |"
		public Keyword getPathKeyword_1_0_0() { return cPathKeyword_1_0_0; }
		
		//Key=KEY
		public Assignment getKeyAssignment_1_0_1() { return cKeyAssignment_1_0_1; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_1_0_1_0() { return cKeyKEYTerminalRuleCall_1_0_1_0; }
		
		//(BEGIN
		//    ("- "? Value=ALPHANUMERICSTRING)*
		//END)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_1_0() { return cBEGINTerminalRuleCall_1_1_0; }
		
		//("- "? Value=ALPHANUMERICSTRING)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//"- "?
		public Keyword getHyphenMinusSpaceKeyword_1_1_1_0() { return cHyphenMinusSpaceKeyword_1_1_1_0; }
		
		//Value=ALPHANUMERICSTRING
		public Assignment getValueAssignment_1_1_1_1() { return cValueAssignment_1_1_1_1; }
		
		//ALPHANUMERICSTRING
		public RuleCall getValueALPHANUMERICSTRINGTerminalRuleCall_1_1_1_1_0() { return cValueALPHANUMERICSTRINGTerminalRuleCall_1_1_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_1_2() { return cENDTerminalRuleCall_1_1_2; }
	}
	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Artifact");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cKeyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cKeyAlternatives_0_0_0 = (Alternatives)cKeyAssignment_0_0.eContents().get(0);
		private final RuleCall cKeyKEYTerminalRuleCall_0_0_0_0 = (RuleCall)cKeyAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cKeyTRIGGERSTerminalRuleCall_0_0_0_1 = (RuleCall)cKeyAlternatives_0_0_0.eContents().get(1);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cKeyAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cKeyKEYTerminalRuleCall_1_0_0 = (RuleCall)cKeyAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//Artifact:
		//        (Key=(KEY|TRIGGERS)  Value=EString) |
		//        (Key=KEY
		//            (BEGIN
		//                Value=EString
		//            END)
		//        ) ;
		@Override public ParserRule getRule() { return rule; }
		
		//(Key=(KEY|TRIGGERS)  Value=EString) |
		//(Key=KEY
		//    (BEGIN
		//        Value=EString
		//    END)
		//)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Key=(KEY|TRIGGERS)  Value=EString)
		public Group getGroup_0() { return cGroup_0; }
		
		//Key=(KEY|TRIGGERS)
		public Assignment getKeyAssignment_0_0() { return cKeyAssignment_0_0; }
		
		//(KEY|TRIGGERS)
		public Alternatives getKeyAlternatives_0_0_0() { return cKeyAlternatives_0_0_0; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_0_0_0_0() { return cKeyKEYTerminalRuleCall_0_0_0_0; }
		
		//TRIGGERS
		public RuleCall getKeyTRIGGERSTerminalRuleCall_0_0_0_1() { return cKeyTRIGGERSTerminalRuleCall_0_0_0_1; }
		
		//Value=EString
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0_1_0() { return cValueEStringParserRuleCall_0_1_0; }
		
		//(Key=KEY
		//    (BEGIN
		//        Value=EString
		//    END)
		//)
		public Group getGroup_1() { return cGroup_1; }
		
		//Key=KEY
		public Assignment getKeyAssignment_1_0() { return cKeyAssignment_1_0; }
		
		//KEY
		public RuleCall getKeyKEYTerminalRuleCall_1_0_0() { return cKeyKEYTerminalRuleCall_1_0_0; }
		
		//(BEGIN
		//    Value=EString
		//END)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_1_0() { return cBEGINTerminalRuleCall_1_1_0; }
		
		//Value=EString
		public Assignment getValueAssignment_1_1_1() { return cValueAssignment_1_1_1; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_1_1_1_0() { return cValueEStringParserRuleCall_1_1_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_1_2() { return cENDTerminalRuleCall_1_1_2; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommand1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommand2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Command:
		//        Command1 | Command2
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Command1 | Command2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Command1
		public RuleCall getCommand1ParserRuleCall_0() { return cCommand1ParserRuleCall_0; }
		
		//Command2
		public RuleCall getCommand2ParserRuleCall_1() { return cCommand2ParserRuleCall_1; }
	}
	public class Command1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cToolAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cToolTool_frameworkParserRuleCall_1_0_0 = (RuleCall)cToolAssignment_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersEStringParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cEnvKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2_2_0 = (RuleCall)cGroup_2_2.eContents().get(0);
		private final Assignment cEnvironment_commandAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cEnvironment_commandEnvironmentParserRuleCall_2_2_1_0 = (RuleCall)cEnvironment_commandAssignment_2_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_2_2 = (RuleCall)cGroup_2_2.eContents().get(2);
		private final RuleCall cENDTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//Command1:
		//     ("- run:" (tool+=Tool_framework(Parameters+=EString?))
		//         (BEGIN
		//             "env:"
		//             (BEGIN
		//                 (environment_command+=Environment)+
		//             END)
		//         END
		//         )?
		//     )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("- run:" (tool+=Tool_framework(Parameters+=EString?))
		//    (BEGIN
		//        "env:"
		//        (BEGIN
		//            (environment_command+=Environment)+
		//        END)
		//    END
		//    )?
		//)
		public Group getGroup() { return cGroup; }
		
		//"- run:"
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//(tool+=Tool_framework(Parameters+=EString?))
		public Group getGroup_1() { return cGroup_1; }
		
		//tool+=Tool_framework
		public Assignment getToolAssignment_1_0() { return cToolAssignment_1_0; }
		
		//Tool_framework
		public RuleCall getToolTool_frameworkParserRuleCall_1_0_0() { return cToolTool_frameworkParserRuleCall_1_0_0; }
		
		//(Parameters+=EString?)
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//EString
		public RuleCall getParametersEStringParserRuleCall_1_1_0() { return cParametersEStringParserRuleCall_1_1_0; }
		
		//(BEGIN
		//    "env:"
		//    (BEGIN
		//        (environment_command+=Environment)+
		//    END)
		//END
		//)?
		public Group getGroup_2() { return cGroup_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_0() { return cBEGINTerminalRuleCall_2_0; }
		
		//"env:"
		public Keyword getEnvKeyword_2_1() { return cEnvKeyword_2_1; }
		
		//(BEGIN
		//    (environment_command+=Environment)+
		//END)
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_2_0() { return cBEGINTerminalRuleCall_2_2_0; }
		
		//(environment_command+=Environment)+
		public Assignment getEnvironment_commandAssignment_2_2_1() { return cEnvironment_commandAssignment_2_2_1; }
		
		//Environment
		public RuleCall getEnvironment_commandEnvironmentParserRuleCall_2_2_1_0() { return cEnvironment_commandEnvironmentParserRuleCall_2_2_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_2_2() { return cENDTerminalRuleCall_2_2_2; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_3() { return cENDTerminalRuleCall_2_3; }
	}
	public class Command2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNAMETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionEStringParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cCommand_optionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cCommand_optionsAlternatives_2_1_0 = (Alternatives)cCommand_optionsAssignment_2_1.eContents().get(0);
		private final RuleCall cCommand_optionsIFThenElseStepsParserRuleCall_2_1_0_0 = (RuleCall)cCommand_optionsAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cCommand_optionsCommand2EnvParserRuleCall_2_1_0_1 = (RuleCall)cCommand_optionsAlternatives_2_1_0.eContents().get(1);
		private final RuleCall cCommand_optionsCommand2RunMultipleParserRuleCall_2_1_0_2 = (RuleCall)cCommand_optionsAlternatives_2_1_0.eContents().get(2);
		private final RuleCall cCommand_optionsCommand2RunOneParserRuleCall_2_1_0_3 = (RuleCall)cCommand_optionsAlternatives_2_1_0.eContents().get(3);
		private final RuleCall cCommand_optionsCommand2UsesParserRuleCall_2_1_0_4 = (RuleCall)cCommand_optionsAlternatives_2_1_0.eContents().get(4);
		private final RuleCall cCommand_optionsCommand2RunToolParserRuleCall_2_1_0_5 = (RuleCall)cCommand_optionsAlternatives_2_1_0.eContents().get(5);
		private final RuleCall cENDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//Command2:
		//        NAME (Description+=EString)
		//         (BEGIN
		//               ( command_options+= ( IFThenElseSteps | Command2Env | Command2RunMultiple | Command2RunOne | Command2Uses | Command2RunTool) )+
		//         END)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NAME (Description+=EString)
		// (BEGIN
		//       ( command_options+= ( IFThenElseSteps | Command2Env | Command2RunMultiple | Command2RunOne | Command2Uses | Command2RunTool) )+
		// END)?
		public Group getGroup() { return cGroup; }
		
		//NAME
		public RuleCall getNAMETerminalRuleCall_0() { return cNAMETerminalRuleCall_0; }
		
		//(Description+=EString)
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_1_0() { return cDescriptionEStringParserRuleCall_1_0; }
		
		//(BEGIN
		//      ( command_options+= ( IFThenElseSteps | Command2Env | Command2RunMultiple | Command2RunOne | Command2Uses | Command2RunTool) )+
		//END)?
		public Group getGroup_2() { return cGroup_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_0() { return cBEGINTerminalRuleCall_2_0; }
		
		//( command_options+= ( IFThenElseSteps | Command2Env | Command2RunMultiple | Command2RunOne | Command2Uses | Command2RunTool) )+
		public Assignment getCommand_optionsAssignment_2_1() { return cCommand_optionsAssignment_2_1; }
		
		//( IFThenElseSteps | Command2Env | Command2RunMultiple | Command2RunOne | Command2Uses | Command2RunTool)
		public Alternatives getCommand_optionsAlternatives_2_1_0() { return cCommand_optionsAlternatives_2_1_0; }
		
		//IFThenElseSteps
		public RuleCall getCommand_optionsIFThenElseStepsParserRuleCall_2_1_0_0() { return cCommand_optionsIFThenElseStepsParserRuleCall_2_1_0_0; }
		
		//Command2Env
		public RuleCall getCommand_optionsCommand2EnvParserRuleCall_2_1_0_1() { return cCommand_optionsCommand2EnvParserRuleCall_2_1_0_1; }
		
		//Command2RunMultiple
		public RuleCall getCommand_optionsCommand2RunMultipleParserRuleCall_2_1_0_2() { return cCommand_optionsCommand2RunMultipleParserRuleCall_2_1_0_2; }
		
		//Command2RunOne
		public RuleCall getCommand_optionsCommand2RunOneParserRuleCall_2_1_0_3() { return cCommand_optionsCommand2RunOneParserRuleCall_2_1_0_3; }
		
		//Command2Uses
		public RuleCall getCommand_optionsCommand2UsesParserRuleCall_2_1_0_4() { return cCommand_optionsCommand2UsesParserRuleCall_2_1_0_4; }
		
		//Command2RunTool
		public RuleCall getCommand_optionsCommand2RunToolParserRuleCall_2_1_0_5() { return cCommand_optionsCommand2RunToolParserRuleCall_2_1_0_5; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_2() { return cENDTerminalRuleCall_2_2; }
	}
	public class Command2EnvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command2Env");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cEnvKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWithKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cEnvironment_commandAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cEnvironment_commandEnvironmentParserRuleCall_1_1_0_0 = (RuleCall)cEnvironment_commandAssignment_1_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Command2Env:
		//    ("env:"|"with:")
		//         (BEGIN
		//          ( ((environment_command+=Environment) ) NEWLINE? )+
		//         END)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("env:"|"with:")
		//     (BEGIN
		//      ( ((environment_command+=Environment) ) NEWLINE? )+
		//     END)?
		public Group getGroup() { return cGroup; }
		
		//("env:"|"with:")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"env:"
		public Keyword getEnvKeyword_0_0() { return cEnvKeyword_0_0; }
		
		//"with:"
		public Keyword getWithKeyword_0_1() { return cWithKeyword_0_1; }
		
		//(BEGIN
		// ( ((environment_command+=Environment) ) NEWLINE? )+
		//END)?
		public Group getGroup_1() { return cGroup_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_0() { return cBEGINTerminalRuleCall_1_0; }
		
		//( ((environment_command+=Environment) ) NEWLINE? )+
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//((environment_command+=Environment) )
		public Assignment getEnvironment_commandAssignment_1_1_0() { return cEnvironment_commandAssignment_1_1_0; }
		
		//Environment
		public RuleCall getEnvironment_commandEnvironmentParserRuleCall_1_1_0_0() { return cEnvironment_commandEnvironmentParserRuleCall_1_1_0_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_2() { return cENDTerminalRuleCall_1_2; }
	}
	public class Command2RunMultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command2RunMultiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRunKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRunKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cRunKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParametersEStringParserRuleCall_1_1_0_0 = (RuleCall)cParametersAssignment_1_1_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParametersEStringParserRuleCall_1_2_0 = (RuleCall)cParametersAssignment_1_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Command2RunMultiple:
		//        ("run: |" | "run: <" | "run: >")
		//             (BEGIN (Parameters+=EString NEWLINE)* Parameters+=EString END)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("run: |" | "run: <" | "run: >")
		//     (BEGIN (Parameters+=EString NEWLINE)* Parameters+=EString END)?
		public Group getGroup() { return cGroup; }
		
		//("run: |" | "run: <" | "run: >")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"run: |"
		public Keyword getRunKeyword_0_0() { return cRunKeyword_0_0; }
		
		//"run: <"
		public Keyword getRunKeyword_0_1() { return cRunKeyword_0_1; }
		
		//"run: >"
		public Keyword getRunKeyword_0_2() { return cRunKeyword_0_2; }
		
		//(BEGIN (Parameters+=EString NEWLINE)* Parameters+=EString END)?
		public Group getGroup_1() { return cGroup_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1_0() { return cBEGINTerminalRuleCall_1_0; }
		
		//(Parameters+=EString NEWLINE)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//Parameters+=EString
		public Assignment getParametersAssignment_1_1_0() { return cParametersAssignment_1_1_0; }
		
		//EString
		public RuleCall getParametersEStringParserRuleCall_1_1_0_0() { return cParametersEStringParserRuleCall_1_1_0_0; }
		
		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_1_1_1() { return cNEWLINETerminalRuleCall_1_1_1; }
		
		//Parameters+=EString
		public Assignment getParametersAssignment_1_2() { return cParametersAssignment_1_2; }
		
		//EString
		public RuleCall getParametersEStringParserRuleCall_1_2_0() { return cParametersEStringParserRuleCall_1_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_1_3() { return cENDTerminalRuleCall_1_3; }
	}
	public class Command2RunOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command2RunOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRunKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRunKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCommand_conditionalAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCommand_conditionalIFThenElseRunParserRuleCall_1_0_0 = (RuleCall)cCommand_conditionalAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cToolAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cToolTool_frameworkParserRuleCall_1_1_0_0 = (RuleCall)cToolAssignment_1_1_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersEStringParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		private final Assignment cCommand_stringAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cCommand_stringSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cCommand_stringAssignment_1_2.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Command2RunOne:
		//    ("run:" | "run: ") ( (command_conditional+=IFThenElseRun) |  (tool+=Tool_framework  Parameters+=EString?) | command_string+=STRING)  NEWLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("run:" | "run: ") ( (command_conditional+=IFThenElseRun) |  (tool+=Tool_framework  Parameters+=EString?) | command_string+=STRING)  NEWLINE?
		public Group getGroup() { return cGroup; }
		
		//("run:" | "run: ")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"run:"
		public Keyword getRunKeyword_0_0() { return cRunKeyword_0_0; }
		
		//"run: "
		public Keyword getRunKeyword_0_1() { return cRunKeyword_0_1; }
		
		//( (command_conditional+=IFThenElseRun) |  (tool+=Tool_framework  Parameters+=EString?) | command_string+=STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(command_conditional+=IFThenElseRun)
		public Assignment getCommand_conditionalAssignment_1_0() { return cCommand_conditionalAssignment_1_0; }
		
		//IFThenElseRun
		public RuleCall getCommand_conditionalIFThenElseRunParserRuleCall_1_0_0() { return cCommand_conditionalIFThenElseRunParserRuleCall_1_0_0; }
		
		//(tool+=Tool_framework  Parameters+=EString?)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//tool+=Tool_framework
		public Assignment getToolAssignment_1_1_0() { return cToolAssignment_1_1_0; }
		
		//Tool_framework
		public RuleCall getToolTool_frameworkParserRuleCall_1_1_0_0() { return cToolTool_frameworkParserRuleCall_1_1_0_0; }
		
		//Parameters+=EString?
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }
		
		//EString
		public RuleCall getParametersEStringParserRuleCall_1_1_1_0() { return cParametersEStringParserRuleCall_1_1_1_0; }
		
		//command_string+=STRING
		public Assignment getCommand_stringAssignment_1_2() { return cCommand_stringAssignment_1_2; }
		
		//STRING
		public RuleCall getCommand_stringSTRINGTerminalRuleCall_1_2_0() { return cCommand_stringSTRINGTerminalRuleCall_1_2_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
	}
	public class Command2UsesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command2Uses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUsesKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cUsesKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cToolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cToolTool_frameworkParserRuleCall_1_0 = (RuleCall)cToolAssignment_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Command2Uses:
		//    ("- uses:"|"uses:") (tool+=Tool_framework) NEWLINE?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//("- uses:"|"uses:") (tool+=Tool_framework) NEWLINE?
		public Group getGroup() { return cGroup; }
		
		//("- uses:"|"uses:")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"- uses:"
		public Keyword getUsesKeyword_0_0() { return cUsesKeyword_0_0; }
		
		//"uses:"
		public Keyword getUsesKeyword_0_1() { return cUsesKeyword_0_1; }
		
		//(tool+=Tool_framework)
		public Assignment getToolAssignment_1() { return cToolAssignment_1; }
		
		//Tool_framework
		public RuleCall getToolTool_frameworkParserRuleCall_1_0() { return cToolTool_frameworkParserRuleCall_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
	}
	public class Command2RunToolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.Command2RunTool");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cToolkeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cToolkeyKEYTerminalRuleCall_0_0 = (RuleCall)cToolkeyAssignment_0.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParametersEStringParserRuleCall_1_0 = (RuleCall)cParametersAssignment_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Command2RunTool:
		//        (toolkey+=KEY Parameters+=EString? NEWLINE?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(toolkey+=KEY Parameters+=EString? NEWLINE?)
		public Group getGroup() { return cGroup; }
		
		//toolkey+=KEY
		public Assignment getToolkeyAssignment_0() { return cToolkeyAssignment_0; }
		
		//KEY
		public RuleCall getToolkeyKEYTerminalRuleCall_0_0() { return cToolkeyKEYTerminalRuleCall_0_0; }
		
		//Parameters+=EString?
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }
		
		//EString
		public RuleCall getParametersEStringParserRuleCall_1_0() { return cParametersEStringParserRuleCall_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
	}
	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.IfThenElse");
		private final Assignment cAltAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cAltAlternatives_0 = (Alternatives)cAltAssignment.eContents().get(0);
		private final RuleCall cAltIfThenElse_alt1ParserRuleCall_0_0 = (RuleCall)cAltAlternatives_0.eContents().get(0);
		private final RuleCall cAltIFThenElseJobsSteps_alt2ParserRuleCall_0_1 = (RuleCall)cAltAlternatives_0.eContents().get(1);
		
		///*IfThenElse:
		//    '[[- if ' Condition=EString "]]"
		//        ('Condition' Condition=EString)?
		//        ('if' '{' if+=Command ( ",separator" if+=Command)* '}' )?
		//        ('else' '{' else+=Command ( ",separator" else+=Command)* '}' )?
		//        ('ifelse' '{' ifelse+=IfThenElse ( ",separator" ifelse+=IfThenElse)* '}' )?
		//        ('elseif' '{' elseif+=IfThenElse ( ",separator" elseif+=IfThenElse)* '}' )?
		//    '}'; */
		//IfThenElse:
		//    alt = (IfThenElse_alt1 | IFThenElseJobsSteps_alt2)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//alt = (IfThenElse_alt1 | IFThenElseJobsSteps_alt2)
		public Assignment getAltAssignment() { return cAltAssignment; }
		
		//(IfThenElse_alt1 | IFThenElseJobsSteps_alt2)
		public Alternatives getAltAlternatives_0() { return cAltAlternatives_0; }
		
		//IfThenElse_alt1
		public RuleCall getAltIfThenElse_alt1ParserRuleCall_0_0() { return cAltIfThenElse_alt1ParserRuleCall_0_0; }
		
		//IFThenElseJobsSteps_alt2
		public RuleCall getAltIFThenElseJobsSteps_alt2ParserRuleCall_0_1() { return cAltIFThenElseJobsSteps_alt2ParserRuleCall_0_1; }
	}
	public class IfThenElse_alt1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.IfThenElse_alt1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfJobParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cElseAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cElseJobParserRuleCall_4_2_0 = (RuleCall)cElseAssignment_4_2.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IfThenElse_alt1:
		//    '[[- if ' Condition=EString  NEWLINE?
		//    (if+=Job)?
		//    ( "[[- else]]" NEWLINE?
		//        (else+=Job)?
		//    )?
		//    '[[- end]]'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[[- if ' Condition=EString  NEWLINE?
		//(if+=Job)?
		//( "[[- else]]" NEWLINE?
		//    (else+=Job)?
		//)?
		//'[[- end]]'
		public Group getGroup() { return cGroup; }
		
		//'[[- if '
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Condition=EString
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_1_0() { return cConditionEStringParserRuleCall_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
		
		//(if+=Job)?
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }
		
		//Job
		public RuleCall getIfJobParserRuleCall_3_0() { return cIfJobParserRuleCall_3_0; }
		
		//( "[[- else]]" NEWLINE?
		//    (else+=Job)?
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"[[- else]]"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_4_1() { return cNEWLINETerminalRuleCall_4_1; }
		
		//(else+=Job)?
		public Assignment getElseAssignment_4_2() { return cElseAssignment_4_2; }
		
		//Job
		public RuleCall getElseJobParserRuleCall_4_2_0() { return cElseJobParserRuleCall_4_2_0; }
		
		//'[[- end]]'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class IFThenElseRunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.IFThenElseRun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionALPHANUMERICSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfEStringParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseEStringParserRuleCall_3_1_0 = (RuleCall)cElseAssignment_3_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IFThenElseRun:
		//    '[[- if ' Condition=ALPHANUMERICSTRING
		//    (if=(EString))?
		//    ( "[[- else]]"
		//        (else=(EString))?
		//    )?
		//    '[[- end]]'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[[- if ' Condition=ALPHANUMERICSTRING
		//(if=(EString))?
		//( "[[- else]]"
		//    (else=(EString))?
		//)?
		//'[[- end]]'
		public Group getGroup() { return cGroup; }
		
		//'[[- if '
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Condition=ALPHANUMERICSTRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ALPHANUMERICSTRING
		public RuleCall getConditionALPHANUMERICSTRINGTerminalRuleCall_1_0() { return cConditionALPHANUMERICSTRINGTerminalRuleCall_1_0; }
		
		//(if=(EString))?
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }
		
		//(EString)
		public RuleCall getIfEStringParserRuleCall_2_0() { return cIfEStringParserRuleCall_2_0; }
		
		//( "[[- else]]"
		//    (else=(EString))?
		//)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"[[- else]]"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }
		
		//(else=(EString))?
		public Assignment getElseAssignment_3_1() { return cElseAssignment_3_1; }
		
		//(EString)
		public RuleCall getElseEStringParserRuleCall_3_1_0() { return cElseEStringParserRuleCall_3_1_0; }
		
		//'[[- end]]'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class IFThenElseStepsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.IFThenElseSteps");
		private final Assignment cAltAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cAltAlternatives_0 = (Alternatives)cAltAssignment.eContents().get(0);
		private final RuleCall cAltIFThenElseSteps_alt1ParserRuleCall_0_0 = (RuleCall)cAltAlternatives_0.eContents().get(0);
		private final RuleCall cAltIFThenElseJobsSteps_alt2ParserRuleCall_0_1 = (RuleCall)cAltAlternatives_0.eContents().get(1);
		
		//IFThenElseSteps:
		//    alt = ( IFThenElseSteps_alt1 | IFThenElseJobsSteps_alt2)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//alt = ( IFThenElseSteps_alt1 | IFThenElseJobsSteps_alt2)
		public Assignment getAltAssignment() { return cAltAssignment; }
		
		//( IFThenElseSteps_alt1 | IFThenElseJobsSteps_alt2)
		public Alternatives getAltAlternatives_0() { return cAltAlternatives_0; }
		
		//IFThenElseSteps_alt1
		public RuleCall getAltIFThenElseSteps_alt1ParserRuleCall_0_0() { return cAltIFThenElseSteps_alt1ParserRuleCall_0_0; }
		
		//IFThenElseJobsSteps_alt2
		public RuleCall getAltIFThenElseJobsSteps_alt2ParserRuleCall_0_1() { return cAltIFThenElseJobsSteps_alt2ParserRuleCall_0_1; }
	}
	public class IFThenElseSteps_alt1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.IFThenElseSteps_alt1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionALPHANUMERICSTRINGTerminalRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cIfAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cIfStepOptionsParserRuleCall_3_0_0 = (RuleCall)cIfAssignment_3_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cElsefAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cElsefStepOptionsParserRuleCall_4_2_0_0 = (RuleCall)cElsefAssignment_4_2_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4_2_1 = (RuleCall)cGroup_4_2.eContents().get(1);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IFThenElseSteps_alt1:
		//    '[[- if ' Condition=ALPHANUMERICSTRING NEWLINE?
		//    (if+=StepOptions NEWLINE?)+
		//    ( "[[- else]]" NEWLINE?
		//        (elsef+=StepOptions NEWLINE?)+
		//    )?
		//    '[[- end]]'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'[[- if ' Condition=ALPHANUMERICSTRING NEWLINE?
		//(if+=StepOptions NEWLINE?)+
		//( "[[- else]]" NEWLINE?
		//    (elsef+=StepOptions NEWLINE?)+
		//)?
		//'[[- end]]'
		public Group getGroup() { return cGroup; }
		
		//'[[- if '
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Condition=ALPHANUMERICSTRING
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//ALPHANUMERICSTRING
		public RuleCall getConditionALPHANUMERICSTRINGTerminalRuleCall_1_0() { return cConditionALPHANUMERICSTRINGTerminalRuleCall_1_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }
		
		//(if+=StepOptions NEWLINE?)+
		public Group getGroup_3() { return cGroup_3; }
		
		//if+=StepOptions
		public Assignment getIfAssignment_3_0() { return cIfAssignment_3_0; }
		
		//StepOptions
		public RuleCall getIfStepOptionsParserRuleCall_3_0_0() { return cIfStepOptionsParserRuleCall_3_0_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_3_1() { return cNEWLINETerminalRuleCall_3_1; }
		
		//( "[[- else]]" NEWLINE?
		//    (elsef+=StepOptions NEWLINE?)+
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//"[[- else]]"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_4_1() { return cNEWLINETerminalRuleCall_4_1; }
		
		//(elsef+=StepOptions NEWLINE?)+
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//elsef+=StepOptions
		public Assignment getElsefAssignment_4_2_0() { return cElsefAssignment_4_2_0; }
		
		//StepOptions
		public RuleCall getElsefStepOptionsParserRuleCall_4_2_0_0() { return cElsefStepOptionsParserRuleCall_4_2_0_0; }
		
		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_4_2_1() { return cNEWLINETerminalRuleCall_4_2_1; }
		
		//'[[- end]]'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class IFThenElseJobsSteps_alt2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.IFThenElseJobsSteps_alt2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionEStringParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//IFThenElseJobsSteps_alt2:
		//    'if:' Condition=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'if:' Condition=EString
		public Group getGroup() { return cGroup; }
		
		//'if:'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Condition=EString
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//EString
		public RuleCall getConditionEStringParserRuleCall_1_0() { return cConditionEStringParserRuleCall_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALPHANUMERICSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEBooleanParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTRIGGER_WORDSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//EString:
		//  (ALPHANUMERICSTRING | STRING | EBoolean | TRIGGER_WORDS)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ALPHANUMERICSTRING | STRING | EBoolean | TRIGGER_WORDS)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALPHANUMERICSTRING
		public RuleCall getALPHANUMERICSTRINGTerminalRuleCall_0() { return cALPHANUMERICSTRINGTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//EBoolean
		public RuleCall getEBooleanParserRuleCall_2() { return cEBooleanParserRuleCall_2; }
		
		//TRIGGER_WORDS
		public RuleCall getTRIGGER_WORDSTerminalRuleCall_3() { return cTRIGGER_WORDSTerminalRuleCall_3; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final PipelineElements pPipeline;
	private final WhenElements pWhen;
	private final JobIfThenElseElements pJobIfThenElse;
	private final JobElements pJob;
	private final StrategyElements pStrategy;
	private final StepsElements pSteps;
	private final StepOptionsElements pStepOptions;
	private final Steps1Elements pSteps1;
	private final Steps2Elements pSteps2;
	private final Steps3Elements pSteps3;
	private final Tool_frameworkElements pTool_framework;
	private final EnvironmentElements pEnvironment;
	private final ArtifactElements pArtifact;
	private final CommandElements pCommand;
	private final Command1Elements pCommand1;
	private final Command2Elements pCommand2;
	private final Command2EnvElements pCommand2Env;
	private final Command2RunMultipleElements pCommand2RunMultiple;
	private final Command2RunOneElements pCommand2RunOne;
	private final Command2UsesElements pCommand2Uses;
	private final Command2RunToolElements pCommand2RunTool;
	private final IfThenElseElements pIfThenElse;
	private final IfThenElse_alt1Elements pIfThenElse_alt1;
	private final IFThenElseRunElements pIFThenElseRun;
	private final IFThenElseStepsElements pIFThenElseSteps;
	private final IFThenElseSteps_alt1Elements pIFThenElseSteps_alt1;
	private final IFThenElseJobsSteps_alt2Elements pIFThenElseJobsSteps_alt2;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final TerminalRule tTRIGGER_WORDS;
	private final TerminalRule tNAME;
	private final TerminalRule tTRIGGERS;
	private final TerminalRule tHTTP;
	private final TerminalRule tCHARACTERS;
	private final TerminalRule tALPHANUMERICSTRING;
	private final TerminalRule tKEY;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPipeline = new PipelineElements();
		this.pWhen = new WhenElements();
		this.pJobIfThenElse = new JobIfThenElseElements();
		this.pJob = new JobElements();
		this.pStrategy = new StrategyElements();
		this.pSteps = new StepsElements();
		this.pStepOptions = new StepOptionsElements();
		this.pSteps1 = new Steps1Elements();
		this.pSteps2 = new Steps2Elements();
		this.pSteps3 = new Steps3Elements();
		this.pTool_framework = new Tool_frameworkElements();
		this.pEnvironment = new EnvironmentElements();
		this.pArtifact = new ArtifactElements();
		this.pCommand = new CommandElements();
		this.pCommand1 = new Command1Elements();
		this.pCommand2 = new Command2Elements();
		this.pCommand2Env = new Command2EnvElements();
		this.pCommand2RunMultiple = new Command2RunMultipleElements();
		this.pCommand2RunOne = new Command2RunOneElements();
		this.pCommand2Uses = new Command2UsesElements();
		this.pCommand2RunTool = new Command2RunToolElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pIfThenElse_alt1 = new IfThenElse_alt1Elements();
		this.pIFThenElseRun = new IFThenElseRunElements();
		this.pIFThenElseSteps = new IFThenElseStepsElements();
		this.pIFThenElseSteps_alt1 = new IFThenElseSteps_alt1Elements();
		this.pIFThenElseJobsSteps_alt2 = new IFThenElseJobsSteps_alt2Elements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.tTRIGGER_WORDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.TRIGGER_WORDS");
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.NAME");
		this.tTRIGGERS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.TRIGGERS");
		this.tHTTP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.HTTP");
		this.tCHARACTERS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.CHARACTERS");
		this.tALPHANUMERICSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.ALPHANUMERICSTRING");
		this.tKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.KEY");
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.NEWLINE");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl10.MyDsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl10.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	//Pipeline:
	//    {Pipeline}
	//        (
	//        (NAME Name0=EString NEWLINE?) |
	//        ('on:'  ( (BEGIN (when+=When)+ END)  | Trigger=EString) NEWLINE?)|
	//        ('env:' (BEGIN (pipeline_envirnonment+=Environment)+ END) NEWLINE?) |
	//        ('jobs:' (BEGIN ( job+=JobIfThenElse)+ END) NEWLINE?) |
	//        (pipeline_envirnonment+=Environment NEWLINE?)
	//        )*
	//    ;
	public PipelineElements getPipelineAccess() {
		return pPipeline;
	}
	
	public ParserRule getPipelineRule() {
		return getPipelineAccess().getRule();
	}
	
	//When:
	//    (Trigger=TRIGGERS)
	//    (BEGIN
	//        (environment_when+=Environment)+
	//    END)?
	//        // | ('Timer' Timer=EString)
	//    ;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//JobIfThenElse:
	//    option=(IfThenElse|Job)
	//;
	public JobIfThenElseElements getJobIfThenElseAccess() {
		return pJobIfThenElse;
	}
	
	public ParserRule getJobIfThenElseRule() {
		return getJobIfThenElseAccess().getRule();
	}
	
	//Job:
	//    (Allow_faillure?='Allow_faillure')?
	//    (Name1=KEY)
	//    (BEGIN
	//        (
	//        (NAME (Description+=EString) ) |
	//        (('env:' | 'secrets:') (BEGIN (depends+=Environment)+ END)) |
	//        (('runs-on:' | 'needs:' | "uses:")  tool_framework_job+=Tool_framework ) |
	//        ('outputs:'  (BEGIN (output+=Artifact)+ END)) |
	//        (ifthenelse+=IfThenElse) |
	//        (steps+=Steps) |
	//        (strategy+=Strategy)
	//        )+
	//    END);
	public JobElements getJobAccess() {
		return pJob;
	}
	
	public ParserRule getJobRule() {
		return getJobAccess().getRule();
	}
	
	//Strategy:
	//    'strategy:'
	//     (BEGIN ("fail-fast:"  fail_fast=EBoolean NEWLINE?)?
	//         ("matrix:" (BEGIN
	//             (input+=Artifact NEWLINE?)+ END
	//         )? ("fail-fast:"  fail_fast=EBoolean NEWLINE?)? )?  END
	//     )
	//;
	public StrategyElements getStrategyAccess() {
		return pStrategy;
	}
	
	public ParserRule getStrategyRule() {
		return getStrategyAccess().getRule();
	}
	
	//Steps:
	//    'steps:'
	//        (BEGIN
	//            ( steps+=(IFThenElseSteps|StepOptions) NEWLINE? )+
	//        END)?
	//;
	public StepsElements getStepsAccess() {
		return pSteps;
	}
	
	public ParserRule getStepsRule() {
		return getStepsAccess().getRule();
	}
	
	//StepOptions:
	//    stepOption=( Steps1 | Steps2 | Steps3  )
	//;
	public StepOptionsElements getStepOptionsAccess() {
		return pStepOptions;
	}
	
	public ParserRule getStepOptionsRule() {
		return getStepOptionsAccess().getRule();
	}
	
	//Steps1:
	//    (("- uses:"|"uses:") tool_framework_step+=Tool_framework)
	//    (BEGIN
	//        (("with:"|"env:")
	//            (BEGIN
	//                (environemnt_job+=Environment NEWLINE?)+
	//            END)* NEWLINE?)+
	//    END)?
	//;
	public Steps1Elements getSteps1Access() {
		return pSteps1;
	}
	
	public ParserRule getSteps1Rule() {
		return getSteps1Access().getRule();
	}
	
	//Steps2:
	//    'env:'
	//    (BEGIN
	//        (depends+=Environment NEWLINE)*
	//    END)
	//;
	public Steps2Elements getSteps2Access() {
		return pSteps2;
	}
	
	public ParserRule getSteps2Rule() {
		return getSteps2Access().getRule();
	}
	
	//Steps3:
	//    command+=Command
	//;
	public Steps3Elements getSteps3Access() {
		return pSteps3;
	}
	
	public ParserRule getSteps3Rule() {
		return getSteps3Access().getRule();
	}
	
	//Tool_framework:
	//    {Tool_framework}
	//    (Name5=ALPHANUMERICSTRING)
	//    ;
	public Tool_frameworkElements getTool_frameworkAccess() {
		return pTool_framework;
	}
	
	public ParserRule getTool_frameworkRule() {
		return getTool_frameworkAccess().getRule();
	}
	
	//Environment:
	//        (Key=(KEY | TRIGGERS)  Value=(EString)) |
	//        (("path: |" | Key=KEY )
	//            (BEGIN
	//                ("- "? Value=ALPHANUMERICSTRING)*
	//            END)?
	//        )
	//    ;
	public EnvironmentElements getEnvironmentAccess() {
		return pEnvironment;
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}
	
	//Artifact:
	//        (Key=(KEY|TRIGGERS)  Value=EString) |
	//        (Key=KEY
	//            (BEGIN
	//                Value=EString
	//            END)
	//        ) ;
	public ArtifactElements getArtifactAccess() {
		return pArtifact;
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}
	
	//Command:
	//        Command1 | Command2
	//;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//Command1:
	//     ("- run:" (tool+=Tool_framework(Parameters+=EString?))
	//         (BEGIN
	//             "env:"
	//             (BEGIN
	//                 (environment_command+=Environment)+
	//             END)
	//         END
	//         )?
	//     )
	//;
	public Command1Elements getCommand1Access() {
		return pCommand1;
	}
	
	public ParserRule getCommand1Rule() {
		return getCommand1Access().getRule();
	}
	
	//Command2:
	//        NAME (Description+=EString)
	//         (BEGIN
	//               ( command_options+= ( IFThenElseSteps | Command2Env | Command2RunMultiple | Command2RunOne | Command2Uses | Command2RunTool) )+
	//         END)?
	//;
	public Command2Elements getCommand2Access() {
		return pCommand2;
	}
	
	public ParserRule getCommand2Rule() {
		return getCommand2Access().getRule();
	}
	
	//Command2Env:
	//    ("env:"|"with:")
	//         (BEGIN
	//          ( ((environment_command+=Environment) ) NEWLINE? )+
	//         END)?
	//;
	public Command2EnvElements getCommand2EnvAccess() {
		return pCommand2Env;
	}
	
	public ParserRule getCommand2EnvRule() {
		return getCommand2EnvAccess().getRule();
	}
	
	//Command2RunMultiple:
	//        ("run: |" | "run: <" | "run: >")
	//             (BEGIN (Parameters+=EString NEWLINE)* Parameters+=EString END)?
	//;
	public Command2RunMultipleElements getCommand2RunMultipleAccess() {
		return pCommand2RunMultiple;
	}
	
	public ParserRule getCommand2RunMultipleRule() {
		return getCommand2RunMultipleAccess().getRule();
	}
	
	//Command2RunOne:
	//    ("run:" | "run: ") ( (command_conditional+=IFThenElseRun) |  (tool+=Tool_framework  Parameters+=EString?) | command_string+=STRING)  NEWLINE?
	//;
	public Command2RunOneElements getCommand2RunOneAccess() {
		return pCommand2RunOne;
	}
	
	public ParserRule getCommand2RunOneRule() {
		return getCommand2RunOneAccess().getRule();
	}
	
	//Command2Uses:
	//    ("- uses:"|"uses:") (tool+=Tool_framework) NEWLINE?
	//;
	public Command2UsesElements getCommand2UsesAccess() {
		return pCommand2Uses;
	}
	
	public ParserRule getCommand2UsesRule() {
		return getCommand2UsesAccess().getRule();
	}
	
	//Command2RunTool:
	//        (toolkey+=KEY Parameters+=EString? NEWLINE?)
	//;
	public Command2RunToolElements getCommand2RunToolAccess() {
		return pCommand2RunTool;
	}
	
	public ParserRule getCommand2RunToolRule() {
		return getCommand2RunToolAccess().getRule();
	}
	
	///*IfThenElse:
	//    '[[- if ' Condition=EString "]]"
	//        ('Condition' Condition=EString)?
	//        ('if' '{' if+=Command ( ",separator" if+=Command)* '}' )?
	//        ('else' '{' else+=Command ( ",separator" else+=Command)* '}' )?
	//        ('ifelse' '{' ifelse+=IfThenElse ( ",separator" ifelse+=IfThenElse)* '}' )?
	//        ('elseif' '{' elseif+=IfThenElse ( ",separator" elseif+=IfThenElse)* '}' )?
	//    '}'; */
	//IfThenElse:
	//    alt = (IfThenElse_alt1 | IFThenElseJobsSteps_alt2)
	//;
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}
	
	//IfThenElse_alt1:
	//    '[[- if ' Condition=EString  NEWLINE?
	//    (if+=Job)?
	//    ( "[[- else]]" NEWLINE?
	//        (else+=Job)?
	//    )?
	//    '[[- end]]'
	//;
	public IfThenElse_alt1Elements getIfThenElse_alt1Access() {
		return pIfThenElse_alt1;
	}
	
	public ParserRule getIfThenElse_alt1Rule() {
		return getIfThenElse_alt1Access().getRule();
	}
	
	//IFThenElseRun:
	//    '[[- if ' Condition=ALPHANUMERICSTRING
	//    (if=(EString))?
	//    ( "[[- else]]"
	//        (else=(EString))?
	//    )?
	//    '[[- end]]'
	//;
	public IFThenElseRunElements getIFThenElseRunAccess() {
		return pIFThenElseRun;
	}
	
	public ParserRule getIFThenElseRunRule() {
		return getIFThenElseRunAccess().getRule();
	}
	
	//IFThenElseSteps:
	//    alt = ( IFThenElseSteps_alt1 | IFThenElseJobsSteps_alt2)
	//;
	public IFThenElseStepsElements getIFThenElseStepsAccess() {
		return pIFThenElseSteps;
	}
	
	public ParserRule getIFThenElseStepsRule() {
		return getIFThenElseStepsAccess().getRule();
	}
	
	//IFThenElseSteps_alt1:
	//    '[[- if ' Condition=ALPHANUMERICSTRING NEWLINE?
	//    (if+=StepOptions NEWLINE?)+
	//    ( "[[- else]]" NEWLINE?
	//        (elsef+=StepOptions NEWLINE?)+
	//    )?
	//    '[[- end]]'
	//;
	public IFThenElseSteps_alt1Elements getIFThenElseSteps_alt1Access() {
		return pIFThenElseSteps_alt1;
	}
	
	public ParserRule getIFThenElseSteps_alt1Rule() {
		return getIFThenElseSteps_alt1Access().getRule();
	}
	
	//IFThenElseJobsSteps_alt2:
	//    'if:' Condition=EString
	//;
	public IFThenElseJobsSteps_alt2Elements getIFThenElseJobsSteps_alt2Access() {
		return pIFThenElseJobsSteps_alt2;
	}
	
	public ParserRule getIFThenElseJobsSteps_alt2Rule() {
		return getIFThenElseJobsSteps_alt2Access().getRule();
	}
	
	//EString:
	//  (ALPHANUMERICSTRING | STRING | EBoolean | TRIGGER_WORDS)+;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal TRIGGER_WORDS:  ( "push" | "pull_request" | "check_suite"
	//    | "create" | "delete" | "deployment" | "deployment_status" | "discussion" | "fork"
	//    | "gollum" | "issue_comment" | "release" | "schedule" | "issues" | "workflow_dispatch" | "merge_group:"|"repository_dispatch");
	public TerminalRule getTRIGGER_WORDSRule() {
		return tTRIGGER_WORDS;
	}
	
	//terminal NAME: "Name:" | "name:" | "- name:" | "- name : " | "- id:";
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//terminal TRIGGERS: TRIGGER_WORDS":";
	public TerminalRule getTRIGGERSRule() {
		return tTRIGGERS;
	}
	
	//terminal HTTP: "https:" | "http:";
	public TerminalRule getHTTPRule() {
		return tHTTP;
	}
	
	//terminal CHARACTERS: (';' | '+' | '!' | '&' | '(' | ')' | '=' | '>' | '<'  | ','| '*' | '{' | '}' | '.' | '-' | '\\' | '/' | '%' | '$'  | '@' | "[" | "]" | "_" | '"'  | "'" | 'A'..'Z' | 'a'..'z' ) ;
	public TerminalRule getCHARACTERSRule() {
		return tCHARACTERS;
	}
	
	//terminal ALPHANUMERICSTRING:  (HTTP | CHARACTERS | INT)+ | "- cron " | "- cron" | "- master" | "- master " | "- main";
	public TerminalRule getALPHANUMERICSTRINGRule() {
		return tALPHANUMERICSTRING;
	}
	
	//terminal KEY: ALPHANUMERICSTRING":";
	public TerminalRule getKEYRule() {
		return tKEY;
	}
	
	//terminal NEWLINE:
	//// New line on DOS or Unix
	//    '\r'? '\n';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal BEGIN: 'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//  // increase indentation
	//terminal END: 'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
