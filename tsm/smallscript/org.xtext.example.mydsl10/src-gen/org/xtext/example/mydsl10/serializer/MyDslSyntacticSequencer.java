/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl10.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl10.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Command_EnvKeyword_1_2_1_0_q;
	protected AbstractElementAlias match_Command___BEGINTerminalRuleCall_1_2_0_EnvKeyword_1_2_1_0_q_RunKeyword_1_2_2_ENDTerminalRuleCall_1_2_4__q;
	protected AbstractElementAlias match_Job_StepsKeyword_3_5_0_q;
	protected AbstractElementAlias match_Job___BEGINTerminalRuleCall_3_0_StepsKeyword_3_5_0_q_ENDTerminalRuleCall_3_7__q;
	protected AbstractElementAlias match_Pipeline_JobsKeyword_5_0_q;
	protected AbstractElementAlias match_Pipeline_NameKeyword_1_0_0_or_NameKeyword_1_0_1;
	protected AbstractElementAlias match_Pipeline_OnKeyword_4_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Command_EnvKeyword_1_2_1_0_q = new TokenAlias(false, true, grammarAccess.getCommandAccess().getEnvKeyword_1_2_1_0());
		match_Command___BEGINTerminalRuleCall_1_2_0_EnvKeyword_1_2_1_0_q_RunKeyword_1_2_2_ENDTerminalRuleCall_1_2_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCommandAccess().getBEGINTerminalRuleCall_1_2_0()), new TokenAlias(false, true, grammarAccess.getCommandAccess().getEnvKeyword_1_2_1_0()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getRunKeyword_1_2_2()), new TokenAlias(false, false, grammarAccess.getCommandAccess().getENDTerminalRuleCall_1_2_4()));
		match_Job_StepsKeyword_3_5_0_q = new TokenAlias(false, true, grammarAccess.getJobAccess().getStepsKeyword_3_5_0());
		match_Job___BEGINTerminalRuleCall_3_0_StepsKeyword_3_5_0_q_ENDTerminalRuleCall_3_7__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getJobAccess().getBEGINTerminalRuleCall_3_0()), new TokenAlias(false, true, grammarAccess.getJobAccess().getStepsKeyword_3_5_0()), new TokenAlias(false, false, grammarAccess.getJobAccess().getENDTerminalRuleCall_3_7()));
		match_Pipeline_JobsKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getJobsKeyword_5_0());
		match_Pipeline_NameKeyword_1_0_0_or_NameKeyword_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPipelineAccess().getNameKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getPipelineAccess().getNameKeyword_1_0_1()));
		match_Pipeline_OnKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getOnKeyword_4_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Command_EnvKeyword_1_2_1_0_q.equals(syntax))
				emit_Command_EnvKeyword_1_2_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command___BEGINTerminalRuleCall_1_2_0_EnvKeyword_1_2_1_0_q_RunKeyword_1_2_2_ENDTerminalRuleCall_1_2_4__q.equals(syntax))
				emit_Command___BEGINTerminalRuleCall_1_2_0_EnvKeyword_1_2_1_0_q_RunKeyword_1_2_2_ENDTerminalRuleCall_1_2_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Job_StepsKeyword_3_5_0_q.equals(syntax))
				emit_Job_StepsKeyword_3_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Job___BEGINTerminalRuleCall_3_0_StepsKeyword_3_5_0_q_ENDTerminalRuleCall_3_7__q.equals(syntax))
				emit_Job___BEGINTerminalRuleCall_3_0_StepsKeyword_3_5_0_q_ENDTerminalRuleCall_3_7__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_JobsKeyword_5_0_q.equals(syntax))
				emit_Pipeline_JobsKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NameKeyword_1_0_0_or_NameKeyword_1_0_1.equals(syntax))
				emit_Pipeline_NameKeyword_1_0_0_or_NameKeyword_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_OnKeyword_4_0_q.equals(syntax))
				emit_Pipeline_OnKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'env:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Description=EString BEGIN (ambiguity) 'run: |' BEGIN tool+=Tool_framework
	 
	 * </pre>
	 */
	protected void emit_Command_EnvKeyword_1_2_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (BEGIN 'env:'? 'run: |' END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     Description=EString (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Command___BEGINTerminalRuleCall_1_2_0_EnvKeyword_1_2_1_0_q_RunKeyword_1_2_2_ENDTerminalRuleCall_1_2_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'steps:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Name1=EString ':' BEGIN (ambiguity) 'input' '{' input+=Artifact
	 *     depends+=[Job|EString] ')' (ambiguity) 'input' '{' input+=Artifact
	 *     depends+=[Job|EString] ')' (ambiguity) END (rule end)
	 *     ifthenelse+=[IfThenElse|EString] ')' (ambiguity) 'input' '{' input+=Artifact
	 *     ifthenelse+=[IfThenElse|EString] ')' (ambiguity) END (rule end)
	 *     output+=[Artifact|EString] ')' (ambiguity) 'input' '{' input+=Artifact
	 *     output+=[Artifact|EString] ')' (ambiguity) END (rule end)
	 *     tool_framework_job+=[Tool_framework|EString] ')' (ambiguity) 'input' '{' input+=Artifact
	 *     tool_framework_job+=[Tool_framework|EString] ')' (ambiguity) END (rule end)
	 
	 * </pre>
	 */
	protected void emit_Job_StepsKeyword_3_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (BEGIN 'steps:'? END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     Name1=EString ':' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Job___BEGINTerminalRuleCall_3_0_StepsKeyword_3_5_0_q_ENDTerminalRuleCall_3_7__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'jobs:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'on:'? (ambiguity) (rule start)
	 *     Name0=EString 'on:'? (ambiguity) (rule end)
	 *     pipeline_envirnonment+=[Environment|EString] ')' 'on:'? (ambiguity) (rule end)
	 *     pipeline_tool_framework+=[Tool_framework|EString] ')' 'on:'? (ambiguity) (rule end)
	 *     when+=When END (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Pipeline_JobsKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'Name:' | 'name:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) Name0=EString
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NameKeyword_1_0_0_or_NameKeyword_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'on:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'jobs:' BEGIN job+=Job
	 *     (rule start) (ambiguity) 'jobs:'? (rule start)
	 *     Name0=EString (ambiguity) 'jobs:' BEGIN job+=Job
	 *     Name0=EString (ambiguity) 'jobs:'? (rule end)
	 *     pipeline_envirnonment+=[Environment|EString] ')' (ambiguity) 'jobs:' BEGIN job+=Job
	 *     pipeline_envirnonment+=[Environment|EString] ')' (ambiguity) 'jobs:'? (rule end)
	 *     pipeline_tool_framework+=[Tool_framework|EString] ')' (ambiguity) 'jobs:' BEGIN job+=Job
	 *     pipeline_tool_framework+=[Tool_framework|EString] ')' (ambiguity) 'jobs:'? (rule end)
	 
	 * </pre>
	 */
	protected void emit_Pipeline_OnKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
