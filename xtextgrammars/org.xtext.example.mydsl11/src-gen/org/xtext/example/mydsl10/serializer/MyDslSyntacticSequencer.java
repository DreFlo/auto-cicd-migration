/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl10.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl10.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Command2Env_EnvKeyword_0_0_or_WithKeyword_0_1;
	protected AbstractElementAlias match_Command2Env_NEWLINETerminalRuleCall_1_1_1_q;
	protected AbstractElementAlias match_Command2RunMultiple_RunKeyword_0_0_or_RunKeyword_0_1_or_RunKeyword_0_2;
	protected AbstractElementAlias match_Command2RunOne_NEWLINETerminalRuleCall_2_q;
	protected AbstractElementAlias match_Command2RunOne_RunKeyword_0_0_or_RunKeyword_0_1;
	protected AbstractElementAlias match_Command2RunTool_NEWLINETerminalRuleCall_2_q;
	protected AbstractElementAlias match_Command2Uses_NEWLINETerminalRuleCall_2_q;
	protected AbstractElementAlias match_Command2Uses_UsesKeyword_0_0_or_UsesKeyword_0_1;
	protected AbstractElementAlias match_Environment_HyphenMinusSpaceKeyword_1_1_1_0_q;
	protected AbstractElementAlias match_Environment___BEGINTerminalRuleCall_1_1_0_ENDTerminalRuleCall_1_1_2__q;
	protected AbstractElementAlias match_IFThenElseRun_ElseKeyword_3_0_q;
	protected AbstractElementAlias match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_2_q;
	protected AbstractElementAlias match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_3_1_q;
	protected AbstractElementAlias match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_1_q;
	protected AbstractElementAlias match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_2_1_q;
	protected AbstractElementAlias match_IfThenElse_alt1_NEWLINETerminalRuleCall_2_q;
	protected AbstractElementAlias match_IfThenElse_alt1_NEWLINETerminalRuleCall_4_1_q;
	protected AbstractElementAlias match_IfThenElse_alt1___ElseKeyword_4_0_NEWLINETerminalRuleCall_4_1_q__q;
	protected AbstractElementAlias match_Job_EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1;
	protected AbstractElementAlias match_Job_NeedsKeyword_2_1_2_0_1_or_RunsOnKeyword_2_1_2_0_0_or_UsesKeyword_2_1_2_0_2;
	protected AbstractElementAlias match_Job___ENDTerminalRuleCall_2_1_1_1_2___EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1___BEGINTerminalRuleCall_2_1_1_1_0__q;
	protected AbstractElementAlias match_Job___ENDTerminalRuleCall_2_1_3_1_2_OutputsKeyword_2_1_3_0_BEGINTerminalRuleCall_2_1_3_1_0__q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_1_0_2_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_1_1_2_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_1_2_2_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_1_3_2_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_1_4_1_q;
	protected AbstractElementAlias match_Pipeline___ENDTerminalRuleCall_1_1_1_0_2_NEWLINETerminalRuleCall_1_1_2_q_OnKeyword_1_1_0_BEGINTerminalRuleCall_1_1_1_0_0__q;
	protected AbstractElementAlias match_Pipeline___ENDTerminalRuleCall_1_2_1_2_NEWLINETerminalRuleCall_1_2_2_q_EnvKeyword_1_2_0_BEGINTerminalRuleCall_1_2_1_0__q;
	protected AbstractElementAlias match_Pipeline___ENDTerminalRuleCall_1_3_1_2_NEWLINETerminalRuleCall_1_3_2_q_JobsKeyword_1_3_0_BEGINTerminalRuleCall_1_3_1_0__q;
	protected AbstractElementAlias match_Steps1_NEWLINETerminalRuleCall_1_1_1_1_1_q;
	protected AbstractElementAlias match_Steps1_UsesKeyword_0_0_0_or_UsesKeyword_0_0_1;
	protected AbstractElementAlias match_Steps1___BEGINTerminalRuleCall_1_0_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p_ENDTerminalRuleCall_1_2__q;
	protected AbstractElementAlias match_Steps1___ENDTerminalRuleCall_1_1_1_2_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a_BEGINTerminalRuleCall_1_1_1_0__q;
	protected AbstractElementAlias match_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a;
	protected AbstractElementAlias match_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p;
	protected AbstractElementAlias match_Steps_NEWLINETerminalRuleCall_1_1_1_q;
	protected AbstractElementAlias match_Strategy_MatrixKeyword_1_2_0_q;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_1_1_2_q;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_1_2_1_1_1_q;
	protected AbstractElementAlias match_Strategy_NEWLINETerminalRuleCall_1_2_2_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Command2Env_EnvKeyword_0_0_or_WithKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommand2EnvAccess().getEnvKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getCommand2EnvAccess().getWithKeyword_0_1()));
		match_Command2Env_NEWLINETerminalRuleCall_1_1_1_q = new TokenAlias(false, true, grammarAccess.getCommand2EnvAccess().getNEWLINETerminalRuleCall_1_1_1());
		match_Command2RunMultiple_RunKeyword_0_0_or_RunKeyword_0_1_or_RunKeyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommand2RunMultipleAccess().getRunKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getCommand2RunMultipleAccess().getRunKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getCommand2RunMultipleAccess().getRunKeyword_0_2()));
		match_Command2RunOne_NEWLINETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getCommand2RunOneAccess().getNEWLINETerminalRuleCall_2());
		match_Command2RunOne_RunKeyword_0_0_or_RunKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommand2RunOneAccess().getRunKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getCommand2RunOneAccess().getRunKeyword_0_1()));
		match_Command2RunTool_NEWLINETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getCommand2RunToolAccess().getNEWLINETerminalRuleCall_2());
		match_Command2Uses_NEWLINETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getCommand2UsesAccess().getNEWLINETerminalRuleCall_2());
		match_Command2Uses_UsesKeyword_0_0_or_UsesKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCommand2UsesAccess().getUsesKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getCommand2UsesAccess().getUsesKeyword_0_1()));
		match_Environment_HyphenMinusSpaceKeyword_1_1_1_0_q = new TokenAlias(false, true, grammarAccess.getEnvironmentAccess().getHyphenMinusSpaceKeyword_1_1_1_0());
		match_Environment___BEGINTerminalRuleCall_1_1_0_ENDTerminalRuleCall_1_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getBEGINTerminalRuleCall_1_1_0()), new TokenAlias(false, false, grammarAccess.getEnvironmentAccess().getENDTerminalRuleCall_1_1_2()));
		match_IFThenElseRun_ElseKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getIFThenElseRunAccess().getElseKeyword_3_0());
		match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getIFThenElseSteps_alt1Access().getNEWLINETerminalRuleCall_2());
		match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_3_1_q = new TokenAlias(false, true, grammarAccess.getIFThenElseSteps_alt1Access().getNEWLINETerminalRuleCall_3_1());
		match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_1_q = new TokenAlias(false, true, grammarAccess.getIFThenElseSteps_alt1Access().getNEWLINETerminalRuleCall_4_1());
		match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_2_1_q = new TokenAlias(false, true, grammarAccess.getIFThenElseSteps_alt1Access().getNEWLINETerminalRuleCall_4_2_1());
		match_IfThenElse_alt1_NEWLINETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getIfThenElse_alt1Access().getNEWLINETerminalRuleCall_2());
		match_IfThenElse_alt1_NEWLINETerminalRuleCall_4_1_q = new TokenAlias(false, true, grammarAccess.getIfThenElse_alt1Access().getNEWLINETerminalRuleCall_4_1());
		match_IfThenElse_alt1___ElseKeyword_4_0_NEWLINETerminalRuleCall_4_1_q__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getIfThenElse_alt1Access().getElseKeyword_4_0()), new TokenAlias(false, true, grammarAccess.getIfThenElse_alt1Access().getNEWLINETerminalRuleCall_4_1()));
		match_Job_EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getJobAccess().getEnvKeyword_2_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getJobAccess().getSecretsKeyword_2_1_1_0_1()));
		match_Job_NeedsKeyword_2_1_2_0_1_or_RunsOnKeyword_2_1_2_0_0_or_UsesKeyword_2_1_2_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getJobAccess().getNeedsKeyword_2_1_2_0_1()), new TokenAlias(false, false, grammarAccess.getJobAccess().getRunsOnKeyword_2_1_2_0_0()), new TokenAlias(false, false, grammarAccess.getJobAccess().getUsesKeyword_2_1_2_0_2()));
		match_Job___ENDTerminalRuleCall_2_1_1_1_2___EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1___BEGINTerminalRuleCall_2_1_1_1_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getJobAccess().getENDTerminalRuleCall_2_1_1_1_2()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getJobAccess().getEnvKeyword_2_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getJobAccess().getSecretsKeyword_2_1_1_0_1())), new TokenAlias(false, false, grammarAccess.getJobAccess().getBEGINTerminalRuleCall_2_1_1_1_0()));
		match_Job___ENDTerminalRuleCall_2_1_3_1_2_OutputsKeyword_2_1_3_0_BEGINTerminalRuleCall_2_1_3_1_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getJobAccess().getENDTerminalRuleCall_2_1_3_1_2()), new TokenAlias(false, false, grammarAccess.getJobAccess().getOutputsKeyword_2_1_3_0()), new TokenAlias(false, false, grammarAccess.getJobAccess().getBEGINTerminalRuleCall_2_1_3_1_0()));
		match_Pipeline_NEWLINETerminalRuleCall_1_0_2_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_0_2());
		match_Pipeline_NEWLINETerminalRuleCall_1_1_2_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_1_2());
		match_Pipeline_NEWLINETerminalRuleCall_1_2_2_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_2_2());
		match_Pipeline_NEWLINETerminalRuleCall_1_3_2_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_3_2());
		match_Pipeline_NEWLINETerminalRuleCall_1_4_1_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_4_1());
		match_Pipeline___ENDTerminalRuleCall_1_1_1_0_2_NEWLINETerminalRuleCall_1_1_2_q_OnKeyword_1_1_0_BEGINTerminalRuleCall_1_1_1_0_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPipelineAccess().getENDTerminalRuleCall_1_1_1_0_2()), new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_1_2()), new TokenAlias(false, false, grammarAccess.getPipelineAccess().getOnKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getPipelineAccess().getBEGINTerminalRuleCall_1_1_1_0_0()));
		match_Pipeline___ENDTerminalRuleCall_1_2_1_2_NEWLINETerminalRuleCall_1_2_2_q_EnvKeyword_1_2_0_BEGINTerminalRuleCall_1_2_1_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPipelineAccess().getENDTerminalRuleCall_1_2_1_2()), new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_2_2()), new TokenAlias(false, false, grammarAccess.getPipelineAccess().getEnvKeyword_1_2_0()), new TokenAlias(false, false, grammarAccess.getPipelineAccess().getBEGINTerminalRuleCall_1_2_1_0()));
		match_Pipeline___ENDTerminalRuleCall_1_3_1_2_NEWLINETerminalRuleCall_1_3_2_q_JobsKeyword_1_3_0_BEGINTerminalRuleCall_1_3_1_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPipelineAccess().getENDTerminalRuleCall_1_3_1_2()), new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_1_3_2()), new TokenAlias(false, false, grammarAccess.getPipelineAccess().getJobsKeyword_1_3_0()), new TokenAlias(false, false, grammarAccess.getPipelineAccess().getBEGINTerminalRuleCall_1_3_1_0()));
		match_Steps1_NEWLINETerminalRuleCall_1_1_1_1_1_q = new TokenAlias(false, true, grammarAccess.getSteps1Access().getNEWLINETerminalRuleCall_1_1_1_1_1());
		match_Steps1_UsesKeyword_0_0_0_or_UsesKeyword_0_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSteps1Access().getUsesKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getSteps1Access().getUsesKeyword_0_0_1()));
		match_Steps1___BEGINTerminalRuleCall_1_0_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p_ENDTerminalRuleCall_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSteps1Access().getBEGINTerminalRuleCall_1_0()), new GroupAlias(true, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSteps1Access().getEnvKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getSteps1Access().getWithKeyword_1_1_0_0())), new TokenAlias(false, true, grammarAccess.getSteps1Access().getNEWLINETerminalRuleCall_1_1_2())), new TokenAlias(false, false, grammarAccess.getSteps1Access().getENDTerminalRuleCall_1_2()));
		match_Steps1___ENDTerminalRuleCall_1_1_1_2_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a_BEGINTerminalRuleCall_1_1_1_0__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSteps1Access().getENDTerminalRuleCall_1_1_1_2()), new GroupAlias(true, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSteps1Access().getEnvKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getSteps1Access().getWithKeyword_1_1_0_0())), new TokenAlias(false, true, grammarAccess.getSteps1Access().getNEWLINETerminalRuleCall_1_1_2())), new TokenAlias(false, false, grammarAccess.getSteps1Access().getBEGINTerminalRuleCall_1_1_1_0()));
		match_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a = new GroupAlias(true, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSteps1Access().getEnvKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getSteps1Access().getWithKeyword_1_1_0_0())), new TokenAlias(false, true, grammarAccess.getSteps1Access().getNEWLINETerminalRuleCall_1_1_2()));
		match_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p = new GroupAlias(true, false, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSteps1Access().getEnvKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getSteps1Access().getWithKeyword_1_1_0_0())), new TokenAlias(false, true, grammarAccess.getSteps1Access().getNEWLINETerminalRuleCall_1_1_2()));
		match_Steps_NEWLINETerminalRuleCall_1_1_1_q = new TokenAlias(false, true, grammarAccess.getStepsAccess().getNEWLINETerminalRuleCall_1_1_1());
		match_Strategy_MatrixKeyword_1_2_0_q = new TokenAlias(false, true, grammarAccess.getStrategyAccess().getMatrixKeyword_1_2_0());
		match_Strategy_NEWLINETerminalRuleCall_1_1_2_q = new TokenAlias(false, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_1_1_2());
		match_Strategy_NEWLINETerminalRuleCall_1_2_1_1_1_q = new TokenAlias(false, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_1_2_1_1_1());
		match_Strategy_NEWLINETerminalRuleCall_1_2_2_2_q = new TokenAlias(false, true, grammarAccess.getStrategyAccess().getNEWLINETerminalRuleCall_1_2_2_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNAMERule())
			return getNAMEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal NAME: "Name:" | "name:" | "- name:" | "- name : " | "- id:";
	 */
	protected String getNAMEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Name:";
	}
	
	/**
	 * terminal NEWLINE:
	 *     '\r'? '\n';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Command2Env_EnvKeyword_0_0_or_WithKeyword_0_1.equals(syntax))
				emit_Command2Env_EnvKeyword_0_0_or_WithKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command2Env_NEWLINETerminalRuleCall_1_1_1_q.equals(syntax))
				emit_Command2Env_NEWLINETerminalRuleCall_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command2RunMultiple_RunKeyword_0_0_or_RunKeyword_0_1_or_RunKeyword_0_2.equals(syntax))
				emit_Command2RunMultiple_RunKeyword_0_0_or_RunKeyword_0_1_or_RunKeyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command2RunOne_NEWLINETerminalRuleCall_2_q.equals(syntax))
				emit_Command2RunOne_NEWLINETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command2RunOne_RunKeyword_0_0_or_RunKeyword_0_1.equals(syntax))
				emit_Command2RunOne_RunKeyword_0_0_or_RunKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command2RunTool_NEWLINETerminalRuleCall_2_q.equals(syntax))
				emit_Command2RunTool_NEWLINETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command2Uses_NEWLINETerminalRuleCall_2_q.equals(syntax))
				emit_Command2Uses_NEWLINETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Command2Uses_UsesKeyword_0_0_or_UsesKeyword_0_1.equals(syntax))
				emit_Command2Uses_UsesKeyword_0_0_or_UsesKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Environment_HyphenMinusSpaceKeyword_1_1_1_0_q.equals(syntax))
				emit_Environment_HyphenMinusSpaceKeyword_1_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Environment___BEGINTerminalRuleCall_1_1_0_ENDTerminalRuleCall_1_1_2__q.equals(syntax))
				emit_Environment___BEGINTerminalRuleCall_1_1_0_ENDTerminalRuleCall_1_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IFThenElseRun_ElseKeyword_3_0_q.equals(syntax))
				emit_IFThenElseRun_ElseKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_2_q.equals(syntax))
				emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_3_1_q.equals(syntax))
				emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_1_q.equals(syntax))
				emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_2_1_q.equals(syntax))
				emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfThenElse_alt1_NEWLINETerminalRuleCall_2_q.equals(syntax))
				emit_IfThenElse_alt1_NEWLINETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfThenElse_alt1_NEWLINETerminalRuleCall_4_1_q.equals(syntax))
				emit_IfThenElse_alt1_NEWLINETerminalRuleCall_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfThenElse_alt1___ElseKeyword_4_0_NEWLINETerminalRuleCall_4_1_q__q.equals(syntax))
				emit_IfThenElse_alt1___ElseKeyword_4_0_NEWLINETerminalRuleCall_4_1_q__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Job_EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1.equals(syntax))
				emit_Job_EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Job_NeedsKeyword_2_1_2_0_1_or_RunsOnKeyword_2_1_2_0_0_or_UsesKeyword_2_1_2_0_2.equals(syntax))
				emit_Job_NeedsKeyword_2_1_2_0_1_or_RunsOnKeyword_2_1_2_0_0_or_UsesKeyword_2_1_2_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Job___ENDTerminalRuleCall_2_1_1_1_2___EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1___BEGINTerminalRuleCall_2_1_1_1_0__q.equals(syntax))
				emit_Job___ENDTerminalRuleCall_2_1_1_1_2___EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1___BEGINTerminalRuleCall_2_1_1_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Job___ENDTerminalRuleCall_2_1_3_1_2_OutputsKeyword_2_1_3_0_BEGINTerminalRuleCall_2_1_3_1_0__q.equals(syntax))
				emit_Job___ENDTerminalRuleCall_2_1_3_1_2_OutputsKeyword_2_1_3_0_BEGINTerminalRuleCall_2_1_3_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_1_0_2_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_1_0_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_1_1_2_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_1_2_2_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_1_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_1_3_2_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_1_3_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_1_4_1_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_1_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline___ENDTerminalRuleCall_1_1_1_0_2_NEWLINETerminalRuleCall_1_1_2_q_OnKeyword_1_1_0_BEGINTerminalRuleCall_1_1_1_0_0__q.equals(syntax))
				emit_Pipeline___ENDTerminalRuleCall_1_1_1_0_2_NEWLINETerminalRuleCall_1_1_2_q_OnKeyword_1_1_0_BEGINTerminalRuleCall_1_1_1_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline___ENDTerminalRuleCall_1_2_1_2_NEWLINETerminalRuleCall_1_2_2_q_EnvKeyword_1_2_0_BEGINTerminalRuleCall_1_2_1_0__q.equals(syntax))
				emit_Pipeline___ENDTerminalRuleCall_1_2_1_2_NEWLINETerminalRuleCall_1_2_2_q_EnvKeyword_1_2_0_BEGINTerminalRuleCall_1_2_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline___ENDTerminalRuleCall_1_3_1_2_NEWLINETerminalRuleCall_1_3_2_q_JobsKeyword_1_3_0_BEGINTerminalRuleCall_1_3_1_0__q.equals(syntax))
				emit_Pipeline___ENDTerminalRuleCall_1_3_1_2_NEWLINETerminalRuleCall_1_3_2_q_JobsKeyword_1_3_0_BEGINTerminalRuleCall_1_3_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps1_NEWLINETerminalRuleCall_1_1_1_1_1_q.equals(syntax))
				emit_Steps1_NEWLINETerminalRuleCall_1_1_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps1_UsesKeyword_0_0_0_or_UsesKeyword_0_0_1.equals(syntax))
				emit_Steps1_UsesKeyword_0_0_0_or_UsesKeyword_0_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps1___BEGINTerminalRuleCall_1_0_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p_ENDTerminalRuleCall_1_2__q.equals(syntax))
				emit_Steps1___BEGINTerminalRuleCall_1_0_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p_ENDTerminalRuleCall_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps1___ENDTerminalRuleCall_1_1_1_2_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a_BEGINTerminalRuleCall_1_1_1_0__q.equals(syntax))
				emit_Steps1___ENDTerminalRuleCall_1_1_1_2_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a_BEGINTerminalRuleCall_1_1_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a.equals(syntax))
				emit_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p.equals(syntax))
				emit_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Steps_NEWLINETerminalRuleCall_1_1_1_q.equals(syntax))
				emit_Steps_NEWLINETerminalRuleCall_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_MatrixKeyword_1_2_0_q.equals(syntax))
				emit_Strategy_MatrixKeyword_1_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_1_1_2_q.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_1_2_1_1_1_q.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_1_2_1_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Strategy_NEWLINETerminalRuleCall_1_2_2_2_q.equals(syntax))
				emit_Strategy_NEWLINETerminalRuleCall_1_2_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'env:' | 'with:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) BEGIN environment_command+=Environment
	 
	 * </pre>
	 */
	protected void emit_Command2Env_EnvKeyword_0_0_or_WithKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     environment_command+=Environment (ambiguity) END (rule end)
	 *     environment_command+=Environment (ambiguity) environment_command+=Environment
	 
	 * </pre>
	 */
	protected void emit_Command2Env_NEWLINETerminalRuleCall_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'run: |' | 'run: &lt;' | 'run: &gt;'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) BEGIN Parameters+=EString
	 
	 * </pre>
	 */
	protected void emit_Command2RunMultiple_RunKeyword_0_0_or_RunKeyword_0_1_or_RunKeyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     Parameters+=EString (ambiguity) (rule end)
	 *     command_conditional+=IFThenElseRun (ambiguity) (rule end)
	 *     command_string+=STRING (ambiguity) (rule end)
	 *     tool+=Tool_framework (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Command2RunOne_NEWLINETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'run:' | 'run: '
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) command_conditional+=IFThenElseRun
	 *     (rule start) (ambiguity) command_string+=STRING
	 *     (rule start) (ambiguity) tool+=Tool_framework
	 
	 * </pre>
	 */
	protected void emit_Command2RunOne_RunKeyword_0_0_or_RunKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     Parameters+=EString (ambiguity) (rule end)
	 *     toolkey+=KEY (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Command2RunTool_NEWLINETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     tool+=Tool_framework (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Command2Uses_NEWLINETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '- uses:' | 'uses:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) tool+=Tool_framework
	 
	 * </pre>
	 */
	protected void emit_Command2Uses_UsesKeyword_0_0_or_UsesKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '- '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'path: |' BEGIN (ambiguity) Value=ALPHANUMERICSTRING
	 *     Key=KEY BEGIN (ambiguity) Value=ALPHANUMERICSTRING
	 *     Value=ALPHANUMERICSTRING (ambiguity) Value=ALPHANUMERICSTRING
	 
	 * </pre>
	 */
	protected void emit_Environment_HyphenMinusSpaceKeyword_1_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (BEGIN END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'path: |' (ambiguity) (rule start)
	 *     Key=KEY (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Environment___BEGINTerminalRuleCall_1_1_0_ENDTerminalRuleCall_1_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '[[- else]]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Condition=ALPHANUMERICSTRING (ambiguity) '[[- end]]' (rule end)
	 *     if=EString (ambiguity) '[[- end]]' (rule end)
	 
	 * </pre>
	 */
	protected void emit_IFThenElseRun_ElseKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     Condition=ALPHANUMERICSTRING (ambiguity) if+=StepOptions
	 
	 * </pre>
	 */
	protected void emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     if+=StepOptions (ambiguity) '[[- else]]' NEWLINE? elsef+=StepOptions
	 *     if+=StepOptions (ambiguity) '[[- end]]' (rule end)
	 *     if+=StepOptions (ambiguity) if+=StepOptions
	 
	 * </pre>
	 */
	protected void emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     if+=StepOptions NEWLINE? '[[- else]]' (ambiguity) elsef+=StepOptions
	 
	 * </pre>
	 */
	protected void emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     elsef+=StepOptions (ambiguity) '[[- end]]' (rule end)
	 *     elsef+=StepOptions (ambiguity) elsef+=StepOptions
	 
	 * </pre>
	 */
	protected void emit_IFThenElseSteps_alt1_NEWLINETerminalRuleCall_4_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     Condition=EString (ambiguity) '[[- else]]' NEWLINE? else+=Job
	 *     Condition=EString (ambiguity) ('[[- else]]' NEWLINE?)? '[[- end]]' (rule end)
	 *     Condition=EString (ambiguity) if+=Job
	 
	 * </pre>
	 */
	protected void emit_IfThenElse_alt1_NEWLINETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     Condition=EString NEWLINE? '[[- else]]' (ambiguity) else+=Job
	 *     if+=Job '[[- else]]' (ambiguity) else+=Job
	 
	 * </pre>
	 */
	protected void emit_IfThenElse_alt1_NEWLINETerminalRuleCall_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('[[- else]]' NEWLINE?)?
	 *
	 * This ambiguous syntax occurs at:
	 *     Condition=EString NEWLINE? (ambiguity) '[[- end]]' (rule end)
	 *     if+=Job (ambiguity) '[[- end]]' (rule end)
	 
	 * </pre>
	 */
	protected void emit_IfThenElse_alt1___ElseKeyword_4_0_NEWLINETerminalRuleCall_4_1_q__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'env:' | 'secrets:'
	 *
	 * This ambiguous syntax occurs at:
	 *     Description+=EString (ambiguity) BEGIN depends+=Environment
	 *     Name1=KEY BEGIN (ambiguity) BEGIN depends+=Environment
	 *     ifthenelse+=IfThenElse (ambiguity) BEGIN depends+=Environment
	 *     output+=Artifact END (ambiguity) BEGIN depends+=Environment
	 *     steps+=Steps (ambiguity) BEGIN depends+=Environment
	 *     strategy+=Strategy (ambiguity) BEGIN depends+=Environment
	 *     tool_framework_job+=Tool_framework (ambiguity) BEGIN depends+=Environment
	 
	 * </pre>
	 */
	protected void emit_Job_EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'runs-on:' | 'needs:' | 'uses:'
	 *
	 * This ambiguous syntax occurs at:
	 *     Description+=EString (ambiguity) tool_framework_job+=Tool_framework
	 *     Name1=KEY BEGIN (ambiguity) tool_framework_job+=Tool_framework
	 *     depends+=Environment END (ambiguity) tool_framework_job+=Tool_framework
	 *     ifthenelse+=IfThenElse (ambiguity) tool_framework_job+=Tool_framework
	 *     output+=Artifact END (ambiguity) tool_framework_job+=Tool_framework
	 *     steps+=Steps (ambiguity) tool_framework_job+=Tool_framework
	 *     strategy+=Strategy (ambiguity) tool_framework_job+=Tool_framework
	 *     tool_framework_job+=Tool_framework (ambiguity) tool_framework_job+=Tool_framework
	 
	 * </pre>
	 */
	protected void emit_Job_NeedsKeyword_2_1_2_0_1_or_RunsOnKeyword_2_1_2_0_0_or_UsesKeyword_2_1_2_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END ('env:' | 'secrets:') BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     depends+=Environment (ambiguity) depends+=Environment
	 
	 * </pre>
	 */
	protected void emit_Job___ENDTerminalRuleCall_2_1_1_1_2___EnvKeyword_2_1_1_0_0_or_SecretsKeyword_2_1_1_0_1___BEGINTerminalRuleCall_2_1_1_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END 'outputs:' BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     output+=Artifact (ambiguity) output+=Artifact
	 
	 * </pre>
	 */
	protected void emit_Job___ENDTerminalRuleCall_2_1_3_1_2_OutputsKeyword_2_1_3_0_BEGINTerminalRuleCall_2_1_3_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     Name0=EString (ambiguity) 'env:' BEGIN pipeline_envirnonment+=Environment
	 *     Name0=EString (ambiguity) 'jobs:' BEGIN job+=JobIfThenElse
	 *     Name0=EString (ambiguity) 'on:' BEGIN when+=When
	 *     Name0=EString (ambiguity) 'on:' Trigger=EString
	 *     Name0=EString (ambiguity) (rule end)
	 *     Name0=EString (ambiguity) NAME Name0=EString
	 *     Name0=EString (ambiguity) pipeline_envirnonment+=Environment
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_1_0_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     Trigger=EString (ambiguity) 'env:' BEGIN pipeline_envirnonment+=Environment
	 *     Trigger=EString (ambiguity) 'jobs:' BEGIN job+=JobIfThenElse
	 *     Trigger=EString (ambiguity) 'on:' BEGIN when+=When
	 *     Trigger=EString (ambiguity) 'on:' Trigger=EString
	 *     Trigger=EString (ambiguity) (rule end)
	 *     Trigger=EString (ambiguity) NAME Name0=EString
	 *     Trigger=EString (ambiguity) pipeline_envirnonment+=Environment
	 *     when+=When END (ambiguity) 'env:' BEGIN pipeline_envirnonment+=Environment
	 *     when+=When END (ambiguity) 'jobs:' BEGIN job+=JobIfThenElse
	 *     when+=When END (ambiguity) 'on:' Trigger=EString
	 *     when+=When END (ambiguity) (rule end)
	 *     when+=When END (ambiguity) NAME Name0=EString
	 *     when+=When END (ambiguity) pipeline_envirnonment+=Environment
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     pipeline_envirnonment+=Environment END (ambiguity) 'jobs:' BEGIN job+=JobIfThenElse
	 *     pipeline_envirnonment+=Environment END (ambiguity) 'on:' BEGIN when+=When
	 *     pipeline_envirnonment+=Environment END (ambiguity) 'on:' Trigger=EString
	 *     pipeline_envirnonment+=Environment END (ambiguity) (rule end)
	 *     pipeline_envirnonment+=Environment END (ambiguity) NAME Name0=EString
	 *     pipeline_envirnonment+=Environment END (ambiguity) pipeline_envirnonment+=Environment
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_1_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     job+=JobIfThenElse END (ambiguity) 'env:' BEGIN pipeline_envirnonment+=Environment
	 *     job+=JobIfThenElse END (ambiguity) 'on:' BEGIN when+=When
	 *     job+=JobIfThenElse END (ambiguity) 'on:' Trigger=EString
	 *     job+=JobIfThenElse END (ambiguity) (rule end)
	 *     job+=JobIfThenElse END (ambiguity) NAME Name0=EString
	 *     job+=JobIfThenElse END (ambiguity) pipeline_envirnonment+=Environment
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_1_3_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     pipeline_envirnonment+=Environment (ambiguity) 'env:' BEGIN pipeline_envirnonment+=Environment
	 *     pipeline_envirnonment+=Environment (ambiguity) 'jobs:' BEGIN job+=JobIfThenElse
	 *     pipeline_envirnonment+=Environment (ambiguity) 'on:' BEGIN when+=When
	 *     pipeline_envirnonment+=Environment (ambiguity) 'on:' Trigger=EString
	 *     pipeline_envirnonment+=Environment (ambiguity) (rule end)
	 *     pipeline_envirnonment+=Environment (ambiguity) NAME Name0=EString
	 *     pipeline_envirnonment+=Environment (ambiguity) pipeline_envirnonment+=Environment
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_1_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE? 'on:' BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     when+=When (ambiguity) when+=When
	 
	 * </pre>
	 */
	protected void emit_Pipeline___ENDTerminalRuleCall_1_1_1_0_2_NEWLINETerminalRuleCall_1_1_2_q_OnKeyword_1_1_0_BEGINTerminalRuleCall_1_1_1_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE? 'env:' BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     pipeline_envirnonment+=Environment (ambiguity) pipeline_envirnonment+=Environment
	 
	 * </pre>
	 */
	protected void emit_Pipeline___ENDTerminalRuleCall_1_2_1_2_NEWLINETerminalRuleCall_1_2_2_q_EnvKeyword_1_2_0_BEGINTerminalRuleCall_1_2_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END NEWLINE? 'jobs:' BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     job+=JobIfThenElse (ambiguity) job+=JobIfThenElse
	 
	 * </pre>
	 */
	protected void emit_Pipeline___ENDTerminalRuleCall_1_3_1_2_NEWLINETerminalRuleCall_1_3_2_q_JobsKeyword_1_3_0_BEGINTerminalRuleCall_1_3_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     environemnt_job+=Environment (ambiguity) (END (('with:' | 'env:') NEWLINE?)* BEGIN)? environemnt_job+=Environment
	 *     environemnt_job+=Environment (ambiguity) END (('with:' | 'env:') NEWLINE?)* END (rule end)
	 
	 * </pre>
	 */
	protected void emit_Steps1_NEWLINETerminalRuleCall_1_1_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '- uses:' | 'uses:'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) tool_framework_step+=Tool_framework
	 
	 * </pre>
	 */
	protected void emit_Steps1_UsesKeyword_0_0_0_or_UsesKeyword_0_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (BEGIN (('with:' | 'env:') NEWLINE?)+ END)?
	 *
	 * This ambiguous syntax occurs at:
	 *     tool_framework_step+=Tool_framework (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Steps1___BEGINTerminalRuleCall_1_0_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p_ENDTerminalRuleCall_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (END (('with:' | 'env:') NEWLINE?)* BEGIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     environemnt_job+=Environment NEWLINE? (ambiguity) environemnt_job+=Environment
	 
	 * </pre>
	 */
	protected void emit_Steps1___ENDTerminalRuleCall_1_1_1_2_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a_BEGINTerminalRuleCall_1_1_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('with:' | 'env:') NEWLINE?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     environemnt_job+=Environment NEWLINE? END (ambiguity) END (rule end)
	 
	 * </pre>
	 */
	protected void emit_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (('with:' | 'env:') NEWLINE?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     tool_framework_step+=Tool_framework BEGIN (ambiguity) BEGIN environemnt_job+=Environment
	 
	 * </pre>
	 */
	protected void emit_Steps1_____EnvKeyword_1_1_0_1_or_WithKeyword_1_1_0_0___NEWLINETerminalRuleCall_1_1_2_q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     steps+=IFThenElseSteps (ambiguity) END (rule end)
	 *     steps+=IFThenElseSteps (ambiguity) steps+=IFThenElseSteps
	 *     steps+=IFThenElseSteps (ambiguity) steps+=StepOptions
	 *     steps+=StepOptions (ambiguity) END (rule end)
	 *     steps+=StepOptions (ambiguity) steps+=IFThenElseSteps
	 *     steps+=StepOptions (ambiguity) steps+=StepOptions
	 
	 * </pre>
	 */
	protected void emit_Steps_NEWLINETerminalRuleCall_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'matrix:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'strategy:' BEGIN (ambiguity) END (rule start)
	 *     fail_fast=EBoolean NEWLINE? (ambiguity) END (rule end)
	 
	 * </pre>
	 */
	protected void emit_Strategy_MatrixKeyword_1_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     fail_fast=EBoolean (ambiguity) 'matrix:' 'fail-fast:' fail_fast=EBoolean
	 *     fail_fast=EBoolean (ambiguity) 'matrix:' BEGIN input+=Artifact
	 *     fail_fast=EBoolean (ambiguity) 'matrix:'? END (rule end)
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     input+=Artifact (ambiguity) END 'fail-fast:' fail_fast=EBoolean
	 *     input+=Artifact (ambiguity) END END (rule end)
	 *     input+=Artifact (ambiguity) input+=Artifact
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_1_2_1_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     fail_fast=EBoolean (ambiguity) END (rule end)
	 
	 * </pre>
	 */
	protected void emit_Strategy_NEWLINETerminalRuleCall_1_2_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
